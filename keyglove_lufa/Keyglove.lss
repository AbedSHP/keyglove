
Keyglove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000304  00800100  00008800  00008894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c2  00800404  00800404  00008b98  2**0
                  ALLOC
  3 .debug_aranges 00000470  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000036ce  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000112e1  00000000  00000000  0000c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002bb9  00000000  00000000  0001d9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ac4b  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b60  00000000  00000000  0002b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005f12  00000000  00000000  0002cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000834d  00000000  00000000  00032c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000418  00000000  00000000  0003af7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
}

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
       0:	ba c1       	rjmp	.+884    	; 0x376 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	e2 c1       	rjmp	.+964    	; 0x3ca <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	e0 c1       	rjmp	.+960    	; 0x3ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c1       	rjmp	.+956    	; 0x3ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c1       	rjmp	.+952    	; 0x3ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c1       	rjmp	.+948    	; 0x3ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c1       	rjmp	.+944    	; 0x3ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c1       	rjmp	.+940    	; 0x3ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c1       	rjmp	.+936    	; 0x3ca <__bad_interrupt>
      22:	00 00       	nop
      24:	d2 c1       	rjmp	.+932    	; 0x3ca <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3e 3b 	jmp	0x767c	; 0x767c <__vector_10>
      2c:	ce c1       	rjmp	.+924    	; 0x3ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	cc c1       	rjmp	.+920    	; 0x3ca <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__vector_13>
      38:	c8 c1       	rjmp	.+912    	; 0x3ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c1       	rjmp	.+908    	; 0x3ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c1       	rjmp	.+904    	; 0x3ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c1       	rjmp	.+900    	; 0x3ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c1       	rjmp	.+896    	; 0x3ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c1       	rjmp	.+892    	; 0x3ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c1       	rjmp	.+888    	; 0x3ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c1       	rjmp	.+884    	; 0x3ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c1       	rjmp	.+880    	; 0x3ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 13 39 	jmp	0x7226	; 0x7226 <__vector_23>
      60:	b4 c1       	rjmp	.+872    	; 0x3ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c1       	rjmp	.+868    	; 0x3ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c1       	rjmp	.+864    	; 0x3ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c1       	rjmp	.+860    	; 0x3ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c1       	rjmp	.+856    	; 0x3ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c1       	rjmp	.+852    	; 0x3ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c1       	rjmp	.+848    	; 0x3ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c1       	rjmp	.+844    	; 0x3ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c1       	rjmp	.+840    	; 0x3ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c1       	rjmp	.+836    	; 0x3ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c1       	rjmp	.+832    	; 0x3ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9e c1       	rjmp	.+828    	; 0x3ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	9c c1       	rjmp	.+824    	; 0x3ca <__bad_interrupt>
      92:	00 00       	nop
      94:	9a c1       	rjmp	.+820    	; 0x3ca <__bad_interrupt>
      96:	00 00       	nop
      98:	08 4a       	sbci	r16, 0xA8	; 168
      9a:	d7 3b       	cpi	r29, 0xB7	; 183
      9c:	3b ce       	rjmp	.-906    	; 0xfffffd14 <__eeprom_end+0xff7efd14>
      9e:	01 6e       	ori	r16, 0xE1	; 225
      a0:	84 bc       	out	0x24, r8	; 36
      a2:	bf fd       	.word	0xfdbf	; ????
      a4:	c1 2f       	mov	r28, r17
      a6:	3d 6c       	ori	r19, 0xCD	; 205
      a8:	74 31       	cpi	r23, 0x14	; 20
      aa:	9a bd       	out	0x2a, r25	; 42
      ac:	56 83       	std	Z+6, r21	; 0x06
      ae:	3d da       	rcall	.-2950   	; 0xfffff52a <__eeprom_end+0xff7ef52a>
      b0:	3d 00       	.word	0x003d	; ????
      b2:	c7 7f       	andi	r28, 0xF7	; 247
      b4:	11 be       	out	0x31, r1	; 49
      b6:	d9 e4       	ldi	r29, 0x49	; 73
      b8:	bb 4c       	sbci	r27, 0xCB	; 203
      ba:	3e 91       	ld	r19, -X
      bc:	6b aa       	std	Y+51, r6	; 0x33
      be:	aa be       	out	0x3a, r10	; 58
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	3f 07       	cpc	r19, r31
      c6:	63 42       	sbci	r22, 0x23	; 35
      c8:	36 b7       	in	r19, 0x36	; 54
      ca:	9b d8       	rcall	.-3786   	; 0xfffff202 <__eeprom_end+0xff7ef202>
      cc:	a7 1a       	sub	r10, r23
      ce:	39 68       	ori	r19, 0x89	; 137
      d0:	56 18       	sub	r5, r6
      d2:	ae ba       	out	0x1e, r10	; 30
      d4:	ab 55       	subi	r26, 0x5B	; 91
      d6:	8c 1d       	adc	r24, r12
      d8:	3c b7       	in	r19, 0x3c	; 60
      da:	cc 57       	subi	r28, 0x7C	; 124
      dc:	63 bd       	out	0x23, r22	; 35
      de:	6d ed       	ldi	r22, 0xDD	; 221
      e0:	fd 75       	andi	r31, 0x5D	; 93
      e2:	3e f6       	brtc	.-114    	; 0x72 <__SREG__+0x33>
      e4:	17 72       	andi	r17, 0x27	; 39
      e6:	31 bf       	out	0x31, r19	; 49
      e8:	00 00       	nop
      ea:	00 80       	ld	r0, Z
      ec:	3f 08       	sbc	r3, r15
      ee:	00 00       	nop
      f0:	00 be       	out	0x30, r0	; 48
      f2:	92 24       	eor	r9, r2
      f4:	49 12       	cpse	r4, r25
      f6:	3e ab       	std	Y+54, r19	; 0x36
      f8:	aa aa       	std	Y+50, r10	; 0x32
      fa:	2a be       	out	0x3a, r2	; 58
      fc:	cd cc       	rjmp	.-1638   	; 0xfffffa98 <__eeprom_end+0xff7efa98>
      fe:	cc 4c       	sbci	r28, 0xCC	; 204
     100:	3e 00       	.word	0x003e	; ????
     102:	00 00       	nop
     104:	80 be       	out	0x30, r8	; 48
     106:	ab aa       	std	Y+51, r10	; 0x33
     108:	aa aa       	std	Y+50, r10	; 0x32
     10a:	3e 00       	.word	0x003e	; ????
     10c:	00 00       	nop
     10e:	00 bf       	out	0x30, r16	; 48
     110:	00 00       	nop
     112:	00 80       	ld	r0, Z
     114:	3f 00       	.word	0x003f	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	08 41       	sbci	r16, 0x18	; 24
     11c:	78 d3       	rcall	.+1776   	; 0x80e <SetupHardware+0x4a>
     11e:	bb 43       	sbci	r27, 0x3B	; 59
     120:	87 d1       	rcall	.+782    	; 0x430 <_Z9modeCheckhh+0x10>
     122:	13 3d       	cpi	r17, 0xD3	; 211
     124:	19 0e       	add	r1, r25
     126:	3c c3       	rjmp	.+1656   	; 0x7a0 <EVENT_USB_Device_ConfigurationChanged+0x92>
     128:	bd 42       	sbci	r27, 0x2D	; 45
     12a:	82 ad       	ldd	r24, Z+58	; 0x3a
     12c:	2b 3e       	cpi	r18, 0xEB	; 235
     12e:	68 ec       	ldi	r22, 0xC8	; 200
     130:	82 76       	andi	r24, 0x62	; 98
     132:	be d9       	rcall	.-3204   	; 0xfffff4b0 <__eeprom_end+0xff7ef4b0>
     134:	8f e1       	ldi	r24, 0x1F	; 31
     136:	a9 3e       	cpi	r26, 0xE9	; 233
     138:	4c 80       	ldd	r4, Y+4	; 0x04
     13a:	ef ff       	.word	0xffef	; ????
     13c:	be 01       	movw	r22, r28
     13e:	c4 ff       	sbrs	r28, 4
     140:	7f 3f       	cpi	r23, 0xFF	; 255
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 00       	nop

00000147 <port_to_mode_PGM>:
     147:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000151 <port_to_output_PGM>:
     151:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000015b <port_to_input_PGM>:
     15b:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000165 <digital_pin_to_port_PGM>:
     165:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     175:	03 03 03 03                                         ....

00000179 <digital_pin_to_bit_mask_PGM>:
     179:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     189:	04 08 10 20                                         ... 

0000018d <digital_pin_to_timer_PGM>:
     18d:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     19d:	00 00 00 00                                         ....

000001a1 <HIDReport>:
     1a1:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
     1b1:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     1c1:	81 01 05 01 09 30 09 31 09 38 15 f6 25 0a 35 f6     .....0.1.8..%.5.
     1d1:	45 0a 95 03 75 08 81 06 c0 c0 05 01 09 06 a1 01     E...u...........
     1e1:	85 02 05 07 19 e0 29 e7 15 00 25 01 75 01 95 08     ......)...%.u...
     1f1:	81 02 95 01 75 08 81 01 05 08 19 01 29 05 95 05     ....u.......)...
     201:	75 01 91 02 95 01 75 03 91 01 15 00 25 65 05 07     u.....u.....%e..
     211:	19 00 29 65 95 06 75 08 81 00 c0 05 01 09 04 a1     ..)e..u.........
     221:	01 85 03 09 01 a1 00 09 30 09 31 15 9c 25 64 35     ........0.1..%d5
     231:	ff 45 01 95 02 75 08 81 02 c0 05 09 19 01 29 02     .E...u........).
     241:	15 00 25 01 75 01 95 02 81 02 75 06 95 01 81 01     ..%.u.....u.....
     251:	c0                                                  .

00000252 <DeviceDescriptor>:
     252:	12 01 10 01 00 00 00 08 eb 03 4e 20 01 00 01 02     ..........N ....
     262:	dc 01                                               ..

00000264 <ConfigurationDescriptor>:
     264:	09 02 66 00 03 01 02 c0 fa 08 0b 00 02 02 02 01     ..f.............
     274:	02 09 04 00 00 01 02 02 01 03 05 24 00 10 01 04     ...........$....
     284:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     294:	04 01 00 02 0a 00 00 03 07 05 03 02 10 00 01 07     ................
     2a4:	05 82 02 10 00 01 09 04 02 00 02 03 01 01 04 09     ................
     2b4:	21 11 01 00 01 22 b1 00 07 05 84 03 09 00 01 07     !...."..........
     2c4:	05 05 03 09 00 01                                   ......

000002ca <LanguageString>:
     2ca:	04 03 09 04                                         ....

000002ce <ManufacturerString>:
     2ce:	1a 03 4a 00 65 00 66 00 66 00 20 00 52 00 6f 00     ..J.e.f.f. .R.o.
     2de:	77 00 62 00 65 00 72 00 67 00 00 00                 w.b.e.r.g...

000002ea <ProductString>:
     2ea:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     2fa:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     30a:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

00000318 <ProductStringSerial>:
     318:	2a 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     *.K.e.y.g.l.o.v.
     328:	65 00 20 00 53 00 65 00 72 00 69 00 61 00 6c 00     e. .S.e.r.i.a.l.
     338:	20 00 50 00 6f 00 72 00 74 00 00 00                  .P.o.r.t...

00000344 <ProductStringHID>:
     344:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     354:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     364:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

00000372 <_ZL21tone_pin_to_timer_PGM>:
     372:	02 00                                               ..

00000374 <__ctors_start>:
     374:	3b 02       	muls	r19, r27

00000376 <__ctors_end>:
     376:	11 24       	eor	r1, r1
     378:	1f be       	out	0x3f, r1	; 63
     37a:	cf ef       	ldi	r28, 0xFF	; 255
     37c:	d0 e2       	ldi	r29, 0x20	; 32
     37e:	de bf       	out	0x3e, r29	; 62
     380:	cd bf       	out	0x3d, r28	; 61

00000382 <__do_copy_data>:
     382:	14 e0       	ldi	r17, 0x04	; 4
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b1 e0       	ldi	r27, 0x01	; 1
     388:	e0 e0       	ldi	r30, 0x00	; 0
     38a:	f8 e8       	ldi	r31, 0x88	; 136
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	0b bf       	out	0x3b, r16	; 59
     390:	02 c0       	rjmp	.+4      	; 0x396 <__do_copy_data+0x14>
     392:	07 90       	elpm	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	a4 30       	cpi	r26, 0x04	; 4
     398:	b1 07       	cpc	r27, r17
     39a:	d9 f7       	brne	.-10     	; 0x392 <__do_copy_data+0x10>

0000039c <__do_clear_bss>:
     39c:	18 e0       	ldi	r17, 0x08	; 8
     39e:	a4 e0       	ldi	r26, 0x04	; 4
     3a0:	b4 e0       	ldi	r27, 0x04	; 4
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <.do_clear_bss_start>

000003a4 <.do_clear_bss_loop>:
     3a4:	1d 92       	st	X+, r1

000003a6 <.do_clear_bss_start>:
     3a6:	a6 3c       	cpi	r26, 0xC6	; 198
     3a8:	b1 07       	cpc	r27, r17
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <.do_clear_bss_loop>

000003ac <__do_global_ctors>:
     3ac:	13 e0       	ldi	r17, 0x03	; 3
     3ae:	c6 e7       	ldi	r28, 0x76	; 118
     3b0:	d3 e0       	ldi	r29, 0x03	; 3
     3b2:	04 c0       	rjmp	.+8      	; 0x3bc <.do_global_ctors_start>

000003b4 <.do_global_ctors_loop>:
     3b4:	22 97       	sbiw	r28, 0x02	; 2
     3b6:	fe 01       	movw	r30, r28
     3b8:	0e 94 76 43 	call	0x86ec	; 0x86ec <__tablejump__>

000003bc <.do_global_ctors_start>:
     3bc:	c4 37       	cpi	r28, 0x74	; 116
     3be:	d1 07       	cpc	r29, r17
     3c0:	c9 f7       	brne	.-14     	; 0x3b4 <.do_global_ctors_loop>
     3c2:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <main>
     3c6:	0c 94 fe 43 	jmp	0x87fc	; 0x87fc <_exit>

000003ca <__bad_interrupt>:
     3ca:	1a ce       	rjmp	.-972    	; 0x0 <__vectors>

000003cc <_Z11setup_boardv>:

#ifndef _SETUP_BOARD_AT90USB_H_
#define _SETUP_BOARD_AT90USB_H_

void setup_board() {
}  
     3cc:	08 95       	ret

000003ce <_Z15setup_touchconnv>:

#ifndef _SETUP_TOUCHCONN_DIRECT_H_
#define _SETUP_TOUCHCONN_DIRECT_H_

void setup_touchconn() {
}
     3ce:	08 95       	ret

000003d0 <_Z19setup_hostif_serialv>:
#ifndef ENABLE_SERIAL
    #define ENABLE_SERIAL
#endif

void setup_hostif_serial() {
}
     3d0:	08 95       	ret

000003d2 <_Z16setup_hostif_usbv>:

#ifndef _SETUP_HOSTIF_USB_H_
#define _SETUP_HOSTIF_USB_H_

void setup_hostif_usb() {
}
     3d2:	08 95       	ret

000003d4 <_Z19setup_hostif_bt_sppv>:

#ifndef _SETUP_HOSTIF_BT_SPP_H_
#define _SETUP_HOSTIF_BT_SPP_H_

void setup_hostif_bt_spp() {
}
     3d4:	08 95       	ret

000003d6 <_Z14setup_keyboardv>:
    #define KEY_VOLUP      128
    #define KEY_VOLDOWN    129
#endif /* !KEYPAD_ASTERISK */

void setup_keyboard() {
}
     3d6:	08 95       	ret

000003d8 <_Z15update_keyboardv>:

void update_keyboard() {
}  
     3d8:	08 95       	ret

000003da <_Z11setup_mousev>:
float opt_mouse_scale_mode2[] = { 1, 1 };         // speed scale [x,y] for mode 2 (tilt-position)
float opt_mouse_scale_mode3[] = { 1, 1 };         // speed scale [x,y] for mode 3 (movement-position)
float opt_mouse_scale_mode4[] = { 1, 1, 1 };      // speed scale [x,y,z] for mode 4 (3D)

void setup_mouse() {
    mx = my = mz = mx0 = my0 = mz0 = 0;
     3da:	10 92 2a 08 	sts	0x082A, r1
     3de:	10 92 29 08 	sts	0x0829, r1
     3e2:	10 92 28 08 	sts	0x0828, r1
     3e6:	10 92 27 08 	sts	0x0827, r1
     3ea:	10 92 26 08 	sts	0x0826, r1
     3ee:	10 92 25 08 	sts	0x0825, r1
     3f2:	10 92 22 08 	sts	0x0822, r1
     3f6:	10 92 21 08 	sts	0x0821, r1
     3fa:	10 92 20 08 	sts	0x0820, r1
     3fe:	10 92 1f 08 	sts	0x081F, r1
     402:	10 92 1e 08 	sts	0x081E, r1
     406:	10 92 1d 08 	sts	0x081D, r1
    sy = sy0 = 0;
     40a:	10 92 2c 08 	sts	0x082C, r1
     40e:	10 92 2b 08 	sts	0x082B, r1
     412:	10 92 24 08 	sts	0x0824, r1
     416:	10 92 23 08 	sts	0x0823, r1
}
     41a:	08 95       	ret

0000041c <_Z14setup_joystickv>:

#ifndef NO_USB_SUPPORT
#endif

void setup_joystick() {
}
     41c:	08 95       	ret

0000041e <_Z15update_joystickv>:

void update_joystick() {
}  
     41e:	08 95       	ret

00000420 <_Z9modeCheckhh>:

// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
     420:	28 2f       	mov	r18, r24
    if (modeStackPos < pos) {
     422:	e0 91 4c 08 	lds	r30, 0x084C
     426:	e6 17       	cp	r30, r22
     428:	10 f4       	brcc	.+4      	; 0x42e <_Z9modeCheckhh+0xe>
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0a c0       	rjmp	.+20     	; 0x442 <_Z9modeCheckhh+0x22>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	e6 1b       	sub	r30, r22
     434:	f1 09       	sbc	r31, r1
     436:	ee 5b       	subi	r30, 0xBE	; 190
     438:	f7 4f       	sbci	r31, 0xF7	; 247
     43a:	80 81       	ld	r24, Z
     43c:	82 17       	cp	r24, r18
     43e:	09 f4       	brne	.+2      	; 0x442 <_Z9modeCheckhh+0x22>
     440:	91 e0       	ldi	r25, 0x01	; 1
}
     442:	89 2f       	mov	r24, r25
     444:	08 95       	ret

00000446 <EVENT_USB_Device_Connect>:
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     446:	81 b3       	in	r24, 0x11	; 17
     448:	8f 71       	andi	r24, 0x1F	; 31
     44a:	80 6c       	ori	r24, 0xC0	; 192
     44c:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Connect(void)
{
    /* Indicate USB enumerating */
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     44e:	08 95       	ret

00000450 <EVENT_USB_Device_Disconnect>:
     450:	81 b3       	in	r24, 0x11	; 17
     452:	8f 71       	andi	r24, 0x1F	; 31
     454:	80 66       	ori	r24, 0x60	; 96
     456:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Disconnect(void)
{
    /* Indicate USB not ready */
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     458:	08 95       	ret

0000045a <ProcessHIDReport>:
        This is where you need to process the reports being sent from the host to the device.
        DataArray is an array holding the last report from the host. This function is called
        each time the host has sent a report to the device.
    */

}
     45a:	08 95       	ret

0000045c <_Z25Keyboard_ProcessLEDReporth>:
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
    uint8_t LEDMask = LEDS_LED2;

    if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
     45c:	28 2f       	mov	r18, r24
      LEDMask |= LEDS_LED2;

    if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
     45e:	81 fd       	sbrc	r24, 1
     460:	02 c0       	rjmp	.+4      	; 0x466 <_Z25Keyboard_ProcessLEDReporth+0xa>
     462:	90 e4       	ldi	r25, 0x40	; 64
     464:	01 c0       	rjmp	.+2      	; 0x468 <_Z25Keyboard_ProcessLEDReporth+0xc>
     466:	90 ec       	ldi	r25, 0xC0	; 192
      LEDMask |= LEDS_LED3;

    if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
     468:	22 fd       	sbrc	r18, 2
      LEDMask |= LEDS_LED4;
     46a:	90 64       	ori	r25, 0x40	; 64
     46c:	81 b3       	in	r24, 0x11	; 17
     46e:	8f 71       	andi	r24, 0x1F	; 31
     470:	98 2b       	or	r25, r24
     472:	91 bb       	out	0x11, r25	; 17

    /* Set the status LEDs to the current Keyboard LED status */
    LEDs_SetAllLEDs(LEDMask);
     474:	08 95       	ret

00000476 <_GLOBAL__I_HIDReportInData>:
#endif /* USE_TEENSY */
#ifdef USE_ARDUINO
    HardwareSerial Uart = Serial3;
#endif /* USE_ARDUINO */

iWRAP bluetooth = iWRAP(&Uart);
     476:	85 e5       	ldi	r24, 0x55	; 85
     478:	96 e0       	ldi	r25, 0x06	; 6
     47a:	64 e5       	ldi	r22, 0x54	; 84
     47c:	76 e0       	ldi	r23, 0x06	; 6
     47e:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <_ZN5iWRAPC1EP14HardwareSerial>
    #include <Wire.h>
#endif

#include "ADXL345.h"

ADXL345 accelerometer;
     482:	8f e5       	ldi	r24, 0x5F	; 95
     484:	96 e0       	ldi	r25, 0x06	; 6
     486:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <_ZN7ADXL345C1Ev>
    #include <Wire.h>
#endif

#include "ITG3200.h"

ITG3200 gyroscope = ITG3200();
     48a:	8f e3       	ldi	r24, 0x3F	; 63
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	0c 94 4a 32 	jmp	0x6494	; 0x6494 <_ZN7ITG3200C1Ev>

00000492 <HID_Task>:
        Endpoint_ClearOUT();
    }

}

void HID_Task(void)
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     496:	80 91 bd 08 	lds	r24, 0x08BD
     49a:	84 30       	cpi	r24, 0x04	; 4
     49c:	91 f5       	brne	.+100    	; 0x502 <HID_Task+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a4:	80 91 e8 00 	lds	r24, 0x00E8
      return;

    Endpoint_SelectEndpoint(GENERIC_OUT_EPNUM);

    /* Check to see if a packet has been sent from the host */
    if (Endpoint_IsOUTReceived())
     4a8:	82 ff       	sbrs	r24, 2
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <HID_Task+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     4ac:	80 91 e8 00 	lds	r24, 0x00E8
    {
        /* Check to see if the packet contains data */
        if (Endpoint_IsReadWriteAllowed())
     4b0:	85 ff       	sbrs	r24, 5
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <HID_Task+0x32>
        {
            /* Read Generic Report Data */
            Endpoint_Read_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData), NULL);
     4b4:	86 e1       	ldi	r24, 0x16	; 22
     4b6:	94 e0       	ldi	r25, 0x04	; 4
     4b8:	69 e0       	ldi	r22, 0x09	; 9
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0e 94 08 3d 	call	0x7a10	; 0x7a10 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4c4:	80 91 e8 00 	lds	r24, 0x00E8
     4c8:	8b 77       	andi	r24, 0x7B	; 123
     4ca:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4d4:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_SelectEndpoint(GENERIC_IN_EPNUM);

    /* Check to see if the host is ready to accept another packet */
    if (Endpoint_IsINReady())
     4d8:	80 ff       	sbrs	r24, 0
     4da:	13 c0       	rjmp	.+38     	; 0x502 <HID_Task+0x70>
    {
        /* Write Generic Report Data */
        Endpoint_Write_Stream_LE(&HIDReportInData, sizeof(HIDReportInData), NULL);
     4dc:	0d e0       	ldi	r16, 0x0D	; 13
     4de:	14 e0       	ldi	r17, 0x04	; 4
     4e0:	c8 01       	movw	r24, r16
     4e2:	69 e0       	ldi	r22, 0x09	; 9
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	0e 94 5a 3d 	call	0x7ab4	; 0x7ab4 <Endpoint_Write_Stream_LE>
        
        /* Clean out report data after sending */
        memset(&HIDReportInData, 0, sizeof(HIDReportInData));
     4ee:	89 e0       	ldi	r24, 0x09	; 9
     4f0:	f8 01       	movw	r30, r16
     4f2:	11 92       	st	Z+, r1
     4f4:	8a 95       	dec	r24
     4f6:	e9 f7       	brne	.-6      	; 0x4f2 <HID_Task+0x60>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4f8:	80 91 e8 00 	lds	r24, 0x00E8
     4fc:	8e 77       	andi	r24, 0x7E	; 126
     4fe:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();
    }
}
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <CDC_Task>:
            break;
    }
}

/** Function to manage CDC data transmission and reception to and from the host. */
void CDC_Task(void)
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     50c:	80 91 bd 08 	lds	r24, 0x08BD
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	09 f0       	breq	.+2      	; 0x516 <CDC_Task+0xe>
     514:	89 c0       	rjmp	.+274    	; 0x628 <CDC_Task+0x120>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     516:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     518:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     51a:	20 91 33 05 	lds	r18, 0x0533
     51e:	30 91 34 05 	lds	r19, 0x0534
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     522:	8f bf       	out	0x3f, r24	; 63

    uint16_t BufferCount;

    /* Send data packet if anything is waiting */
    BufferCount = RingBuffer_GetCount(&HostTXSerial_Buffer);
    if (BufferCount && LineEncodingData.BaudRateBPS)
     524:	21 15       	cp	r18, r1
     526:	31 05       	cpc	r19, r1
     528:	09 f4       	brne	.+2      	; 0x52c <CDC_Task+0x24>
     52a:	48 c0       	rjmp	.+144    	; 0x5bc <CDC_Task+0xb4>
     52c:	80 91 01 03 	lds	r24, 0x0301
     530:	90 91 02 03 	lds	r25, 0x0302
     534:	a0 91 03 03 	lds	r26, 0x0303
     538:	b0 91 04 03 	lds	r27, 0x0304
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	a1 05       	cpc	r26, r1
     540:	b1 05       	cpc	r27, r1
     542:	09 f4       	brne	.+2      	; 0x546 <CDC_Task+0x3e>
     544:	3b c0       	rjmp	.+118    	; 0x5bc <CDC_Task+0xb4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 93 e9 00 	sts	0x00E9, r24
     54c:	a9 01       	movw	r20, r18
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     54e:	aa e2       	ldi	r26, 0x2A	; 42
    {
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     550:	b5 e0       	ldi	r27, 0x05	; 5
     552:	b9 01       	movw	r22, r18
     554:	6f 50       	subi	r22, 0x0F	; 15
     556:	70 40       	sbci	r23, 0x00	; 0
     558:	ed 01       	movw	r28, r26
		
			uint8_t Data = *Buffer->Out;
     55a:	ea 81       	ldd	r30, Y+2	; 0x02
     55c:	fb 81       	ldd	r31, Y+3	; 0x03
     55e:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     560:	fb 83       	std	Y+3, r31	; 0x03
     562:	ea 83       	std	Y+2, r30	; 0x02
     564:	8e 81       	ldd	r24, Y+6	; 0x06
     566:	9f 81       	ldd	r25, Y+7	; 0x07
     568:	e8 17       	cp	r30, r24
     56a:	f9 07       	cpc	r31, r25
     56c:	21 f4       	brne	.+8      	; 0x576 <CDC_Task+0x6e>
			  Buffer->Out = Buffer->Start;
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	9b 83       	std	Y+3, r25	; 0x03
     574:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     576:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     578:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     57a:	89 85       	ldd	r24, Y+9	; 0x09
     57c:	9a 85       	ldd	r25, Y+10	; 0x0a
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	9a 87       	std	Y+10, r25	; 0x0a
     582:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     584:	2f bf       	out	0x3f, r18	; 63
        {
            UEDATX = RingBuffer_Remove(&HostTXSerial_Buffer); // write one byte
     586:	30 93 f1 00 	sts	0x00F1, r19
    {
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     58a:	46 17       	cp	r20, r22
     58c:	57 07       	cpc	r21, r23
     58e:	19 f0       	breq	.+6      	; 0x596 <CDC_Task+0x8e>
     590:	41 50       	subi	r20, 0x01	; 1
     592:	50 40       	sbci	r21, 0x00	; 0
     594:	09 f7       	brne	.-62     	; 0x558 <CDC_Task+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     596:	20 91 f2 00 	lds	r18, 0x00F2
     59a:	30 91 f3 00 	lds	r19, 0x00F3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     59e:	80 91 e8 00 	lds	r24, 0x00E8
     5a2:	8e 77       	andi	r24, 0x7E	; 126
     5a4:	80 93 e8 00 	sts	0x00E8, r24
        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();

        /* If the last packet filled the endpoint, send an empty packet to release the buffer on
         * the receiver (otherwise all data will be cached until a non-full packet is received) */
        if (IsFull)
     5a8:	20 31       	cpi	r18, 0x10	; 16
     5aa:	31 05       	cpc	r19, r1
     5ac:	39 f4       	brne	.+14     	; 0x5bc <CDC_Task+0xb4>
        {
            /* Wait until the endpoint is ready for another packet */
            Endpoint_WaitUntilReady();
     5ae:	0e 94 ad 3a 	call	0x755a	; 0x755a <Endpoint_WaitUntilReady>
     5b2:	80 91 e8 00 	lds	r24, 0x00E8
     5b6:	8e 77       	andi	r24, 0x7E	; 126
     5b8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c2:	80 91 e8 00 	lds	r24, 0x00E8

    /* Select the Serial RX Endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
     5c6:	82 ff       	sbrs	r24, 2
     5c8:	2f c0       	rjmp	.+94     	; 0x628 <CDC_Task+0x120>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     5ca:	60 91 f2 00 	lds	r22, 0x00F2
     5ce:	70 91 f3 00 	lds	r23, 0x00F3
     5d2:	40 e0       	ldi	r20, 0x00	; 0
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     5d4:	af e1       	ldi	r26, 0x1F	; 31
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (uint8_t i = 0; i < BufferCount; i++)
        {
            uint8_t b = UEDATX;
     5d6:	b4 e0       	ldi	r27, 0x04	; 4
     5d8:	1d c0       	rjmp	.+58     	; 0x614 <CDC_Task+0x10c>
     5da:	80 91 f1 00 	lds	r24, 0x00F1
     5de:	ed 01       	movw	r28, r26

			*Buffer->In = Data;
     5e0:	e8 81       	ld	r30, Y
     5e2:	f9 81       	ldd	r31, Y+1	; 0x01
     5e4:	80 83       	st	Z, r24

			if (++Buffer->In == Buffer->End)
     5e6:	88 81       	ld	r24, Y
     5e8:	99 81       	ldd	r25, Y+1	; 0x01
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	99 83       	std	Y+1, r25	; 0x01
     5ee:	88 83       	st	Y, r24
     5f0:	2e 81       	ldd	r18, Y+6	; 0x06
     5f2:	3f 81       	ldd	r19, Y+7	; 0x07
     5f4:	82 17       	cp	r24, r18
     5f6:	93 07       	cpc	r25, r19
     5f8:	21 f4       	brne	.+8      	; 0x602 <CDC_Task+0xfa>
			  Buffer->In = Buffer->Start;
     5fa:	8c 81       	ldd	r24, Y+4	; 0x04
     5fc:	9d 81       	ldd	r25, Y+5	; 0x05
     5fe:	99 83       	std	Y+1, r25	; 0x01
     600:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     602:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     604:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     610:	2f bf       	out	0x3f, r18	; 63

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (uint8_t i = 0; i < BufferCount; i++)
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	84 2f       	mov	r24, r20
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	86 17       	cp	r24, r22
     61a:	97 07       	cpc	r25, r23
     61c:	f0 f2       	brcs	.-68     	; 0x5da <CDC_Task+0xd2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     61e:	80 91 e8 00 	lds	r24, 0x00E8
     622:	8b 77       	andi	r24, 0x7B	; 123
     624:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to receive the last packet */
        Endpoint_ClearOUT();
    }

}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
{
    switch (USB_ControlRequest.bRequest)
     632:	80 91 bf 08 	lds	r24, 0x08BF
     636:	80 32       	cpi	r24, 0x20	; 32
     638:	09 f4       	brne	.+2      	; 0x63c <EVENT_USB_Device_ControlRequest+0xe>
     63a:	4d c0       	rjmp	.+154    	; 0x6d6 <EVENT_USB_Device_ControlRequest+0xa8>
     63c:	81 32       	cpi	r24, 0x21	; 33
     63e:	30 f4       	brcc	.+12     	; 0x64c <EVENT_USB_Device_ControlRequest+0x1e>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	51 f0       	breq	.+20     	; 0x658 <EVENT_USB_Device_ControlRequest+0x2a>
     644:	89 30       	cpi	r24, 0x09	; 9
     646:	09 f0       	breq	.+2      	; 0x64a <EVENT_USB_Device_ControlRequest+0x1c>
     648:	5f c0       	rjmp	.+190    	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
     64a:	1d c0       	rjmp	.+58     	; 0x686 <EVENT_USB_Device_ControlRequest+0x58>
     64c:	81 32       	cpi	r24, 0x21	; 33
     64e:	81 f1       	breq	.+96     	; 0x6b0 <EVENT_USB_Device_ControlRequest+0x82>
     650:	82 32       	cpi	r24, 0x22	; 34
     652:	09 f0       	breq	.+2      	; 0x656 <EVENT_USB_Device_ControlRequest+0x28>
     654:	59 c0       	rjmp	.+178    	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
     656:	4d c0       	rjmp	.+154    	; 0x6f2 <EVENT_USB_Device_ControlRequest+0xc4>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     658:	80 91 be 08 	lds	r24, 0x08BE
     65c:	81 3a       	cpi	r24, 0xA1	; 161
     65e:	09 f0       	breq	.+2      	; 0x662 <EVENT_USB_Device_ControlRequest+0x34>
     660:	53 c0       	rjmp	.+166    	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     662:	80 91 e8 00 	lds	r24, 0x00E8
     666:	87 7f       	andi	r24, 0xF7	; 247
     668:	80 93 e8 00 	sts	0x00E8, r24
                //CreateHIDReport(HIDReportInData);

                Endpoint_ClearSETUP();

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&HIDReportInData, sizeof(HIDReportInData));
     66c:	0d e0       	ldi	r16, 0x0D	; 13
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	c8 01       	movw	r24, r16
     672:	69 e0       	ldi	r22, 0x09	; 9
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 08 3c 	call	0x7810	; 0x7810 <Endpoint_Write_Control_Stream_LE>

                /* Clean out report data after sending */
                memset(&HIDReportInData, 0, sizeof(HIDReportInData));
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	f8 01       	movw	r30, r16
     67e:	11 92       	st	Z+, r1
     680:	8a 95       	dec	r24
     682:	e9 f7       	brne	.-6      	; 0x67e <EVENT_USB_Device_ControlRequest+0x50>
     684:	24 c0       	rjmp	.+72     	; 0x6ce <EVENT_USB_Device_ControlRequest+0xa0>
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     686:	80 91 be 08 	lds	r24, 0x08BE
     68a:	81 32       	cpi	r24, 0x21	; 33
     68c:	e9 f5       	brne	.+122    	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
     68e:	80 91 e8 00 	lds	r24, 0x00E8
     692:	87 7f       	andi	r24, 0xF7	; 247
     694:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the report data from the control endpoint */
                Endpoint_Read_Control_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData));
     698:	86 e1       	ldi	r24, 0x16	; 22
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	69 e0       	ldi	r22, 0x09	; 9
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 66 3c 	call	0x78cc	; 0x78cc <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6a4:	80 91 e8 00 	lds	r24, 0x00E8
     6a8:	8e 77       	andi	r24, 0x7E	; 126
     6aa:	80 93 e8 00 	sts	0x00E8, r24
     6ae:	2c c0       	rjmp	.+88     	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
                ProcessHIDReport(HIDReportOutData);
            }

            break;
        case CDC_REQ_GetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6b0:	80 91 be 08 	lds	r24, 0x08BE
     6b4:	81 3a       	cpi	r24, 0xA1	; 161
     6b6:	41 f5       	brne	.+80     	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6b8:	80 91 e8 00 	lds	r24, 0x00E8
     6bc:	87 7f       	andi	r24, 0xF7	; 247
     6be:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Write the line coding data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	67 e0       	ldi	r22, 0x07	; 7
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 08 3c 	call	0x7810	; 0x7810 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
     6d2:	8b 77       	andi	r24, 0x7B	; 123
     6d4:	ea cf       	rjmp	.-44     	; 0x6aa <EVENT_USB_Device_ControlRequest+0x7c>
                Endpoint_ClearOUT();
            }

            break;
        case CDC_REQ_SetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6d6:	80 91 be 08 	lds	r24, 0x08BE
     6da:	81 32       	cpi	r24, 0x21	; 33
     6dc:	a9 f4       	brne	.+42     	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6de:	80 91 e8 00 	lds	r24, 0x00E8
     6e2:	87 7f       	andi	r24, 0xF7	; 247
     6e4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the line coding data in from the host into the global struct */
                Endpoint_Read_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	67 e0       	ldi	r22, 0x07	; 7
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	d7 cf       	rjmp	.-82     	; 0x6a0 <EVENT_USB_Device_ControlRequest+0x72>
                Endpoint_ClearIN();
            }

            break;
        case CDC_REQ_SetControlLineState:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6f2:	80 91 be 08 	lds	r24, 0x08BE
     6f6:	81 32       	cpi	r24, 0x21	; 33
     6f8:	39 f4       	brne	.+14     	; 0x708 <EVENT_USB_Device_ControlRequest+0xda>
     6fa:	80 91 e8 00 	lds	r24, 0x00E8
     6fe:	87 7f       	andi	r24, 0xF7	; 247
     700:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     704:	0e 94 8c 3a 	call	0x7518	; 0x7518 <Endpoint_ClearStatusStage>
                */
            }

            break;
    }
}
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size)));
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	61 ec       	ldi	r22, 0xC1	; 193
     720:	42 e0       	ldi	r20, 0x02	; 2
     722:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
     726:	08 2f       	mov	r16, r24
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	61 e8       	ldi	r22, 0x81	; 129
     72c:	42 e1       	ldi	r20, 0x12	; 18
     72e:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
     732:	c8 2e       	mov	r12, r24
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	60 e8       	ldi	r22, 0x80	; 128
     738:	42 e1       	ldi	r20, 0x12	; 18
     73a:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
     73e:	e8 2e       	mov	r14, r24
     740:	10 92 01 03 	sts	0x0301, r1
     744:	10 92 02 03 	sts	0x0302, r1
     748:	10 92 03 03 	sts	0x0303, r1
     74c:	10 92 04 03 	sts	0x0304, r1
     750:	84 e0       	ldi	r24, 0x04	; 4
     752:	61 ec       	ldi	r22, 0xC1	; 193
     754:	42 e1       	ldi	r20, 0x12	; 18
     756:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
     75a:	b8 2e       	mov	r11, r24
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                                CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	60 ec       	ldi	r22, 0xC0	; 192
     760:	42 e1       	ldi	r20, 0x12	; 18
     762:	0e 94 57 3a 	call	0x74ae	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
     766:	68 2f       	mov	r22, r24
     768:	10 e0       	ldi	r17, 0x00	; 0
     76a:	dd 24       	eor	r13, r13
     76c:	0c 21       	and	r16, r12
     76e:	1d 21       	and	r17, r13
     770:	01 70       	andi	r16, 0x01	; 1
     772:	10 70       	andi	r17, 0x00	; 0
     774:	ff 24       	eor	r15, r15
     776:	0e 21       	and	r16, r14
     778:	1f 21       	and	r17, r15
    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;

    /* Setup HID Report Endpoints */
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	01 2b       	or	r16, r17
     780:	11 f0       	breq	.+4      	; 0x786 <EVENT_USB_Device_ConfigurationChanged+0x78>
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	8b 2d       	mov	r24, r11
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	48 23       	and	r20, r24
     78c:	59 23       	and	r21, r25
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Indicate endpoint configuration success or failure */
    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	45 2b       	or	r20, r21
     794:	11 f0       	breq	.+4      	; 0x79a <EVENT_USB_Device_ConfigurationChanged+0x8c>
     796:	21 e0       	ldi	r18, 0x01	; 1
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	86 2f       	mov	r24, r22
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	28 23       	and	r18, r24
     7a0:	39 23       	and	r19, r25
     7a2:	23 2b       	or	r18, r19
     7a4:	11 f4       	brne	.+4      	; 0x7aa <EVENT_USB_Device_ConfigurationChanged+0x9c>
     7a6:	90 e2       	ldi	r25, 0x20	; 32
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <EVENT_USB_Device_ConfigurationChanged+0x9e>
     7aa:	90 e4       	ldi	r25, 0x40	; 64
     7ac:	81 b3       	in	r24, 0x11	; 17
     7ae:	8f 71       	andi	r24, 0x1F	; 31
     7b0:	98 2b       	or	r25, r24
     7b2:	91 bb       	out	0x11, r25	; 17
}
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	bf 90       	pop	r11
     7c2:	08 95       	ret

000007c4 <SetupHardware>:
            defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) ||  \
            defined(__AVR_ATmega32U6__)))
        // note the JTD bit must be written twice within 4 clock cycles to disable JTAG
        // you must also set the IVSEL bit at the same time, which requires IVCE to be set first
        // port pull-up resistors are enabled - PUD(Pull Up Disable) = 0
        MCUCR = (1 << JTD) | (1 << IVCE) | (0 << PUD);
     7c4:	81 e8       	ldi	r24, 0x81	; 129
     7c6:	85 bf       	out	0x35, r24	; 53
        MCUCR = (1 << JTD) | (0 << IVSEL) | (0 << IVCE) | (0 << PUD);
     7c8:	20 e8       	ldi	r18, 0x80	; 128
     7ca:	25 bf       	out	0x35, r18	; 53
    #endif

    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     7cc:	84 b7       	in	r24, 0x34	; 52
     7ce:	87 7f       	andi	r24, 0xF7	; 247
     7d0:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     7d2:	88 e1       	ldi	r24, 0x18	; 24
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	80 93 60 00 	sts	0x0060, r24
     7dc:	10 92 60 00 	sts	0x0060, r1
     7e0:	0f be       	out	0x3f, r0	; 63

	//cli();
	//CLKPR = 0x80;
	//CLKPR = CPU_PRESCALER;
	// timer 0, fast pwm mode
	TCCR0A = (1<<WGM01) | (1<<WGM00);
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01) | (1<<CS00);		// div 64 prescaler
     7e6:	85 bd       	out	0x25, r24	; 37
//	sbi(TIMSK0, TOIE0);
	// timer 1, 8 bit phase correct pwm
	TCCR1A = (1<<WGM10);
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1<<CS11);			// div 8 prescaler
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	80 93 81 00 	sts	0x0081, r24
	DIDR0 = 0;
	DIDR2 = 0;
#endif
#if defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__)
	// timer 2, 8 bit phase correct pwm
	TCCR2A = (1<<WGM20);
     7f4:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1<<CS21);			// div 8 prescaler
     7f8:	80 93 b1 00 	sts	0x00B1, r24
	// timer 3, 8 bit phase correct pwm
	TCCR3A = (1<<WGM30);
     7fc:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1<<CS31);			// div 8 prescaler
     800:	80 93 91 00 	sts	0x0091, r24
	// ADC
//	ADCSRA = (1<<ADEN) | (ADC_PRESCALER + ADC_PRESCALE_ADJUST);
//	ADCSRB = DEFAULT_ADCSRB;
	DIDR0 = 0;
     804:	10 92 7e 00 	sts	0x007E, r1
#endif

    /* Disable clock division */
    //clock_prescale_set(clock_div_1);
        CPU_PRESCALE(CPU_8MHz); // 3.3v AVR shouldn't run faster than 8MHz
     808:	e1 e6       	ldi	r30, 0x61	; 97
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	20 83       	st	Z, r18
     80e:	90 83       	st	Z, r25

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS_D;
     810:	56 9a       	sbi	0x0a, 6	; 10
				DDRF  |=  LEDS_ALL_LEDS_F;
     812:	80 b3       	in	r24, 0x10	; 16
     814:	80 6e       	ori	r24, 0xE0	; 224
     816:	80 bb       	out	0x10, r24	; 16
				PORTF &= ~LEDS_ALL_LEDS_F;
     818:	81 b3       	in	r24, 0x11	; 17
     81a:	8f 71       	andi	r24, 0x1F	; 31
     81c:	81 bb       	out	0x11, r24	; 17

    /* Hardware Initialization */
    LEDs_Init();
    USB_Init();
     81e:	0e 94 28 3b 	call	0x7650	; 0x7650 <USB_Init>
	sei();
     822:	78 94       	sei
}
     824:	08 95       	ret

00000826 <_Z7set_rgbhhh>:

uint8_t rgbBlinkRed;
uint8_t rgbBlinkGreen;
uint8_t rgbBlinkBlue;

void set_rgb(uint8_t r, uint8_t g, uint8_t b) {
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	98 2f       	mov	r25, r24
     82c:	16 2f       	mov	r17, r22
     82e:	04 2f       	mov	r16, r20
    if (r != 255) digitalWrite(KG_PIN_RGB_RED, r);
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	21 f0       	breq	.+8      	; 0x83c <_Z7set_rgbhhh+0x16>
     834:	8b e2       	ldi	r24, 0x2B	; 43
     836:	69 2f       	mov	r22, r25
     838:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    if (g != 255) digitalWrite(KG_PIN_RGB_GREEN, g);
     83c:	1f 3f       	cpi	r17, 0xFF	; 255
     83e:	21 f0       	breq	.+8      	; 0x848 <_Z7set_rgbhhh+0x22>
     840:	8c e2       	ldi	r24, 0x2C	; 44
     842:	61 2f       	mov	r22, r17
     844:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    if (b != 255) digitalWrite(KG_PIN_RGB_BLUE, b);
     848:	0f 3f       	cpi	r16, 0xFF	; 255
     84a:	21 f0       	breq	.+8      	; 0x854 <_Z7set_rgbhhh+0x2e>
     84c:	8d e2       	ldi	r24, 0x2D	; 45
     84e:	60 2f       	mov	r22, r16
     850:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
}
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <_Z20setup_feedback_blinkv>:
#define _SETUP_FEEDBACK_BLINK_H_

uint8_t blink_led; // state of blink LED (0 = off, 1 = on)

void setup_feedback_blink() {
    pinMode(KG_PIN_BLINK, OUTPUT);
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    digitalWrite(KG_PIN_BLINK, LOW);
     862:	86 e0       	ldi	r24, 0x06	; 6
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    blink_led = false;
     86a:	10 92 19 08 	sts	0x0819, r1
}
     86e:	08 95       	ret

00000870 <_Z7vibratehj>:
            tone(SOUND_PIN, pitch, duration_ms);
        }
    #endif /* ENABLE_BEEP */
}

void vibrate(uint8_t mode, uint16_t duration) {
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	d8 2e       	mov	r13, r24
     87c:	7b 01       	movw	r14, r22
    DEBUG_PRN_TOUCHSET("touchset vibrate ");
     87e:	08 e8       	ldi	r16, 0x88	; 136
     880:	18 e0       	ldi	r17, 0x08	; 8
     882:	c8 01       	movw	r24, r16
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(mode);
     88c:	c8 01       	movw	r24, r16
     88e:	6d 2d       	mov	r22, r13
     890:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN16USBVirtualSerial5printEh>
    DEBUG_PRN_TOUCHSET(" ");
     894:	c8 01       	movw	r24, r16
     896:	62 e1       	ldi	r22, 0x12	; 18
     898:	71 e0       	ldi	r23, 0x01	; 1
     89a:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(duration);
     89e:	c8 01       	movw	r24, r16
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
}
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	08 95       	ret

000008b2 <_Z7blueledhj>:
            case KG_RGB_SOLID: tricolorBlinkGreen = 0; tricolor(-1, 1, -1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}

void blueled(uint8_t mode, uint16_t duration) {
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	d8 2e       	mov	r13, r24
     8be:	7b 01       	movw	r14, r22
    DEBUG_PRN_TOUCHSET("touchset blueled ");
     8c0:	08 e8       	ldi	r16, 0x88	; 136
     8c2:	18 e0       	ldi	r17, 0x08	; 8
     8c4:	c8 01       	movw	r24, r16
     8c6:	64 e1       	ldi	r22, 0x14	; 20
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(mode);
     8ce:	c8 01       	movw	r24, r16
     8d0:	6d 2d       	mov	r22, r13
     8d2:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN16USBVirtualSerial5printEh>
    DEBUG_PRN_TOUCHSET(" ");
     8d6:	c8 01       	movw	r24, r16
     8d8:	62 e1       	ldi	r22, 0x12	; 18
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(duration);
     8e0:	c8 01       	movw	r24, r16
     8e2:	b7 01       	movw	r22, r14
     8e4:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
            case KG_RGB_SHORTBLINK: tricolorBlinkBlue = 3; tricolor(-1, -1, 1); break;
            case KG_RGB_SHORTPULSE: tricolorBlinkBlue = 4; tricolor(-1, -1, 1); break;
            case KG_RGB_SOLID: tricolorBlinkBlue = 0; tricolor(-1, -1, 1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	08 95       	ret

000008f4 <_Z8greenledhj>:
            case KG_RGB_SOLID: tricolorBlinkRed = 0; tricolor(1, -1, -1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}

void greenled(uint8_t mode, uint16_t duration) {
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	d8 2e       	mov	r13, r24
     900:	7b 01       	movw	r14, r22
    DEBUG_PRN_TOUCHSET("touchset greenled ");
     902:	08 e8       	ldi	r16, 0x88	; 136
     904:	18 e0       	ldi	r17, 0x08	; 8
     906:	c8 01       	movw	r24, r16
     908:	66 e2       	ldi	r22, 0x26	; 38
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(mode);
     910:	c8 01       	movw	r24, r16
     912:	6d 2d       	mov	r22, r13
     914:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN16USBVirtualSerial5printEh>
    DEBUG_PRN_TOUCHSET(" ");
     918:	c8 01       	movw	r24, r16
     91a:	62 e1       	ldi	r22, 0x12	; 18
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(duration);
     922:	c8 01       	movw	r24, r16
     924:	b7 01       	movw	r22, r14
     926:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
            case KG_RGB_SHORTBLINK: tricolorBlinkGreen = 3; tricolor(-1, 1, -1); break;
            case KG_RGB_SHORTPULSE: tricolorBlinkGreen = 4; tricolor(-1, 1, -1); break;
            case KG_RGB_SOLID: tricolorBlinkGreen = 0; tricolor(-1, 1, -1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	08 95       	ret

00000936 <_Z6redledhj>:
    modifierdown(code);
    delay(5);
    modifierup(code);
}

void redled(uint8_t mode, uint16_t duration) {
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	d8 2e       	mov	r13, r24
     942:	7b 01       	movw	r14, r22
    DEBUG_PRN_TOUCHSET("touchset redled ");
     944:	08 e8       	ldi	r16, 0x88	; 136
     946:	18 e0       	ldi	r17, 0x08	; 8
     948:	c8 01       	movw	r24, r16
     94a:	69 e3       	ldi	r22, 0x39	; 57
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(mode);
     952:	c8 01       	movw	r24, r16
     954:	6d 2d       	mov	r22, r13
     956:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN16USBVirtualSerial5printEh>
    DEBUG_PRN_TOUCHSET(" ");
     95a:	c8 01       	movw	r24, r16
     95c:	62 e1       	ldi	r22, 0x12	; 18
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(duration);
     964:	c8 01       	movw	r24, r16
     966:	b7 01       	movw	r22, r14
     968:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
            case KG_RGB_SHORTBLINK: tricolorBlinkRed = 3; tricolor(1, -1, -1); break;
            case KG_RGB_SHORTPULSE: tricolorBlinkRed = 4; tricolor(1, -1, -1); break;
            case KG_RGB_SOLID: tricolorBlinkRed = 0; tricolor(1, -1, -1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	08 95       	ret

00000978 <_Z4beepjhj>:
            case KG_RGB_SOLID: tricolorBlinkBlue = 0; tricolor(-1, -1, 1); break;
        }
    #endif /* ENABLE_TRICOLOR */
}

void beep(uint16_t pitch, uint8_t mode, uint16_t duration) {
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	7c 01       	movw	r14, r24
     988:	b6 2e       	mov	r11, r22
     98a:	6a 01       	movw	r12, r20
    DEBUG_PRN_TOUCHSET("touchset beep ");
     98c:	08 e8       	ldi	r16, 0x88	; 136
     98e:	18 e0       	ldi	r17, 0x08	; 8
     990:	c8 01       	movw	r24, r16
     992:	6a e4       	ldi	r22, 0x4A	; 74
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(pitch);
     99a:	c8 01       	movw	r24, r16
     99c:	b7 01       	movw	r22, r14
     99e:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    DEBUG_PRN_TOUCHSET(" ");
     9a2:	82 e1       	ldi	r24, 0x12	; 18
     9a4:	e8 2e       	mov	r14, r24
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	f8 2e       	mov	r15, r24
     9aa:	c8 01       	movw	r24, r16
     9ac:	b7 01       	movw	r22, r14
     9ae:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_TOUCHSET(mode);
     9b2:	c8 01       	movw	r24, r16
     9b4:	6b 2d       	mov	r22, r11
     9b6:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <_ZN16USBVirtualSerial5printEh>
    DEBUG_PRN_TOUCHSET(" ");
     9ba:	c8 01       	movw	r24, r16
     9bc:	b7 01       	movw	r22, r14
     9be:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(duration);
     9c2:	c8 01       	movw	r24, r16
     9c4:	b6 01       	movw	r22, r12
     9c6:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
                delay(80);
            }
            tone(SOUND_PIN, pitch, duration_ms);
        }
    #endif /* ENABLE_BEEP */
}
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	08 95       	ret

000009da <_Z8mouseoffh>:
    } else if (mode == MOUSE_ACTION_SCROLL) {
        opt_scroll_mode = SCROLL_MODE_TILT_POSITION;
    }
}

void mouseoff(uint8_t mode) {
     9da:	1f 93       	push	r17
     9dc:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset mouseoff ");
     9de:	88 e8       	ldi	r24, 0x88	; 136
     9e0:	98 e0       	ldi	r25, 0x08	; 8
     9e2:	69 e5       	ldi	r22, 0x59	; 89
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(mode);
     9ea:	88 e8       	ldi	r24, 0x88	; 136
     9ec:	98 e0       	ldi	r25, 0x08	; 8
     9ee:	61 2f       	mov	r22, r17
     9f0:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if (mode == MOUSE_ACTION_MOVE) {
     9f4:	11 23       	and	r17, r17
     9f6:	19 f4       	brne	.+6      	; 0x9fe <_Z8mouseoffh+0x24>
        opt_mouse_mode = 0;
     9f8:	10 92 38 08 	sts	0x0838, r1
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <_Z8mouseoffh+0x2c>
    } else if (mode == MOUSE_ACTION_SCROLL) {
     9fe:	11 30       	cpi	r17, 0x01	; 1
     a00:	11 f4       	brne	.+4      	; 0xa06 <_Z8mouseoffh+0x2c>
        opt_scroll_mode = 0;
     a02:	10 92 39 08 	sts	0x0839, r1
    }
}
     a06:	1f 91       	pop	r17
     a08:	08 95       	ret

00000a0a <_Z7mouseonh>:
        // not enabled, so turn it on
        pushmode(mode);
    }
}

void mouseon(uint8_t mode) {
     a0a:	1f 93       	push	r17
     a0c:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset mouseon ");
     a0e:	88 e8       	ldi	r24, 0x88	; 136
     a10:	98 e0       	ldi	r25, 0x08	; 8
     a12:	6c e6       	ldi	r22, 0x6C	; 108
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(mode);
     a1a:	88 e8       	ldi	r24, 0x88	; 136
     a1c:	98 e0       	ldi	r25, 0x08	; 8
     a1e:	61 2f       	mov	r22, r17
     a20:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if (mode == MOUSE_ACTION_MOVE) {
     a24:	11 23       	and	r17, r17
     a26:	21 f4       	brne	.+8      	; 0xa30 <_Z7mouseonh+0x26>
        opt_mouse_mode = MOUSE_MODE_TILT_POSITION;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 38 08 	sts	0x0838, r24
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <_Z7mouseonh+0x30>
    } else if (mode == MOUSE_ACTION_SCROLL) {
     a30:	11 30       	cpi	r17, 0x01	; 1
     a32:	19 f4       	brne	.+6      	; 0xa3a <_Z7mouseonh+0x30>
        opt_scroll_mode = SCROLL_MODE_TILT_POSITION;
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	80 93 39 08 	sts	0x0839, r24
    }
}
     a3a:	1f 91       	pop	r17
     a3c:	08 95       	ret

00000a3e <_Z18setup_feedback_rgbv>:

void setup_feedback_rgb() {
    pinMode(KG_PIN_RGB_RED, OUTPUT);
     a3e:	8b e2       	ldi	r24, 0x2B	; 43
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    pinMode(KG_PIN_RGB_GREEN, OUTPUT);
     a46:	8c e2       	ldi	r24, 0x2C	; 44
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    pinMode(KG_PIN_RGB_BLUE, OUTPUT);
     a4e:	8d e2       	ldi	r24, 0x2D	; 45
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    set_rgb(1, 1, 1); // turn everything on and wait 1/10 sec
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	e4 de       	rcall	.-568    	; 0x826 <_Z7set_rgbhhh>
    delay(100);
     a5e:	64 e6       	ldi	r22, 0x64	; 100
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    set_rgb(0, 0, 0); // turn everything off again
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
}
     a70:	da ce       	rjmp	.-588    	; 0x826 <_Z7set_rgbhhh>

00000a72 <_Z22setup_feedback_vibratev>:

#ifndef _SETUP_FEEDBACK_VIBRATE_H_
#define _SETUP_FEEDBACK_VIBRATE_H_

void setup_feedback_vibrate() {
    pinMode(KG_PIN_VIBRATE, OUTPUT);
     a72:	89 e2       	ldi	r24, 0x29	; 41
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    digitalWrite(KG_PIN_VIBRATE, LOW);
     a7a:	89 e2       	ldi	r24, 0x29	; 41
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    delay(100);
     a82:	64 e6       	ldi	r22, 0x64	; 100
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    digitalWrite(KG_PIN_VIBRATE, HIGH);
     a8e:	89 e2       	ldi	r24, 0x29	; 41
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	0c 94 92 29 	jmp	0x5324	; 0x5324 <digitalWrite>

00000a96 <_Z10modifieruph>:
        RX400.set_modifier(modifiersDown);
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}

void modifierup(uint8_t code) {
     a96:	1f 93       	push	r17
     a98:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset modifierup ");
     a9a:	88 e8       	ldi	r24, 0x88	; 136
     a9c:	98 e0       	ldi	r25, 0x08	; 8
     a9e:	6e e7       	ldi	r22, 0x7E	; 126
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
     aa6:	88 e8       	ldi	r24, 0x88	; 136
     aa8:	98 e0       	ldi	r25, 0x08	; 8
     aaa:	61 2f       	mov	r22, r17
     aac:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if ((modifiersDown & code) > 0) {
     ab0:	60 91 3a 08 	lds	r22, 0x083A
     ab4:	81 2f       	mov	r24, r17
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	26 2f       	mov	r18, r22
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	82 23       	and	r24, r18
     abe:	93 23       	and	r25, r19
     ac0:	18 16       	cp	r1, r24
     ac2:	19 06       	cpc	r1, r25
     ac4:	5c f4       	brge	.+22     	; 0xadc <_Z10modifieruph+0x46>
        modifiersDown -= code;
     ac6:	61 1b       	sub	r22, r17
     ac8:	60 93 3a 08 	sts	0x083A, r22
        #ifdef ENABLE_USB
            Keyboard.set_modifier(modifiersDown);
     acc:	80 eb       	ldi	r24, 0xB0	; 176
     ace:	98 e0       	ldi	r25, 0x08	; 8
     ad0:	0e 94 19 29 	call	0x5232	; 0x5232 <_ZN11USBKeyboard12set_modifierEh>
            Keyboard.send_now();
     ad4:	80 eb       	ldi	r24, 0xB0	; 176
     ad6:	98 e0       	ldi	r25, 0x08	; 8
     ad8:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN11USBKeyboard8send_nowEv>
        #ifdef ENABLE_RX400
            RX400.set_modifier(modifiersDown);
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
}
     adc:	1f 91       	pop	r17
     ade:	08 95       	ret

00000ae0 <_ZL15deactivate_modeh>:
            break;
    }
}
 
static void deactivate_mode(uint8_t mode) {
    switch (mode) {
     ae0:	84 30       	cpi	r24, 0x04	; 4
     ae2:	11 f4       	brne	.+4      	; 0xae8 <_ZL15deactivate_modeh+0x8>
        case KMODE_GUI:
            modifierup(MODIFIERKEY_GUI);
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	d7 cf       	rjmp	.-82     	; 0xa96 <_Z10modifieruph>
     ae8:	08 95       	ret

00000aea <_Z12modifierdownh>:
    keydown(code);
    delay(5);
    keyup(code);
}

void modifierdown(uint8_t code) {
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	f8 2e       	mov	r15, r24
    DEBUG_PRN_TOUCHSET("touchset modifierdown ");
     af2:	08 e8       	ldi	r16, 0x88	; 136
     af4:	18 e0       	ldi	r17, 0x08	; 8
     af6:	c8 01       	movw	r24, r16
     af8:	63 e9       	ldi	r22, 0x93	; 147
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
     b00:	c8 01       	movw	r24, r16
     b02:	6f 2d       	mov	r22, r15
     b04:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    modifiersDown = modifiersDown | code;
     b08:	60 91 3a 08 	lds	r22, 0x083A
     b0c:	6f 29       	or	r22, r15
     b0e:	60 93 3a 08 	sts	0x083A, r22
    #ifdef ENABLE_USB
        Keyboard.set_modifier(modifiersDown);
     b12:	00 eb       	ldi	r16, 0xB0	; 176
     b14:	18 e0       	ldi	r17, 0x08	; 8
     b16:	c8 01       	movw	r24, r16
     b18:	0e 94 19 29 	call	0x5232	; 0x5232 <_ZN11USBKeyboard12set_modifierEh>
        Keyboard.send_now();
     b1c:	c8 01       	movw	r24, r16
     b1e:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN11USBKeyboard8send_nowEv>
    #endif /* ENABLE_USB */
    #ifdef ENABLE_RX400       
        RX400.set_modifier(modifiersDown);
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	08 95       	ret

00000b2a <_Z13modifierpressh>:
    } else {
        modifierdown(code);
    }
}

void modifierpress(uint8_t code) {
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	f8 2e       	mov	r15, r24
    DEBUG_PRN_TOUCHSET("touchset modifierpress ");
     b32:	08 e8       	ldi	r16, 0x88	; 136
     b34:	18 e0       	ldi	r17, 0x08	; 8
     b36:	c8 01       	movw	r24, r16
     b38:	6a ea       	ldi	r22, 0xAA	; 170
     b3a:	71 e0       	ldi	r23, 0x01	; 1
     b3c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
     b40:	c8 01       	movw	r24, r16
     b42:	6f 2d       	mov	r22, r15
     b44:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    modifierdown(code);
     b48:	8f 2d       	mov	r24, r15
     b4a:	cf df       	rcall	.-98     	; 0xaea <_Z12modifierdownh>
    delay(5);
     b4c:	65 e0       	ldi	r22, 0x05	; 5
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    modifierup(code);
     b58:	8f 2d       	mov	r24, r15
     b5a:	9d df       	rcall	.-198    	; 0xa96 <_Z10modifieruph>
}
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	08 95       	ret

00000b64 <_Z14togglemodifierh>:
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
}

void togglemodifier(uint8_t code) {
     b64:	1f 93       	push	r17
     b66:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset modifiertoggle ");
     b68:	88 e8       	ldi	r24, 0x88	; 136
     b6a:	98 e0       	ldi	r25, 0x08	; 8
     b6c:	62 ec       	ldi	r22, 0xC2	; 194
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
     b74:	88 e8       	ldi	r24, 0x88	; 136
     b76:	98 e0       	ldi	r25, 0x08	; 8
     b78:	61 2f       	mov	r22, r17
     b7a:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if ((modifiersDown & code) > 0) {
     b7e:	21 2f       	mov	r18, r17
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	80 91 3a 08 	lds	r24, 0x083A
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	28 23       	and	r18, r24
     b8a:	39 23       	and	r19, r25
     b8c:	12 16       	cp	r1, r18
     b8e:	13 06       	cpc	r1, r19
     b90:	1c f4       	brge	.+6      	; 0xb98 <_Z14togglemodifierh+0x34>
        modifierup(code);
     b92:	81 2f       	mov	r24, r17
     b94:	80 df       	rcall	.-256    	; 0xa96 <_Z10modifieruph>
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <_Z14togglemodifierh+0x38>
    } else {
        modifierdown(code);
     b98:	81 2f       	mov	r24, r17
     b9a:	a7 df       	rcall	.-178    	; 0xaea <_Z12modifierdownh>
    }
}
     b9c:	1f 91       	pop	r17
     b9e:	08 95       	ret

00000ba0 <_ZL13activate_modeh>:
#define KMODE_SYMBOLS 2
#define KMODE_FUNCTIONS 3
#define KMODE_GUI 4
 
static void activate_mode(uint8_t mode) {
    switch (mode) {
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	31 f1       	breq	.+76     	; 0xbf0 <_ZL13activate_modeh+0x50>
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	30 f4       	brcc	.+12     	; 0xbb4 <_ZL13activate_modeh+0x14>
     ba8:	88 23       	and	r24, r24
     baa:	51 f0       	breq	.+20     	; 0xbc0 <_ZL13activate_modeh+0x20>
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <_ZL13activate_modeh+0x12>
     bb0:	4d c0       	rjmp	.+154    	; 0xc4c <_ZL13activate_modeh+0xac>
     bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <_ZL13activate_modeh+0x38>
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	61 f1       	breq	.+88     	; 0xc10 <_ZL13activate_modeh+0x70>
     bb8:	84 30       	cpi	r24, 0x04	; 4
     bba:	09 f0       	breq	.+2      	; 0xbbe <_ZL13activate_modeh+0x1e>
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <_ZL13activate_modeh+0xac>
     bbe:	3a c0       	rjmp	.+116    	; 0xc34 <_ZL13activate_modeh+0x94>
        case KMODE_DEFAULT:
            beep(2000, KG_PIEZO_SHORTBEEP, 1);
     bc0:	80 ed       	ldi	r24, 0xD0	; 208
     bc2:	97 e0       	ldi	r25, 0x07	; 7
     bc4:	63 e0       	ldi	r22, 0x03	; 3
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	d6 de       	rcall	.-596    	; 0x978 <_Z4beepjhj>
            redled(KG_RGB_OFF, 0);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	b1 de       	rcall	.-670    	; 0x936 <_Z6redledhj>
            greenled(KG_RGB_SOLID, 0);
     bd4:	85 e0       	ldi	r24, 0x05	; 5
     bd6:	27 c0       	rjmp	.+78     	; 0xc26 <_ZL13activate_modeh+0x86>
            blueled(KG_RGB_OFF, 0);
            return;
            break;
        case KMODE_NUMBERS:
            beep(2000, KG_PIEZO_SHORTBEEP, 2);
     bd8:	80 ed       	ldi	r24, 0xD0	; 208
     bda:	97 e0       	ldi	r25, 0x07	; 7
     bdc:	63 e0       	ldi	r22, 0x03	; 3
     bde:	42 e0       	ldi	r20, 0x02	; 2
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	ca de       	rcall	.-620    	; 0x978 <_Z4beepjhj>
            redled(KG_RGB_OFF, 0);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	a5 de       	rcall	.-694    	; 0x936 <_Z6redledhj>
            greenled(KG_RGB_OFF, 0);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0b c0       	rjmp	.+22     	; 0xc06 <_ZL13activate_modeh+0x66>
            blueled(KG_RGB_SOLID, 0);
            return;
            break;
        case KMODE_SYMBOLS:
            beep(2000, KG_PIEZO_SHORTBEEP, 3);
     bf0:	80 ed       	ldi	r24, 0xD0	; 208
     bf2:	97 e0       	ldi	r25, 0x07	; 7
     bf4:	63 e0       	ldi	r22, 0x03	; 3
     bf6:	43 e0       	ldi	r20, 0x03	; 3
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	be de       	rcall	.-644    	; 0x978 <_Z4beepjhj>
            redled(KG_RGB_OFF, 0);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	99 de       	rcall	.-718    	; 0x936 <_Z6redledhj>
            greenled(KG_RGB_SOLID, 0);
     c04:	85 e0       	ldi	r24, 0x05	; 5
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	74 de       	rcall	.-792    	; 0x8f4 <_Z8greenledhj>
            blueled(KG_RGB_SOLID, 0);
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <_ZL13activate_modeh+0x8e>
            return;
            break;
        case KMODE_FUNCTIONS:
            beep(2000, KG_PIEZO_SHORTBEEP, 4);
     c10:	80 ed       	ldi	r24, 0xD0	; 208
     c12:	97 e0       	ldi	r25, 0x07	; 7
     c14:	63 e0       	ldi	r22, 0x03	; 3
     c16:	44 e0       	ldi	r20, 0x04	; 4
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	ae de       	rcall	.-676    	; 0x978 <_Z4beepjhj>
            redled(KG_RGB_SOLID, 0);
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	89 de       	rcall	.-750    	; 0x936 <_Z6redledhj>
            greenled(KG_RGB_OFF, 0);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	64 de       	rcall	.-824    	; 0x8f4 <_Z8greenledhj>
            blueled(KG_RGB_OFF, 0);
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	3f ce       	rjmp	.-898    	; 0x8b2 <_Z7blueledhj>
            return;
            break;
        case KMODE_GUI:
            beep(1600, KG_PIEZO_SHORTPULSE, 1);
     c34:	80 e4       	ldi	r24, 0x40	; 64
     c36:	96 e0       	ldi	r25, 0x06	; 6
     c38:	64 e0       	ldi	r22, 0x04	; 4
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	9c de       	rcall	.-712    	; 0x978 <_Z4beepjhj>
            greenled(KG_RGB_SHORTBLINK, 0);
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	56 de       	rcall	.-852    	; 0x8f4 <_Z8greenledhj>
            modifierdown(MODIFIERKEY_GUI);
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	4f cf       	rjmp	.-354    	; 0xaea <_Z12modifierdownh>
     c4c:	08 95       	ret

00000c4e <_Z7popmodev>:
        activate_mode(mode);
    }
}

void popmode() {
    DEBUG_PRNL_TOUCHSET("touchset popmode");
     c4e:	88 e8       	ldi	r24, 0x88	; 136
     c50:	98 e0       	ldi	r25, 0x08	; 8
     c52:	6b ed       	ldi	r22, 0xDB	; 219
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	0e 94 00 2c 	call	0x5800	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    if (modeStackPos > 0) deactivate_mode(modeStack[--modeStackPos]);
     c5a:	e0 91 4c 08 	lds	r30, 0x084C
     c5e:	ee 23       	and	r30, r30
     c60:	41 f0       	breq	.+16     	; 0xc72 <_Z7popmodev+0x24>
     c62:	e1 50       	subi	r30, 0x01	; 1
     c64:	e0 93 4c 08 	sts	0x084C, r30
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	ee 5b       	subi	r30, 0xBE	; 190
     c6c:	f7 4f       	sbci	r31, 0xF7	; 247
     c6e:	80 81       	ld	r24, Z
     c70:	37 df       	rcall	.-402    	; 0xae0 <_ZL15deactivate_modeh>
    if (modeStackPos == 0) modeStack[modeStackPos++] = 0;
     c72:	80 91 4c 08 	lds	r24, 0x084C
     c76:	88 23       	and	r24, r24
     c78:	29 f4       	brne	.+10     	; 0xc84 <_Z7popmodev+0x36>
     c7a:	10 92 42 08 	sts	0x0842, r1
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 4c 08 	sts	0x084C, r24
    activate_mode(modeStack[modeStackPos - 1]);
     c84:	e0 91 4c 08 	lds	r30, 0x084C
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ef 5b       	subi	r30, 0xBF	; 191
     c8c:	f7 4f       	sbci	r31, 0xF7	; 247
     c8e:	80 81       	ld	r24, Z
}
     c90:	87 cf       	rjmp	.-242    	; 0xba0 <_ZL13activate_modeh>

00000c92 <_Z8pushmodeh>:
    modeStackPos = 1;
    modeStack[0] = mode;
    activate_mode(mode);
}

void pushmode(uint8_t mode) {
     c92:	1f 93       	push	r17
     c94:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset pushmode ");
     c96:	88 e8       	ldi	r24, 0x88	; 136
     c98:	98 e0       	ldi	r25, 0x08	; 8
     c9a:	6c ee       	ldi	r22, 0xEC	; 236
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(mode);
     ca2:	88 e8       	ldi	r24, 0x88	; 136
     ca4:	98 e0       	ldi	r25, 0x08	; 8
     ca6:	61 2f       	mov	r22, r17
     ca8:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if (modeStackPos < 10) {
     cac:	80 91 4c 08 	lds	r24, 0x084C
     cb0:	8a 30       	cpi	r24, 0x0A	; 10
     cb2:	50 f4       	brcc	.+20     	; 0xcc8 <_Z8pushmodeh+0x36>
        modeStack[modeStackPos] = mode;
     cb4:	e8 2f       	mov	r30, r24
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	ee 5b       	subi	r30, 0xBE	; 190
     cba:	f7 4f       	sbci	r31, 0xF7	; 247
     cbc:	10 83       	st	Z, r17
        modeStackPos++;
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	80 93 4c 08 	sts	0x084C, r24
        activate_mode(mode);
     cc4:	81 2f       	mov	r24, r17
     cc6:	6c df       	rcall	.-296    	; 0xba0 <_ZL13activate_modeh>
    }
}
     cc8:	1f 91       	pop	r17
     cca:	08 95       	ret

00000ccc <_Z10togglemodeh>:
    if (modeStackPos > 0) deactivate_mode(modeStack[--modeStackPos]);
    if (modeStackPos == 0) modeStack[modeStackPos++] = 0;
    activate_mode(modeStack[modeStackPos - 1]);
}

void togglemode(uint8_t mode) {
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	98 2e       	mov	r9, r24
    DEBUG_PRN_TOUCHSET("touchset togglemode ");
     ce4:	88 e8       	ldi	r24, 0x88	; 136
     ce6:	98 e0       	ldi	r25, 0x08	; 8
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(mode);
     cf0:	88 e8       	ldi	r24, 0x88	; 136
     cf2:	98 e0       	ldi	r25, 0x08	; 8
     cf4:	69 2d       	mov	r22, r9
     cf6:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>

    // find the mode and disable it if it's in the stack
    for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
     cfa:	10 92 42 06 	sts	0x0642, r1
     cfe:	10 92 43 06 	sts	0x0643, r1
     d02:	10 92 44 06 	sts	0x0644, r1
     d06:	10 92 45 06 	sts	0x0645, r1
     d0a:	80 91 4c 08 	lds	r24, 0x084C
     d0e:	a8 2e       	mov	r10, r24
     d10:	bb 24       	eor	r11, r11
     d12:	cc 24       	eor	r12, r12
     d14:	dd 24       	eor	r13, r13
     d16:	e2 e4       	ldi	r30, 0x42	; 66
     d18:	f8 e0       	ldi	r31, 0x08	; 8
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	2a 15       	cp	r18, r10
     d24:	3b 05       	cpc	r19, r11
     d26:	4c 05       	cpc	r20, r12
     d28:	5d 05       	cpc	r21, r13
     d2a:	58 f0       	brcs	.+22     	; 0xd42 <_Z10togglemodeh+0x76>
     d2c:	20 93 42 06 	sts	0x0642, r18
     d30:	30 93 43 06 	sts	0x0643, r19
     d34:	40 93 44 06 	sts	0x0644, r20
     d38:	50 93 45 06 	sts	0x0645, r21
        deactivate_mode(mode);
        for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
        modeStackPos--;
    } else {
        // not enabled, so turn it on
        pushmode(mode);
     d3c:	89 2d       	mov	r24, r9
     d3e:	a9 df       	rcall	.-174    	; 0xc92 <_Z8pushmodeh>
     d40:	4b c0       	rjmp	.+150    	; 0xdd8 <_Z10togglemodeh+0x10c>
void togglemode(uint8_t mode) {
    DEBUG_PRN_TOUCHSET("touchset togglemode ");
    DEBUG_PRNL_TOUCHSET(mode);

    // find the mode and disable it if it's in the stack
    for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
     d42:	81 91       	ld	r24, Z+
     d44:	79 01       	movw	r14, r18
     d46:	8a 01       	movw	r16, r20
     d48:	08 94       	sec
     d4a:	e1 1c       	adc	r14, r1
     d4c:	f1 1c       	adc	r15, r1
     d4e:	01 1d       	adc	r16, r1
     d50:	11 1d       	adc	r17, r1
     d52:	89 15       	cp	r24, r9
     d54:	19 f0       	breq	.+6      	; 0xd5c <_Z10togglemodeh+0x90>
     d56:	a8 01       	movw	r20, r16
     d58:	97 01       	movw	r18, r14
     d5a:	e3 cf       	rjmp	.-58     	; 0xd22 <_Z10togglemodeh+0x56>
     d5c:	20 93 42 06 	sts	0x0642, r18
     d60:	30 93 43 06 	sts	0x0643, r19
     d64:	40 93 44 06 	sts	0x0644, r20
     d68:	50 93 45 06 	sts	0x0645, r21
    if (i < modeStackPos) {
        // enabled, so turn it off
        deactivate_mode(mode);
     d6c:	89 2d       	mov	r24, r9
     d6e:	b8 de       	rcall	.-656    	; 0xae0 <_ZL15deactivate_modeh>
        for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
     d70:	80 91 42 06 	lds	r24, 0x0642
     d74:	90 91 43 06 	lds	r25, 0x0643
     d78:	a0 91 44 06 	lds	r26, 0x0644
     d7c:	b0 91 45 06 	lds	r27, 0x0645
     d80:	60 91 4c 08 	lds	r22, 0x084C
     d84:	e6 2e       	mov	r14, r22
     d86:	ff 24       	eor	r15, r15
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	10 e0       	ldi	r17, 0x00	; 0
    if (modeStackPos > 0) deactivate_mode(modeStack[--modeStackPos]);
    if (modeStackPos == 0) modeStack[modeStackPos++] = 0;
    activate_mode(modeStack[modeStackPos - 1]);
}

void togglemode(uint8_t mode) {
     d8c:	ec 01       	movw	r28, r24
     d8e:	ce 5b       	subi	r28, 0xBE	; 190
     d90:	d7 4f       	sbci	r29, 0xF7	; 247
     d92:	9c 01       	movw	r18, r24
     d94:	ad 01       	movw	r20, r26
     d96:	2f 5f       	subi	r18, 0xFF	; 255
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	4f 4f       	sbci	r20, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    // find the mode and disable it if it's in the stack
    for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
    if (i < modeStackPos) {
        // enabled, so turn it off
        deactivate_mode(mode);
        for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
     d9e:	d9 01       	movw	r26, r18
     da0:	a8 1b       	sub	r26, r24
     da2:	b9 0b       	sbc	r27, r25
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <_Z10togglemodeh+0xec>
     da6:	fd 01       	movw	r30, r26
     da8:	ec 0f       	add	r30, r28
     daa:	fd 1f       	adc	r31, r29
     dac:	80 81       	ld	r24, Z
     dae:	89 93       	st	Y+, r24
     db0:	2f 5f       	subi	r18, 0xFF	; 255
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
     db4:	4f 4f       	sbci	r20, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	2e 15       	cp	r18, r14
     dba:	3f 05       	cpc	r19, r15
     dbc:	40 07       	cpc	r20, r16
     dbe:	51 07       	cpc	r21, r17
     dc0:	90 f3       	brcs	.-28     	; 0xda6 <_Z10togglemodeh+0xda>
     dc2:	20 93 42 06 	sts	0x0642, r18
     dc6:	30 93 43 06 	sts	0x0643, r19
     dca:	40 93 44 06 	sts	0x0644, r20
     dce:	50 93 45 06 	sts	0x0645, r21
        modeStackPos--;
     dd2:	61 50       	subi	r22, 0x01	; 1
     dd4:	60 93 4c 08 	sts	0x084C, r22
    } else {
        // not enabled, so turn it on
        pushmode(mode);
    }
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	08 95       	ret

00000df0 <_Z7setmodeh>:
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
}

void setmode(uint8_t mode) {
     df0:	1f 93       	push	r17
     df2:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset setmode ");
     df4:	88 e8       	ldi	r24, 0x88	; 136
     df6:	98 e0       	ldi	r25, 0x08	; 8
     df8:	64 e1       	ldi	r22, 0x14	; 20
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(mode);
     e00:	88 e8       	ldi	r24, 0x88	; 136
     e02:	98 e0       	ldi	r25, 0x08	; 8
     e04:	61 2f       	mov	r22, r17
     e06:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <_Z7setmodeh+0x30>
    for (; modeStackPos > 0; modeStackPos--) deactivate_mode(modeStack[modeStackPos - 1]);
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ef 5b       	subi	r30, 0xBF	; 191
     e10:	f7 4f       	sbci	r31, 0xF7	; 247
     e12:	80 81       	ld	r24, Z
     e14:	65 de       	rcall	.-822    	; 0xae0 <_ZL15deactivate_modeh>
     e16:	80 91 4c 08 	lds	r24, 0x084C
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	80 93 4c 08 	sts	0x084C, r24
     e20:	e0 91 4c 08 	lds	r30, 0x084C
     e24:	ee 23       	and	r30, r30
     e26:	91 f7       	brne	.-28     	; 0xe0c <_Z7setmodeh+0x1c>
    modeStackPos = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 4c 08 	sts	0x084C, r24
    modeStack[0] = mode;
     e2e:	10 93 42 08 	sts	0x0842, r17
    activate_mode(mode);
     e32:	81 2f       	mov	r24, r17
     e34:	b5 de       	rcall	.-662    	; 0xba0 <_ZL13activate_modeh>
}
     e36:	1f 91       	pop	r17
     e38:	08 95       	ret

00000e3a <_Z11setup_touchv>:
uint32_t verify1, verify2;
uint32_t sensors1, sensors2;
uint8_t mode;

void setup_touch() {
    detect1 = detect2 = 0;
     e3a:	10 92 57 08 	sts	0x0857, r1
     e3e:	10 92 58 08 	sts	0x0858, r1
     e42:	10 92 59 08 	sts	0x0859, r1
     e46:	10 92 5a 08 	sts	0x085A, r1
     e4a:	10 92 53 08 	sts	0x0853, r1
     e4e:	10 92 54 08 	sts	0x0854, r1
     e52:	10 92 55 08 	sts	0x0855, r1
     e56:	10 92 56 08 	sts	0x0856, r1
    verify1 = verify2 = 0;
     e5a:	10 92 5f 08 	sts	0x085F, r1
     e5e:	10 92 60 08 	sts	0x0860, r1
     e62:	10 92 61 08 	sts	0x0861, r1
     e66:	10 92 62 08 	sts	0x0862, r1
     e6a:	10 92 5b 08 	sts	0x085B, r1
     e6e:	10 92 5c 08 	sts	0x085C, r1
     e72:	10 92 5d 08 	sts	0x085D, r1
     e76:	10 92 5e 08 	sts	0x085E, r1
    sensors1 = sensors2 = 0;
     e7a:	10 92 67 08 	sts	0x0867, r1
     e7e:	10 92 68 08 	sts	0x0868, r1
     e82:	10 92 69 08 	sts	0x0869, r1
     e86:	10 92 6a 08 	sts	0x086A, r1
     e8a:	10 92 63 08 	sts	0x0863, r1
     e8e:	10 92 64 08 	sts	0x0864, r1
     e92:	10 92 65 08 	sts	0x0865, r1
     e96:	10 92 66 08 	sts	0x0866, r1

    // make sure we enable internal pullup resistors
    for (i = 0; i < KG_TOTAL_SENSORS; i++) {
     e9a:	10 92 42 06 	sts	0x0642, r1
     e9e:	10 92 43 06 	sts	0x0643, r1
     ea2:	10 92 44 06 	sts	0x0644, r1
     ea6:	10 92 45 06 	sts	0x0645, r1
     eaa:	24 c0       	rjmp	.+72     	; 0xef4 <_Z11setup_touchv+0xba>
        pinMode(pins[i], INPUT);
     eac:	fc 01       	movw	r30, r24
     eae:	e5 5f       	subi	r30, 0xF5	; 245
     eb0:	fc 4f       	sbci	r31, 0xFC	; 252
     eb2:	80 81       	ld	r24, Z
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
        digitalWrite(pins[i], HIGH);
     eba:	e0 91 42 06 	lds	r30, 0x0642
     ebe:	f0 91 43 06 	lds	r31, 0x0643
     ec2:	e5 5f       	subi	r30, 0xF5	; 245
     ec4:	fc 4f       	sbci	r31, 0xFC	; 252
     ec6:	80 81       	ld	r24, Z
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    detect1 = detect2 = 0;
    verify1 = verify2 = 0;
    sensors1 = sensors2 = 0;

    // make sure we enable internal pullup resistors
    for (i = 0; i < KG_TOTAL_SENSORS; i++) {
     ece:	80 91 42 06 	lds	r24, 0x0642
     ed2:	90 91 43 06 	lds	r25, 0x0643
     ed6:	a0 91 44 06 	lds	r26, 0x0644
     eda:	b0 91 45 06 	lds	r27, 0x0645
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	a1 1d       	adc	r26, r1
     ee2:	b1 1d       	adc	r27, r1
     ee4:	80 93 42 06 	sts	0x0642, r24
     ee8:	90 93 43 06 	sts	0x0643, r25
     eec:	a0 93 44 06 	sts	0x0644, r26
     ef0:	b0 93 45 06 	sts	0x0645, r27
     ef4:	80 91 42 06 	lds	r24, 0x0642
     ef8:	90 91 43 06 	lds	r25, 0x0643
     efc:	a0 91 44 06 	lds	r26, 0x0644
     f00:	b0 91 45 06 	lds	r27, 0x0645
     f04:	82 32       	cpi	r24, 0x22	; 34
     f06:	91 05       	cpc	r25, r1
     f08:	a1 05       	cpc	r26, r1
     f0a:	b1 05       	cpc	r27, r1
     f0c:	78 f2       	brcs	.-98     	; 0xeac <_Z11setup_touchv+0x72>
        pinMode(pins[i], INPUT);
        digitalWrite(pins[i], HIGH);
    }

    mode = 0; // set to base mode, no alt/shift/mouse/prog
     f0e:	10 92 6b 08 	sts	0x086B, r1
    setmode(0); // default touchset mode is always 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
}
     f14:	6d cf       	rjmp	.-294    	; 0xdf0 <_Z7setmodeh>

00000f16 <_Z5keyuph>:
    #ifdef ENABLE_RX400
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}

void keyup(uint8_t code) {
     f16:	1f 93       	push	r17
     f18:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset keyup ");
     f1a:	88 e8       	ldi	r24, 0x88	; 136
     f1c:	98 e0       	ldi	r25, 0x08	; 8
     f1e:	66 e2       	ldi	r22, 0x26	; 38
     f20:	72 e0       	ldi	r23, 0x02	; 2
     f22:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
     f26:	88 e8       	ldi	r24, 0x88	; 136
     f28:	98 e0       	ldi	r25, 0x08	; 8
     f2a:	61 2f       	mov	r22, r17
     f2c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
     f30:	eb e3       	ldi	r30, 0x3B	; 59
     f32:	f8 e0       	ldi	r31, 0x08	; 8
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <_Z5keyuph+0x2c>
    uint8_t usePos = 0;
    for (usePos = 0; usePos < 6 && keysDown[usePos] != code; usePos++);
     f38:	9f 5f       	subi	r25, 0xFF	; 255
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	96 30       	cpi	r25, 0x06	; 6
     f3e:	09 f4       	brne	.+2      	; 0xf42 <_Z5keyuph+0x2c>
     f40:	63 c0       	rjmp	.+198    	; 0x1008 <_Z5keyuph+0xf2>
     f42:	80 81       	ld	r24, Z
     f44:	81 17       	cp	r24, r17
     f46:	c1 f7       	brne	.-16     	; 0xf38 <_Z5keyuph+0x22>
    if (usePos == 6) return; // key not currently down...oops.
    keysDown[usePos] = 0;
     f48:	e9 2f       	mov	r30, r25
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	e5 5c       	subi	r30, 0xC5	; 197
     f4e:	f7 4f       	sbci	r31, 0xF7	; 247
     f50:	10 82       	st	Z, r1
    switch (usePos) {
     f52:	92 30       	cpi	r25, 0x02	; 2
     f54:	31 f1       	breq	.+76     	; 0xfa2 <_Z5keyuph+0x8c>
     f56:	93 30       	cpi	r25, 0x03	; 3
     f58:	30 f4       	brcc	.+12     	; 0xf66 <_Z5keyuph+0x50>
     f5a:	99 23       	and	r25, r25
     f5c:	61 f0       	breq	.+24     	; 0xf76 <_Z5keyuph+0x60>
     f5e:	91 30       	cpi	r25, 0x01	; 1
     f60:	09 f0       	breq	.+2      	; 0xf64 <_Z5keyuph+0x4e>
     f62:	4a c0       	rjmp	.+148    	; 0xff8 <_Z5keyuph+0xe2>
     f64:	13 c0       	rjmp	.+38     	; 0xf8c <_Z5keyuph+0x76>
     f66:	94 30       	cpi	r25, 0x04	; 4
     f68:	91 f1       	breq	.+100    	; 0xfce <_Z5keyuph+0xb8>
     f6a:	94 30       	cpi	r25, 0x04	; 4
     f6c:	28 f1       	brcs	.+74     	; 0xfb8 <_Z5keyuph+0xa2>
     f6e:	95 30       	cpi	r25, 0x05	; 5
     f70:	09 f0       	breq	.+2      	; 0xf74 <_Z5keyuph+0x5e>
     f72:	42 c0       	rjmp	.+132    	; 0xff8 <_Z5keyuph+0xe2>
     f74:	37 c0       	rjmp	.+110    	; 0xfe4 <_Z5keyuph+0xce>
        case 0:
            #ifdef ENABLE_USB
                Keyboard.set_key1(0);
     f76:	80 eb       	ldi	r24, 0xB0	; 176
     f78:	98 e0       	ldi	r25, 0x08	; 8
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	0e 94 1c 29 	call	0x5238	; 0x5238 <_ZN11USBKeyboard8set_key1Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key1(0);
     f80:	85 e5       	ldi	r24, 0x55	; 85
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <_ZN5iWRAP8set_key1Eh>
     f8a:	36 c0       	rjmp	.+108    	; 0xff8 <_Z5keyuph+0xe2>
                RX400.set_key1(0);
            #endif /* ENABLE_RX400 */
            break;
        case 1:
            #ifdef ENABLE_USB
                Keyboard.set_key2(0);
     f8c:	80 eb       	ldi	r24, 0xB0	; 176
     f8e:	98 e0       	ldi	r25, 0x08	; 8
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 1f 29 	call	0x523e	; 0x523e <_ZN11USBKeyboard8set_key2Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key2(0);
     f96:	85 e5       	ldi	r24, 0x55	; 85
     f98:	96 e0       	ldi	r25, 0x06	; 6
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <_ZN5iWRAP8set_key2Eh>
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <_Z5keyuph+0xe2>
                RX400.set_key2(0);
            #endif /* ENABLE_RX400 */
            break;
        case 2:
            #ifdef ENABLE_USB
                Keyboard.set_key3(0);
     fa2:	80 eb       	ldi	r24, 0xB0	; 176
     fa4:	98 e0       	ldi	r25, 0x08	; 8
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN11USBKeyboard8set_key3Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key3(0);
     fac:	85 e5       	ldi	r24, 0x55	; 85
     fae:	96 e0       	ldi	r25, 0x06	; 6
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN5iWRAP8set_key3Eh>
     fb6:	20 c0       	rjmp	.+64     	; 0xff8 <_Z5keyuph+0xe2>
                RX400.set_key3(0);
            #endif /* ENABLE_RX400 */
            break;
        case 3:
            #ifdef ENABLE_USB
                Keyboard.set_key4(0);
     fb8:	80 eb       	ldi	r24, 0xB0	; 176
     fba:	98 e0       	ldi	r25, 0x08	; 8
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	0e 94 25 29 	call	0x524a	; 0x524a <_ZN11USBKeyboard8set_key4Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key4(0);
     fc2:	85 e5       	ldi	r24, 0x55	; 85
     fc4:	96 e0       	ldi	r25, 0x06	; 6
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <_ZN5iWRAP8set_key4Eh>
     fcc:	15 c0       	rjmp	.+42     	; 0xff8 <_Z5keyuph+0xe2>
                RX400.set_key4(0);
            #endif /* ENABLE_RX400 */
            break;
        case 4:
            #ifdef ENABLE_USB
                Keyboard.set_key5(0);
     fce:	80 eb       	ldi	r24, 0xB0	; 176
     fd0:	98 e0       	ldi	r25, 0x08	; 8
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN11USBKeyboard8set_key5Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key5(0);
     fd8:	85 e5       	ldi	r24, 0x55	; 85
     fda:	96 e0       	ldi	r25, 0x06	; 6
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <_ZN5iWRAP8set_key5Eh>
     fe2:	0a c0       	rjmp	.+20     	; 0xff8 <_Z5keyuph+0xe2>
                RX400.set_key5(0);
            #endif /* ENABLE_RX400 */
            break;
        case 5:
            #ifdef ENABLE_USB
                Keyboard.set_key6(0);
     fe4:	80 eb       	ldi	r24, 0xB0	; 176
     fe6:	98 e0       	ldi	r25, 0x08	; 8
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	0e 94 2b 29 	call	0x5256	; 0x5256 <_ZN11USBKeyboard8set_key6Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key6(0);
     fee:	85 e5       	ldi	r24, 0x55	; 85
     ff0:	96 e0       	ldi	r25, 0x06	; 6
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <_ZN5iWRAP8set_key6Eh>
                RX400.set_key6(0);
            #endif /* ENABLE_RX400 */
            break;
    }
    #ifdef ENABLE_USB
        Keyboard.send_now();
     ff8:	80 eb       	ldi	r24, 0xB0	; 176
     ffa:	98 e0       	ldi	r25, 0x08	; 8
     ffc:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN11USBKeyboard8send_nowEv>
    #endif /* ENABLE_USB */
    #ifdef ENABLE_BLUETOOTH
        bluetooth.send_now();
    1000:	85 e5       	ldi	r24, 0x55	; 85
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	0e 94 a3 38 	call	0x7146	; 0x7146 <_ZN5iWRAP8send_nowEv>
    #endif /* ENABLE_BLUETOOTH */
    #ifdef ENABLE_RX400
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}
    1008:	1f 91       	pop	r17
    100a:	08 95       	ret

0000100c <_Z7keydownh>:
    mousedown(button);
    delay(5);
    mouseup(button);
}

void keydown(uint8_t code) {
    100c:	1f 93       	push	r17
    100e:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset keydown ");
    1010:	88 e8       	ldi	r24, 0x88	; 136
    1012:	98 e0       	ldi	r25, 0x08	; 8
    1014:	66 e3       	ldi	r22, 0x36	; 54
    1016:	72 e0       	ldi	r23, 0x02	; 2
    1018:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
    101c:	88 e8       	ldi	r24, 0x88	; 136
    101e:	98 e0       	ldi	r25, 0x08	; 8
    1020:	61 2f       	mov	r22, r17
    1022:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    1026:	eb e3       	ldi	r30, 0x3B	; 59
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <_Z7keydownh+0x2c>
    uint8_t usePos = 0;
    for (usePos = 0; usePos < 6 && keysDown[usePos] != 0; usePos++);
    102e:	9f 5f       	subi	r25, 0xFF	; 255
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	96 30       	cpi	r25, 0x06	; 6
    1034:	09 f4       	brne	.+2      	; 0x1038 <_Z7keydownh+0x2c>
    1036:	63 c0       	rjmp	.+198    	; 0x10fe <_Z7keydownh+0xf2>
    1038:	80 81       	ld	r24, Z
    103a:	88 23       	and	r24, r24
    103c:	c1 f7       	brne	.-16     	; 0x102e <_Z7keydownh+0x22>
    if (usePos == 6) return; // out of HID keyboard buffer space, REALLY weird for the Keyglove!
    keysDown[usePos] = code;
    103e:	e9 2f       	mov	r30, r25
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	e5 5c       	subi	r30, 0xC5	; 197
    1044:	f7 4f       	sbci	r31, 0xF7	; 247
    1046:	10 83       	st	Z, r17
    switch (usePos) {
    1048:	92 30       	cpi	r25, 0x02	; 2
    104a:	31 f1       	breq	.+76     	; 0x1098 <_Z7keydownh+0x8c>
    104c:	93 30       	cpi	r25, 0x03	; 3
    104e:	30 f4       	brcc	.+12     	; 0x105c <_Z7keydownh+0x50>
    1050:	99 23       	and	r25, r25
    1052:	61 f0       	breq	.+24     	; 0x106c <_Z7keydownh+0x60>
    1054:	91 30       	cpi	r25, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <_Z7keydownh+0x4e>
    1058:	4a c0       	rjmp	.+148    	; 0x10ee <_Z7keydownh+0xe2>
    105a:	13 c0       	rjmp	.+38     	; 0x1082 <_Z7keydownh+0x76>
    105c:	94 30       	cpi	r25, 0x04	; 4
    105e:	91 f1       	breq	.+100    	; 0x10c4 <_Z7keydownh+0xb8>
    1060:	94 30       	cpi	r25, 0x04	; 4
    1062:	28 f1       	brcs	.+74     	; 0x10ae <_Z7keydownh+0xa2>
    1064:	95 30       	cpi	r25, 0x05	; 5
    1066:	09 f0       	breq	.+2      	; 0x106a <_Z7keydownh+0x5e>
    1068:	42 c0       	rjmp	.+132    	; 0x10ee <_Z7keydownh+0xe2>
    106a:	37 c0       	rjmp	.+110    	; 0x10da <_Z7keydownh+0xce>
        case 0:
            #ifdef ENABLE_USB
                Keyboard.set_key1(code);
    106c:	80 eb       	ldi	r24, 0xB0	; 176
    106e:	98 e0       	ldi	r25, 0x08	; 8
    1070:	61 2f       	mov	r22, r17
    1072:	0e 94 1c 29 	call	0x5238	; 0x5238 <_ZN11USBKeyboard8set_key1Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key1(code);
    1076:	85 e5       	ldi	r24, 0x55	; 85
    1078:	96 e0       	ldi	r25, 0x06	; 6
    107a:	61 2f       	mov	r22, r17
    107c:	0e 94 ae 37 	call	0x6f5c	; 0x6f5c <_ZN5iWRAP8set_key1Eh>
    1080:	36 c0       	rjmp	.+108    	; 0x10ee <_Z7keydownh+0xe2>
                RX400.set_key1(code);
            #endif /* ENABLE_RX400 */
            break;
        case 1:
            #ifdef ENABLE_USB
                Keyboard.set_key2(code);
    1082:	80 eb       	ldi	r24, 0xB0	; 176
    1084:	98 e0       	ldi	r25, 0x08	; 8
    1086:	61 2f       	mov	r22, r17
    1088:	0e 94 1f 29 	call	0x523e	; 0x523e <_ZN11USBKeyboard8set_key2Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key2(code);
    108c:	85 e5       	ldi	r24, 0x55	; 85
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	61 2f       	mov	r22, r17
    1092:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <_ZN5iWRAP8set_key2Eh>
    1096:	2b c0       	rjmp	.+86     	; 0x10ee <_Z7keydownh+0xe2>
                RX400.set_key2(code);
            #endif /* ENABLE_RX400 */
            break;
        case 2:
            #ifdef ENABLE_USB
                Keyboard.set_key3(code);
    1098:	80 eb       	ldi	r24, 0xB0	; 176
    109a:	98 e0       	ldi	r25, 0x08	; 8
    109c:	61 2f       	mov	r22, r17
    109e:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN11USBKeyboard8set_key3Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key3(code);
    10a2:	85 e5       	ldi	r24, 0x55	; 85
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	61 2f       	mov	r22, r17
    10a8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <_ZN5iWRAP8set_key3Eh>
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <_Z7keydownh+0xe2>
                RX400.set_key3(code);
            #endif /* ENABLE_RX400 */
            break;
        case 3:
            #ifdef ENABLE_USB
                Keyboard.set_key4(code);
    10ae:	80 eb       	ldi	r24, 0xB0	; 176
    10b0:	98 e0       	ldi	r25, 0x08	; 8
    10b2:	61 2f       	mov	r22, r17
    10b4:	0e 94 25 29 	call	0x524a	; 0x524a <_ZN11USBKeyboard8set_key4Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key4(code);
    10b8:	85 e5       	ldi	r24, 0x55	; 85
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	61 2f       	mov	r22, r17
    10be:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <_ZN5iWRAP8set_key4Eh>
    10c2:	15 c0       	rjmp	.+42     	; 0x10ee <_Z7keydownh+0xe2>
                RX400.set_key4(code);
            #endif /* ENABLE_RX400 */
            break;
        case 4:
            #ifdef ENABLE_USB
                Keyboard.set_key5(code);
    10c4:	80 eb       	ldi	r24, 0xB0	; 176
    10c6:	98 e0       	ldi	r25, 0x08	; 8
    10c8:	61 2f       	mov	r22, r17
    10ca:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN11USBKeyboard8set_key5Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key5(code);
    10ce:	85 e5       	ldi	r24, 0x55	; 85
    10d0:	96 e0       	ldi	r25, 0x06	; 6
    10d2:	61 2f       	mov	r22, r17
    10d4:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <_ZN5iWRAP8set_key5Eh>
    10d8:	0a c0       	rjmp	.+20     	; 0x10ee <_Z7keydownh+0xe2>
                RX400.set_key5(code);
            #endif /* ENABLE_RX400 */
            break;
        case 5:
            #ifdef ENABLE_USB
                Keyboard.set_key6(code);
    10da:	80 eb       	ldi	r24, 0xB0	; 176
    10dc:	98 e0       	ldi	r25, 0x08	; 8
    10de:	61 2f       	mov	r22, r17
    10e0:	0e 94 2b 29 	call	0x5256	; 0x5256 <_ZN11USBKeyboard8set_key6Eh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_BLUETOOTH
                bluetooth.set_key6(code);
    10e4:	85 e5       	ldi	r24, 0x55	; 85
    10e6:	96 e0       	ldi	r25, 0x06	; 6
    10e8:	61 2f       	mov	r22, r17
    10ea:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <_ZN5iWRAP8set_key6Eh>
                RX400.set_key6(code);
            #endif /* ENABLE_RX400 */
            break;
    }
    #ifdef ENABLE_USB
        Keyboard.send_now();
    10ee:	80 eb       	ldi	r24, 0xB0	; 176
    10f0:	98 e0       	ldi	r25, 0x08	; 8
    10f2:	0e 94 a4 2b 	call	0x5748	; 0x5748 <_ZN11USBKeyboard8send_nowEv>
    #endif /* ENABLE_USB */
    #ifdef ENABLE_BLUETOOTH
        bluetooth.send_now();
    10f6:	85 e5       	ldi	r24, 0x55	; 85
    10f8:	96 e0       	ldi	r25, 0x06	; 6
    10fa:	0e 94 a3 38 	call	0x7146	; 0x7146 <_ZN5iWRAP8send_nowEv>
    #endif /* ENABLE_BLUETOOTH */
    #ifdef ENABLE_RX400
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}
    10fe:	1f 91       	pop	r17
    1100:	08 95       	ret

00001102 <_Z8keypressh>:
    #ifdef ENABLE_RX400
        RX400.send_now();
    #endif /* ENABLE_RX400 */
}

void keypress(uint8_t code) {
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	f8 2e       	mov	r15, r24
    DEBUG_PRN_TOUCHSET("touchset keypress ");
    110a:	08 e8       	ldi	r16, 0x88	; 136
    110c:	18 e0       	ldi	r17, 0x08	; 8
    110e:	c8 01       	movw	r24, r16
    1110:	68 e4       	ldi	r22, 0x48	; 72
    1112:	72 e0       	ldi	r23, 0x02	; 2
    1114:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(code);
    1118:	c8 01       	movw	r24, r16
    111a:	6f 2d       	mov	r22, r15
    111c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    keydown(code);
    1120:	8f 2d       	mov	r24, r15
    1122:	74 df       	rcall	.-280    	; 0x100c <_Z7keydownh>
    delay(5);
    1124:	65 e0       	ldi	r22, 0x05	; 5
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    keyup(code);
    1130:	8f 2d       	mov	r24, r15
    1132:	f1 de       	rcall	.-542    	; 0xf16 <_Z5keyuph>
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	08 95       	ret

0000113c <_Z7mouseuph>:
    #ifdef ENABLE_RX400
        RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    #endif /* ENABLE_RX400 */
}

void mouseup(uint8_t button) {
    113c:	1f 93       	push	r17
    113e:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset mouseup ");
    1140:	88 e8       	ldi	r24, 0x88	; 136
    1142:	98 e0       	ldi	r25, 0x08	; 8
    1144:	6b e5       	ldi	r22, 0x5B	; 91
    1146:	72 e0       	ldi	r23, 0x02	; 2
    1148:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(button);
    114c:	88 e8       	ldi	r24, 0x88	; 136
    114e:	98 e0       	ldi	r25, 0x08	; 8
    1150:	61 2f       	mov	r22, r17
    1152:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    if ((mouseDown & button) > 0) {
    1156:	60 91 41 08 	lds	r22, 0x0841
    115a:	81 2f       	mov	r24, r17
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	26 2f       	mov	r18, r22
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	82 23       	and	r24, r18
    1164:	93 23       	and	r25, r19
    1166:	18 16       	cp	r1, r24
    1168:	19 06       	cpc	r1, r25
    116a:	a4 f4       	brge	.+40     	; 0x1194 <_Z7mouseuph+0x58>
        mouseDown -= button;
    116c:	86 2f       	mov	r24, r22
    116e:	81 1b       	sub	r24, r17
    1170:	80 93 41 08 	sts	0x0841, r24
        #ifdef ENABLE_USB
            Mouse.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	80 fd       	sbrc	r24, 0
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	36 95       	lsr	r19
    1180:	27 95       	ror	r18
    1182:	42 2f       	mov	r20, r18
    1184:	41 70       	andi	r20, 0x01	; 1
    1186:	36 95       	lsr	r19
    1188:	27 95       	ror	r18
    118a:	21 70       	andi	r18, 0x01	; 1
    118c:	88 ea       	ldi	r24, 0xA8	; 168
    118e:	98 e0       	ldi	r25, 0x08	; 8
    1190:	0e 94 c1 2b 	call	0x5782	; 0x5782 <_ZN8USBMouse11set_buttonsEhhh>
        #endif /* ENABLE_USB */
        #ifdef ENABLE_RX400
            RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
        #endif /* ENABLE_RX400 */
    }
}
    1194:	1f 91       	pop	r17
    1196:	08 95       	ret

00001198 <_Z21check_sensors_releasemmh>:
        check_sensors_touch(sensors1, sensors2, pos + 1);
        return;
    }
}
 
void check_sensors_release(uint32_t sensors1, uint32_t sensors2, uint8_t pos) {
    1198:	4f 92       	push	r4
    119a:	5f 92       	push	r5
    119c:	6f 92       	push	r6
    119e:	7f 92       	push	r7
    11a0:	8f 92       	push	r8
    11a2:	9f 92       	push	r9
    11a4:	af 92       	push	r10
    11a6:	bf 92       	push	r11
    11a8:	cf 92       	push	r12
    11aa:	df 92       	push	r13
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	cc 55       	subi	r28, 0x5C	; 92
    11be:	d0 40       	sbci	r29, 0x00	; 0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	6b 01       	movw	r12, r22
    11cc:	7c 01       	movw	r14, r24
    11ce:	ba 01       	movw	r22, r20
    11d0:	a9 01       	movw	r20, r18
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    11d2:	10 91 4c 08 	lds	r17, 0x084C
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    11d6:	21 2f       	mov	r18, r17
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    if ((sensors1 & KS1_Y7) == KS1_Y7 && (sensors2 & KS2_Y7) == KS2_Y7) {
    11da:	d7 01       	movw	r26, r14
    11dc:	c6 01       	movw	r24, r12
    11de:	82 70       	andi	r24, 0x02	; 2
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	a0 70       	andi	r26, 0x00	; 0
    11e4:	b0 70       	andi	r27, 0x00	; 0
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	ab 83       	std	Y+3, r26	; 0x03
    11ec:	bc 83       	std	Y+4, r27	; 0x04
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_JY) == KS1_JY && (sensors2 & KS2_JY) == KS2_JY) {
    11ee:	d7 01       	movw	r26, r14
    11f0:	c6 01       	movw	r24, r12
    11f2:	88 70       	andi	r24, 0x08	; 8
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	a0 70       	andi	r26, 0x00	; 0
    11f8:	b0 70       	andi	r27, 0x00	; 0
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	af 83       	std	Y+7, r26	; 0x07
    1200:	b8 87       	std	Y+8, r27	; 0x08
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_KY) == KS1_KY && (sensors2 & KS2_KY) == KS2_KY) {
    1202:	d7 01       	movw	r26, r14
    1204:	c6 01       	movw	r24, r12
    1206:	80 71       	andi	r24, 0x10	; 16
    1208:	90 70       	andi	r25, 0x00	; 0
    120a:	a0 70       	andi	r26, 0x00	; 0
    120c:	b0 70       	andi	r27, 0x00	; 0
    120e:	89 87       	std	Y+9, r24	; 0x09
    1210:	9a 87       	std	Y+10, r25	; 0x0a
    1212:	ab 87       	std	Y+11, r26	; 0x0b
    1214:	bc 87       	std	Y+12, r27	; 0x0c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    1216:	d7 01       	movw	r26, r14
    1218:	c6 01       	movw	r24, r12
    121a:	80 72       	andi	r24, 0x20	; 32
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	a0 70       	andi	r26, 0x00	; 0
    1220:	b0 70       	andi	r27, 0x00	; 0
    1222:	8d 87       	std	Y+13, r24	; 0x0d
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    1224:	9e 87       	std	Y+14, r25	; 0x0e
    1226:	af 87       	std	Y+15, r26	; 0x0f
    1228:	b8 8b       	std	Y+16, r27	; 0x10
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    122a:	d7 01       	movw	r26, r14
    122c:	c6 01       	movw	r24, r12
    122e:	80 74       	andi	r24, 0x40	; 64
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	a0 70       	andi	r26, 0x00	; 0
    1234:	b0 70       	andi	r27, 0x00	; 0
    1236:	89 8b       	std	Y+17, r24	; 0x11
    1238:	9a 8b       	std	Y+18, r25	; 0x12
    123a:	ab 8b       	std	Y+19, r26	; 0x13
    123c:	bc 8b       	std	Y+20, r27	; 0x14
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_WY) == KS1_WY && (sensors2 & KS2_WY) == KS2_WY) {
    123e:	d7 01       	movw	r26, r14
    1240:	c6 01       	movw	r24, r12
    1242:	80 70       	andi	r24, 0x00	; 0
    1244:	91 70       	andi	r25, 0x01	; 1
    1246:	a0 70       	andi	r26, 0x00	; 0
    1248:	b0 70       	andi	r27, 0x00	; 0
    124a:	8d 8b       	std	Y+21, r24	; 0x15
    124c:	9e 8b       	std	Y+22, r25	; 0x16
    124e:	af 8b       	std	Y+23, r26	; 0x17
    1250:	b8 8f       	std	Y+24, r27	; 0x18
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_XY) == KS1_XY && (sensors2 & KS2_XY) == KS2_XY) {
    1252:	d7 01       	movw	r26, r14
    1254:	c6 01       	movw	r24, r12
    1256:	80 70       	andi	r24, 0x00	; 0
    1258:	92 70       	andi	r25, 0x02	; 2
    125a:	a0 70       	andi	r26, 0x00	; 0
    125c:	b0 70       	andi	r27, 0x00	; 0
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	9a 8f       	std	Y+26, r25	; 0x1a
    1262:	ab 8f       	std	Y+27, r26	; 0x1b
    1264:	bc 8f       	std	Y+28, r27	; 0x1c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_Y6) == KS1_Y6 && (sensors2 & KS2_Y6) == KS2_Y6) {
    1266:	d7 01       	movw	r26, r14
    1268:	c6 01       	movw	r24, r12
    126a:	80 70       	andi	r24, 0x00	; 0
    126c:	98 70       	andi	r25, 0x08	; 8
    126e:	a0 70       	andi	r26, 0x00	; 0
    1270:	b0 70       	andi	r27, 0x00	; 0
    1272:	8d 8f       	std	Y+29, r24	; 0x1d
    1274:	9e 8f       	std	Y+30, r25	; 0x1e
    1276:	af 8f       	std	Y+31, r26	; 0x1f
    1278:	b8 a3       	std	Y+32, r27	; 0x20
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_GY) == KS1_GY && (sensors2 & KS2_GY) == KS2_GY) {
    127a:	d7 01       	movw	r26, r14
    127c:	c6 01       	movw	r24, r12
    127e:	80 70       	andi	r24, 0x00	; 0
    1280:	90 72       	andi	r25, 0x20	; 32
    1282:	a0 70       	andi	r26, 0x00	; 0
    1284:	b0 70       	andi	r27, 0x00	; 0
    1286:	89 a3       	std	Y+33, r24	; 0x21
    1288:	9a a3       	std	Y+34, r25	; 0x22
    128a:	ab a3       	std	Y+35, r26	; 0x23
    128c:	bc a3       	std	Y+36, r27	; 0x24
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_IY) == KS1_IY && (sensors2 & KS2_IY) == KS2_IY) {
    128e:	d7 01       	movw	r26, r14
    1290:	c6 01       	movw	r24, r12
    1292:	80 70       	andi	r24, 0x00	; 0
    1294:	90 74       	andi	r25, 0x40	; 64
    1296:	a0 70       	andi	r26, 0x00	; 0
    1298:	b0 70       	andi	r27, 0x00	; 0
    129a:	8d a3       	std	Y+37, r24	; 0x25
    129c:	9e a3       	std	Y+38, r25	; 0x26
    129e:	af a3       	std	Y+39, r26	; 0x27
    12a0:	b8 a7       	std	Y+40, r27	; 0x28
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_TY) == KS1_TY && (sensors2 & KS2_TY) == KS2_TY) {
    12a2:	d7 01       	movw	r26, r14
    12a4:	c6 01       	movw	r24, r12
    12a6:	80 70       	andi	r24, 0x00	; 0
    12a8:	90 70       	andi	r25, 0x00	; 0
    12aa:	a1 70       	andi	r26, 0x01	; 1
    12ac:	b0 70       	andi	r27, 0x00	; 0
    12ae:	89 a7       	std	Y+41, r24	; 0x29
    12b0:	9a a7       	std	Y+42, r25	; 0x2a
    12b2:	ab a7       	std	Y+43, r26	; 0x2b
    12b4:	bc a7       	std	Y+44, r27	; 0x2c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_UY) == KS1_UY && (sensors2 & KS2_UY) == KS2_UY) {
    12b6:	d7 01       	movw	r26, r14
    12b8:	c6 01       	movw	r24, r12
    12ba:	80 70       	andi	r24, 0x00	; 0
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	a2 70       	andi	r26, 0x02	; 2
    12c0:	b0 70       	andi	r27, 0x00	; 0
    12c2:	8d a7       	std	Y+45, r24	; 0x2d
    12c4:	9e a7       	std	Y+46, r25	; 0x2e
    12c6:	af a7       	std	Y+47, r26	; 0x2f
    12c8:	b8 ab       	std	Y+48, r27	; 0x30
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_Y5) == KS1_Y5 && (sensors2 & KS2_Y5) == KS2_Y5 && modeCheck(KMODE_DEFAULT, pos)) {
    12ca:	d7 01       	movw	r26, r14
    12cc:	c6 01       	movw	r24, r12
    12ce:	80 70       	andi	r24, 0x00	; 0
    12d0:	90 70       	andi	r25, 0x00	; 0
    12d2:	a0 71       	andi	r26, 0x10	; 16
    12d4:	b0 70       	andi	r27, 0x00	; 0
    12d6:	89 ab       	std	Y+49, r24	; 0x31
    12d8:	9a ab       	std	Y+50, r25	; 0x32
    12da:	ab ab       	std	Y+51, r26	; 0x33
    12dc:	bc ab       	std	Y+52, r27	; 0x34
        keypress(KEY_V);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    12de:	d7 01       	movw	r26, r14
    12e0:	c6 01       	movw	r24, r12
    12e2:	80 70       	andi	r24, 0x00	; 0
    12e4:	90 70       	andi	r25, 0x00	; 0
    12e6:	a0 72       	andi	r26, 0x20	; 32
    12e8:	b0 70       	andi	r27, 0x00	; 0
    12ea:	8d ab       	std	Y+53, r24	; 0x35
    12ec:	9e ab       	std	Y+54, r25	; 0x36
    12ee:	af ab       	std	Y+55, r26	; 0x37
    12f0:	b8 af       	std	Y+56, r27	; 0x38
        mouseoff(MOUSE_ACTION_SCROLL);
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
    12f2:	d7 01       	movw	r26, r14
    12f4:	c6 01       	movw	r24, r12
    12f6:	80 70       	andi	r24, 0x00	; 0
    12f8:	90 70       	andi	r25, 0x00	; 0
    12fa:	a0 74       	andi	r26, 0x40	; 64
    12fc:	b0 70       	andi	r27, 0x00	; 0
    12fe:	89 af       	std	Y+57, r24	; 0x39
    1300:	9a af       	std	Y+58, r25	; 0x3a
    1302:	ab af       	std	Y+59, r26	; 0x3b
    1304:	bc af       	std	Y+60, r27	; 0x3c
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_EY) == KS1_EY && (sensors2 & KS2_EY) == KS2_EY) {
    1306:	d7 01       	movw	r26, r14
    1308:	c6 01       	movw	r24, r12
    130a:	80 70       	andi	r24, 0x00	; 0
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	a0 78       	andi	r26, 0x80	; 128
    1310:	b0 70       	andi	r27, 0x00	; 0
    1312:	21 96       	adiw	r28, 0x01	; 1
    1314:	8c af       	std	Y+60, r24	; 0x3c
    1316:	9d af       	std	Y+61, r25	; 0x3d
    1318:	ae af       	std	Y+62, r26	; 0x3e
    131a:	bf af       	std	Y+63, r27	; 0x3f
    131c:	21 97       	sbiw	r28, 0x01	; 1
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_FY) == KS1_FY && (sensors2 & KS2_FY) == KS2_FY) {
    131e:	d7 01       	movw	r26, r14
    1320:	c6 01       	movw	r24, r12
    1322:	80 70       	andi	r24, 0x00	; 0
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	a0 70       	andi	r26, 0x00	; 0
    1328:	b1 70       	andi	r27, 0x01	; 1
    132a:	25 96       	adiw	r28, 0x05	; 5
    132c:	8c af       	std	Y+60, r24	; 0x3c
    132e:	9d af       	std	Y+61, r25	; 0x3d
    1330:	ae af       	std	Y+62, r26	; 0x3e
    1332:	bf af       	std	Y+63, r27	; 0x3f
    1334:	25 97       	sbiw	r28, 0x05	; 5
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_PY) == KS1_PY && (sensors2 & KS2_PY) == KS2_PY) {
    1336:	d7 01       	movw	r26, r14
    1338:	c6 01       	movw	r24, r12
    133a:	80 70       	andi	r24, 0x00	; 0
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	a0 70       	andi	r26, 0x00	; 0
    1340:	b4 70       	andi	r27, 0x04	; 4
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	8c af       	std	Y+60, r24	; 0x3c
    1346:	9d af       	std	Y+61, r25	; 0x3d
    1348:	ae af       	std	Y+62, r26	; 0x3e
    134a:	bf af       	std	Y+63, r27	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_QY) == KS1_QY && (sensors2 & KS2_QY) == KS2_QY) {
    134e:	d7 01       	movw	r26, r14
    1350:	c6 01       	movw	r24, r12
    1352:	80 70       	andi	r24, 0x00	; 0
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	a0 70       	andi	r26, 0x00	; 0
    1358:	b0 71       	andi	r27, 0x10	; 16
    135a:	2d 96       	adiw	r28, 0x0d	; 13
    135c:	8c af       	std	Y+60, r24	; 0x3c
    135e:	9d af       	std	Y+61, r25	; 0x3d
    1360:	ae af       	std	Y+62, r26	; 0x3e
    1362:	bf af       	std	Y+63, r27	; 0x3f
    1364:	2d 97       	sbiw	r28, 0x0d	; 13
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_RY) == KS1_RY && (sensors2 & KS2_RY) == KS2_RY) {
    1366:	d7 01       	movw	r26, r14
    1368:	c6 01       	movw	r24, r12
    136a:	80 70       	andi	r24, 0x00	; 0
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	a0 70       	andi	r26, 0x00	; 0
    1370:	b0 74       	andi	r27, 0x40	; 64
    1372:	61 96       	adiw	r28, 0x11	; 17
    1374:	8c af       	std	Y+60, r24	; 0x3c
    1376:	9d af       	std	Y+61, r25	; 0x3d
    1378:	ae af       	std	Y+62, r26	; 0x3e
    137a:	bf af       	std	Y+63, r27	; 0x3f
    137c:	61 97       	sbiw	r28, 0x11	; 17
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_Y4) == KS1_Y4 && (sensors2 & KS2_Y4) == KS2_Y4 && modeCheck(KMODE_DEFAULT, pos)) {
    137e:	db 01       	movw	r26, r22
    1380:	ca 01       	movw	r24, r20
    1382:	80 71       	andi	r24, 0x10	; 16
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	a0 70       	andi	r26, 0x00	; 0
    1388:	b0 70       	andi	r27, 0x00	; 0
    138a:	65 96       	adiw	r28, 0x15	; 21
    138c:	8c af       	std	Y+60, r24	; 0x3c
    138e:	9d af       	std	Y+61, r25	; 0x3d
    1390:	ae af       	std	Y+62, r26	; 0x3e
    1392:	bf af       	std	Y+63, r27	; 0x3f
    1394:	65 97       	sbiw	r28, 0x15	; 21
        keypress(KEY_J);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    1396:	db 01       	movw	r26, r22
    1398:	ca 01       	movw	r24, r20
    139a:	80 72       	andi	r24, 0x20	; 32
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	a0 70       	andi	r26, 0x00	; 0
    13a0:	b0 70       	andi	r27, 0x00	; 0
    13a2:	69 96       	adiw	r28, 0x19	; 25
    13a4:	8c af       	std	Y+60, r24	; 0x3c
    13a6:	9d af       	std	Y+61, r25	; 0x3d
    13a8:	ae af       	std	Y+62, r26	; 0x3e
    13aa:	bf af       	std	Y+63, r27	; 0x3f
    13ac:	69 97       	sbiw	r28, 0x19	; 25
        mouseoff(MOUSE_ACTION_MOVE);
        return;
    } else if ((sensors1 & KS1_MY) == KS1_MY && (sensors2 & KS2_MY) == KS2_MY) {
    13ae:	f0 e4       	ldi	r31, 0x40	; 64
    13b0:	8f 2e       	mov	r8, r31
    13b2:	91 2c       	mov	r9, r1
    13b4:	a1 2c       	mov	r10, r1
    13b6:	b1 2c       	mov	r11, r1
    13b8:	84 22       	and	r8, r20
    13ba:	95 22       	and	r9, r21
    13bc:	a6 22       	and	r10, r22
    13be:	b7 22       	and	r11, r23
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_BY) == KS1_BY && (sensors2 & KS2_BY) == KS2_BY) {
    13c0:	41 2c       	mov	r4, r1
    13c2:	e1 e0       	ldi	r30, 0x01	; 1
    13c4:	5e 2e       	mov	r5, r30
    13c6:	61 2c       	mov	r6, r1
    13c8:	71 2c       	mov	r7, r1
    13ca:	44 22       	and	r4, r20
    13cc:	55 22       	and	r5, r21
    13ce:	66 22       	and	r6, r22
    13d0:	77 22       	and	r7, r23
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_CY) == KS1_CY && (sensors2 & KS2_CY) == KS2_CY) {
    13d2:	db 01       	movw	r26, r22
    13d4:	ca 01       	movw	r24, r20
    13d6:	80 70       	andi	r24, 0x00	; 0
    13d8:	92 70       	andi	r25, 0x02	; 2
    13da:	a0 70       	andi	r26, 0x00	; 0
    13dc:	b0 70       	andi	r27, 0x00	; 0
    13de:	6d 96       	adiw	r28, 0x1d	; 29
    13e0:	8c af       	std	Y+60, r24	; 0x3c
    13e2:	9d af       	std	Y+61, r25	; 0x3d
    13e4:	ae af       	std	Y+62, r26	; 0x3e
    13e6:	bf af       	std	Y+63, r27	; 0x3f
    13e8:	6d 97       	sbiw	r28, 0x1d	; 29
        return;
    }
}
 
void check_sensors_release(uint32_t sensors1, uint32_t sensors2, uint8_t pos) {
    if ((sensors1 & KS1_Y7) == KS1_Y7 && (sensors2 & KS2_Y7) == KS2_Y7) {
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	ab 81       	ldd	r26, Y+3	; 0x03
    13f0:	bc 81       	ldd	r27, Y+4	; 0x04
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	a1 05       	cpc	r26, r1
    13f6:	b1 05       	cpc	r27, r1
    13f8:	41 f1       	breq	.+80     	; 0x144a <_Z21check_sensors_releasemmh+0x2b2>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    13fa:	10 17       	cp	r17, r16
    13fc:	10 f4       	brcc	.+4      	; 0x1402 <_Z21check_sensors_releasemmh+0x26a>
    13fe:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1402:	f9 01       	movw	r30, r18
    1404:	e0 1b       	sub	r30, r16
    1406:	f1 09       	sbc	r31, r1
    1408:	ee 5b       	subi	r30, 0xBE	; 190
    140a:	f7 4f       	sbci	r31, 0xF7	; 247
    140c:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    140e:	ee 23       	and	r30, r30
    1410:	51 f4       	brne	.+20     	; 0x1426 <_Z21check_sensors_releasemmh+0x28e>
            keypress(KEY_PERIOD);
    1412:	87 e3       	ldi	r24, 0x37	; 55
    1414:	76 de       	rcall	.-788    	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	3e db       	rcall	.-2436   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	3c db       	rcall	.-2440   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	3a db       	rcall	.-2444   	; 0xa96 <_Z10modifieruph>
    1422:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1426:	e1 30       	cpi	r30, 0x01	; 1
    1428:	31 f0       	breq	.+12     	; 0x1436 <_Z21check_sensors_releasemmh+0x29e>
    142a:	e2 30       	cpi	r30, 0x02	; 2
    142c:	21 f0       	breq	.+8      	; 0x1436 <_Z21check_sensors_releasemmh+0x29e>
    142e:	e3 30       	cpi	r30, 0x03	; 3
    1430:	11 f0       	breq	.+4      	; 0x1436 <_Z21check_sensors_releasemmh+0x29e>
    1432:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__stack+0x399>
            keypress(KEY_ESC);
    1436:	89 e2       	ldi	r24, 0x29	; 41
    1438:	64 de       	rcall	.-824    	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	2c db       	rcall	.-2472   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	2a db       	rcall	.-2476   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	28 db       	rcall	.-2480   	; 0xa96 <_Z10modifieruph>
    1446:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_JY) == KS1_JY && (sensors2 & KS2_JY) == KS2_JY) {
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	af 81       	ldd	r26, Y+7	; 0x07
    1450:	b8 85       	ldd	r27, Y+8	; 0x08
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	a1 05       	cpc	r26, r1
    1456:	b1 05       	cpc	r27, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <_Z21check_sensors_releasemmh+0x2c4>
    145a:	88 c0       	rjmp	.+272    	; 0x156c <_Z21check_sensors_releasemmh+0x3d4>
        if ((sensors1 & KS1_GJY) == KS1_GJY && (sensors2 & KS2_GJY) == KS2_GJY) {
    145c:	d7 01       	movw	r26, r14
    145e:	c6 01       	movw	r24, r12
    1460:	88 70       	andi	r24, 0x08	; 8
    1462:	90 72       	andi	r25, 0x20	; 32
    1464:	a0 70       	andi	r26, 0x00	; 0
    1466:	b0 70       	andi	r27, 0x00	; 0
    1468:	88 50       	subi	r24, 0x08	; 8
    146a:	90 42       	sbci	r25, 0x20	; 32
    146c:	a0 40       	sbci	r26, 0x00	; 0
    146e:	b0 40       	sbci	r27, 0x00	; 0
    1470:	39 f5       	brne	.+78     	; 0x14c0 <_Z21check_sensors_releasemmh+0x328>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1472:	10 17       	cp	r17, r16
    1474:	10 f4       	brcc	.+4      	; 0x147a <_Z21check_sensors_releasemmh+0x2e2>
    1476:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    147a:	f9 01       	movw	r30, r18
    147c:	e0 1b       	sub	r30, r16
    147e:	f1 09       	sbc	r31, r1
    1480:	ee 5b       	subi	r30, 0xBE	; 190
    1482:	f7 4f       	sbci	r31, 0xF7	; 247
    1484:	e0 81       	ld	r30, Z
            if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1486:	ee 23       	and	r30, r30
    1488:	21 f0       	breq	.+8      	; 0x1492 <_Z21check_sensors_releasemmh+0x2fa>
    148a:	e2 30       	cpi	r30, 0x02	; 2
    148c:	11 f0       	breq	.+4      	; 0x1492 <_Z21check_sensors_releasemmh+0x2fa>
    148e:	e3 30       	cpi	r30, 0x03	; 3
    1490:	51 f4       	brne	.+20     	; 0x14a6 <_Z21check_sensors_releasemmh+0x30e>
                keypress(KEY_ENTER);
    1492:	88 e2       	ldi	r24, 0x28	; 40
    1494:	36 de       	rcall	.-916    	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	fe da       	rcall	.-2564   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	fc da       	rcall	.-2568   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	fa da       	rcall	.-2572   	; 0xa96 <_Z10modifieruph>
    14a2:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    14a6:	e1 30       	cpi	r30, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_Z21check_sensors_releasemmh+0x314>
    14aa:	f6 c7       	rjmp	.+4076   	; 0x2498 <__stack+0x399>
                keypress(KEYPAD_ENTER);
    14ac:	88 e5       	ldi	r24, 0x58	; 88
    14ae:	29 de       	rcall	.-942    	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	f1 da       	rcall	.-2590   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	ef da       	rcall	.-2594   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	ed da       	rcall	.-2598   	; 0xa96 <_Z10modifieruph>
    14bc:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
                return;
             }
        } else if ((sensors1 & KS1_AJY) == KS1_AJY && (sensors2 & KS2_AJY) == KS2_AJY && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    14c0:	47 fd       	sbrc	r20, 7
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <_Z21check_sensors_releasemmh+0x330>
    14c4:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__stack+0x3c9>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    14c8:	10 17       	cp	r17, r16
    14ca:	10 f4       	brcc	.+4      	; 0x14d0 <_Z21check_sensors_releasemmh+0x338>
    14cc:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    14d0:	f9 01       	movw	r30, r18
    14d2:	e0 1b       	sub	r30, r16
    14d4:	f1 09       	sbc	r31, r1
    14d6:	ee 5b       	subi	r30, 0xBE	; 190
    14d8:	f7 4f       	sbci	r31, 0xF7	; 247
    14da:	e0 81       	ld	r30, Z
    14dc:	ee 23       	and	r30, r30
    14de:	31 f0       	breq	.+12     	; 0x14ec <_Z21check_sensors_releasemmh+0x354>
    14e0:	e1 30       	cpi	r30, 0x01	; 1
    14e2:	21 f0       	breq	.+8      	; 0x14ec <_Z21check_sensors_releasemmh+0x354>
    14e4:	e2 30       	cpi	r30, 0x02	; 2
    14e6:	11 f0       	breq	.+4      	; 0x14ec <_Z21check_sensors_releasemmh+0x354>
    14e8:	e3 30       	cpi	r30, 0x03	; 3
    14ea:	51 f4       	brne	.+20     	; 0x1500 <_Z21check_sensors_releasemmh+0x368>
            keypress(KEY_TAB);
    14ec:	8b e2       	ldi	r24, 0x2B	; 43
    14ee:	09 de       	rcall	.-1006   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	d1 da       	rcall	.-2654   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	cf da       	rcall	.-2658   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	cd da       	rcall	.-2662   	; 0xa96 <_Z10modifieruph>
    14fc:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
    1500:	f9 01       	movw	r30, r18
    1502:	e0 1b       	sub	r30, r16
    1504:	f1 09       	sbc	r31, r1
    1506:	ee 5b       	subi	r30, 0xBE	; 190
    1508:	f7 4f       	sbci	r31, 0xF7	; 247
    150a:	e0 81       	ld	r30, Z
            return;
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    150c:	ee 23       	and	r30, r30
    150e:	51 f4       	brne	.+20     	; 0x1524 <_Z21check_sensors_releasemmh+0x38c>
                keypress(KEY_S);
    1510:	86 e1       	ldi	r24, 0x16	; 22
    1512:	f7 dd       	rcall	.-1042   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	bf da       	rcall	.-2690   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	bd da       	rcall	.-2694   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	bb da       	rcall	.-2698   	; 0xa96 <_Z10modifieruph>
    1520:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1524:	e1 30       	cpi	r30, 0x01	; 1
    1526:	59 f4       	brne	.+22     	; 0x153e <_Z21check_sensors_releasemmh+0x3a6>
                modifierdown(MODIFIERKEY_SHIFT);
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	df da       	rcall	.-2626   	; 0xaea <_Z12modifierdownh>
                keypress(KEY_3);
    152c:	80 e2       	ldi	r24, 0x20	; 32
    152e:	e9 dd       	rcall	.-1070   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	b1 da       	rcall	.-2718   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1534:	84 e0       	ldi	r24, 0x04	; 4
    1536:	af da       	rcall	.-2722   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	ad da       	rcall	.-2726   	; 0xa96 <_Z10modifieruph>
    153c:	f9 c7       	rjmp	.+4082   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    153e:	e2 30       	cpi	r30, 0x02	; 2
    1540:	49 f4       	brne	.+18     	; 0x1554 <_Z21check_sensors_releasemmh+0x3bc>
                keypress(KEY_SEMICOLON);
    1542:	83 e3       	ldi	r24, 0x33	; 51
    1544:	de dd       	rcall	.-1092   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	a6 da       	rcall	.-2740   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    154a:	84 e0       	ldi	r24, 0x04	; 4
    154c:	a4 da       	rcall	.-2744   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	a2 da       	rcall	.-2748   	; 0xa96 <_Z10modifieruph>
    1552:	ee c7       	rjmp	.+4060   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1554:	e3 30       	cpi	r30, 0x03	; 3
    1556:	09 f0       	breq	.+2      	; 0x155a <_Z21check_sensors_releasemmh+0x3c2>
    1558:	9f c7       	rjmp	.+3902   	; 0x2498 <__stack+0x399>
                keypress(KEY_F10);
    155a:	83 e4       	ldi	r24, 0x43	; 67
    155c:	d2 dd       	rcall	.-1116   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	9a da       	rcall	.-2764   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	98 da       	rcall	.-2768   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	96 da       	rcall	.-2772   	; 0xa96 <_Z10modifieruph>
    156a:	e2 c7       	rjmp	.+4036   	; 0x2530 <__stack+0x431>
                return;
             }
        }
    } else if ((sensors1 & KS1_KY) == KS1_KY && (sensors2 & KS2_KY) == KS2_KY) {
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	ab 85       	ldd	r26, Y+11	; 0x0b
    1572:	bc 85       	ldd	r27, Y+12	; 0x0c
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	a1 05       	cpc	r26, r1
    1578:	b1 05       	cpc	r27, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <_Z21check_sensors_releasemmh+0x3e6>
    157c:	38 c0       	rjmp	.+112    	; 0x15ee <_Z21check_sensors_releasemmh+0x456>
    157e:	10 17       	cp	r17, r16
    1580:	08 f4       	brcc	.+2      	; 0x1584 <_Z21check_sensors_releasemmh+0x3ec>
    1582:	d6 c7       	rjmp	.+4012   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1584:	f9 01       	movw	r30, r18
    1586:	e0 1b       	sub	r30, r16
    1588:	f1 09       	sbc	r31, r1
    158a:	ee 5b       	subi	r30, 0xBE	; 190
    158c:	f7 4f       	sbci	r31, 0xF7	; 247
    158e:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1590:	ee 23       	and	r30, r30
    1592:	49 f4       	brne	.+18     	; 0x15a6 <_Z21check_sensors_releasemmh+0x40e>
            keypress(KEY_C);
    1594:	86 e0       	ldi	r24, 0x06	; 6
    1596:	b5 dd       	rcall	.-1174   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	7d da       	rcall	.-2822   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	7b da       	rcall	.-2826   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	79 da       	rcall	.-2830   	; 0xa96 <_Z10modifieruph>
    15a4:	c5 c7       	rjmp	.+3978   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    15a6:	e1 30       	cpi	r30, 0x01	; 1
    15a8:	49 f4       	brne	.+18     	; 0x15bc <_Z21check_sensors_releasemmh+0x424>
            keypress(KEY_0);
    15aa:	87 e2       	ldi	r24, 0x27	; 39
    15ac:	aa dd       	rcall	.-1196   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	72 da       	rcall	.-2844   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	70 da       	rcall	.-2848   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	6e da       	rcall	.-2852   	; 0xa96 <_Z10modifieruph>
    15ba:	ba c7       	rjmp	.+3956   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    15bc:	e2 30       	cpi	r30, 0x02	; 2
    15be:	59 f4       	brne	.+22     	; 0x15d6 <_Z21check_sensors_releasemmh+0x43e>
            modifierdown(MODIFIERKEY_SHIFT);
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	93 da       	rcall	.-2778   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_SEMICOLON);
    15c4:	83 e3       	ldi	r24, 0x33	; 51
    15c6:	9d dd       	rcall	.-1222   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	65 da       	rcall	.-2870   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	63 da       	rcall	.-2874   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	61 da       	rcall	.-2878   	; 0xa96 <_Z10modifieruph>
    15d4:	ad c7       	rjmp	.+3930   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    15d6:	e3 30       	cpi	r30, 0x03	; 3
    15d8:	09 f0       	breq	.+2      	; 0x15dc <_Z21check_sensors_releasemmh+0x444>
    15da:	5e c7       	rjmp	.+3772   	; 0x2498 <__stack+0x399>
            keypress(KEY_F11);
    15dc:	84 e4       	ldi	r24, 0x44	; 68
    15de:	91 dd       	rcall	.-1246   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	59 da       	rcall	.-2894   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	57 da       	rcall	.-2898   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	55 da       	rcall	.-2902   	; 0xa96 <_Z10modifieruph>
    15ec:	a1 c7       	rjmp	.+3906   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    15ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f2:	af 85       	ldd	r26, Y+15	; 0x0f
    15f4:	b8 89       	ldd	r27, Y+16	; 0x10
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	a1 05       	cpc	r26, r1
    15fa:	b1 05       	cpc	r27, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <_Z21check_sensors_releasemmh+0x468>
    15fe:	3a c0       	rjmp	.+116    	; 0x1674 <_Z21check_sensors_releasemmh+0x4dc>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1600:	10 17       	cp	r17, r16
    1602:	08 f4       	brcc	.+2      	; 0x1606 <_Z21check_sensors_releasemmh+0x46e>
    1604:	95 c7       	rjmp	.+3882   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1606:	f9 01       	movw	r30, r18
    1608:	e0 1b       	sub	r30, r16
    160a:	f1 09       	sbc	r31, r1
    160c:	ee 5b       	subi	r30, 0xBE	; 190
    160e:	f7 4f       	sbci	r31, 0xF7	; 247
    1610:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1612:	ee 23       	and	r30, r30
    1614:	49 f4       	brne	.+18     	; 0x1628 <_Z21check_sensors_releasemmh+0x490>
            keypress(KEY_P);
    1616:	83 e1       	ldi	r24, 0x13	; 19
    1618:	74 dd       	rcall	.-1304   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	3c da       	rcall	.-2952   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    161e:	84 e0       	ldi	r24, 0x04	; 4
    1620:	3a da       	rcall	.-2956   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	38 da       	rcall	.-2960   	; 0xa96 <_Z10modifieruph>
    1626:	84 c7       	rjmp	.+3848   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1628:	e1 30       	cpi	r30, 0x01	; 1
    162a:	59 f4       	brne	.+22     	; 0x1642 <_Z21check_sensors_releasemmh+0x4aa>
            modifierdown(MODIFIERKEY_SHIFT);
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	5d da       	rcall	.-2886   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_8);
    1630:	85 e2       	ldi	r24, 0x25	; 37
    1632:	67 dd       	rcall	.-1330   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	2f da       	rcall	.-2978   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	2d da       	rcall	.-2982   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	2b da       	rcall	.-2986   	; 0xa96 <_Z10modifieruph>
    1640:	77 c7       	rjmp	.+3822   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1642:	e2 30       	cpi	r30, 0x02	; 2
    1644:	59 f4       	brne	.+22     	; 0x165c <_Z21check_sensors_releasemmh+0x4c4>
            modifierdown(MODIFIERKEY_SHIFT);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	50 da       	rcall	.-2912   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_TILDE);
    164a:	85 e3       	ldi	r24, 0x35	; 53
    164c:	5a dd       	rcall	.-1356   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	22 da       	rcall	.-3004   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	20 da       	rcall	.-3008   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	1e da       	rcall	.-3012   	; 0xa96 <_Z10modifieruph>
    165a:	6a c7       	rjmp	.+3796   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    165c:	e3 30       	cpi	r30, 0x03	; 3
    165e:	09 f0       	breq	.+2      	; 0x1662 <_Z21check_sensors_releasemmh+0x4ca>
    1660:	1b c7       	rjmp	.+3638   	; 0x2498 <__stack+0x399>
            keypress(KEY_F12);
    1662:	85 e4       	ldi	r24, 0x45	; 69
    1664:	4e dd       	rcall	.-1380   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	16 da       	rcall	.-3028   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	14 da       	rcall	.-3032   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	12 da       	rcall	.-3036   	; 0xa96 <_Z10modifieruph>
    1672:	5e c7       	rjmp	.+3772   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    1674:	89 89       	ldd	r24, Y+17	; 0x11
    1676:	9a 89       	ldd	r25, Y+18	; 0x12
    1678:	ab 89       	ldd	r26, Y+19	; 0x13
    167a:	bc 89       	ldd	r27, Y+20	; 0x14
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	a1 05       	cpc	r26, r1
    1680:	b1 05       	cpc	r27, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <_Z21check_sensors_releasemmh+0x4ee>
    1684:	38 c0       	rjmp	.+112    	; 0x16f6 <_Z21check_sensors_releasemmh+0x55e>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1686:	10 17       	cp	r17, r16
    1688:	08 f4       	brcc	.+2      	; 0x168c <_Z21check_sensors_releasemmh+0x4f4>
    168a:	52 c7       	rjmp	.+3748   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    168c:	f9 01       	movw	r30, r18
    168e:	e0 1b       	sub	r30, r16
    1690:	f1 09       	sbc	r31, r1
    1692:	ee 5b       	subi	r30, 0xBE	; 190
    1694:	f7 4f       	sbci	r31, 0xF7	; 247
    1696:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1698:	ee 23       	and	r30, r30
    169a:	49 f4       	brne	.+18     	; 0x16ae <_Z21check_sensors_releasemmh+0x516>
            keypress(KEY_L);
    169c:	8f e0       	ldi	r24, 0x0F	; 15
    169e:	31 dd       	rcall	.-1438   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	f9 d9       	rcall	.-3086   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	f7 d9       	rcall	.-3090   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	f5 d9       	rcall	.-3094   	; 0xa96 <_Z10modifieruph>
    16ac:	41 c7       	rjmp	.+3714   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    16ae:	e1 30       	cpi	r30, 0x01	; 1
    16b0:	49 f4       	brne	.+18     	; 0x16c4 <_Z21check_sensors_releasemmh+0x52c>
            keypress(KEY_8);
    16b2:	85 e2       	ldi	r24, 0x25	; 37
    16b4:	26 dd       	rcall	.-1460   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	ee d9       	rcall	.-3108   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    16ba:	84 e0       	ldi	r24, 0x04	; 4
    16bc:	ec d9       	rcall	.-3112   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	ea d9       	rcall	.-3116   	; 0xa96 <_Z10modifieruph>
    16c2:	36 c7       	rjmp	.+3692   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    16c4:	e2 30       	cpi	r30, 0x02	; 2
    16c6:	59 f4       	brne	.+22     	; 0x16de <_Z21check_sensors_releasemmh+0x546>
            modifierdown(MODIFIERKEY_SHIFT);
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	0f da       	rcall	.-3042   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_PERIOD);
    16cc:	87 e3       	ldi	r24, 0x37	; 55
    16ce:	19 dd       	rcall	.-1486   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	e1 d9       	rcall	.-3134   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	df d9       	rcall	.-3138   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	dd d9       	rcall	.-3142   	; 0xa96 <_Z10modifieruph>
    16dc:	29 c7       	rjmp	.+3666   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    16de:	e3 30       	cpi	r30, 0x03	; 3
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <_Z21check_sensors_releasemmh+0x54c>
    16e2:	da c6       	rjmp	.+3508   	; 0x2498 <__stack+0x399>
            keypress(KEY_F8);
    16e4:	81 e4       	ldi	r24, 0x41	; 65
    16e6:	0d dd       	rcall	.-1510   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	d5 d9       	rcall	.-3158   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    16ec:	84 e0       	ldi	r24, 0x04	; 4
    16ee:	d3 d9       	rcall	.-3162   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	d1 d9       	rcall	.-3166   	; 0xa96 <_Z10modifieruph>
    16f4:	1d c7       	rjmp	.+3642   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_VY) == KS1_VY && (sensors2 & KS2_VY) == KS2_VY) {
    16f6:	c7 fe       	sbrs	r12, 7
    16f8:	2b c0       	rjmp	.+86     	; 0x1750 <_Z21check_sensors_releasemmh+0x5b8>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    16fa:	10 17       	cp	r17, r16
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <_Z21check_sensors_releasemmh+0x568>
    16fe:	18 c7       	rjmp	.+3632   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1700:	f9 01       	movw	r30, r18
    1702:	e0 1b       	sub	r30, r16
    1704:	f1 09       	sbc	r31, r1
    1706:	ee 5b       	subi	r30, 0xBE	; 190
    1708:	f7 4f       	sbci	r31, 0xF7	; 247
    170a:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    170c:	ee 23       	and	r30, r30
    170e:	49 f4       	brne	.+18     	; 0x1722 <_Z21check_sensors_releasemmh+0x58a>
            keypress(KEY_Q);
    1710:	84 e1       	ldi	r24, 0x14	; 20
    1712:	f7 dc       	rcall	.-1554   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	bf d9       	rcall	.-3202   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	bd d9       	rcall	.-3206   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	bb d9       	rcall	.-3210   	; 0xa96 <_Z10modifieruph>
    1720:	07 c7       	rjmp	.+3598   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1722:	e1 30       	cpi	r30, 0x01	; 1
    1724:	49 f4       	brne	.+18     	; 0x1738 <_Z21check_sensors_releasemmh+0x5a0>
            keypress(KEYPAD_PERIOD);
    1726:	83 e6       	ldi	r24, 0x63	; 99
    1728:	ec dc       	rcall	.-1576   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	b4 d9       	rcall	.-3224   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	b2 d9       	rcall	.-3228   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	b0 d9       	rcall	.-3232   	; 0xa96 <_Z10modifieruph>
    1736:	fc c6       	rjmp	.+3576   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1738:	e2 30       	cpi	r30, 0x02	; 2
    173a:	09 f0       	breq	.+2      	; 0x173e <_Z21check_sensors_releasemmh+0x5a6>
    173c:	ad c6       	rjmp	.+3418   	; 0x2498 <__stack+0x399>
            keypress(KEY_TILDE);
    173e:	85 e3       	ldi	r24, 0x35	; 53
    1740:	e0 dc       	rcall	.-1600   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	a8 d9       	rcall	.-3248   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	a6 d9       	rcall	.-3252   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	a4 d9       	rcall	.-3256   	; 0xa96 <_Z10modifieruph>
    174e:	f0 c6       	rjmp	.+3552   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_WY) == KS1_WY && (sensors2 & KS2_WY) == KS2_WY) {
    1750:	8d 89       	ldd	r24, Y+21	; 0x15
    1752:	9e 89       	ldd	r25, Y+22	; 0x16
    1754:	af 89       	ldd	r26, Y+23	; 0x17
    1756:	b8 8d       	ldd	r27, Y+24	; 0x18
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	a1 05       	cpc	r26, r1
    175c:	b1 05       	cpc	r27, r1
    175e:	69 f1       	breq	.+90     	; 0x17ba <_Z21check_sensors_releasemmh+0x622>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1760:	10 17       	cp	r17, r16
    1762:	08 f4       	brcc	.+2      	; 0x1766 <_Z21check_sensors_releasemmh+0x5ce>
    1764:	e5 c6       	rjmp	.+3530   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1766:	f9 01       	movw	r30, r18
    1768:	e0 1b       	sub	r30, r16
    176a:	f1 09       	sbc	r31, r1
    176c:	ee 5b       	subi	r30, 0xBE	; 190
    176e:	f7 4f       	sbci	r31, 0xF7	; 247
    1770:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1772:	ee 23       	and	r30, r30
    1774:	49 f4       	brne	.+18     	; 0x1788 <_Z21check_sensors_releasemmh+0x5f0>
            keypress(KEY_Y);
    1776:	8c e1       	ldi	r24, 0x1C	; 28
    1778:	c4 dc       	rcall	.-1656   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	8c d9       	rcall	.-3304   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	8a d9       	rcall	.-3308   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	88 d9       	rcall	.-3312   	; 0xa96 <_Z10modifieruph>
    1786:	d4 c6       	rjmp	.+3496   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1788:	e2 30       	cpi	r30, 0x02	; 2
    178a:	59 f4       	brne	.+22     	; 0x17a2 <_Z21check_sensors_releasemmh+0x60a>
            modifierdown(MODIFIERKEY_SHIFT);
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	ad d9       	rcall	.-3238   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_MINUS);
    1790:	8d e2       	ldi	r24, 0x2D	; 45
    1792:	b7 dc       	rcall	.-1682   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	7f d9       	rcall	.-3330   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	7d d9       	rcall	.-3334   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	7b d9       	rcall	.-3338   	; 0xa96 <_Z10modifieruph>
    17a0:	c7 c6       	rjmp	.+3470   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    17a2:	e3 30       	cpi	r30, 0x03	; 3
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <_Z21check_sensors_releasemmh+0x610>
    17a6:	78 c6       	rjmp	.+3312   	; 0x2498 <__stack+0x399>
            keypress(KEY_INSERT);
    17a8:	89 e4       	ldi	r24, 0x49	; 73
    17aa:	ab dc       	rcall	.-1706   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	73 d9       	rcall	.-3354   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	71 d9       	rcall	.-3358   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	6f d9       	rcall	.-3362   	; 0xa96 <_Z10modifieruph>
    17b8:	bb c6       	rjmp	.+3446   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_XY) == KS1_XY && (sensors2 & KS2_XY) == KS2_XY) {
    17ba:	89 8d       	ldd	r24, Y+25	; 0x19
    17bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17be:	ab 8d       	ldd	r26, Y+27	; 0x1b
    17c0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	a1 05       	cpc	r26, r1
    17c6:	b1 05       	cpc	r27, r1
    17c8:	69 f1       	breq	.+90     	; 0x1824 <_Z21check_sensors_releasemmh+0x68c>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    17ca:	10 17       	cp	r17, r16
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <_Z21check_sensors_releasemmh+0x638>
    17ce:	b0 c6       	rjmp	.+3424   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    17d0:	f9 01       	movw	r30, r18
    17d2:	e0 1b       	sub	r30, r16
    17d4:	f1 09       	sbc	r31, r1
    17d6:	ee 5b       	subi	r30, 0xBE	; 190
    17d8:	f7 4f       	sbci	r31, 0xF7	; 247
    17da:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    17dc:	ee 23       	and	r30, r30
    17de:	49 f4       	brne	.+18     	; 0x17f2 <_Z21check_sensors_releasemmh+0x65a>
            keypress(KEY_X);
    17e0:	8b e1       	ldi	r24, 0x1B	; 27
    17e2:	8f dc       	rcall	.-1762   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	57 d9       	rcall	.-3410   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	55 d9       	rcall	.-3414   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	53 d9       	rcall	.-3418   	; 0xa96 <_Z10modifieruph>
    17f0:	9f c6       	rjmp	.+3390   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    17f2:	e2 30       	cpi	r30, 0x02	; 2
    17f4:	59 f4       	brne	.+22     	; 0x180c <_Z21check_sensors_releasemmh+0x674>
            modifierdown(MODIFIERKEY_SHIFT);
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	78 d9       	rcall	.-3344   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_BACKSLASH);
    17fa:	81 e3       	ldi	r24, 0x31	; 49
    17fc:	82 dc       	rcall	.-1788   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	4a d9       	rcall	.-3436   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	48 d9       	rcall	.-3440   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	46 d9       	rcall	.-3444   	; 0xa96 <_Z10modifieruph>
    180a:	92 c6       	rjmp	.+3364   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    180c:	e3 30       	cpi	r30, 0x03	; 3
    180e:	09 f0       	breq	.+2      	; 0x1812 <_Z21check_sensors_releasemmh+0x67a>
    1810:	43 c6       	rjmp	.+3206   	; 0x2498 <__stack+0x399>
            keypress(KEY_PRINTSCREEN);
    1812:	86 e4       	ldi	r24, 0x46	; 70
    1814:	76 dc       	rcall	.-1812   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	3e d9       	rcall	.-3460   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	3c d9       	rcall	.-3464   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	3a d9       	rcall	.-3468   	; 0xa96 <_Z10modifieruph>
    1822:	86 c6       	rjmp	.+3340   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_Y6) == KS1_Y6 && (sensors2 & KS2_Y6) == KS2_Y6) {
    1824:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1826:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1828:	af 8d       	ldd	r26, Y+31	; 0x1f
    182a:	b8 a1       	ldd	r27, Y+32	; 0x20
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	a1 05       	cpc	r26, r1
    1830:	b1 05       	cpc	r27, r1
    1832:	21 f1       	breq	.+72     	; 0x187c <_Z21check_sensors_releasemmh+0x6e4>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1834:	10 17       	cp	r17, r16
    1836:	08 f4       	brcc	.+2      	; 0x183a <_Z21check_sensors_releasemmh+0x6a2>
    1838:	7b c6       	rjmp	.+3318   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    183a:	f9 01       	movw	r30, r18
    183c:	e0 1b       	sub	r30, r16
    183e:	f1 09       	sbc	r31, r1
    1840:	ee 5b       	subi	r30, 0xBE	; 190
    1842:	f7 4f       	sbci	r31, 0xF7	; 247
    1844:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1846:	ee 23       	and	r30, r30
    1848:	49 f4       	brne	.+18     	; 0x185c <_Z21check_sensors_releasemmh+0x6c4>
            keypress(KEY_COMMA);
    184a:	86 e3       	ldi	r24, 0x36	; 54
    184c:	5a dc       	rcall	.-1868   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	22 d9       	rcall	.-3516   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	20 d9       	rcall	.-3520   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	1e d9       	rcall	.-3524   	; 0xa96 <_Z10modifieruph>
    185a:	6a c6       	rjmp	.+3284   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    185c:	e1 30       	cpi	r30, 0x01	; 1
    185e:	29 f0       	breq	.+10     	; 0x186a <_Z21check_sensors_releasemmh+0x6d2>
    1860:	e2 30       	cpi	r30, 0x02	; 2
    1862:	19 f0       	breq	.+6      	; 0x186a <_Z21check_sensors_releasemmh+0x6d2>
    1864:	e3 30       	cpi	r30, 0x03	; 3
    1866:	09 f0       	breq	.+2      	; 0x186a <_Z21check_sensors_releasemmh+0x6d2>
    1868:	17 c6       	rjmp	.+3118   	; 0x2498 <__stack+0x399>
            keypress(KEY_DELETE);
    186a:	8c e4       	ldi	r24, 0x4C	; 76
    186c:	4a dc       	rcall	.-1900   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	12 d9       	rcall	.-3548   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	10 d9       	rcall	.-3552   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	0e d9       	rcall	.-3556   	; 0xa96 <_Z10modifieruph>
    187a:	5a c6       	rjmp	.+3252   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_GY) == KS1_GY && (sensors2 & KS2_GY) == KS2_GY) {
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	a1 05       	cpc	r26, r1
    1888:	b1 05       	cpc	r27, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <_Z21check_sensors_releasemmh+0x6f6>
    188c:	67 c0       	rjmp	.+206    	; 0x195c <_Z21check_sensors_releasemmh+0x7c4>
        if ((sensors1 & KS1_DGY) == KS1_DGY && (sensors2 & KS2_DGY) == KS2_DGY) {
    188e:	d7 01       	movw	r26, r14
    1890:	c6 01       	movw	r24, r12
    1892:	80 70       	andi	r24, 0x00	; 0
    1894:	90 72       	andi	r25, 0x20	; 32
    1896:	a0 74       	andi	r26, 0x40	; 64
    1898:	b0 70       	andi	r27, 0x00	; 0
    189a:	80 50       	subi	r24, 0x00	; 0
    189c:	90 42       	sbci	r25, 0x20	; 32
    189e:	a0 44       	sbci	r26, 0x40	; 64
    18a0:	b0 40       	sbci	r27, 0x00	; 0
    18a2:	21 f5       	brne	.+72     	; 0x18ec <_Z21check_sensors_releasemmh+0x754>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    18a4:	10 17       	cp	r17, r16
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <_Z21check_sensors_releasemmh+0x712>
    18a8:	43 c6       	rjmp	.+3206   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    18aa:	f9 01       	movw	r30, r18
    18ac:	e0 1b       	sub	r30, r16
    18ae:	f1 09       	sbc	r31, r1
    18b0:	ee 5b       	subi	r30, 0xBE	; 190
    18b2:	f7 4f       	sbci	r31, 0xF7	; 247
    18b4:	e0 81       	ld	r30, Z
            if (modeCheck(KMODE_DEFAULT, pos)) {
    18b6:	ee 23       	and	r30, r30
    18b8:	49 f4       	brne	.+18     	; 0x18cc <_Z21check_sensors_releasemmh+0x734>
                keypress(KEY_BACKSPACE);
    18ba:	8a e2       	ldi	r24, 0x2A	; 42
    18bc:	22 dc       	rcall	.-1980   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	ea d8       	rcall	.-3628   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	e8 d8       	rcall	.-3632   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	e6 d8       	rcall	.-3636   	; 0xa96 <_Z10modifieruph>
    18ca:	32 c6       	rjmp	.+3172   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    18cc:	e1 30       	cpi	r30, 0x01	; 1
    18ce:	29 f0       	breq	.+10     	; 0x18da <_Z21check_sensors_releasemmh+0x742>
    18d0:	e2 30       	cpi	r30, 0x02	; 2
    18d2:	19 f0       	breq	.+6      	; 0x18da <_Z21check_sensors_releasemmh+0x742>
    18d4:	e3 30       	cpi	r30, 0x03	; 3
    18d6:	09 f0       	breq	.+2      	; 0x18da <_Z21check_sensors_releasemmh+0x742>
    18d8:	df c5       	rjmp	.+3006   	; 0x2498 <__stack+0x399>
                keypress(KEY_SPACE);
    18da:	8c e2       	ldi	r24, 0x2C	; 44
    18dc:	12 dc       	rcall	.-2012   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	da d8       	rcall	.-3660   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	d8 d8       	rcall	.-3664   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	d6 d8       	rcall	.-3668   	; 0xa96 <_Z10modifieruph>
    18ea:	22 c6       	rjmp	.+3140   	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    18ec:	10 17       	cp	r17, r16
    18ee:	08 f4       	brcc	.+2      	; 0x18f2 <_Z21check_sensors_releasemmh+0x75a>
    18f0:	1f c6       	rjmp	.+3134   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    18f2:	f9 01       	movw	r30, r18
    18f4:	e0 1b       	sub	r30, r16
    18f6:	f1 09       	sbc	r31, r1
    18f8:	ee 5b       	subi	r30, 0xBE	; 190
    18fa:	f7 4f       	sbci	r31, 0xF7	; 247
    18fc:	e0 81       	ld	r30, Z
                return;
             }
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    18fe:	ee 23       	and	r30, r30
    1900:	49 f4       	brne	.+18     	; 0x1914 <_Z21check_sensors_releasemmh+0x77c>
                keypress(KEY_T);
    1902:	87 e1       	ldi	r24, 0x17	; 23
    1904:	fe db       	rcall	.-2052   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	c6 d8       	rcall	.-3700   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    190a:	84 e0       	ldi	r24, 0x04	; 4
    190c:	c4 d8       	rcall	.-3704   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	c2 d8       	rcall	.-3708   	; 0xa96 <_Z10modifieruph>
    1912:	0e c6       	rjmp	.+3100   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1914:	e1 30       	cpi	r30, 0x01	; 1
    1916:	49 f4       	brne	.+18     	; 0x192a <_Z21check_sensors_releasemmh+0x792>
                keypress(KEY_7);
    1918:	84 e2       	ldi	r24, 0x24	; 36
    191a:	f3 db       	rcall	.-2074   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	bb d8       	rcall	.-3722   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	b9 d8       	rcall	.-3726   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	b7 d8       	rcall	.-3730   	; 0xa96 <_Z10modifieruph>
    1928:	03 c6       	rjmp	.+3078   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    192a:	e2 30       	cpi	r30, 0x02	; 2
    192c:	59 f4       	brne	.+22     	; 0x1944 <_Z21check_sensors_releasemmh+0x7ac>
                modifierdown(MODIFIERKEY_SHIFT);
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	dc d8       	rcall	.-3656   	; 0xaea <_Z12modifierdownh>
                keypress(KEY_COMMA);
    1932:	86 e3       	ldi	r24, 0x36	; 54
    1934:	e6 db       	rcall	.-2100   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	ae d8       	rcall	.-3748   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	ac d8       	rcall	.-3752   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	aa d8       	rcall	.-3756   	; 0xa96 <_Z10modifieruph>
    1942:	f6 c5       	rjmp	.+3052   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1944:	e3 30       	cpi	r30, 0x03	; 3
    1946:	09 f0       	breq	.+2      	; 0x194a <_Z21check_sensors_releasemmh+0x7b2>
    1948:	a7 c5       	rjmp	.+2894   	; 0x2498 <__stack+0x399>
                keypress(KEY_F7);
    194a:	80 e4       	ldi	r24, 0x40	; 64
    194c:	da db       	rcall	.-2124   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	a2 d8       	rcall	.-3772   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1952:	84 e0       	ldi	r24, 0x04	; 4
    1954:	a0 d8       	rcall	.-3776   	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	9e d8       	rcall	.-3780   	; 0xa96 <_Z10modifieruph>
    195a:	ea c5       	rjmp	.+3028   	; 0x2530 <__stack+0x431>
                return;
             }
        }
    } else if ((sensors1 & KS1_IY) == KS1_IY && (sensors2 & KS2_IY) == KS2_IY) {
    195c:	8d a1       	ldd	r24, Y+37	; 0x25
    195e:	9e a1       	ldd	r25, Y+38	; 0x26
    1960:	af a1       	ldd	r26, Y+39	; 0x27
    1962:	b8 a5       	ldd	r27, Y+40	; 0x28
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	a1 05       	cpc	r26, r1
    1968:	b1 05       	cpc	r27, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <_Z21check_sensors_releasemmh+0x7d6>
    196c:	36 c0       	rjmp	.+108    	; 0x19da <_Z21check_sensors_releasemmh+0x842>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    196e:	10 17       	cp	r17, r16
    1970:	08 f4       	brcc	.+2      	; 0x1974 <_Z21check_sensors_releasemmh+0x7dc>
    1972:	de c5       	rjmp	.+3004   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1974:	f9 01       	movw	r30, r18
    1976:	e0 1b       	sub	r30, r16
    1978:	f1 09       	sbc	r31, r1
    197a:	ee 5b       	subi	r30, 0xBE	; 190
    197c:	f7 4f       	sbci	r31, 0xF7	; 247
    197e:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1980:	ee 23       	and	r30, r30
    1982:	49 f4       	brne	.+18     	; 0x1996 <_Z21check_sensors_releasemmh+0x7fe>
            keypress(KEY_G);
    1984:	8a e0       	ldi	r24, 0x0A	; 10
    1986:	bd db       	rcall	.-2182   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	85 d8       	rcall	.-3830   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    198c:	84 e0       	ldi	r24, 0x04	; 4
    198e:	83 d8       	rcall	.-3834   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	81 d8       	rcall	.-3838   	; 0xa96 <_Z10modifieruph>
    1994:	cd c5       	rjmp	.+2970   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1996:	e1 30       	cpi	r30, 0x01	; 1
    1998:	49 f4       	brne	.+18     	; 0x19ac <_Z21check_sensors_releasemmh+0x814>
            keypress(KEY_9);
    199a:	86 e2       	ldi	r24, 0x26	; 38
    199c:	b2 db       	rcall	.-2204   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	7a d8       	rcall	.-3852   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    19a2:	84 e0       	ldi	r24, 0x04	; 4
    19a4:	78 d8       	rcall	.-3856   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	76 d8       	rcall	.-3860   	; 0xa96 <_Z10modifieruph>
    19aa:	c2 c5       	rjmp	.+2948   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    19ac:	e2 30       	cpi	r30, 0x02	; 2
    19ae:	49 f4       	brne	.+18     	; 0x19c2 <_Z21check_sensors_releasemmh+0x82a>
            keypress(KEY_SLASH);
    19b0:	88 e3       	ldi	r24, 0x38	; 56
    19b2:	a7 db       	rcall	.-2226   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	6f d8       	rcall	.-3874   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	6d d8       	rcall	.-3878   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	6b d8       	rcall	.-3882   	; 0xa96 <_Z10modifieruph>
    19c0:	b7 c5       	rjmp	.+2926   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    19c2:	e3 30       	cpi	r30, 0x03	; 3
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <_Z21check_sensors_releasemmh+0x830>
    19c6:	68 c5       	rjmp	.+2768   	; 0x2498 <__stack+0x399>
            keypress(KEY_F9);
    19c8:	82 e4       	ldi	r24, 0x42	; 66
    19ca:	9b db       	rcall	.-2250   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	63 d8       	rcall	.-3898   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    19d0:	84 e0       	ldi	r24, 0x04	; 4
    19d2:	61 d8       	rcall	.-3902   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	5f d8       	rcall	.-3906   	; 0xa96 <_Z10modifieruph>
    19d8:	ab c5       	rjmp	.+2902   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_SY) == KS1_SY && (sensors2 & KS2_SY) == KS2_SY) {
    19da:	c6 01       	movw	r24, r12
    19dc:	80 70       	andi	r24, 0x00	; 0
    19de:	90 78       	andi	r25, 0x80	; 128
    19e0:	89 2b       	or	r24, r25
    19e2:	59 f1       	breq	.+86     	; 0x1a3a <_Z21check_sensors_releasemmh+0x8a2>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    19e4:	10 17       	cp	r17, r16
    19e6:	08 f4       	brcc	.+2      	; 0x19ea <_Z21check_sensors_releasemmh+0x852>
    19e8:	a3 c5       	rjmp	.+2886   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    19ea:	f9 01       	movw	r30, r18
    19ec:	e0 1b       	sub	r30, r16
    19ee:	f1 09       	sbc	r31, r1
    19f0:	ee 5b       	subi	r30, 0xBE	; 190
    19f2:	f7 4f       	sbci	r31, 0xF7	; 247
    19f4:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    19f6:	ee 23       	and	r30, r30
    19f8:	49 f4       	brne	.+18     	; 0x1a0c <_Z21check_sensors_releasemmh+0x874>
            keypress(KEY_W);
    19fa:	8a e1       	ldi	r24, 0x1A	; 26
    19fc:	82 db       	rcall	.-2300   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	4a d8       	rcall	.-3948   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a02:	84 e0       	ldi	r24, 0x04	; 4
    1a04:	48 d8       	rcall	.-3952   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	46 d8       	rcall	.-3956   	; 0xa96 <_Z10modifieruph>
    1a0a:	92 c5       	rjmp	.+2852   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1a0c:	e1 30       	cpi	r30, 0x01	; 1
    1a0e:	49 f4       	brne	.+18     	; 0x1a22 <_Z21check_sensors_releasemmh+0x88a>
            keypress(KEYPAD_EQUAL);
    1a10:	87 e6       	ldi	r24, 0x67	; 103
    1a12:	77 db       	rcall	.-2322   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	3f d8       	rcall	.-3970   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	3d d8       	rcall	.-3974   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	3b d8       	rcall	.-3978   	; 0xa96 <_Z10modifieruph>
    1a20:	87 c5       	rjmp	.+2830   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1a22:	e2 30       	cpi	r30, 0x02	; 2
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <_Z21check_sensors_releasemmh+0x890>
    1a26:	38 c5       	rjmp	.+2672   	; 0x2498 <__stack+0x399>
            keypress(KEY_LEFT_BRACE);
    1a28:	8f e2       	ldi	r24, 0x2F	; 47
    1a2a:	6b db       	rcall	.-2346   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	33 d8       	rcall	.-3994   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a30:	84 e0       	ldi	r24, 0x04	; 4
    1a32:	31 d8       	rcall	.-3998   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	2f d8       	rcall	.-4002   	; 0xa96 <_Z10modifieruph>
    1a38:	7b c5       	rjmp	.+2806   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_TY) == KS1_TY && (sensors2 & KS2_TY) == KS2_TY) {
    1a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a40:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	a1 05       	cpc	r26, r1
    1a46:	b1 05       	cpc	r27, r1
    1a48:	81 f1       	breq	.+96     	; 0x1aaa <_Z21check_sensors_releasemmh+0x912>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1a4a:	10 17       	cp	r17, r16
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <_Z21check_sensors_releasemmh+0x8b8>
    1a4e:	70 c5       	rjmp	.+2784   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1a50:	f9 01       	movw	r30, r18
    1a52:	e0 1b       	sub	r30, r16
    1a54:	f1 09       	sbc	r31, r1
    1a56:	ee 5b       	subi	r30, 0xBE	; 190
    1a58:	f7 4f       	sbci	r31, 0xF7	; 247
    1a5a:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1a5c:	ee 23       	and	r30, r30
    1a5e:	49 f4       	brne	.+18     	; 0x1a72 <_Z21check_sensors_releasemmh+0x8da>
            keypress(KEY_K);
    1a60:	8e e0       	ldi	r24, 0x0E	; 14
    1a62:	4f db       	rcall	.-2402   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	17 d8       	rcall	.-4050   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a68:	84 e0       	ldi	r24, 0x04	; 4
    1a6a:	15 d8       	rcall	.-4054   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	13 d8       	rcall	.-4058   	; 0xa96 <_Z10modifieruph>
    1a70:	5f c5       	rjmp	.+2750   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1a72:	e1 30       	cpi	r30, 0x01	; 1
    1a74:	59 f4       	brne	.+22     	; 0x1a8c <_Z21check_sensors_releasemmh+0x8f4>
            modifierdown(MODIFIERKEY_SHIFT);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	38 d8       	rcall	.-3984   	; 0xaea <_Z12modifierdownh>
            keypress(KEY_6);
    1a7a:	83 e2       	ldi	r24, 0x23	; 35
    1a7c:	42 db       	rcall	.-2428   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	0a d8       	rcall	.-4076   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	08 d8       	rcall	.-4080   	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	06 d8       	rcall	.-4084   	; 0xa96 <_Z10modifieruph>
    1a8a:	52 c5       	rjmp	.+2724   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1a8c:	e2 30       	cpi	r30, 0x02	; 2
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <_Z21check_sensors_releasemmh+0x8fa>
    1a90:	03 c5       	rjmp	.+2566   	; 0x2498 <__stack+0x399>
            keypress(KEY_RIGHT_BRACE);
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	36 db       	rcall	.-2452   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1a9c:	84 e0       	ldi	r24, 0x04	; 4
    1a9e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1aa8:	43 c5       	rjmp	.+2694   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_UY) == KS1_UY && (sensors2 & KS2_UY) == KS2_UY) {
    1aaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aae:	af a5       	ldd	r26, Y+47	; 0x2f
    1ab0:	b8 a9       	ldd	r27, Y+48	; 0x30
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	a1 05       	cpc	r26, r1
    1ab6:	b1 05       	cpc	r27, r1
    1ab8:	b9 f1       	breq	.+110    	; 0x1b28 <_Z21check_sensors_releasemmh+0x990>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1aba:	10 17       	cp	r17, r16
    1abc:	08 f4       	brcc	.+2      	; 0x1ac0 <_Z21check_sensors_releasemmh+0x928>
    1abe:	38 c5       	rjmp	.+2672   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1ac0:	f9 01       	movw	r30, r18
    1ac2:	e0 1b       	sub	r30, r16
    1ac4:	f1 09       	sbc	r31, r1
    1ac6:	ee 5b       	subi	r30, 0xBE	; 190
    1ac8:	f7 4f       	sbci	r31, 0xF7	; 247
    1aca:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1acc:	ee 23       	and	r30, r30
    1ace:	61 f4       	brne	.+24     	; 0x1ae8 <_Z21check_sensors_releasemmh+0x950>
            keypress(KEY_Z);
    1ad0:	8d e1       	ldi	r24, 0x1D	; 29
    1ad2:	17 db       	rcall	.-2514   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1ae6:	24 c5       	rjmp	.+2632   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1ae8:	e1 30       	cpi	r30, 0x01	; 1
    1aea:	79 f4       	brne	.+30     	; 0x1b0a <_Z21check_sensors_releasemmh+0x972>
            modifierdown(MODIFIERKEY_SHIFT);
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_5);
    1af2:	82 e2       	ldi	r24, 0x22	; 34
    1af4:	06 db       	rcall	.-2548   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1afc:	84 e0       	ldi	r24, 0x04	; 4
    1afe:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1b08:	13 c5       	rjmp	.+2598   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1b0a:	e2 30       	cpi	r30, 0x02	; 2
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <_Z21check_sensors_releasemmh+0x978>
    1b0e:	c4 c4       	rjmp	.+2440   	; 0x2498 <__stack+0x399>
            keypress(KEY_BACKSLASH);
    1b10:	81 e3       	ldi	r24, 0x31	; 49
    1b12:	f7 da       	rcall	.-2578   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1b1a:	84 e0       	ldi	r24, 0x04	; 4
    1b1c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1b26:	04 c5       	rjmp	.+2568   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_Y5) == KS1_Y5 && (sensors2 & KS2_Y5) == KS2_Y5 && modeCheck(KMODE_DEFAULT, pos)) {
    1b28:	89 a9       	ldd	r24, Y+49	; 0x31
    1b2a:	9a a9       	ldd	r25, Y+50	; 0x32
    1b2c:	ab a9       	ldd	r26, Y+51	; 0x33
    1b2e:	bc a9       	ldd	r27, Y+52	; 0x34
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	a1 05       	cpc	r26, r1
    1b34:	b1 05       	cpc	r27, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <_Z21check_sensors_releasemmh+0x9a2>
    1b38:	cb c4       	rjmp	.+2454   	; 0x24d0 <__stack+0x3d1>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1b3a:	10 17       	cp	r17, r16
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <_Z21check_sensors_releasemmh+0x9a8>
    1b3e:	c8 c4       	rjmp	.+2448   	; 0x24d0 <__stack+0x3d1>
    1b40:	f9 01       	movw	r30, r18
    1b42:	e0 1b       	sub	r30, r16
    1b44:	f1 09       	sbc	r31, r1
    1b46:	ee 5b       	subi	r30, 0xBE	; 190
    1b48:	f7 4f       	sbci	r31, 0xF7	; 247
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <_Z21check_sensors_releasemmh+0x9ba>
    1b50:	bf c4       	rjmp	.+2430   	; 0x24d0 <__stack+0x3d1>
        keypress(KEY_V);
    1b52:	89 e1       	ldi	r24, 0x19	; 25
    1b54:	d6 da       	rcall	.-2644   	; 0x1102 <_Z8keypressh>
        modifierup(MODIFIERKEY_SHIFT);
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
        modifierup(MODIFIERKEY_CTRL);
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
        modifierup(MODIFIERKEY_ALT);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1b68:	e3 c4       	rjmp	.+2502   	; 0x2530 <__stack+0x431>
    1b6a:	10 17       	cp	r17, r16
    1b6c:	08 f4       	brcc	.+2      	; 0x1b70 <_Z21check_sensors_releasemmh+0x9d8>
    1b6e:	b9 c4       	rjmp	.+2418   	; 0x24e2 <__stack+0x3e3>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1b70:	f9 01       	movw	r30, r18
    1b72:	e0 1b       	sub	r30, r16
    1b74:	f1 09       	sbc	r31, r1
    1b76:	ee 5b       	subi	r30, 0xBE	; 190
    1b78:	f7 4f       	sbci	r31, 0xF7	; 247
    1b7a:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    1b7c:	ee 23       	and	r30, r30
    1b7e:	39 f0       	breq	.+14     	; 0x1b8e <_Z21check_sensors_releasemmh+0x9f6>
    1b80:	e1 30       	cpi	r30, 0x01	; 1
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <_Z21check_sensors_releasemmh+0x9f6>
    1b84:	e2 30       	cpi	r30, 0x02	; 2
    1b86:	19 f0       	breq	.+6      	; 0x1b8e <_Z21check_sensors_releasemmh+0x9f6>
    1b88:	e3 30       	cpi	r30, 0x03	; 3
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <_Z21check_sensors_releasemmh+0x9f6>
    1b8c:	aa c4       	rjmp	.+2388   	; 0x24e2 <__stack+0x3e3>
        mouseoff(MOUSE_ACTION_SCROLL);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z8mouseoffh>
    1b94:	cd c4       	rjmp	.+2458   	; 0x2530 <__stack+0x431>
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
        if ((sensors1 & KS1_ADY) == KS1_ADY && (sensors2 & KS2_ADY) == KS2_ADY) {
    1b96:	47 ff       	sbrs	r20, 7
    1b98:	2a c0       	rjmp	.+84     	; 0x1bee <_Z21check_sensors_releasemmh+0xa56>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1b9a:	10 17       	cp	r17, r16
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <_Z21check_sensors_releasemmh+0xa08>
    1b9e:	c8 c4       	rjmp	.+2448   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	e0 1b       	sub	r30, r16
    1ba4:	f1 09       	sbc	r31, r1
    1ba6:	ee 5b       	subi	r30, 0xBE	; 190
    1ba8:	f7 4f       	sbci	r31, 0xF7	; 247
    1baa:	e0 81       	ld	r30, Z
            if (modeCheck(KMODE_DEFAULT, pos)) {
    1bac:	ee 23       	and	r30, r30
    1bae:	61 f4       	brne	.+24     	; 0x1bc8 <_Z21check_sensors_releasemmh+0xa30>
                keypress(KEY_SPACE);
    1bb0:	8c e2       	ldi	r24, 0x2C	; 44
    1bb2:	a7 da       	rcall	.-2738   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1bc6:	b4 c4       	rjmp	.+2408   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1bc8:	e1 30       	cpi	r30, 0x01	; 1
    1bca:	29 f0       	breq	.+10     	; 0x1bd6 <_Z21check_sensors_releasemmh+0xa3e>
    1bcc:	e2 30       	cpi	r30, 0x02	; 2
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <_Z21check_sensors_releasemmh+0xa3e>
    1bd0:	e3 30       	cpi	r30, 0x03	; 3
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <_Z21check_sensors_releasemmh+0xa3e>
    1bd4:	61 c4       	rjmp	.+2242   	; 0x2498 <__stack+0x399>
                keypress(KEY_BACKSPACE);
    1bd6:	8a e2       	ldi	r24, 0x2A	; 42
    1bd8:	94 da       	rcall	.-2776   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1bec:	a1 c4       	rjmp	.+2370   	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1bee:	10 17       	cp	r17, r16
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <_Z21check_sensors_releasemmh+0xa5c>
    1bf2:	9e c4       	rjmp	.+2364   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	e0 1b       	sub	r30, r16
    1bf8:	f1 09       	sbc	r31, r1
    1bfa:	ee 5b       	subi	r30, 0xBE	; 190
    1bfc:	f7 4f       	sbci	r31, 0xF7	; 247
    1bfe:	e0 81       	ld	r30, Z
                return;
             }
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    1c00:	ee 23       	and	r30, r30
    1c02:	61 f4       	brne	.+24     	; 0x1c1c <_Z21check_sensors_releasemmh+0xa84>
                keypress(KEY_H);
    1c04:	8b e0       	ldi	r24, 0x0B	; 11
    1c06:	7d da       	rcall	.-2822   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1c0e:	84 e0       	ldi	r24, 0x04	; 4
    1c10:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1c1a:	8a c4       	rjmp	.+2324   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1c1c:	e1 30       	cpi	r30, 0x01	; 1
    1c1e:	61 f4       	brne	.+24     	; 0x1c38 <_Z21check_sensors_releasemmh+0xaa0>
                keypress(KEY_4);
    1c20:	81 e2       	ldi	r24, 0x21	; 33
    1c22:	6f da       	rcall	.-2850   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1c36:	7c c4       	rjmp	.+2296   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1c38:	e2 30       	cpi	r30, 0x02	; 2
    1c3a:	79 f4       	brne	.+30     	; 0x1c5a <_Z21check_sensors_releasemmh+0xac2>
                modifierdown(MODIFIERKEY_SHIFT);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
                keypress(KEY_9);
    1c42:	86 e2       	ldi	r24, 0x26	; 38
    1c44:	5e da       	rcall	.-2884   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1c58:	6b c4       	rjmp	.+2262   	; 0x2530 <__stack+0x431>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1c5a:	e3 30       	cpi	r30, 0x03	; 3
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <_Z21check_sensors_releasemmh+0xac8>
    1c5e:	1c c4       	rjmp	.+2104   	; 0x2498 <__stack+0x399>
                keypress(KEY_F4);
    1c60:	8d e3       	ldi	r24, 0x3D	; 61
    1c62:	4f da       	rcall	.-2914   	; 0x1102 <_Z8keypressh>
                modifierup(MODIFIERKEY_SHIFT);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_CTRL);
    1c6a:	84 e0       	ldi	r24, 0x04	; 4
    1c6c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
                modifierup(MODIFIERKEY_ALT);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1c76:	5c c4       	rjmp	.+2232   	; 0x2530 <__stack+0x431>
                return;
             }
        }
    } else if ((sensors1 & KS1_EY) == KS1_EY && (sensors2 & KS2_EY) == KS2_EY) {
    1c78:	21 96       	adiw	r28, 0x01	; 1
    1c7a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c7c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c80:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c82:	21 97       	sbiw	r28, 0x01	; 1
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	a1 05       	cpc	r26, r1
    1c88:	b1 05       	cpc	r27, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_Z21check_sensors_releasemmh+0xaf6>
    1c8c:	45 c0       	rjmp	.+138    	; 0x1d18 <_Z21check_sensors_releasemmh+0xb80>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1c8e:	10 17       	cp	r17, r16
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <_Z21check_sensors_releasemmh+0xafc>
    1c92:	4e c4       	rjmp	.+2204   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1c94:	f9 01       	movw	r30, r18
    1c96:	e0 1b       	sub	r30, r16
    1c98:	f1 09       	sbc	r31, r1
    1c9a:	ee 5b       	subi	r30, 0xBE	; 190
    1c9c:	f7 4f       	sbci	r31, 0xF7	; 247
    1c9e:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1ca0:	ee 23       	and	r30, r30
    1ca2:	61 f4       	brne	.+24     	; 0x1cbc <_Z21check_sensors_releasemmh+0xb24>
            keypress(KEY_M);
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
    1ca6:	2d da       	rcall	.-2982   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1cba:	3a c4       	rjmp	.+2164   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1cbc:	e1 30       	cpi	r30, 0x01	; 1
    1cbe:	61 f4       	brne	.+24     	; 0x1cd8 <_Z21check_sensors_releasemmh+0xb40>
            keypress(KEY_5);
    1cc0:	82 e2       	ldi	r24, 0x22	; 34
    1cc2:	1f da       	rcall	.-3010   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1cd6:	2c c4       	rjmp	.+2136   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1cd8:	e2 30       	cpi	r30, 0x02	; 2
    1cda:	79 f4       	brne	.+30     	; 0x1cfa <_Z21check_sensors_releasemmh+0xb62>
            modifierdown(MODIFIERKEY_SHIFT);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_0);
    1ce2:	87 e2       	ldi	r24, 0x27	; 39
    1ce4:	0e da       	rcall	.-3044   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1cf8:	1b c4       	rjmp	.+2102   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1cfa:	e3 30       	cpi	r30, 0x03	; 3
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <_Z21check_sensors_releasemmh+0xb68>
    1cfe:	cc c3       	rjmp	.+1944   	; 0x2498 <__stack+0x399>
            keypress(KEY_F5);
    1d00:	8e e3       	ldi	r24, 0x3E	; 62
    1d02:	ff d9       	rcall	.-3074   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1d16:	0c c4       	rjmp	.+2072   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_FY) == KS1_FY && (sensors2 & KS2_FY) == KS2_FY) {
    1d18:	25 96       	adiw	r28, 0x05	; 5
    1d1a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d1c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d1e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d20:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d22:	25 97       	sbiw	r28, 0x05	; 5
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	a1 05       	cpc	r26, r1
    1d28:	b1 05       	cpc	r27, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <_Z21check_sensors_releasemmh+0xb96>
    1d2c:	45 c0       	rjmp	.+138    	; 0x1db8 <_Z21check_sensors_releasemmh+0xc20>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1d2e:	10 17       	cp	r17, r16
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <_Z21check_sensors_releasemmh+0xb9c>
    1d32:	fe c3       	rjmp	.+2044   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1d34:	f9 01       	movw	r30, r18
    1d36:	e0 1b       	sub	r30, r16
    1d38:	f1 09       	sbc	r31, r1
    1d3a:	ee 5b       	subi	r30, 0xBE	; 190
    1d3c:	f7 4f       	sbci	r31, 0xF7	; 247
    1d3e:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1d40:	ee 23       	and	r30, r30
    1d42:	61 f4       	brne	.+24     	; 0x1d5c <_Z21check_sensors_releasemmh+0xbc4>
            keypress(KEY_B);
    1d44:	85 e0       	ldi	r24, 0x05	; 5
    1d46:	dd d9       	rcall	.-3142   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1d4e:	84 e0       	ldi	r24, 0x04	; 4
    1d50:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1d5a:	ea c3       	rjmp	.+2004   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1d5c:	e1 30       	cpi	r30, 0x01	; 1
    1d5e:	61 f4       	brne	.+24     	; 0x1d78 <_Z21check_sensors_releasemmh+0xbe0>
            keypress(KEY_6);
    1d60:	83 e2       	ldi	r24, 0x23	; 35
    1d62:	cf d9       	rcall	.-3170   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1d76:	dc c3       	rjmp	.+1976   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1d78:	e2 30       	cpi	r30, 0x02	; 2
    1d7a:	79 f4       	brne	.+30     	; 0x1d9a <_Z21check_sensors_releasemmh+0xc02>
            modifierdown(MODIFIERKEY_SHIFT);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_SLASH);
    1d82:	88 e3       	ldi	r24, 0x38	; 56
    1d84:	be d9       	rcall	.-3204   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1d98:	cb c3       	rjmp	.+1942   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1d9a:	e3 30       	cpi	r30, 0x03	; 3
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <_Z21check_sensors_releasemmh+0xc08>
    1d9e:	7c c3       	rjmp	.+1784   	; 0x2498 <__stack+0x399>
            keypress(KEY_F6);
    1da0:	8f e3       	ldi	r24, 0x3F	; 63
    1da2:	af d9       	rcall	.-3234   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1db6:	bc c3       	rjmp	.+1912   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_PY) == KS1_PY && (sensors2 & KS2_PY) == KS2_PY) {
    1db8:	29 96       	adiw	r28, 0x09	; 9
    1dba:	8c ad       	ldd	r24, Y+60	; 0x3c
    1dbc:	9d ad       	ldd	r25, Y+61	; 0x3d
    1dbe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1dc0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1dc2:	29 97       	sbiw	r28, 0x09	; 9
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a1 05       	cpc	r26, r1
    1dc8:	b1 05       	cpc	r27, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <_Z21check_sensors_releasemmh+0xc36>
    1dcc:	45 c0       	rjmp	.+138    	; 0x1e58 <_Z21check_sensors_releasemmh+0xcc0>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1dce:	10 17       	cp	r17, r16
    1dd0:	08 f4       	brcc	.+2      	; 0x1dd4 <_Z21check_sensors_releasemmh+0xc3c>
    1dd2:	ae c3       	rjmp	.+1884   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	e0 1b       	sub	r30, r16
    1dd8:	f1 09       	sbc	r31, r1
    1dda:	ee 5b       	subi	r30, 0xBE	; 190
    1ddc:	f7 4f       	sbci	r31, 0xF7	; 247
    1dde:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1de0:	ee 23       	and	r30, r30
    1de2:	61 f4       	brne	.+24     	; 0x1dfc <_Z21check_sensors_releasemmh+0xc64>
            keypress(KEY_O);
    1de4:	82 e1       	ldi	r24, 0x12	; 18
    1de6:	8d d9       	rcall	.-3302   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1dee:	84 e0       	ldi	r24, 0x04	; 4
    1df0:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1dfa:	9a c3       	rjmp	.+1844   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1dfc:	e1 30       	cpi	r30, 0x01	; 1
    1dfe:	61 f4       	brne	.+24     	; 0x1e18 <_Z21check_sensors_releasemmh+0xc80>
            keypress(KEYPAD_ASTERIX);
    1e00:	85 e5       	ldi	r24, 0x55	; 85
    1e02:	7f d9       	rcall	.-3330   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1e16:	8c c3       	rjmp	.+1816   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1e18:	e2 30       	cpi	r30, 0x02	; 2
    1e1a:	79 f4       	brne	.+30     	; 0x1e3a <_Z21check_sensors_releasemmh+0xca2>
            modifierdown(MODIFIERKEY_SHIFT);
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_LEFT_BRACE);
    1e22:	8f e2       	ldi	r24, 0x2F	; 47
    1e24:	6e d9       	rcall	.-3364   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1e38:	7b c3       	rjmp	.+1782   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1e3a:	e3 30       	cpi	r30, 0x03	; 3
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <_Z21check_sensors_releasemmh+0xca8>
    1e3e:	2c c3       	rjmp	.+1624   	; 0x2498 <__stack+0x399>
            keypress(KEY_MUTE);
    1e40:	8f e7       	ldi	r24, 0x7F	; 127
    1e42:	5f d9       	rcall	.-3394   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1e56:	6c c3       	rjmp	.+1752   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_QY) == KS1_QY && (sensors2 & KS2_QY) == KS2_QY) {
    1e58:	2d 96       	adiw	r28, 0x0d	; 13
    1e5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e5c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e5e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e60:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e62:	2d 97       	sbiw	r28, 0x0d	; 13
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	a1 05       	cpc	r26, r1
    1e68:	b1 05       	cpc	r27, r1
    1e6a:	b9 f1       	breq	.+110    	; 0x1eda <_Z21check_sensors_releasemmh+0xd42>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1e6c:	10 17       	cp	r17, r16
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <_Z21check_sensors_releasemmh+0xcda>
    1e70:	5f c3       	rjmp	.+1726   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1e72:	f9 01       	movw	r30, r18
    1e74:	e0 1b       	sub	r30, r16
    1e76:	f1 09       	sbc	r31, r1
    1e78:	ee 5b       	subi	r30, 0xBE	; 190
    1e7a:	f7 4f       	sbci	r31, 0xF7	; 247
    1e7c:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1e7e:	ee 23       	and	r30, r30
    1e80:	61 f4       	brne	.+24     	; 0x1e9a <_Z21check_sensors_releasemmh+0xd02>
            keypress(KEY_U);
    1e82:	88 e1       	ldi	r24, 0x18	; 24
    1e84:	3e d9       	rcall	.-3460   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1e8c:	84 e0       	ldi	r24, 0x04	; 4
    1e8e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1e98:	4b c3       	rjmp	.+1686   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1e9a:	e1 30       	cpi	r30, 0x01	; 1
    1e9c:	61 f4       	brne	.+24     	; 0x1eb6 <_Z21check_sensors_releasemmh+0xd1e>
            keypress(KEYPAD_SLASH);
    1e9e:	84 e5       	ldi	r24, 0x54	; 84
    1ea0:	30 d9       	rcall	.-3488   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1ea8:	84 e0       	ldi	r24, 0x04	; 4
    1eaa:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1eb4:	3d c3       	rjmp	.+1658   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1eb6:	e2 30       	cpi	r30, 0x02	; 2
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <_Z21check_sensors_releasemmh+0xd24>
    1eba:	ee c2       	rjmp	.+1500   	; 0x2498 <__stack+0x399>
            modifierdown(MODIFIERKEY_SHIFT);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_RIGHT_BRACE);
    1ec2:	80 e3       	ldi	r24, 0x30	; 48
    1ec4:	1e d9       	rcall	.-3524   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1ecc:	84 e0       	ldi	r24, 0x04	; 4
    1ece:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1ed8:	2b c3       	rjmp	.+1622   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_RY) == KS1_RY && (sensors2 & KS2_RY) == KS2_RY) {
    1eda:	61 96       	adiw	r28, 0x11	; 17
    1edc:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ede:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ee0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ee2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ee4:	61 97       	sbiw	r28, 0x11	; 17
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	a1 05       	cpc	r26, r1
    1eea:	b1 05       	cpc	r27, r1
    1eec:	49 f1       	breq	.+82     	; 0x1f40 <_Z21check_sensors_releasemmh+0xda8>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1eee:	10 17       	cp	r17, r16
    1ef0:	08 f4       	brcc	.+2      	; 0x1ef4 <_Z21check_sensors_releasemmh+0xd5c>
    1ef2:	1e c3       	rjmp	.+1596   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	e0 1b       	sub	r30, r16
    1ef8:	f1 09       	sbc	r31, r1
    1efa:	ee 5b       	subi	r30, 0xBE	; 190
    1efc:	f7 4f       	sbci	r31, 0xF7	; 247
    1efe:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1f00:	ee 23       	and	r30, r30
    1f02:	61 f4       	brne	.+24     	; 0x1f1c <_Z21check_sensors_releasemmh+0xd84>
            keypress(KEY_D);
    1f04:	87 e0       	ldi	r24, 0x07	; 7
    1f06:	fd d8       	rcall	.-3590   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1f1a:	0a c3       	rjmp	.+1556   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1f1c:	e2 30       	cpi	r30, 0x02	; 2
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <_Z21check_sensors_releasemmh+0xd8a>
    1f20:	bb c2       	rjmp	.+1398   	; 0x2498 <__stack+0x399>
            modifierdown(MODIFIERKEY_SHIFT);
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_1);
    1f28:	8e e1       	ldi	r24, 0x1E	; 30
    1f2a:	eb d8       	rcall	.-3626   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1f32:	84 e0       	ldi	r24, 0x04	; 4
    1f34:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1f3e:	f8 c2       	rjmp	.+1520   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_Y4) == KS1_Y4 && (sensors2 & KS2_Y4) == KS2_Y4 && modeCheck(KMODE_DEFAULT, pos)) {
    1f40:	65 96       	adiw	r28, 0x15	; 21
    1f42:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f44:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f46:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f48:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f4a:	65 97       	sbiw	r28, 0x15	; 21
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	a1 05       	cpc	r26, r1
    1f50:	b1 05       	cpc	r27, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <_Z21check_sensors_releasemmh+0xdbe>
    1f54:	d0 c2       	rjmp	.+1440   	; 0x24f6 <__stack+0x3f7>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1f56:	10 17       	cp	r17, r16
    1f58:	08 f4       	brcc	.+2      	; 0x1f5c <_Z21check_sensors_releasemmh+0xdc4>
    1f5a:	cd c2       	rjmp	.+1434   	; 0x24f6 <__stack+0x3f7>
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	e0 1b       	sub	r30, r16
    1f60:	f1 09       	sbc	r31, r1
    1f62:	ee 5b       	subi	r30, 0xBE	; 190
    1f64:	f7 4f       	sbci	r31, 0xF7	; 247
    1f66:	80 81       	ld	r24, Z
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <_Z21check_sensors_releasemmh+0xdd6>
    1f6c:	c4 c2       	rjmp	.+1416   	; 0x24f6 <__stack+0x3f7>
        keypress(KEY_J);
    1f6e:	8d e0       	ldi	r24, 0x0D	; 13
    1f70:	c8 d8       	rcall	.-3696   	; 0x1102 <_Z8keypressh>
        modifierup(MODIFIERKEY_SHIFT);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
        modifierup(MODIFIERKEY_CTRL);
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
        modifierup(MODIFIERKEY_ALT);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1f84:	d5 c2       	rjmp	.+1450   	; 0x2530 <__stack+0x431>
    1f86:	10 17       	cp	r17, r16
    1f88:	08 f4       	brcc	.+2      	; 0x1f8c <_Z21check_sensors_releasemmh+0xdf4>
    1f8a:	c0 c2       	rjmp	.+1408   	; 0x250c <__stack+0x40d>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	e0 1b       	sub	r30, r16
    1f90:	f1 09       	sbc	r31, r1
    1f92:	ee 5b       	subi	r30, 0xBE	; 190
    1f94:	f7 4f       	sbci	r31, 0xF7	; 247
    1f96:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    1f98:	ee 23       	and	r30, r30
    1f9a:	39 f0       	breq	.+14     	; 0x1faa <_Z21check_sensors_releasemmh+0xe12>
    1f9c:	e1 30       	cpi	r30, 0x01	; 1
    1f9e:	29 f0       	breq	.+10     	; 0x1faa <_Z21check_sensors_releasemmh+0xe12>
    1fa0:	e2 30       	cpi	r30, 0x02	; 2
    1fa2:	19 f0       	breq	.+6      	; 0x1faa <_Z21check_sensors_releasemmh+0xe12>
    1fa4:	e3 30       	cpi	r30, 0x03	; 3
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <_Z21check_sensors_releasemmh+0xe12>
    1fa8:	b1 c2       	rjmp	.+1378   	; 0x250c <__stack+0x40d>
        mouseoff(MOUSE_ACTION_MOVE);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z8mouseoffh>
    1fb0:	bf c2       	rjmp	.+1406   	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    1fb2:	10 17       	cp	r17, r16
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <_Z21check_sensors_releasemmh+0xe20>
    1fb6:	bc c2       	rjmp	.+1400   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    1fb8:	f9 01       	movw	r30, r18
    1fba:	e0 1b       	sub	r30, r16
    1fbc:	f1 09       	sbc	r31, r1
    1fbe:	ee 5b       	subi	r30, 0xBE	; 190
    1fc0:	f7 4f       	sbci	r31, 0xF7	; 247
    1fc2:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_MY) == KS1_MY && (sensors2 & KS2_MY) == KS2_MY) {
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1fc4:	ee 23       	and	r30, r30
    1fc6:	61 f4       	brne	.+24     	; 0x1fe0 <_Z21check_sensors_releasemmh+0xe48>
            keypress(KEY_A);
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	9b d8       	rcall	.-3786   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1fde:	a8 c2       	rjmp	.+1360   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1fe0:	e1 30       	cpi	r30, 0x01	; 1
    1fe2:	61 f4       	brne	.+24     	; 0x1ffc <_Z21check_sensors_releasemmh+0xe64>
            keypress(KEYPAD_PLUS);
    1fe4:	87 e5       	ldi	r24, 0x57	; 87
    1fe6:	8d d8       	rcall	.-3814   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    1ffa:	9a c2       	rjmp	.+1332   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1ffc:	e2 30       	cpi	r30, 0x02	; 2
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <_Z21check_sensors_releasemmh+0xe6a>
    2000:	4b c2       	rjmp	.+1174   	; 0x2498 <__stack+0x399>
            modifierdown(MODIFIERKEY_SHIFT);
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_QUOTE);
    2008:	84 e3       	ldi	r24, 0x34	; 52
    200a:	7b d8       	rcall	.-3850   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    201e:	88 c2       	rjmp	.+1296   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_AY) == KS1_AY && (sensors2 & KS2_AY) == KS2_AY) {
    2020:	47 ff       	sbrs	r20, 7
    2022:	42 c0       	rjmp	.+132    	; 0x20a8 <_Z21check_sensors_releasemmh+0xf10>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2024:	10 17       	cp	r17, r16
    2026:	08 f4       	brcc	.+2      	; 0x202a <_Z21check_sensors_releasemmh+0xe92>
    2028:	83 c2       	rjmp	.+1286   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    202a:	f9 01       	movw	r30, r18
    202c:	e0 1b       	sub	r30, r16
    202e:	f1 09       	sbc	r31, r1
    2030:	ee 5b       	subi	r30, 0xBE	; 190
    2032:	f7 4f       	sbci	r31, 0xF7	; 247
    2034:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2036:	ee 23       	and	r30, r30
    2038:	61 f4       	brne	.+24     	; 0x2052 <_Z21check_sensors_releasemmh+0xeba>
            keypress(KEY_R);
    203a:	85 e1       	ldi	r24, 0x15	; 21
    203c:	62 d8       	rcall	.-3900   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2050:	6f c2       	rjmp	.+1246   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2052:	e1 30       	cpi	r30, 0x01	; 1
    2054:	61 f4       	brne	.+24     	; 0x206e <_Z21check_sensors_releasemmh+0xed6>
            keypress(KEY_1);
    2056:	8e e1       	ldi	r24, 0x1E	; 30
    2058:	54 d8       	rcall	.-3928   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    206c:	61 c2       	rjmp	.+1218   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    206e:	e2 30       	cpi	r30, 0x02	; 2
    2070:	61 f4       	brne	.+24     	; 0x208a <_Z21check_sensors_releasemmh+0xef2>
            keypress(KEY_PERIOD);
    2072:	87 e3       	ldi	r24, 0x37	; 55
    2074:	46 d8       	rcall	.-3956   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2088:	53 c2       	rjmp	.+1190   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    208a:	e3 30       	cpi	r30, 0x03	; 3
    208c:	09 f0       	breq	.+2      	; 0x2090 <_Z21check_sensors_releasemmh+0xef8>
    208e:	04 c2       	rjmp	.+1032   	; 0x2498 <__stack+0x399>
            keypress(KEY_F1);
    2090:	8a e3       	ldi	r24, 0x3A	; 58
    2092:	37 d8       	rcall	.-3986   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    20a6:	44 c2       	rjmp	.+1160   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_BY) == KS1_BY && (sensors2 & KS2_BY) == KS2_BY) {
    20a8:	41 14       	cp	r4, r1
    20aa:	51 04       	cpc	r5, r1
    20ac:	61 04       	cpc	r6, r1
    20ae:	71 04       	cpc	r7, r1
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <_Z21check_sensors_releasemmh+0xf1c>
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <__stack+0x3d>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    20b4:	10 17       	cp	r17, r16
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <_Z21check_sensors_releasemmh+0xf22>
    20b8:	3b c2       	rjmp	.+1142   	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    20ba:	f9 01       	movw	r30, r18
    20bc:	e0 1b       	sub	r30, r16
    20be:	f1 09       	sbc	r31, r1
    20c0:	ee 5b       	subi	r30, 0xBE	; 190
    20c2:	f7 4f       	sbci	r31, 0xF7	; 247
    20c4:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    20c6:	ee 23       	and	r30, r30
    20c8:	61 f4       	brne	.+24     	; 0x20e2 <_Z21check_sensors_releasemmh+0xf4a>
            keypress(KEY_N);
    20ca:	81 e1       	ldi	r24, 0x11	; 17
    20cc:	1a d8       	rcall	.-4044   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    20d4:	84 e0       	ldi	r24, 0x04	; 4
    20d6:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    20e0:	27 c2       	rjmp	.+1102   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    20e2:	e1 30       	cpi	r30, 0x01	; 1
    20e4:	61 f4       	brne	.+24     	; 0x20fe <_Z21check_sensors_releasemmh+0xf66>
            keypress(KEY_2);
    20e6:	8f e1       	ldi	r24, 0x1F	; 31
    20e8:	0c d8       	rcall	.-4072   	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    20fc:	19 c2       	rjmp	.+1074   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    20fe:	e2 30       	cpi	r30, 0x02	; 2
    2100:	69 f4       	brne	.+26     	; 0x211c <__stack+0x1d>
            keypress(KEY_COMMA);
    2102:	86 e3       	ldi	r24, 0x36	; 54
    2104:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2108:	82 e0       	ldi	r24, 0x02	; 2
    210a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    211a:	0a c2       	rjmp	.+1044   	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    211c:	e3 30       	cpi	r30, 0x03	; 3
    211e:	09 f0       	breq	.+2      	; 0x2122 <__stack+0x23>
    2120:	bb c1       	rjmp	.+886    	; 0x2498 <__stack+0x399>
            keypress(KEY_F2);
    2122:	8b e3       	ldi	r24, 0x3B	; 59
    2124:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    212e:	84 e0       	ldi	r24, 0x04	; 4
    2130:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    213a:	fa c1       	rjmp	.+1012   	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_CY) == KS1_CY && (sensors2 & KS2_CY) == KS2_CY) {
    213c:	6d 96       	adiw	r28, 0x1d	; 29
    213e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2140:	9d ad       	ldd	r25, Y+61	; 0x3d
    2142:	ae ad       	ldd	r26, Y+62	; 0x3e
    2144:	bf ad       	ldd	r27, Y+63	; 0x3f
    2146:	6d 97       	sbiw	r28, 0x1d	; 29
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	a1 05       	cpc	r26, r1
    214c:	b1 05       	cpc	r27, r1
    214e:	09 f4       	brne	.+2      	; 0x2152 <__stack+0x53>
    2150:	49 c0       	rjmp	.+146    	; 0x21e4 <__stack+0xe5>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2152:	10 17       	cp	r17, r16
    2154:	08 f4       	brcc	.+2      	; 0x2158 <__stack+0x59>
    2156:	ec c1       	rjmp	.+984    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2158:	f9 01       	movw	r30, r18
    215a:	e0 1b       	sub	r30, r16
    215c:	f1 09       	sbc	r31, r1
    215e:	ee 5b       	subi	r30, 0xBE	; 190
    2160:	f7 4f       	sbci	r31, 0xF7	; 247
    2162:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2164:	ee 23       	and	r30, r30
    2166:	69 f4       	brne	.+26     	; 0x2182 <__stack+0x83>
            keypress(KEY_F);
    2168:	89 e0       	ldi	r24, 0x09	; 9
    216a:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2174:	84 e0       	ldi	r24, 0x04	; 4
    2176:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2180:	d7 c1       	rjmp	.+942    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2182:	e1 30       	cpi	r30, 0x01	; 1
    2184:	69 f4       	brne	.+26     	; 0x21a0 <__stack+0xa1>
            keypress(KEY_3);
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2192:	84 e0       	ldi	r24, 0x04	; 4
    2194:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    219e:	c8 c1       	rjmp	.+912    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    21a0:	e2 30       	cpi	r30, 0x02	; 2
    21a2:	81 f4       	brne	.+32     	; 0x21c4 <__stack+0xc5>
            modifierdown(MODIFIERKEY_SHIFT);
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_2);
    21aa:	8f e1       	ldi	r24, 0x1F	; 31
    21ac:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    21b6:	84 e0       	ldi	r24, 0x04	; 4
    21b8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    21c2:	b6 c1       	rjmp	.+876    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    21c4:	e3 30       	cpi	r30, 0x03	; 3
    21c6:	09 f0       	breq	.+2      	; 0x21ca <__stack+0xcb>
    21c8:	67 c1       	rjmp	.+718    	; 0x2498 <__stack+0x399>
            keypress(KEY_F3);
    21ca:	8c e3       	ldi	r24, 0x3C	; 60
    21cc:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    21e2:	a6 c1       	rjmp	.+844    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_NY) == KS1_NY && (sensors2 & KS2_NY) == KS2_NY) {
    21e4:	54 ff       	sbrs	r21, 4
    21e6:	3d c0       	rjmp	.+122    	; 0x2262 <__stack+0x163>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    21e8:	10 17       	cp	r17, r16
    21ea:	08 f4       	brcc	.+2      	; 0x21ee <__stack+0xef>
    21ec:	a1 c1       	rjmp	.+834    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    21ee:	f9 01       	movw	r30, r18
    21f0:	e0 1b       	sub	r30, r16
    21f2:	f1 09       	sbc	r31, r1
    21f4:	ee 5b       	subi	r30, 0xBE	; 190
    21f6:	f7 4f       	sbci	r31, 0xF7	; 247
    21f8:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    21fa:	ee 23       	and	r30, r30
    21fc:	69 f4       	brne	.+26     	; 0x2218 <__stack+0x119>
            keypress(KEY_E);
    21fe:	88 e0       	ldi	r24, 0x08	; 8
    2200:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    220a:	84 e0       	ldi	r24, 0x04	; 4
    220c:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2216:	8c c1       	rjmp	.+792    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2218:	e1 30       	cpi	r30, 0x01	; 1
    221a:	69 f4       	brne	.+26     	; 0x2236 <__stack+0x137>
            keypress(KEYPAD_MINUS);
    221c:	86 e5       	ldi	r24, 0x56	; 86
    221e:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2228:	84 e0       	ldi	r24, 0x04	; 4
    222a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2234:	7d c1       	rjmp	.+762    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2236:	e2 30       	cpi	r30, 0x02	; 2
    2238:	69 f4       	brne	.+26     	; 0x2254 <__stack+0x155>
            keypress(KEY_QUOTE);
    223a:	84 e3       	ldi	r24, 0x34	; 52
    223c:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2246:	84 e0       	ldi	r24, 0x04	; 4
    2248:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2252:	6e c1       	rjmp	.+732    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    2254:	e3 30       	cpi	r30, 0x03	; 3
    2256:	09 f0       	breq	.+2      	; 0x225a <__stack+0x15b>
    2258:	1f c1       	rjmp	.+574    	; 0x2498 <__stack+0x399>
            modifierpress(MODIFIERKEY_GUI);
    225a:	88 e0       	ldi	r24, 0x08	; 8
    225c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_Z13modifierpressh>
    2260:	67 c1       	rjmp	.+718    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_OY) == KS1_OY && (sensors2 & KS2_OY) == KS2_OY) {
    2262:	56 ff       	sbrs	r21, 6
    2264:	3a c0       	rjmp	.+116    	; 0x22da <__stack+0x1db>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2266:	10 17       	cp	r17, r16
    2268:	08 f4       	brcc	.+2      	; 0x226c <__stack+0x16d>
    226a:	62 c1       	rjmp	.+708    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    226c:	f9 01       	movw	r30, r18
    226e:	e0 1b       	sub	r30, r16
    2270:	f1 09       	sbc	r31, r1
    2272:	ee 5b       	subi	r30, 0xBE	; 190
    2274:	f7 4f       	sbci	r31, 0xF7	; 247
    2276:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2278:	ee 23       	and	r30, r30
    227a:	69 f4       	brne	.+26     	; 0x2296 <__stack+0x197>
            keypress(KEY_I);
    227c:	8c e0       	ldi	r24, 0x0C	; 12
    227e:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    2294:	4d c1       	rjmp	.+666    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2296:	e2 30       	cpi	r30, 0x02	; 2
    2298:	81 f4       	brne	.+32     	; 0x22ba <__stack+0x1bb>
            modifierdown(MODIFIERKEY_SHIFT);
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	0e 94 75 05 	call	0xaea	; 0xaea <_Z12modifierdownh>
            keypress(KEY_7);
    22a0:	84 e2       	ldi	r24, 0x24	; 36
    22a2:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    22ac:	84 e0       	ldi	r24, 0x04	; 4
    22ae:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    22b8:	3b c1       	rjmp	.+630    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    22ba:	e3 30       	cpi	r30, 0x03	; 3
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <__stack+0x1c1>
    22be:	ec c0       	rjmp	.+472    	; 0x2498 <__stack+0x399>
            keypress(KEY_APP);
    22c0:	85 e6       	ldi	r24, 0x65	; 101
    22c2:	0e 94 81 08 	call	0x1102	; 0x1102 <_Z8keypressh>
            modifierup(MODIFIERKEY_SHIFT);
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_CTRL);
    22cc:	84 e0       	ldi	r24, 0x04	; 4
    22ce:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
            modifierup(MODIFIERKEY_ALT);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z10modifieruph>
    22d8:	2b c1       	rjmp	.+598    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_A3) == KS1_A3 && (sensors2 & KS2_A3) == KS2_A3) {
    22da:	ca 01       	movw	r24, r20
    22dc:	80 70       	andi	r24, 0x00	; 0
    22de:	90 78       	andi	r25, 0x80	; 128
    22e0:	89 2b       	or	r24, r25
    22e2:	d1 f0       	breq	.+52     	; 0x2318 <__stack+0x219>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    22e4:	10 17       	cp	r17, r16
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <__stack+0x1eb>
    22e8:	23 c1       	rjmp	.+582    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    22ea:	f9 01       	movw	r30, r18
    22ec:	e0 1b       	sub	r30, r16
    22ee:	f1 09       	sbc	r31, r1
    22f0:	ee 5b       	subi	r30, 0xBE	; 190
    22f2:	f7 4f       	sbci	r31, 0xF7	; 247
    22f4:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos)) {
    22f6:	ee 23       	and	r30, r30
    22f8:	21 f0       	breq	.+8      	; 0x2302 <__stack+0x203>
    22fa:	e1 30       	cpi	r30, 0x01	; 1
    22fc:	11 f0       	breq	.+4      	; 0x2302 <__stack+0x203>
    22fe:	e2 30       	cpi	r30, 0x02	; 2
    2300:	21 f4       	brne	.+8      	; 0x230a <__stack+0x20b>
            setmode(KMODE_FUNCTIONS);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    2308:	13 c1       	rjmp	.+550    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    230a:	e3 30       	cpi	r30, 0x03	; 3
    230c:	09 f0       	breq	.+2      	; 0x2310 <__stack+0x211>
    230e:	c4 c0       	rjmp	.+392    	; 0x2498 <__stack+0x399>
            setmode(KMODE_DEFAULT);
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    2316:	0c c1       	rjmp	.+536    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_A2) == KS1_A2 && (sensors2 & KS2_A2) == KS2_A2) {
    2318:	60 ff       	sbrs	r22, 0
    231a:	1a c0       	rjmp	.+52     	; 0x2350 <__stack+0x251>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    231c:	10 17       	cp	r17, r16
    231e:	08 f4       	brcc	.+2      	; 0x2322 <__stack+0x223>
    2320:	07 c1       	rjmp	.+526    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2322:	f9 01       	movw	r30, r18
    2324:	e0 1b       	sub	r30, r16
    2326:	f1 09       	sbc	r31, r1
    2328:	ee 5b       	subi	r30, 0xBE	; 190
    232a:	f7 4f       	sbci	r31, 0xF7	; 247
    232c:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    232e:	ee 23       	and	r30, r30
    2330:	21 f0       	breq	.+8      	; 0x233a <__stack+0x23b>
    2332:	e1 30       	cpi	r30, 0x01	; 1
    2334:	11 f0       	breq	.+4      	; 0x233a <__stack+0x23b>
    2336:	e3 30       	cpi	r30, 0x03	; 3
    2338:	21 f4       	brne	.+8      	; 0x2342 <__stack+0x243>
            setmode(KMODE_SYMBOLS);
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    2340:	f7 c0       	rjmp	.+494    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2342:	e2 30       	cpi	r30, 0x02	; 2
    2344:	09 f0       	breq	.+2      	; 0x2348 <__stack+0x249>
    2346:	a8 c0       	rjmp	.+336    	; 0x2498 <__stack+0x399>
            setmode(KMODE_DEFAULT);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    234e:	f0 c0       	rjmp	.+480    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_A1) == KS1_A1 && (sensors2 & KS2_A1) == KS2_A1) {
    2350:	61 ff       	sbrs	r22, 1
    2352:	1a c0       	rjmp	.+52     	; 0x2388 <__stack+0x289>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2354:	10 17       	cp	r17, r16
    2356:	08 f4       	brcc	.+2      	; 0x235a <__stack+0x25b>
    2358:	eb c0       	rjmp	.+470    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    235a:	f9 01       	movw	r30, r18
    235c:	e0 1b       	sub	r30, r16
    235e:	f1 09       	sbc	r31, r1
    2360:	ee 5b       	subi	r30, 0xBE	; 190
    2362:	f7 4f       	sbci	r31, 0xF7	; 247
    2364:	e0 81       	ld	r30, Z
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    2366:	ee 23       	and	r30, r30
    2368:	21 f0       	breq	.+8      	; 0x2372 <__stack+0x273>
    236a:	e2 30       	cpi	r30, 0x02	; 2
    236c:	11 f0       	breq	.+4      	; 0x2372 <__stack+0x273>
    236e:	e3 30       	cpi	r30, 0x03	; 3
    2370:	21 f4       	brne	.+8      	; 0x237a <__stack+0x27b>
            setmode(KMODE_NUMBERS);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    2378:	db c0       	rjmp	.+438    	; 0x2530 <__stack+0x431>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    237a:	e1 30       	cpi	r30, 0x01	; 1
    237c:	09 f0       	breq	.+2      	; 0x2380 <__stack+0x281>
    237e:	8c c0       	rjmp	.+280    	; 0x2498 <__stack+0x399>
            setmode(KMODE_DEFAULT);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z7setmodeh>
    2386:	d4 c0       	rjmp	.+424    	; 0x2530 <__stack+0x431>
            return;
         }
    } else if ((sensors1 & KS1_D3) == KS1_D3 && (sensors2 & KS2_D3) == KS2_D3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2388:	62 ff       	sbrs	r22, 2
    238a:	c7 c0       	rjmp	.+398    	; 0x251a <__stack+0x41b>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    238c:	10 17       	cp	r17, r16
    238e:	08 f4       	brcc	.+2      	; 0x2392 <__stack+0x293>
    2390:	c4 c0       	rjmp	.+392    	; 0x251a <__stack+0x41b>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2392:	f9 01       	movw	r30, r18
    2394:	e0 1b       	sub	r30, r16
    2396:	f1 09       	sbc	r31, r1
    2398:	ee 5b       	subi	r30, 0xBE	; 190
    239a:	f7 4f       	sbci	r31, 0xF7	; 247
    239c:	e0 81       	ld	r30, Z
    239e:	ee 23       	and	r30, r30
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__stack+0x2a5>
    23a2:	c6 c0       	rjmp	.+396    	; 0x2530 <__stack+0x431>
    23a4:	e1 30       	cpi	r30, 0x01	; 1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <__stack+0x2ab>
    23a8:	c3 c0       	rjmp	.+390    	; 0x2530 <__stack+0x431>
    23aa:	e2 30       	cpi	r30, 0x02	; 2
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <__stack+0x2b1>
    23ae:	c0 c0       	rjmp	.+384    	; 0x2530 <__stack+0x431>
    23b0:	e3 30       	cpi	r30, 0x03	; 3
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <__stack+0x2b7>
    23b4:	bd c0       	rjmp	.+378    	; 0x2530 <__stack+0x431>
    23b6:	b1 c0       	rjmp	.+354    	; 0x251a <__stack+0x41b>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    23b8:	10 17       	cp	r17, r16
    23ba:	08 f4       	brcc	.+2      	; 0x23be <__stack+0x2bf>
    23bc:	b0 c0       	rjmp	.+352    	; 0x251e <__stack+0x41f>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    23be:	f9 01       	movw	r30, r18
    23c0:	e0 1b       	sub	r30, r16
    23c2:	f1 09       	sbc	r31, r1
    23c4:	ee 5b       	subi	r30, 0xBE	; 190
    23c6:	f7 4f       	sbci	r31, 0xF7	; 247
    23c8:	e0 81       	ld	r30, Z
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_ALT', )
        return;
    } else if ((sensors1 & KS1_D2) == KS1_D2 && (sensors2 & KS2_D2) == KS2_D2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    23ca:	ee 23       	and	r30, r30
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__stack+0x2d1>
    23ce:	b0 c0       	rjmp	.+352    	; 0x2530 <__stack+0x431>
    23d0:	e1 30       	cpi	r30, 0x01	; 1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <__stack+0x2d7>
    23d4:	ad c0       	rjmp	.+346    	; 0x2530 <__stack+0x431>
    23d6:	e2 30       	cpi	r30, 0x02	; 2
    23d8:	09 f4       	brne	.+2      	; 0x23dc <__stack+0x2dd>
    23da:	aa c0       	rjmp	.+340    	; 0x2530 <__stack+0x431>
    23dc:	e3 30       	cpi	r30, 0x03	; 3
    23de:	09 f4       	brne	.+2      	; 0x23e2 <__stack+0x2e3>
    23e0:	a7 c0       	rjmp	.+334    	; 0x2530 <__stack+0x431>
    23e2:	9d c0       	rjmp	.+314    	; 0x251e <__stack+0x41f>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    23e4:	10 17       	cp	r17, r16
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <__stack+0x2eb>
    23e8:	9c c0       	rjmp	.+312    	; 0x2522 <__stack+0x423>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    23ea:	f9 01       	movw	r30, r18
    23ec:	e0 1b       	sub	r30, r16
    23ee:	f1 09       	sbc	r31, r1
    23f0:	ee 5b       	subi	r30, 0xBE	; 190
    23f2:	f7 4f       	sbci	r31, 0xF7	; 247
    23f4:	e0 81       	ld	r30, Z
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_CTRL', )
        return;
    } else if ((sensors1 & KS1_D1) == KS1_D1 && (sensors2 & KS2_D1) == KS2_D1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    23f6:	ee 23       	and	r30, r30
    23f8:	09 f4       	brne	.+2      	; 0x23fc <__stack+0x2fd>
    23fa:	9a c0       	rjmp	.+308    	; 0x2530 <__stack+0x431>
    23fc:	e1 30       	cpi	r30, 0x01	; 1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <__stack+0x303>
    2400:	97 c0       	rjmp	.+302    	; 0x2530 <__stack+0x431>
    2402:	e2 30       	cpi	r30, 0x02	; 2
    2404:	09 f4       	brne	.+2      	; 0x2408 <__stack+0x309>
    2406:	94 c0       	rjmp	.+296    	; 0x2530 <__stack+0x431>
    2408:	e3 30       	cpi	r30, 0x03	; 3
    240a:	09 f4       	brne	.+2      	; 0x240e <__stack+0x30f>
    240c:	91 c0       	rjmp	.+290    	; 0x2530 <__stack+0x431>
    240e:	89 c0       	rjmp	.+274    	; 0x2522 <__stack+0x423>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2410:	10 17       	cp	r17, r16
    2412:	08 f4       	brcc	.+2      	; 0x2416 <__stack+0x317>
    2414:	88 c0       	rjmp	.+272    	; 0x2526 <__stack+0x427>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2416:	f9 01       	movw	r30, r18
    2418:	e0 1b       	sub	r30, r16
    241a:	f1 09       	sbc	r31, r1
    241c:	ee 5b       	subi	r30, 0xBE	; 190
    241e:	f7 4f       	sbci	r31, 0xF7	; 247
    2420:	e0 81       	ld	r30, Z
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_SHIFT', )
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2422:	ee 23       	and	r30, r30
    2424:	39 f0       	breq	.+14     	; 0x2434 <__stack+0x335>
    2426:	e1 30       	cpi	r30, 0x01	; 1
    2428:	29 f0       	breq	.+10     	; 0x2434 <__stack+0x335>
    242a:	e2 30       	cpi	r30, 0x02	; 2
    242c:	19 f0       	breq	.+6      	; 0x2434 <__stack+0x335>
    242e:	e3 30       	cpi	r30, 0x03	; 3
    2430:	09 f0       	breq	.+2      	; 0x2434 <__stack+0x335>
    2432:	79 c0       	rjmp	.+242    	; 0x2526 <__stack+0x427>
        mouseup(MOUSE_RIGHT);
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z7mouseuph>
    243a:	7a c0       	rjmp	.+244    	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    243c:	10 17       	cp	r17, r16
    243e:	08 f4       	brcc	.+2      	; 0x2442 <__stack+0x343>
    2440:	74 c0       	rjmp	.+232    	; 0x252a <__stack+0x42b>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2442:	f9 01       	movw	r30, r18
    2444:	e0 1b       	sub	r30, r16
    2446:	f1 09       	sbc	r31, r1
    2448:	ee 5b       	subi	r30, 0xBE	; 190
    244a:	f7 4f       	sbci	r31, 0xF7	; 247
    244c:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    244e:	ee 23       	and	r30, r30
    2450:	39 f0       	breq	.+14     	; 0x2460 <__stack+0x361>
    2452:	e1 30       	cpi	r30, 0x01	; 1
    2454:	29 f0       	breq	.+10     	; 0x2460 <__stack+0x361>
    2456:	e2 30       	cpi	r30, 0x02	; 2
    2458:	19 f0       	breq	.+6      	; 0x2460 <__stack+0x361>
    245a:	e3 30       	cpi	r30, 0x03	; 3
    245c:	09 f0       	breq	.+2      	; 0x2460 <__stack+0x361>
    245e:	65 c0       	rjmp	.+202    	; 0x252a <__stack+0x42b>
        mouseup(MOUSE_MIDDLE);
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z7mouseuph>
    2466:	64 c0       	rjmp	.+200    	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2468:	10 17       	cp	r17, r16
    246a:	08 f4       	brcc	.+2      	; 0x246e <__stack+0x36f>
    246c:	61 c0       	rjmp	.+194    	; 0x2530 <__stack+0x431>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    246e:	f9 01       	movw	r30, r18
    2470:	e0 1b       	sub	r30, r16
    2472:	f1 09       	sbc	r31, r1
    2474:	ee 5b       	subi	r30, 0xBE	; 190
    2476:	f7 4f       	sbci	r31, 0xF7	; 247
    2478:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    247a:	ee 23       	and	r30, r30
    247c:	31 f0       	breq	.+12     	; 0x248a <__stack+0x38b>
    247e:	e1 30       	cpi	r30, 0x01	; 1
    2480:	21 f0       	breq	.+8      	; 0x248a <__stack+0x38b>
    2482:	e2 30       	cpi	r30, 0x02	; 2
    2484:	11 f0       	breq	.+4      	; 0x248a <__stack+0x38b>
    2486:	e3 30       	cpi	r30, 0x03	; 3
    2488:	39 f4       	brne	.+14     	; 0x2498 <__stack+0x399>
        mouseup(MOUSE_LEFT);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z7mouseuph>
    2490:	4f c0       	rjmp	.+158    	; 0x2530 <__stack+0x431>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2492:	10 17       	cp	r17, r16
    2494:	08 f4       	brcc	.+2      	; 0x2498 <__stack+0x399>
    2496:	4c c0       	rjmp	.+152    	; 0x2530 <__stack+0x431>
        return;
    }
 
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
    2498:	f9 01       	movw	r30, r18
    249a:	e0 1b       	sub	r30, r16
    249c:	f1 09       	sbc	r31, r1
    249e:	ee 5b       	subi	r30, 0xBE	; 190
    24a0:	f7 4f       	sbci	r31, 0xF7	; 247
    24a2:	80 81       	ld	r24, Z
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	09 f0       	breq	.+2      	; 0x24aa <__stack+0x3ab>
    24a8:	43 c0       	rjmp	.+134    	; 0x2530 <__stack+0x431>
    24aa:	0f 5f       	subi	r16, 0xFF	; 255
    24ac:	10 17       	cp	r17, r16
    24ae:	08 f4       	brcc	.+2      	; 0x24b2 <__stack+0x3b3>
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <__stack+0x431>
    24b2:	f9 01       	movw	r30, r18
    24b4:	e0 1b       	sub	r30, r16
    24b6:	f1 09       	sbc	r31, r1
    24b8:	ee 5b       	subi	r30, 0xBE	; 190
    24ba:	f7 4f       	sbci	r31, 0xF7	; 247
    24bc:	80 81       	ld	r24, Z
    24be:	88 23       	and	r24, r24
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <__stack+0x3c7>
    24c2:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <_Z21check_sensors_releasemmh+0x252>
    24c6:	34 c0       	rjmp	.+104    	; 0x2530 <__stack+0x431>
    24c8:	10 17       	cp	r17, r16
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <__stack+0x3cf>
    24cc:	19 c8       	rjmp	.-4046   	; 0x1500 <_Z21check_sensors_releasemmh+0x368>
    24ce:	30 c0       	rjmp	.+96     	; 0x2530 <__stack+0x431>
        keypress(KEY_V);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    24d0:	8d a9       	ldd	r24, Y+53	; 0x35
    24d2:	9e a9       	ldd	r25, Y+54	; 0x36
    24d4:	af a9       	ldd	r26, Y+55	; 0x37
    24d6:	b8 ad       	ldd	r27, Y+56	; 0x38
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	a1 05       	cpc	r26, r1
    24dc:	b1 05       	cpc	r27, r1
    24de:	09 f0       	breq	.+2      	; 0x24e2 <__stack+0x3e3>
    24e0:	44 cb       	rjmp	.-2424   	; 0x1b6a <_Z21check_sensors_releasemmh+0x9d2>
        mouseoff(MOUSE_ACTION_SCROLL);
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
    24e2:	89 ad       	ldd	r24, Y+57	; 0x39
    24e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    24e6:	ab ad       	ldd	r26, Y+59	; 0x3b
    24e8:	bc ad       	ldd	r27, Y+60	; 0x3c
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	a1 05       	cpc	r26, r1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <__stack+0x3f5>
    24f2:	51 cb       	rjmp	.-2398   	; 0x1b96 <_Z21check_sensors_releasemmh+0x9fe>
    24f4:	c1 cb       	rjmp	.-2174   	; 0x1c78 <_Z21check_sensors_releasemmh+0xae0>
        keypress(KEY_J);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    24f6:	69 96       	adiw	r28, 0x19	; 25
    24f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    24fa:	9d ad       	ldd	r25, Y+61	; 0x3d
    24fc:	ae ad       	ldd	r26, Y+62	; 0x3e
    24fe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2500:	69 97       	sbiw	r28, 0x19	; 25
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	a1 05       	cpc	r26, r1
    2506:	b1 05       	cpc	r27, r1
    2508:	09 f0       	breq	.+2      	; 0x250c <__stack+0x40d>
    250a:	3d cd       	rjmp	.-1414   	; 0x1f86 <_Z21check_sensors_releasemmh+0xdee>
        mouseoff(MOUSE_ACTION_MOVE);
        return;
    } else if ((sensors1 & KS1_MY) == KS1_MY && (sensors2 & KS2_MY) == KS2_MY) {
    250c:	81 14       	cp	r8, r1
    250e:	91 04       	cpc	r9, r1
    2510:	a1 04       	cpc	r10, r1
    2512:	b1 04       	cpc	r11, r1
    2514:	09 f0       	breq	.+2      	; 0x2518 <__stack+0x419>
    2516:	4d cd       	rjmp	.-1382   	; 0x1fb2 <_Z21check_sensors_releasemmh+0xe1a>
    2518:	83 cd       	rjmp	.-1274   	; 0x2020 <_Z21check_sensors_releasemmh+0xe88>
            return;
         }
    } else if ((sensors1 & KS1_D3) == KS1_D3 && (sensors2 & KS2_D3) == KS2_D3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_ALT', )
        return;
    } else if ((sensors1 & KS1_D2) == KS1_D2 && (sensors2 & KS2_D2) == KS2_D2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    251a:	63 fd       	sbrc	r22, 3
    251c:	4d cf       	rjmp	.-358    	; 0x23b8 <__stack+0x2b9>
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_CTRL', )
        return;
    } else if ((sensors1 & KS1_D1) == KS1_D1 && (sensors2 & KS2_D1) == KS2_D1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    251e:	64 fd       	sbrc	r22, 4
    2520:	61 cf       	rjmp	.-318    	; 0x23e4 <__stack+0x2e5>
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_SHIFT', )
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2522:	70 fd       	sbrc	r23, 0
    2524:	75 cf       	rjmp	.-278    	; 0x2410 <__stack+0x311>
        mouseup(MOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2526:	71 fd       	sbrc	r23, 1
    2528:	89 cf       	rjmp	.-238    	; 0x243c <__stack+0x33d>
        mouseup(MOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    252a:	72 ff       	sbrs	r23, 2
    252c:	b2 cf       	rjmp	.-156    	; 0x2492 <__stack+0x393>
    252e:	9c cf       	rjmp	.-200    	; 0x2468 <__stack+0x369>
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
        check_sensors_release(sensors1, sensors2, pos + 1);
        return;
    }
}
    2530:	c4 5a       	subi	r28, 0xA4	; 164
    2532:	df 4f       	sbci	r29, 0xFF	; 255
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	bf 90       	pop	r11
    2550:	af 90       	pop	r10
    2552:	9f 90       	pop	r9
    2554:	8f 90       	pop	r8
    2556:	7f 90       	pop	r7
    2558:	6f 90       	pop	r6
    255a:	5f 90       	pop	r5
    255c:	4f 90       	pop	r4
    255e:	08 95       	ret

00002560 <_Z9mousedownh>:
    } else if (mode == MOUSE_ACTION_SCROLL) {
        opt_scroll_mode = 0;
    }
}

void mousedown(uint8_t button) {
    2560:	1f 93       	push	r17
    2562:	18 2f       	mov	r17, r24
    DEBUG_PRN_TOUCHSET("touchset mousedown ");
    2564:	88 e8       	ldi	r24, 0x88	; 136
    2566:	98 e0       	ldi	r25, 0x08	; 8
    2568:	6d e6       	ldi	r22, 0x6D	; 109
    256a:	72 e0       	ldi	r23, 0x02	; 2
    256c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(button);
    2570:	88 e8       	ldi	r24, 0x88	; 136
    2572:	98 e0       	ldi	r25, 0x08	; 8
    2574:	61 2f       	mov	r22, r17
    2576:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    mouseDown = mouseDown | button;
    257a:	80 91 41 08 	lds	r24, 0x0841
    257e:	81 2b       	or	r24, r17
    2580:	80 93 41 08 	sts	0x0841, r24
    #ifdef ENABLE_USB
        Mouse.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	80 fd       	sbrc	r24, 0
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	36 95       	lsr	r19
    2590:	27 95       	ror	r18
    2592:	42 2f       	mov	r20, r18
    2594:	41 70       	andi	r20, 0x01	; 1
    2596:	36 95       	lsr	r19
    2598:	27 95       	ror	r18
    259a:	21 70       	andi	r18, 0x01	; 1
    259c:	88 ea       	ldi	r24, 0xA8	; 168
    259e:	98 e0       	ldi	r25, 0x08	; 8
    25a0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <_ZN8USBMouse11set_buttonsEhhh>
    #endif /* ENABLE_USB */
    #ifdef ENABLE_RX400
        RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    #endif /* ENABLE_RX400 */
}
    25a4:	1f 91       	pop	r17
    25a6:	08 95       	ret

000025a8 <_Z19check_sensors_touchmmh>:
#define KS2_J2 0x2000000
 
#define KS1_J1 0x0
#define KS2_J1 0x4000000
 
void check_sensors_touch(uint32_t sensors1, uint32_t sensors2, uint8_t pos) {
    25a8:	4f 92       	push	r4
    25aa:	5f 92       	push	r5
    25ac:	6f 92       	push	r6
    25ae:	7f 92       	push	r7
    25b0:	8f 92       	push	r8
    25b2:	9f 92       	push	r9
    25b4:	af 92       	push	r10
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	28 97       	sbiw	r28, 0x08	; 8
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	6b 01       	movw	r12, r22
    25d8:	7c 01       	movw	r14, r24
    25da:	2d 83       	std	Y+5, r18	; 0x05
    25dc:	3e 83       	std	Y+6, r19	; 0x06
    25de:	4f 83       	std	Y+7, r20	; 0x07
    25e0:	58 87       	std	Y+8, r21	; 0x08
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    25e2:	90 91 4c 08 	lds	r25, 0x084C
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    25e6:	a9 2f       	mov	r26, r25
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    25ea:	81 2c       	mov	r8, r1
    25ec:	91 2c       	mov	r9, r1
    25ee:	60 e2       	ldi	r22, 0x20	; 32
    25f0:	a6 2e       	mov	r10, r22
    25f2:	b1 2c       	mov	r11, r1
    25f4:	c8 20       	and	r12, r8
    25f6:	d9 20       	and	r13, r9
    25f8:	ea 20       	and	r14, r10
    25fa:	fb 20       	and	r15, r11
        mouseon(MOUSE_ACTION_SCROLL);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    25fc:	20 72       	andi	r18, 0x20	; 32
    25fe:	30 70       	andi	r19, 0x00	; 0
    2600:	40 70       	andi	r20, 0x00	; 0
    2602:	50 70       	andi	r21, 0x00	; 0
    2604:	29 83       	std	Y+1, r18	; 0x01
    2606:	3a 83       	std	Y+2, r19	; 0x02
    2608:	4b 83       	std	Y+3, r20	; 0x03
    260a:	5c 83       	std	Y+4, r21	; 0x04
        mouseon(MOUSE_ACTION_MOVE);
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    260c:	41 2c       	mov	r4, r1
    260e:	51 2c       	mov	r5, r1
    2610:	61 2c       	mov	r6, r1
    2612:	21 e0       	ldi	r18, 0x01	; 1
    2614:	72 2e       	mov	r7, r18
    2616:	2d 81       	ldd	r18, Y+5	; 0x05
    2618:	3e 81       	ldd	r19, Y+6	; 0x06
    261a:	4f 81       	ldd	r20, Y+7	; 0x07
    261c:	58 85       	ldd	r21, Y+8	; 0x08
    261e:	42 22       	and	r4, r18
    2620:	53 22       	and	r5, r19
    2622:	64 22       	and	r6, r20
    2624:	75 22       	and	r7, r21
        mousedown(MOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2626:	81 2c       	mov	r8, r1
    2628:	91 2c       	mov	r9, r1
    262a:	a1 2c       	mov	r10, r1
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	b8 2e       	mov	r11, r24
    2630:	82 22       	and	r8, r18
    2632:	93 22       	and	r9, r19
    2634:	a4 22       	and	r10, r20
    2636:	b5 22       	and	r11, r21
        mousedown(MOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2638:	20 70       	andi	r18, 0x00	; 0
    263a:	30 70       	andi	r19, 0x00	; 0
    263c:	40 70       	andi	r20, 0x00	; 0
    263e:	54 70       	andi	r21, 0x04	; 4
    2640:	2d 83       	std	Y+5, r18	; 0x05
    2642:	3e 83       	std	Y+6, r19	; 0x06
    2644:	4f 83       	std	Y+7, r20	; 0x07
    2646:	58 87       	std	Y+8, r21	; 0x08
 
#define KS1_J1 0x0
#define KS2_J1 0x4000000
 
void check_sensors_touch(uint32_t sensors1, uint32_t sensors2, uint8_t pos) {
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2648:	c1 14       	cp	r12, r1
    264a:	d1 04       	cpc	r13, r1
    264c:	e1 04       	cpc	r14, r1
    264e:	f1 04       	cpc	r15, r1
    2650:	09 f4       	brne	.+2      	; 0x2654 <_Z19check_sensors_touchmmh+0xac>
    2652:	7b c0       	rjmp	.+246    	; 0x274a <_Z19check_sensors_touchmmh+0x1a2>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2654:	90 17       	cp	r25, r16
    2656:	08 f4       	brcc	.+2      	; 0x265a <_Z19check_sensors_touchmmh+0xb2>
    2658:	78 c0       	rjmp	.+240    	; 0x274a <_Z19check_sensors_touchmmh+0x1a2>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    265a:	fd 01       	movw	r30, r26
    265c:	e0 1b       	sub	r30, r16
    265e:	f1 09       	sbc	r31, r1
    2660:	ee 5b       	subi	r30, 0xBE	; 190
    2662:	f7 4f       	sbci	r31, 0xF7	; 247
    2664:	e0 81       	ld	r30, Z
    2666:	ee 23       	and	r30, r30
    2668:	39 f0       	breq	.+14     	; 0x2678 <_Z19check_sensors_touchmmh+0xd0>
    266a:	e1 30       	cpi	r30, 0x01	; 1
    266c:	29 f0       	breq	.+10     	; 0x2678 <_Z19check_sensors_touchmmh+0xd0>
    266e:	e2 30       	cpi	r30, 0x02	; 2
    2670:	19 f0       	breq	.+6      	; 0x2678 <_Z19check_sensors_touchmmh+0xd0>
    2672:	e3 30       	cpi	r30, 0x03	; 3
    2674:	09 f0       	breq	.+2      	; 0x2678 <_Z19check_sensors_touchmmh+0xd0>
    2676:	69 c0       	rjmp	.+210    	; 0x274a <_Z19check_sensors_touchmmh+0x1a2>
        mouseon(MOUSE_ACTION_SCROLL);
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	13 c0       	rjmp	.+38     	; 0x26a2 <_Z19check_sensors_touchmmh+0xfa>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    267c:	90 17       	cp	r25, r16
    267e:	08 f4       	brcc	.+2      	; 0x2682 <_Z19check_sensors_touchmmh+0xda>
    2680:	6e c0       	rjmp	.+220    	; 0x275e <_Z19check_sensors_touchmmh+0x1b6>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    2682:	fd 01       	movw	r30, r26
    2684:	e0 1b       	sub	r30, r16
    2686:	f1 09       	sbc	r31, r1
    2688:	ee 5b       	subi	r30, 0xBE	; 190
    268a:	f7 4f       	sbci	r31, 0xF7	; 247
    268c:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    268e:	ee 23       	and	r30, r30
    2690:	39 f0       	breq	.+14     	; 0x26a0 <_Z19check_sensors_touchmmh+0xf8>
    2692:	e1 30       	cpi	r30, 0x01	; 1
    2694:	29 f0       	breq	.+10     	; 0x26a0 <_Z19check_sensors_touchmmh+0xf8>
    2696:	e2 30       	cpi	r30, 0x02	; 2
    2698:	19 f0       	breq	.+6      	; 0x26a0 <_Z19check_sensors_touchmmh+0xf8>
    269a:	e3 30       	cpi	r30, 0x03	; 3
    269c:	09 f0       	breq	.+2      	; 0x26a0 <_Z19check_sensors_touchmmh+0xf8>
    269e:	5f c0       	rjmp	.+190    	; 0x275e <_Z19check_sensors_touchmmh+0x1b6>
        mouseon(MOUSE_ACTION_MOVE);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z7mouseonh>
    26a6:	73 c0       	rjmp	.+230    	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    26a8:	90 17       	cp	r25, r16
    26aa:	08 f4       	brcc	.+2      	; 0x26ae <_Z19check_sensors_touchmmh+0x106>
    26ac:	5e c0       	rjmp	.+188    	; 0x276a <_Z19check_sensors_touchmmh+0x1c2>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    26ae:	fd 01       	movw	r30, r26
    26b0:	e0 1b       	sub	r30, r16
    26b2:	f1 09       	sbc	r31, r1
    26b4:	ee 5b       	subi	r30, 0xBE	; 190
    26b6:	f7 4f       	sbci	r31, 0xF7	; 247
    26b8:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    26ba:	ee 23       	and	r30, r30
    26bc:	39 f0       	breq	.+14     	; 0x26cc <_Z19check_sensors_touchmmh+0x124>
    26be:	e1 30       	cpi	r30, 0x01	; 1
    26c0:	29 f0       	breq	.+10     	; 0x26cc <_Z19check_sensors_touchmmh+0x124>
    26c2:	e2 30       	cpi	r30, 0x02	; 2
    26c4:	19 f0       	breq	.+6      	; 0x26cc <_Z19check_sensors_touchmmh+0x124>
    26c6:	e3 30       	cpi	r30, 0x03	; 3
    26c8:	09 f0       	breq	.+2      	; 0x26cc <_Z19check_sensors_touchmmh+0x124>
    26ca:	4f c0       	rjmp	.+158    	; 0x276a <_Z19check_sensors_touchmmh+0x1c2>
        mousedown(MOUSE_RIGHT);
    26cc:	84 e0       	ldi	r24, 0x04	; 4
    26ce:	26 c0       	rjmp	.+76     	; 0x271c <_Z19check_sensors_touchmmh+0x174>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    26d0:	90 17       	cp	r25, r16
    26d2:	08 f4       	brcc	.+2      	; 0x26d6 <_Z19check_sensors_touchmmh+0x12e>
    26d4:	50 c0       	rjmp	.+160    	; 0x2776 <_Z19check_sensors_touchmmh+0x1ce>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    26d6:	fd 01       	movw	r30, r26
    26d8:	e0 1b       	sub	r30, r16
    26da:	f1 09       	sbc	r31, r1
    26dc:	ee 5b       	subi	r30, 0xBE	; 190
    26de:	f7 4f       	sbci	r31, 0xF7	; 247
    26e0:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    26e2:	ee 23       	and	r30, r30
    26e4:	39 f0       	breq	.+14     	; 0x26f4 <_Z19check_sensors_touchmmh+0x14c>
    26e6:	e1 30       	cpi	r30, 0x01	; 1
    26e8:	29 f0       	breq	.+10     	; 0x26f4 <_Z19check_sensors_touchmmh+0x14c>
    26ea:	e2 30       	cpi	r30, 0x02	; 2
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <_Z19check_sensors_touchmmh+0x14c>
    26ee:	e3 30       	cpi	r30, 0x03	; 3
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <_Z19check_sensors_touchmmh+0x14c>
    26f2:	41 c0       	rjmp	.+130    	; 0x2776 <_Z19check_sensors_touchmmh+0x1ce>
        mousedown(MOUSE_MIDDLE);
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	12 c0       	rjmp	.+36     	; 0x271c <_Z19check_sensors_touchmmh+0x174>
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    26f8:	90 17       	cp	r25, r16
    26fa:	08 f4       	brcc	.+2      	; 0x26fe <_Z19check_sensors_touchmmh+0x156>
    26fc:	48 c0       	rjmp	.+144    	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
        return false;
    }
    return modeStack[modeStackPos - pos] == mode;
    26fe:	fd 01       	movw	r30, r26
    2700:	e0 1b       	sub	r30, r16
    2702:	f1 09       	sbc	r31, r1
    2704:	ee 5b       	subi	r30, 0xBE	; 190
    2706:	f7 4f       	sbci	r31, 0xF7	; 247
    2708:	e0 81       	ld	r30, Z
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    270a:	ee 23       	and	r30, r30
    270c:	31 f0       	breq	.+12     	; 0x271a <_Z19check_sensors_touchmmh+0x172>
    270e:	e1 30       	cpi	r30, 0x01	; 1
    2710:	21 f0       	breq	.+8      	; 0x271a <_Z19check_sensors_touchmmh+0x172>
    2712:	e2 30       	cpi	r30, 0x02	; 2
    2714:	11 f0       	breq	.+4      	; 0x271a <_Z19check_sensors_touchmmh+0x172>
    2716:	e3 30       	cpi	r30, 0x03	; 3
    2718:	19 f4       	brne	.+6      	; 0x2720 <_Z19check_sensors_touchmmh+0x178>
        mousedown(MOUSE_LEFT);
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	21 df       	rcall	.-446    	; 0x2560 <_Z9mousedownh>
    271e:	37 c0       	rjmp	.+110    	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
        return;
    }
 
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
    2720:	fd 01       	movw	r30, r26
    2722:	e0 1b       	sub	r30, r16
    2724:	f1 09       	sbc	r31, r1
    2726:	ee 5b       	subi	r30, 0xBE	; 190
    2728:	f7 4f       	sbci	r31, 0xF7	; 247
    272a:	80 81       	ld	r24, Z
    272c:	84 30       	cpi	r24, 0x04	; 4
    272e:	79 f5       	brne	.+94     	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
    2730:	0f 5f       	subi	r16, 0xFF	; 255
// declare these here so setmode() etc. have some context
static void activate_mode(uint8_t mode);
static void deactivate_mode(uint8_t mode);

uint8_t modeCheck(uint8_t mode, uint8_t pos) {
    if (modeStackPos < pos) {
    2732:	90 17       	cp	r25, r16
    2734:	60 f1       	brcs	.+88     	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
    2736:	fd 01       	movw	r30, r26
    2738:	e0 1b       	sub	r30, r16
    273a:	f1 09       	sbc	r31, r1
    273c:	ee 5b       	subi	r30, 0xBE	; 190
    273e:	f7 4f       	sbci	r31, 0xF7	; 247
    2740:	80 81       	ld	r24, Z
    2742:	88 23       	and	r24, r24
    2744:	09 f4       	brne	.+2      	; 0x2748 <_Z19check_sensors_touchmmh+0x1a0>
    2746:	80 cf       	rjmp	.-256    	; 0x2648 <_Z19check_sensors_touchmmh+0xa0>
    2748:	22 c0       	rjmp	.+68     	; 0x278e <_Z19check_sensors_touchmmh+0x1e6>
 
void check_sensors_touch(uint32_t sensors1, uint32_t sensors2, uint8_t pos) {
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
        mouseon(MOUSE_ACTION_SCROLL);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    274a:	29 81       	ldd	r18, Y+1	; 0x01
    274c:	3a 81       	ldd	r19, Y+2	; 0x02
    274e:	4b 81       	ldd	r20, Y+3	; 0x03
    2750:	5c 81       	ldd	r21, Y+4	; 0x04
    2752:	21 15       	cp	r18, r1
    2754:	31 05       	cpc	r19, r1
    2756:	41 05       	cpc	r20, r1
    2758:	51 05       	cpc	r21, r1
    275a:	09 f0       	breq	.+2      	; 0x275e <_Z19check_sensors_touchmmh+0x1b6>
    275c:	8f cf       	rjmp	.-226    	; 0x267c <_Z19check_sensors_touchmmh+0xd4>
        mouseon(MOUSE_ACTION_MOVE);
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    275e:	41 14       	cp	r4, r1
    2760:	51 04       	cpc	r5, r1
    2762:	61 04       	cpc	r6, r1
    2764:	71 04       	cpc	r7, r1
    2766:	09 f0       	breq	.+2      	; 0x276a <_Z19check_sensors_touchmmh+0x1c2>
    2768:	9f cf       	rjmp	.-194    	; 0x26a8 <_Z19check_sensors_touchmmh+0x100>
        mousedown(MOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    276a:	81 14       	cp	r8, r1
    276c:	91 04       	cpc	r9, r1
    276e:	a1 04       	cpc	r10, r1
    2770:	b1 04       	cpc	r11, r1
    2772:	09 f0       	breq	.+2      	; 0x2776 <_Z19check_sensors_touchmmh+0x1ce>
    2774:	ad cf       	rjmp	.-166    	; 0x26d0 <_Z19check_sensors_touchmmh+0x128>
        mousedown(MOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2776:	2d 81       	ldd	r18, Y+5	; 0x05
    2778:	3e 81       	ldd	r19, Y+6	; 0x06
    277a:	4f 81       	ldd	r20, Y+7	; 0x07
    277c:	58 85       	ldd	r21, Y+8	; 0x08
    277e:	21 15       	cp	r18, r1
    2780:	31 05       	cpc	r19, r1
    2782:	41 05       	cpc	r20, r1
    2784:	51 05       	cpc	r21, r1
    2786:	09 f0       	breq	.+2      	; 0x278a <_Z19check_sensors_touchmmh+0x1e2>
    2788:	b7 cf       	rjmp	.-146    	; 0x26f8 <_Z19check_sensors_touchmmh+0x150>
    278a:	90 17       	cp	r25, r16
    278c:	48 f6       	brcc	.-110    	; 0x2720 <_Z19check_sensors_touchmmh+0x178>
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
        check_sensors_touch(sensors1, sensors2, pos + 1);
        return;
    }
}
    278e:	28 96       	adiw	r28, 0x08	; 8
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	9f 90       	pop	r9
    27ae:	8f 90       	pop	r8
    27b0:	7f 90       	pop	r7
    27b2:	6f 90       	pop	r6
    27b4:	5f 90       	pop	r5
    27b6:	4f 90       	pop	r4
    27b8:	08 95       	ret

000027ba <_Z12update_touchv>:

void update_touch() {
    27ba:	6f 92       	push	r6
    27bc:	7f 92       	push	r7
    27be:	8f 92       	push	r8
    27c0:	9f 92       	push	r9
    27c2:	af 92       	push	r10
    27c4:	bf 92       	push	r11
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    detect1 = 0;
    27d2:	10 92 53 08 	sts	0x0853, r1
    27d6:	10 92 54 08 	sts	0x0854, r1
    27da:	10 92 55 08 	sts	0x0855, r1
    27de:	10 92 56 08 	sts	0x0856, r1
    detect2 = 0;
    27e2:	10 92 57 08 	sts	0x0857, r1
    27e6:	10 92 58 08 	sts	0x0858, r1
    27ea:	10 92 59 08 	sts	0x0859, r1
    27ee:	10 92 5a 08 	sts	0x085A, r1
    removing = false;
    27f2:	10 92 52 08 	sts	0x0852, r1
    
    uint8_t p1, p2;

    // loop through every possible 1-to-1 sensor combination and record levels
    for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    27f6:	10 92 42 06 	sts	0x0642, r1
    27fa:	10 92 43 06 	sts	0x0643, r1
    27fe:	10 92 44 06 	sts	0x0644, r1
    2802:	10 92 45 06 	sts	0x0645, r1
        if (i < 32) {
            // write value to sensors1
            if (digitalRead(p2) == LOW) bitSet(detect1, i);
        } else {
            // write value to sensors2
            if (digitalRead(p2) == LOW) bitSet(detect2, i - 32);
    2806:	e1 e0       	ldi	r30, 0x01	; 1
    2808:	ce 2e       	mov	r12, r30
    280a:	d1 2c       	mov	r13, r1
    280c:	e1 2c       	mov	r14, r1
    280e:	f1 2c       	mov	r15, r1
    2810:	86 c0       	rjmp	.+268    	; 0x291e <_Z12update_touchv+0x164>
    
    uint8_t p1, p2;

    // loop through every possible 1-to-1 sensor combination and record levels
    for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
        p1 = combinations[i][0];
    2812:	fc 01       	movw	r30, r24
    2814:	ee 0f       	add	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	e3 5d       	subi	r30, 0xD3	; 211
    281a:	fc 4f       	sbci	r31, 0xFC	; 252
    281c:	10 81       	ld	r17, Z
        p2 = combinations[i][1];
    281e:	01 81       	ldd	r16, Z+1	; 0x01

        pinMode(p1, OUTPUT);    // change to OUTPUT mode
    2820:	81 2f       	mov	r24, r17
    2822:	61 e0       	ldi	r22, 0x01	; 1
        digitalWrite(p1, LOW);  // bring LOW (default input level is HIGH)
    2824:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
    2828:	81 2f       	mov	r24, r17
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
        if (i < 32) {
    2830:	80 91 42 06 	lds	r24, 0x0642
    2834:	90 91 43 06 	lds	r25, 0x0643
    2838:	a0 91 44 06 	lds	r26, 0x0644
    283c:	b0 91 45 06 	lds	r27, 0x0645
    2840:	80 97       	sbiw	r24, 0x20	; 32
    2842:	a1 05       	cpc	r26, r1
    2844:	b1 05       	cpc	r27, r1
    2846:	30 f5       	brcc	.+76     	; 0x2894 <_Z12update_touchv+0xda>
            // write value to sensors1
            if (digitalRead(p2) == LOW) bitSet(detect1, i);
    2848:	80 2f       	mov	r24, r16
    284a:	0e 94 37 29 	call	0x526e	; 0x526e <digitalRead>
    284e:	89 2b       	or	r24, r25
    2850:	09 f0       	breq	.+2      	; 0x2854 <_Z12update_touchv+0x9a>
    2852:	4a c0       	rjmp	.+148    	; 0x28e8 <_Z12update_touchv+0x12e>
    2854:	a7 01       	movw	r20, r14
    2856:	96 01       	movw	r18, r12
    2858:	00 90 42 06 	lds	r0, 0x0642
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <_Z12update_touchv+0xac>
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	44 1f       	adc	r20, r20
    2864:	55 1f       	adc	r21, r21
    2866:	0a 94       	dec	r0
    2868:	d2 f7       	brpl	.-12     	; 0x285e <_Z12update_touchv+0xa4>
    286a:	80 91 53 08 	lds	r24, 0x0853
    286e:	90 91 54 08 	lds	r25, 0x0854
    2872:	a0 91 55 08 	lds	r26, 0x0855
    2876:	b0 91 56 08 	lds	r27, 0x0856
    287a:	82 2b       	or	r24, r18
    287c:	93 2b       	or	r25, r19
    287e:	a4 2b       	or	r26, r20
    2880:	b5 2b       	or	r27, r21
    2882:	80 93 53 08 	sts	0x0853, r24
    2886:	90 93 54 08 	sts	0x0854, r25
    288a:	a0 93 55 08 	sts	0x0855, r26
    288e:	b0 93 56 08 	sts	0x0856, r27
    2892:	2a c0       	rjmp	.+84     	; 0x28e8 <_Z12update_touchv+0x12e>
        } else {
            // write value to sensors2
            if (digitalRead(p2) == LOW) bitSet(detect2, i - 32);
    2894:	80 2f       	mov	r24, r16
    2896:	0e 94 37 29 	call	0x526e	; 0x526e <digitalRead>
    289a:	89 2b       	or	r24, r25
    289c:	29 f5       	brne	.+74     	; 0x28e8 <_Z12update_touchv+0x12e>
    289e:	20 91 42 06 	lds	r18, 0x0642
    28a2:	30 91 43 06 	lds	r19, 0x0643
    28a6:	20 52       	subi	r18, 0x20	; 32
    28a8:	30 40       	sbci	r19, 0x00	; 0
    28aa:	d7 01       	movw	r26, r14
    28ac:	c6 01       	movw	r24, r12
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <_Z12update_touchv+0xfe>
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	aa 1f       	adc	r26, r26
    28b6:	bb 1f       	adc	r27, r27
    28b8:	2a 95       	dec	r18
    28ba:	d2 f7       	brpl	.-12     	; 0x28b0 <_Z12update_touchv+0xf6>
    28bc:	9c 01       	movw	r18, r24
    28be:	ad 01       	movw	r20, r26
    28c0:	80 91 57 08 	lds	r24, 0x0857
    28c4:	90 91 58 08 	lds	r25, 0x0858
    28c8:	a0 91 59 08 	lds	r26, 0x0859
    28cc:	b0 91 5a 08 	lds	r27, 0x085A
    28d0:	82 2b       	or	r24, r18
    28d2:	93 2b       	or	r25, r19
    28d4:	a4 2b       	or	r26, r20
    28d6:	b5 2b       	or	r27, r21
    28d8:	80 93 57 08 	sts	0x0857, r24
    28dc:	90 93 58 08 	sts	0x0858, r25
    28e0:	a0 93 59 08 	sts	0x0859, r26
    28e4:	b0 93 5a 08 	sts	0x085A, r27
        }
        pinMode(p1, INPUT);     // reset to INPUT mode
    28e8:	81 2f       	mov	r24, r17
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	0e 94 9b 2a 	call	0x5536	; 0x5536 <pinMode>
        digitalWrite(p1, HIGH); // enable pullup
    28f0:	81 2f       	mov	r24, r17
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	0e 94 92 29 	call	0x5324	; 0x5324 <digitalWrite>
    removing = false;
    
    uint8_t p1, p2;

    // loop through every possible 1-to-1 sensor combination and record levels
    for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    28f8:	80 91 42 06 	lds	r24, 0x0642
    28fc:	90 91 43 06 	lds	r25, 0x0643
    2900:	a0 91 44 06 	lds	r26, 0x0644
    2904:	b0 91 45 06 	lds	r27, 0x0645
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	a1 1d       	adc	r26, r1
    290c:	b1 1d       	adc	r27, r1
    290e:	80 93 42 06 	sts	0x0642, r24
    2912:	90 93 43 06 	sts	0x0643, r25
    2916:	a0 93 44 06 	sts	0x0644, r26
    291a:	b0 93 45 06 	sts	0x0645, r27
    291e:	80 91 42 06 	lds	r24, 0x0642
    2922:	90 91 43 06 	lds	r25, 0x0643
    2926:	a0 91 44 06 	lds	r26, 0x0644
    292a:	b0 91 45 06 	lds	r27, 0x0645
    292e:	8c 33       	cpi	r24, 0x3C	; 60
    2930:	91 05       	cpc	r25, r1
    2932:	a1 05       	cpc	r26, r1
    2934:	b1 05       	cpc	r27, r1
    2936:	08 f4       	brcc	.+2      	; 0x293a <_Z12update_touchv+0x180>
    2938:	6c cf       	rjmp	.-296    	; 0x2812 <_Z12update_touchv+0x58>
        pinMode(p1, INPUT);     // reset to INPUT mode
        digitalWrite(p1, HIGH); // enable pullup
    }
    
    // check to see if we need to reset detection threshold
    if (verify1 != detect1 || verify2 != detect2) {
    293a:	e0 90 5b 08 	lds	r14, 0x085B
    293e:	f0 90 5c 08 	lds	r15, 0x085C
    2942:	00 91 5d 08 	lds	r16, 0x085D
    2946:	10 91 5e 08 	lds	r17, 0x085E
    294a:	80 91 53 08 	lds	r24, 0x0853
    294e:	90 91 54 08 	lds	r25, 0x0854
    2952:	a0 91 55 08 	lds	r26, 0x0855
    2956:	b0 91 56 08 	lds	r27, 0x0856
    295a:	e8 16       	cp	r14, r24
    295c:	f9 06       	cpc	r15, r25
    295e:	0a 07       	cpc	r16, r26
    2960:	1b 07       	cpc	r17, r27
    2962:	a9 f4       	brne	.+42     	; 0x298e <_Z12update_touchv+0x1d4>
    2964:	20 91 5f 08 	lds	r18, 0x085F
    2968:	30 91 60 08 	lds	r19, 0x0860
    296c:	40 91 61 08 	lds	r20, 0x0861
    2970:	50 91 62 08 	lds	r21, 0x0862
    2974:	80 91 57 08 	lds	r24, 0x0857
    2978:	90 91 58 08 	lds	r25, 0x0858
    297c:	a0 91 59 08 	lds	r26, 0x0859
    2980:	b0 91 5a 08 	lds	r27, 0x085A
    2984:	28 17       	cp	r18, r24
    2986:	39 07       	cpc	r19, r25
    2988:	4a 07       	cpc	r20, r26
    298a:	5b 07       	cpc	r21, r27
    298c:	59 f0       	breq	.+22     	; 0x29a4 <_Z12update_touchv+0x1ea>
        // current sensors different from last detection, so reset threshold
        touchTime = millis();
    298e:	0e 94 67 39 	call	0x72ce	; 0x72ce <millis>
    2992:	60 93 4d 08 	sts	0x084D, r22
    2996:	70 93 4e 08 	sts	0x084E, r23
    299a:	80 93 4f 08 	sts	0x084F, r24
    299e:	90 93 50 08 	sts	0x0850, r25
    29a2:	03 c1       	rjmp	.+518    	; 0x2baa <_Z12update_touchv+0x3f0>
    } else if ((verify1 != sensors1 || verify2 != sensors2) && millis() - touchTime >= opt_touch_detect_threshold) {
    29a4:	80 91 63 08 	lds	r24, 0x0863
    29a8:	90 91 64 08 	lds	r25, 0x0864
    29ac:	a0 91 65 08 	lds	r26, 0x0865
    29b0:	b0 91 66 08 	lds	r27, 0x0866
    29b4:	e8 16       	cp	r14, r24
    29b6:	f9 06       	cpc	r15, r25
    29b8:	0a 07       	cpc	r16, r26
    29ba:	1b 07       	cpc	r17, r27
    29bc:	71 f4       	brne	.+28     	; 0x29da <_Z12update_touchv+0x220>
    29be:	80 91 67 08 	lds	r24, 0x0867
    29c2:	90 91 68 08 	lds	r25, 0x0868
    29c6:	a0 91 69 08 	lds	r26, 0x0869
    29ca:	b0 91 6a 08 	lds	r27, 0x086A
    29ce:	28 17       	cp	r18, r24
    29d0:	39 07       	cpc	r19, r25
    29d2:	4a 07       	cpc	r20, r26
    29d4:	5b 07       	cpc	r21, r27
    29d6:	09 f4       	brne	.+2      	; 0x29da <_Z12update_touchv+0x220>
    29d8:	e8 c0       	rjmp	.+464    	; 0x2baa <_Z12update_touchv+0x3f0>
    29da:	0e 94 67 39 	call	0x72ce	; 0x72ce <millis>
    29de:	20 91 4d 08 	lds	r18, 0x084D
    29e2:	30 91 4e 08 	lds	r19, 0x084E
    29e6:	40 91 4f 08 	lds	r20, 0x084F
    29ea:	50 91 50 08 	lds	r21, 0x0850
    29ee:	62 1b       	sub	r22, r18
    29f0:	73 0b       	sbc	r23, r19
    29f2:	84 0b       	sbc	r24, r20
    29f4:	95 0b       	sbc	r25, r21
    29f6:	20 91 08 03 	lds	r18, 0x0308
    29fa:	30 91 09 03 	lds	r19, 0x0309
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	62 17       	cp	r22, r18
    2a04:	73 07       	cpc	r23, r19
    2a06:	84 07       	cpc	r24, r20
    2a08:	95 07       	cpc	r25, r21
    2a0a:	08 f4       	brcc	.+2      	; 0x2a0e <_Z12update_touchv+0x254>
    2a0c:	ce c0       	rjmp	.+412    	; 0x2baa <_Z12update_touchv+0x3f0>
        // detection is over threshold and current readings are different from previous readings

        #ifdef DEBUG_TOUCH
            DEBUG_PRN_TOUCH("touch ");
    2a0e:	88 e8       	ldi	r24, 0x88	; 136
    2a10:	98 e0       	ldi	r25, 0x08	; 8
    2a12:	61 e8       	ldi	r22, 0x81	; 129
    2a14:	72 e0       	ldi	r23, 0x02	; 2
    2a16:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
            for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    2a1a:	10 92 42 06 	sts	0x0642, r1
    2a1e:	10 92 43 06 	sts	0x0643, r1
    2a22:	10 92 44 06 	sts	0x0644, r1
    2a26:	10 92 45 06 	sts	0x0645, r1
    2a2a:	39 c0       	rjmp	.+114    	; 0x2a9e <_Z12update_touchv+0x2e4>
                if (i < 32) DEBUG_PRN_TOUCH(bitRead(detect1, i));
    2a2c:	80 32       	cpi	r24, 0x20	; 32
    2a2e:	91 05       	cpc	r25, r1
    2a30:	a1 05       	cpc	r26, r1
    2a32:	b1 05       	cpc	r27, r1
    2a34:	48 f4       	brcc	.+18     	; 0x2a48 <_Z12update_touchv+0x28e>
    2a36:	40 91 53 08 	lds	r20, 0x0853
    2a3a:	50 91 54 08 	lds	r21, 0x0854
    2a3e:	60 91 55 08 	lds	r22, 0x0855
    2a42:	70 91 56 08 	lds	r23, 0x0856
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <_Z12update_touchv+0x2a0>
                else DEBUG_PRN_TOUCH(bitRead(detect2, i - 32));
    2a48:	80 97       	sbiw	r24, 0x20	; 32
    2a4a:	40 91 57 08 	lds	r20, 0x0857
    2a4e:	50 91 58 08 	lds	r21, 0x0858
    2a52:	60 91 59 08 	lds	r22, 0x0859
    2a56:	70 91 5a 08 	lds	r23, 0x085A
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <_Z12update_touchv+0x2aa>
    2a5c:	76 95       	lsr	r23
    2a5e:	67 95       	ror	r22
    2a60:	57 95       	ror	r21
    2a62:	47 95       	ror	r20
    2a64:	8a 95       	dec	r24
    2a66:	d2 f7       	brpl	.-12     	; 0x2a5c <_Z12update_touchv+0x2a2>
    2a68:	41 70       	andi	r20, 0x01	; 1
    2a6a:	50 70       	andi	r21, 0x00	; 0
    2a6c:	60 70       	andi	r22, 0x00	; 0
    2a6e:	70 70       	andi	r23, 0x00	; 0
    2a70:	88 e8       	ldi	r24, 0x88	; 136
    2a72:	98 e0       	ldi	r25, 0x08	; 8
    2a74:	0e 94 c8 2c 	call	0x5990	; 0x5990 <_ZN16USBVirtualSerial5printEm>
    } else if ((verify1 != sensors1 || verify2 != sensors2) && millis() - touchTime >= opt_touch_detect_threshold) {
        // detection is over threshold and current readings are different from previous readings

        #ifdef DEBUG_TOUCH
            DEBUG_PRN_TOUCH("touch ");
            for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    2a78:	80 91 42 06 	lds	r24, 0x0642
    2a7c:	90 91 43 06 	lds	r25, 0x0643
    2a80:	a0 91 44 06 	lds	r26, 0x0644
    2a84:	b0 91 45 06 	lds	r27, 0x0645
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	a1 1d       	adc	r26, r1
    2a8c:	b1 1d       	adc	r27, r1
    2a8e:	80 93 42 06 	sts	0x0642, r24
    2a92:	90 93 43 06 	sts	0x0643, r25
    2a96:	a0 93 44 06 	sts	0x0644, r26
    2a9a:	b0 93 45 06 	sts	0x0645, r27
    2a9e:	80 91 42 06 	lds	r24, 0x0642
    2aa2:	90 91 43 06 	lds	r25, 0x0643
    2aa6:	a0 91 44 06 	lds	r26, 0x0644
    2aaa:	b0 91 45 06 	lds	r27, 0x0645
    2aae:	8c 33       	cpi	r24, 0x3C	; 60
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	a1 05       	cpc	r26, r1
    2ab4:	b1 05       	cpc	r27, r1
    2ab6:	08 f4       	brcc	.+2      	; 0x2aba <_Z12update_touchv+0x300>
    2ab8:	b9 cf       	rjmp	.-142    	; 0x2a2c <_Z12update_touchv+0x272>
                if (i < 32) DEBUG_PRN_TOUCH(bitRead(detect1, i));
                else DEBUG_PRN_TOUCH(bitRead(detect2, i - 32));
            }
            DEBUG_PRN_TOUCH("\n");
    2aba:	88 e8       	ldi	r24, 0x88	; 136
    2abc:	98 e0       	ldi	r25, 0x08	; 8
    2abe:	68 e8       	ldi	r22, 0x88	; 136
    2ac0:	72 e0       	ldi	r23, 0x02	; 2
    2ac2:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        #endif /* DEBUG_TOUCH */

        // check to see if they've just initiated or removed any touches
        if (verify1 > sensors1 || verify2 > sensors2) {
    2ac6:	e0 90 5b 08 	lds	r14, 0x085B
    2aca:	f0 90 5c 08 	lds	r15, 0x085C
    2ace:	00 91 5d 08 	lds	r16, 0x085D
    2ad2:	10 91 5e 08 	lds	r17, 0x085E
    2ad6:	a0 90 63 08 	lds	r10, 0x0863
    2ada:	b0 90 64 08 	lds	r11, 0x0864
    2ade:	c0 90 65 08 	lds	r12, 0x0865
    2ae2:	d0 90 66 08 	lds	r13, 0x0866
    2ae6:	ae 14       	cp	r10, r14
    2ae8:	bf 04       	cpc	r11, r15
    2aea:	c0 06       	cpc	r12, r16
    2aec:	d1 06       	cpc	r13, r17
    2aee:	a8 f0       	brcs	.+42     	; 0x2b1a <_Z12update_touchv+0x360>
    2af0:	60 90 5f 08 	lds	r6, 0x085F
    2af4:	70 90 60 08 	lds	r7, 0x0860
    2af8:	80 90 61 08 	lds	r8, 0x0861
    2afc:	90 90 62 08 	lds	r9, 0x0862
    2b00:	20 91 67 08 	lds	r18, 0x0867
    2b04:	30 91 68 08 	lds	r19, 0x0868
    2b08:	40 91 69 08 	lds	r20, 0x0869
    2b0c:	50 91 6a 08 	lds	r21, 0x086A
    2b10:	26 15       	cp	r18, r6
    2b12:	37 05       	cpc	r19, r7
    2b14:	48 05       	cpc	r20, r8
    2b16:	59 05       	cpc	r21, r9
    2b18:	80 f4       	brcc	.+32     	; 0x2b3a <_Z12update_touchv+0x380>
            adding = true;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 51 08 	sts	0x0851, r24

            // touch initiation, check for actions
            check_sensors_touch(verify1, verify2, 1);
    2b20:	20 91 5f 08 	lds	r18, 0x085F
    2b24:	30 91 60 08 	lds	r19, 0x0860
    2b28:	40 91 61 08 	lds	r20, 0x0861
    2b2c:	50 91 62 08 	lds	r21, 0x0862
    2b30:	c8 01       	movw	r24, r16
    2b32:	b7 01       	movw	r22, r14
    2b34:	01 e0       	ldi	r16, 0x01	; 1
    2b36:	38 dd       	rcall	.-1424   	; 0x25a8 <_Z19check_sensors_touchmmh>
    2b38:	18 c0       	rjmp	.+48     	; 0x2b6a <_Z12update_touchv+0x3b0>
        } else if (adding && (verify1 < sensors1 || verify2 < sensors2)) {
    2b3a:	80 91 51 08 	lds	r24, 0x0851
    2b3e:	88 23       	and	r24, r24
    2b40:	a1 f0       	breq	.+40     	; 0x2b6a <_Z12update_touchv+0x3b0>
    2b42:	ea 14       	cp	r14, r10
    2b44:	fb 04       	cpc	r15, r11
    2b46:	0c 05       	cpc	r16, r12
    2b48:	1d 05       	cpc	r17, r13
    2b4a:	28 f0       	brcs	.+10     	; 0x2b56 <_Z12update_touchv+0x39c>
    2b4c:	62 16       	cp	r6, r18
    2b4e:	73 06       	cpc	r7, r19
    2b50:	84 06       	cpc	r8, r20
    2b52:	95 06       	cpc	r9, r21
    2b54:	50 f4       	brcc	.+20     	; 0x2b6a <_Z12update_touchv+0x3b0>
            adding = false;
    2b56:	10 92 51 08 	sts	0x0851, r1
            removing = true;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	80 93 52 08 	sts	0x0852, r24

            // touch release, check for actions
            check_sensors_release(sensors1, sensors2, 1);
    2b60:	c6 01       	movw	r24, r12
    2b62:	b5 01       	movw	r22, r10
    2b64:	01 e0       	ldi	r16, 0x01	; 1
    2b66:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z21check_sensors_releasemmh>
        }
        
        // set official sensor readings to current readings 
        sensors1 = verify1;
    2b6a:	80 91 5b 08 	lds	r24, 0x085B
    2b6e:	90 91 5c 08 	lds	r25, 0x085C
    2b72:	a0 91 5d 08 	lds	r26, 0x085D
    2b76:	b0 91 5e 08 	lds	r27, 0x085E
    2b7a:	80 93 63 08 	sts	0x0863, r24
    2b7e:	90 93 64 08 	sts	0x0864, r25
    2b82:	a0 93 65 08 	sts	0x0865, r26
    2b86:	b0 93 66 08 	sts	0x0866, r27
        sensors2 = verify2;
    2b8a:	80 91 5f 08 	lds	r24, 0x085F
    2b8e:	90 91 60 08 	lds	r25, 0x0860
    2b92:	a0 91 61 08 	lds	r26, 0x0861
    2b96:	b0 91 62 08 	lds	r27, 0x0862
    2b9a:	80 93 67 08 	sts	0x0867, r24
    2b9e:	90 93 68 08 	sts	0x0868, r25
    2ba2:	a0 93 69 08 	sts	0x0869, r26
    2ba6:	b0 93 6a 08 	sts	0x086A, r27
    }
    
    verify1 = detect1;
    2baa:	80 91 53 08 	lds	r24, 0x0853
    2bae:	90 91 54 08 	lds	r25, 0x0854
    2bb2:	a0 91 55 08 	lds	r26, 0x0855
    2bb6:	b0 91 56 08 	lds	r27, 0x0856
    2bba:	80 93 5b 08 	sts	0x085B, r24
    2bbe:	90 93 5c 08 	sts	0x085C, r25
    2bc2:	a0 93 5d 08 	sts	0x085D, r26
    2bc6:	b0 93 5e 08 	sts	0x085E, r27
    verify2 = detect2;
    2bca:	80 91 57 08 	lds	r24, 0x0857
    2bce:	90 91 58 08 	lds	r25, 0x0858
    2bd2:	a0 91 59 08 	lds	r26, 0x0859
    2bd6:	b0 91 5a 08 	lds	r27, 0x085A
    2bda:	80 93 5f 08 	sts	0x085F, r24
    2bde:	90 93 60 08 	sts	0x0860, r25
    2be2:	a0 93 61 08 	sts	0x0861, r26
    2be6:	b0 93 62 08 	sts	0x0862, r27
}  
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
    2bf8:	af 90       	pop	r10
    2bfa:	9f 90       	pop	r9
    2bfc:	8f 90       	pop	r8
    2bfe:	7f 90       	pop	r7
    2c00:	6f 90       	pop	r6
    2c02:	08 95       	ret

00002c04 <_Z10mouseclickh>:
            RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
        #endif /* ENABLE_RX400 */
    }
}

void mouseclick(uint8_t button) {
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	f8 2e       	mov	r15, r24
    DEBUG_PRN_TOUCHSET("touchset mouseclick ");
    2c0c:	08 e8       	ldi	r16, 0x88	; 136
    2c0e:	18 e0       	ldi	r17, 0x08	; 8
    2c10:	c8 01       	movw	r24, r16
    2c12:	6a e8       	ldi	r22, 0x8A	; 138
    2c14:	72 e0       	ldi	r23, 0x02	; 2
    2c16:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_TOUCHSET(button);
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	6f 2d       	mov	r22, r15
    2c1e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN16USBVirtualSerial7printlnEh>
    mousedown(button);
    2c22:	8f 2d       	mov	r24, r15
    2c24:	9d dc       	rcall	.-1734   	; 0x2560 <_Z9mousedownh>
    delay(5);
    2c26:	65 e0       	ldi	r22, 0x05	; 5
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    mouseup(button);
    2c32:	8f 2d       	mov	r24, r15
    2c34:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z7mouseuph>
}
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	08 95       	ret

00002c40 <_Z12update_mousev>:

void update_mouse() {
    2c40:	6f 92       	push	r6
    2c42:	7f 92       	push	r7
    2c44:	8f 92       	push	r8
    2c46:	9f 92       	push	r9
    2c48:	af 92       	push	r10
    2c4a:	bf 92       	push	r11
    2c4c:	cf 92       	push	r12
    2c4e:	df 92       	push	r13
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    switch (opt_mouse_mode) {
    2c5c:	60 90 38 08 	lds	r6, 0x0838
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	68 16       	cp	r6, r24
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <_Z12update_mousev+0x28>
    2c66:	97 c0       	rjmp	.+302    	; 0x2d96 <_Z12update_mousev+0x156>
    2c68:	86 15       	cp	r24, r6
    2c6a:	28 f0       	brcs	.+10     	; 0x2c76 <_Z12update_mousev+0x36>
    2c6c:	91 e0       	ldi	r25, 0x01	; 1
    2c6e:	69 16       	cp	r6, r25
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <_Z12update_mousev+0x34>
    2c72:	21 c2       	rjmp	.+1090   	; 0x30b6 <_Z12update_mousev+0x476>
    2c74:	09 c0       	rjmp	.+18     	; 0x2c88 <_Z12update_mousev+0x48>
    2c76:	83 e0       	ldi	r24, 0x03	; 3
    2c78:	68 16       	cp	r6, r24
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <_Z12update_mousev+0x3e>
    2c7c:	fd c0       	rjmp	.+506    	; 0x2e78 <_Z12update_mousev+0x238>
    2c7e:	94 e0       	ldi	r25, 0x04	; 4
    2c80:	69 16       	cp	r6, r25
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <_Z12update_mousev+0x46>
    2c84:	18 c2       	rjmp	.+1072   	; 0x30b6 <_Z12update_mousev+0x476>
    2c86:	86 c1       	rjmp	.+780    	; 0x2f94 <_Z12update_mousev+0x354>
        case MOUSE_MODE_TILT_VELOCITY:
            if (aset) {
    2c88:	80 91 3b 07 	lds	r24, 0x073B
    2c8c:	c0 91 23 07 	lds	r28, 0x0723
    2c90:	d0 91 24 07 	lds	r29, 0x0724
    2c94:	80 90 25 07 	lds	r8, 0x0725
    2c98:	90 90 26 07 	lds	r9, 0x0726
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <_Z12update_mousev+0x62>
    2ca0:	67 c0       	rjmp	.+206    	; 0x2d70 <_Z12update_mousev+0x130>
                mx0 = mx;
    2ca2:	60 91 1d 08 	lds	r22, 0x081D
    2ca6:	70 91 1e 08 	lds	r23, 0x081E
    2caa:	70 93 26 08 	sts	0x0826, r23
    2cae:	60 93 25 08 	sts	0x0825, r22
                my0 = my;
    2cb2:	e0 90 1f 08 	lds	r14, 0x081F
    2cb6:	f0 90 20 08 	lds	r15, 0x0820
    2cba:	f0 92 28 08 	sts	0x0828, r15
    2cbe:	e0 92 27 08 	sts	0x0827, r14
                mx -= (float)(ax - axBase) / opt_mouse_scale_mode1[0];
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2cca:	5b 01       	movw	r10, r22
    2ccc:	6c 01       	movw	r12, r24
    2cce:	80 91 35 07 	lds	r24, 0x0735
    2cd2:	90 91 36 07 	lds	r25, 0x0736
    2cd6:	c8 1b       	sub	r28, r24
    2cd8:	d9 0b       	sbc	r29, r25
    2cda:	be 01       	movw	r22, r28
    2cdc:	88 27       	eor	r24, r24
    2cde:	77 fd       	sbrc	r23, 7
    2ce0:	80 95       	com	r24
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2ce8:	20 91 cf 03 	lds	r18, 0x03CF
    2cec:	30 91 d0 03 	lds	r19, 0x03D0
    2cf0:	40 91 d1 03 	lds	r20, 0x03D1
    2cf4:	50 91 d2 03 	lds	r21, 0x03D2
    2cf8:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    2cfc:	9b 01       	movw	r18, r22
    2cfe:	ac 01       	movw	r20, r24
    2d00:	c6 01       	movw	r24, r12
    2d02:	b5 01       	movw	r22, r10
    2d04:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    2d08:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    2d0c:	70 93 1e 08 	sts	0x081E, r23
    2d10:	60 93 1d 08 	sts	0x081D, r22
                my -= (float)(ay - ayBase) / opt_mouse_scale_mode1[1];
    2d14:	00 e0       	ldi	r16, 0x00	; 0
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	c8 01       	movw	r24, r16
    2d1a:	b7 01       	movw	r22, r14
    2d1c:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2d20:	7b 01       	movw	r14, r22
    2d22:	8c 01       	movw	r16, r24
    2d24:	80 91 37 07 	lds	r24, 0x0737
    2d28:	90 91 38 07 	lds	r25, 0x0738
    2d2c:	88 1a       	sub	r8, r24
    2d2e:	99 0a       	sbc	r9, r25
    2d30:	b4 01       	movw	r22, r8
    2d32:	88 27       	eor	r24, r24
    2d34:	77 fd       	sbrc	r23, 7
    2d36:	80 95       	com	r24
    2d38:	98 2f       	mov	r25, r24
    2d3a:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2d3e:	20 91 d3 03 	lds	r18, 0x03D3
    2d42:	30 91 d4 03 	lds	r19, 0x03D4
    2d46:	40 91 d5 03 	lds	r20, 0x03D5
    2d4a:	50 91 d6 03 	lds	r21, 0x03D6
    2d4e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    2d52:	9b 01       	movw	r18, r22
    2d54:	ac 01       	movw	r20, r24
    2d56:	c8 01       	movw	r24, r16
    2d58:	b7 01       	movw	r22, r14
    2d5a:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    2d5e:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    2d62:	70 93 20 08 	sts	0x0820, r23
    2d66:	60 93 1f 08 	sts	0x081F, r22
                moveMouse = true;
    2d6a:	60 92 35 08 	sts	0x0835, r6
    2d6e:	a3 c1       	rjmp	.+838    	; 0x30b6 <_Z12update_mousev+0x476>
            } else {
                axBase = ax;
    2d70:	d0 93 36 07 	sts	0x0736, r29
    2d74:	c0 93 35 07 	sts	0x0735, r28
                ayBase = ay;
    2d78:	90 92 38 07 	sts	0x0738, r9
    2d7c:	80 92 37 07 	sts	0x0737, r8
                azBase = az;
    2d80:	80 91 27 07 	lds	r24, 0x0727
    2d84:	90 91 28 07 	lds	r25, 0x0728
    2d88:	90 93 3a 07 	sts	0x073A, r25
    2d8c:	80 93 39 07 	sts	0x0739, r24
                aset = true;
    2d90:	60 92 3b 07 	sts	0x073B, r6
    2d94:	90 c1       	rjmp	.+800    	; 0x30b6 <_Z12update_mousev+0x476>
            ayBase = ay;
            azBase = az;
            aset = true;
            break;*/
        case MOUSE_MODE_TILT_POSITION:
            mx0 = mx;
    2d96:	c0 91 1d 08 	lds	r28, 0x081D
    2d9a:	d0 91 1e 08 	lds	r29, 0x081E
    2d9e:	d0 93 26 08 	sts	0x0826, r29
    2da2:	c0 93 25 08 	sts	0x0825, r28
            my0 = my;
    2da6:	80 90 1f 08 	lds	r8, 0x081F
    2daa:	90 90 20 08 	lds	r9, 0x0820
    2dae:	90 92 28 08 	sts	0x0828, r9
    2db2:	80 92 27 08 	sts	0x0827, r8
            mx += (gx < 0) ? -sqrt(-gx) : sqrt(gx);
    2db6:	20 91 6e 07 	lds	r18, 0x076E
    2dba:	30 91 6f 07 	lds	r19, 0x076F
    2dbe:	37 ff       	sbrs	r19, 7
    2dc0:	13 c0       	rjmp	.+38     	; 0x2de8 <_Z12update_mousev+0x1a8>
    2dc2:	66 27       	eor	r22, r22
    2dc4:	77 27       	eor	r23, r23
    2dc6:	62 1b       	sub	r22, r18
    2dc8:	73 0b       	sbc	r23, r19
    2dca:	88 27       	eor	r24, r24
    2dcc:	77 fd       	sbrc	r23, 7
    2dce:	80 95       	com	r24
    2dd0:	98 2f       	mov	r25, r24
    2dd2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2dd6:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    2dda:	7b 01       	movw	r14, r22
    2ddc:	8c 01       	movw	r16, r24
    2dde:	17 fb       	bst	r17, 7
    2de0:	10 95       	com	r17
    2de2:	17 f9       	bld	r17, 7
    2de4:	10 95       	com	r17
    2de6:	0b c0       	rjmp	.+22     	; 0x2dfe <_Z12update_mousev+0x1be>
    2de8:	b9 01       	movw	r22, r18
    2dea:	88 27       	eor	r24, r24
    2dec:	77 fd       	sbrc	r23, 7
    2dee:	80 95       	com	r24
    2df0:	98 2f       	mov	r25, r24
    2df2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2df6:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    2dfa:	7b 01       	movw	r14, r22
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	be 01       	movw	r22, r28
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2e08:	a8 01       	movw	r20, r16
    2e0a:	97 01       	movw	r18, r14
    2e0c:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    2e10:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    2e14:	70 93 1e 08 	sts	0x081E, r23
    2e18:	60 93 1d 08 	sts	0x081D, r22
            my += (gy < 0) ? -sqrt(-gy) : sqrt(gy);
    2e1c:	20 91 70 07 	lds	r18, 0x0770
    2e20:	30 91 71 07 	lds	r19, 0x0771
    2e24:	37 ff       	sbrs	r19, 7
    2e26:	13 c0       	rjmp	.+38     	; 0x2e4e <_Z12update_mousev+0x20e>
    2e28:	66 27       	eor	r22, r22
    2e2a:	77 27       	eor	r23, r23
    2e2c:	62 1b       	sub	r22, r18
    2e2e:	73 0b       	sbc	r23, r19
    2e30:	88 27       	eor	r24, r24
    2e32:	77 fd       	sbrc	r23, 7
    2e34:	80 95       	com	r24
    2e36:	98 2f       	mov	r25, r24
    2e38:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2e3c:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    2e40:	7b 01       	movw	r14, r22
    2e42:	8c 01       	movw	r16, r24
    2e44:	17 fb       	bst	r17, 7
    2e46:	10 95       	com	r17
    2e48:	17 f9       	bld	r17, 7
    2e4a:	10 95       	com	r17
    2e4c:	0b c0       	rjmp	.+22     	; 0x2e64 <_Z12update_mousev+0x224>
    2e4e:	b9 01       	movw	r22, r18
    2e50:	88 27       	eor	r24, r24
    2e52:	77 fd       	sbrc	r23, 7
    2e54:	80 95       	com	r24
    2e56:	98 2f       	mov	r25, r24
    2e58:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2e5c:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    2e60:	7b 01       	movw	r14, r22
    2e62:	8c 01       	movw	r16, r24
    2e64:	b4 01       	movw	r22, r8
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2e6e:	a8 01       	movw	r20, r16
    2e70:	97 01       	movw	r18, r14
    2e72:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    2e76:	6f c0       	rjmp	.+222    	; 0x2f56 <_Z12update_mousev+0x316>
            moveMouse = true;
            break;
        case MOUSE_MODE_MOVEMENT_POSITION:
            if (aset) {
    2e78:	80 91 3b 07 	lds	r24, 0x073B
    2e7c:	c0 91 75 06 	lds	r28, 0x0675
    2e80:	d0 91 76 06 	lds	r29, 0x0676
    2e84:	80 90 79 06 	lds	r8, 0x0679
    2e88:	90 90 7a 06 	lds	r9, 0x067A
    2e8c:	88 23       	and	r24, r24
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <_Z12update_mousev+0x252>
    2e90:	69 c0       	rjmp	.+210    	; 0x2f64 <_Z12update_mousev+0x324>
                mx0 = mx;
    2e92:	60 91 1d 08 	lds	r22, 0x081D
    2e96:	70 91 1e 08 	lds	r23, 0x081E
    2e9a:	70 93 26 08 	sts	0x0826, r23
    2e9e:	60 93 25 08 	sts	0x0825, r22
                my0 = my;
    2ea2:	e0 90 1f 08 	lds	r14, 0x081F
    2ea6:	f0 90 20 08 	lds	r15, 0x0820
    2eaa:	f0 92 28 08 	sts	0x0828, r15
    2eae:	e0 92 27 08 	sts	0x0827, r14
                mx -= (float)(x - xBase) / opt_mouse_scale_mode3[0];
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2eba:	5b 01       	movw	r10, r22
    2ebc:	6c 01       	movw	r12, r24
    2ebe:	80 91 99 06 	lds	r24, 0x0699
    2ec2:	90 91 9a 06 	lds	r25, 0x069A
    2ec6:	c8 1b       	sub	r28, r24
    2ec8:	d9 0b       	sbc	r29, r25
    2eca:	be 01       	movw	r22, r28
    2ecc:	88 27       	eor	r24, r24
    2ece:	77 fd       	sbrc	r23, 7
    2ed0:	80 95       	com	r24
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2ed8:	20 91 df 03 	lds	r18, 0x03DF
    2edc:	30 91 e0 03 	lds	r19, 0x03E0
    2ee0:	40 91 e1 03 	lds	r20, 0x03E1
    2ee4:	50 91 e2 03 	lds	r21, 0x03E2
    2ee8:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    2eec:	9b 01       	movw	r18, r22
    2eee:	ac 01       	movw	r20, r24
    2ef0:	c6 01       	movw	r24, r12
    2ef2:	b5 01       	movw	r22, r10
    2ef4:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    2ef8:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    2efc:	70 93 1e 08 	sts	0x081E, r23
    2f00:	60 93 1d 08 	sts	0x081D, r22
                my -= (float)((z - 256) - zBase) / opt_mouse_scale_mode3[1];
    2f04:	00 e0       	ldi	r16, 0x00	; 0
    2f06:	10 e0       	ldi	r17, 0x00	; 0
    2f08:	c8 01       	movw	r24, r16
    2f0a:	b7 01       	movw	r22, r14
    2f0c:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2f10:	7b 01       	movw	r14, r22
    2f12:	8c 01       	movw	r16, r24
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
    2f18:	88 0e       	add	r8, r24
    2f1a:	99 1e       	adc	r9, r25
    2f1c:	80 91 9d 06 	lds	r24, 0x069D
    2f20:	90 91 9e 06 	lds	r25, 0x069E
    2f24:	88 1a       	sub	r8, r24
    2f26:	99 0a       	sbc	r9, r25
    2f28:	b4 01       	movw	r22, r8
    2f2a:	88 27       	eor	r24, r24
    2f2c:	77 fd       	sbrc	r23, 7
    2f2e:	80 95       	com	r24
    2f30:	98 2f       	mov	r25, r24
    2f32:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2f36:	20 91 e3 03 	lds	r18, 0x03E3
    2f3a:	30 91 e4 03 	lds	r19, 0x03E4
    2f3e:	40 91 e5 03 	lds	r20, 0x03E5
    2f42:	50 91 e6 03 	lds	r21, 0x03E6
    2f46:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    2f4a:	9b 01       	movw	r18, r22
    2f4c:	ac 01       	movw	r20, r24
    2f4e:	c8 01       	movw	r24, r16
    2f50:	b7 01       	movw	r22, r14
    2f52:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    2f56:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    2f5a:	70 93 20 08 	sts	0x0820, r23
    2f5e:	60 93 1f 08 	sts	0x081F, r22
    2f62:	a6 c0       	rjmp	.+332    	; 0x30b0 <_Z12update_mousev+0x470>
                moveMouse = true;
            } else {
                xBase = x;
    2f64:	d0 93 9a 06 	sts	0x069A, r29
    2f68:	c0 93 99 06 	sts	0x0699, r28
                yBase = y;
    2f6c:	80 91 77 06 	lds	r24, 0x0677
    2f70:	90 91 78 06 	lds	r25, 0x0678
    2f74:	90 93 9c 06 	sts	0x069C, r25
    2f78:	80 93 9b 06 	sts	0x069B, r24
                zBase = z - 256;
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	9f ef       	ldi	r25, 0xFF	; 255
    2f80:	88 0e       	add	r8, r24
    2f82:	99 1e       	adc	r9, r25
    2f84:	90 92 9e 06 	sts	0x069E, r9
    2f88:	80 92 9d 06 	sts	0x069D, r8
                aset = true;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	80 93 3b 07 	sts	0x073B, r24
    2f92:	91 c0       	rjmp	.+290    	; 0x30b6 <_Z12update_mousev+0x476>
            }
            break;
        case MOUSE_MODE_3D:
            mx0 = mx;
    2f94:	60 91 1d 08 	lds	r22, 0x081D
    2f98:	70 91 1e 08 	lds	r23, 0x081E
    2f9c:	70 93 26 08 	sts	0x0826, r23
    2fa0:	60 93 25 08 	sts	0x0825, r22
            my0 = my;
    2fa4:	e0 90 1f 08 	lds	r14, 0x081F
    2fa8:	f0 90 20 08 	lds	r15, 0x0820
    2fac:	f0 92 28 08 	sts	0x0828, r15
    2fb0:	e0 92 27 08 	sts	0x0827, r14
            mz0 = mz;
    2fb4:	a0 90 21 08 	lds	r10, 0x0821
    2fb8:	b0 90 22 08 	lds	r11, 0x0822
    2fbc:	b0 92 2a 08 	sts	0x082A, r11
    2fc0:	a0 92 29 08 	sts	0x0829, r10
            mx -= xv / opt_mouse_scale_mode4[0];
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    2fcc:	3b 01       	movw	r6, r22
    2fce:	4c 01       	movw	r8, r24
    2fd0:	60 91 87 06 	lds	r22, 0x0687
    2fd4:	70 91 88 06 	lds	r23, 0x0688
    2fd8:	88 27       	eor	r24, r24
    2fda:	77 fd       	sbrc	r23, 7
    2fdc:	80 95       	com	r24
    2fde:	98 2f       	mov	r25, r24
    2fe0:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    2fe4:	20 91 e7 03 	lds	r18, 0x03E7
    2fe8:	30 91 e8 03 	lds	r19, 0x03E8
    2fec:	40 91 e9 03 	lds	r20, 0x03E9
    2ff0:	50 91 ea 03 	lds	r21, 0x03EA
    2ff4:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    2ff8:	9b 01       	movw	r18, r22
    2ffa:	ac 01       	movw	r20, r24
    2ffc:	c4 01       	movw	r24, r8
    2ffe:	b3 01       	movw	r22, r6
    3000:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    3004:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    3008:	70 93 1e 08 	sts	0x081E, r23
    300c:	60 93 1d 08 	sts	0x081D, r22
            my -= zv / opt_mouse_scale_mode4[1];
    3010:	00 e0       	ldi	r16, 0x00	; 0
    3012:	10 e0       	ldi	r17, 0x00	; 0
    3014:	c8 01       	movw	r24, r16
    3016:	b7 01       	movw	r22, r14
    3018:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    301c:	7b 01       	movw	r14, r22
    301e:	8c 01       	movw	r16, r24
    3020:	60 91 8b 06 	lds	r22, 0x068B
    3024:	70 91 8c 06 	lds	r23, 0x068C
    3028:	88 27       	eor	r24, r24
    302a:	77 fd       	sbrc	r23, 7
    302c:	80 95       	com	r24
    302e:	98 2f       	mov	r25, r24
    3030:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3034:	20 91 eb 03 	lds	r18, 0x03EB
    3038:	30 91 ec 03 	lds	r19, 0x03EC
    303c:	40 91 ed 03 	lds	r20, 0x03ED
    3040:	50 91 ee 03 	lds	r21, 0x03EE
    3044:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3048:	9b 01       	movw	r18, r22
    304a:	ac 01       	movw	r20, r24
    304c:	c8 01       	movw	r24, r16
    304e:	b7 01       	movw	r22, r14
    3050:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    3054:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    3058:	70 93 20 08 	sts	0x0820, r23
    305c:	60 93 1f 08 	sts	0x081F, r22
            mz -= yv / opt_mouse_scale_mode4[2];
    3060:	cc 24       	eor	r12, r12
    3062:	dd 24       	eor	r13, r13
    3064:	c6 01       	movw	r24, r12
    3066:	b5 01       	movw	r22, r10
    3068:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    306c:	7b 01       	movw	r14, r22
    306e:	8c 01       	movw	r16, r24
    3070:	60 91 89 06 	lds	r22, 0x0689
    3074:	70 91 8a 06 	lds	r23, 0x068A
    3078:	88 27       	eor	r24, r24
    307a:	77 fd       	sbrc	r23, 7
    307c:	80 95       	com	r24
    307e:	98 2f       	mov	r25, r24
    3080:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3084:	20 91 ef 03 	lds	r18, 0x03EF
    3088:	30 91 f0 03 	lds	r19, 0x03F0
    308c:	40 91 f1 03 	lds	r20, 0x03F1
    3090:	50 91 f2 03 	lds	r21, 0x03F2
    3094:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3098:	9b 01       	movw	r18, r22
    309a:	ac 01       	movw	r20, r24
    309c:	c8 01       	movw	r24, r16
    309e:	b7 01       	movw	r22, r14
    30a0:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    30a4:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    30a8:	70 93 22 08 	sts	0x0822, r23
    30ac:	60 93 21 08 	sts	0x0821, r22
            moveMouse = true;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	80 93 35 08 	sts	0x0835, r24
            break;
    }
    switch (opt_scroll_mode) {
    30b6:	60 90 39 08 	lds	r6, 0x0839
    30ba:	92 e0       	ldi	r25, 0x02	; 2
    30bc:	69 16       	cp	r6, r25
    30be:	09 f4       	brne	.+2      	; 0x30c2 <_Z12update_mousev+0x482>
    30c0:	8f c0       	rjmp	.+286    	; 0x31e0 <_Z12update_mousev+0x5a0>
    30c2:	83 e0       	ldi	r24, 0x03	; 3
    30c4:	68 16       	cp	r6, r24
    30c6:	09 f4       	brne	.+2      	; 0x30ca <_Z12update_mousev+0x48a>
    30c8:	ca c0       	rjmp	.+404    	; 0x325e <_Z12update_mousev+0x61e>
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	69 16       	cp	r6, r25
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <_Z12update_mousev+0x492>
    30d0:	56 c1       	rjmp	.+684    	; 0x337e <_Z12update_mousev+0x73e>
        case SCROLL_MODE_TILT_VELOCITY: // gyro
            if (aset) {
    30d2:	80 91 3b 07 	lds	r24, 0x073B
    30d6:	c0 91 23 07 	lds	r28, 0x0723
    30da:	d0 91 24 07 	lds	r29, 0x0724
    30de:	80 90 25 07 	lds	r8, 0x0725
    30e2:	90 90 26 07 	lds	r9, 0x0726
    30e6:	88 23       	and	r24, r24
    30e8:	09 f4       	brne	.+2      	; 0x30ec <_Z12update_mousev+0x4ac>
    30ea:	67 c0       	rjmp	.+206    	; 0x31ba <_Z12update_mousev+0x57a>
                mx0 = mx;
    30ec:	60 91 1d 08 	lds	r22, 0x081D
    30f0:	70 91 1e 08 	lds	r23, 0x081E
    30f4:	70 93 26 08 	sts	0x0826, r23
    30f8:	60 93 25 08 	sts	0x0825, r22
                my0 = my;
    30fc:	e0 90 1f 08 	lds	r14, 0x081F
    3100:	f0 90 20 08 	lds	r15, 0x0820
    3104:	f0 92 28 08 	sts	0x0828, r15
    3108:	e0 92 27 08 	sts	0x0827, r14
                mx -= (float)(ax - axBase) / opt_mouse_scale_mode1[0];
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    3114:	5b 01       	movw	r10, r22
    3116:	6c 01       	movw	r12, r24
    3118:	80 91 35 07 	lds	r24, 0x0735
    311c:	90 91 36 07 	lds	r25, 0x0736
    3120:	c8 1b       	sub	r28, r24
    3122:	d9 0b       	sbc	r29, r25
    3124:	be 01       	movw	r22, r28
    3126:	88 27       	eor	r24, r24
    3128:	77 fd       	sbrc	r23, 7
    312a:	80 95       	com	r24
    312c:	98 2f       	mov	r25, r24
    312e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3132:	20 91 cf 03 	lds	r18, 0x03CF
    3136:	30 91 d0 03 	lds	r19, 0x03D0
    313a:	40 91 d1 03 	lds	r20, 0x03D1
    313e:	50 91 d2 03 	lds	r21, 0x03D2
    3142:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3146:	9b 01       	movw	r18, r22
    3148:	ac 01       	movw	r20, r24
    314a:	c6 01       	movw	r24, r12
    314c:	b5 01       	movw	r22, r10
    314e:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    3152:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    3156:	70 93 1e 08 	sts	0x081E, r23
    315a:	60 93 1d 08 	sts	0x081D, r22
                my -= (float)(ay - ayBase) / opt_mouse_scale_mode1[1];
    315e:	00 e0       	ldi	r16, 0x00	; 0
    3160:	10 e0       	ldi	r17, 0x00	; 0
    3162:	c8 01       	movw	r24, r16
    3164:	b7 01       	movw	r22, r14
    3166:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    316a:	7b 01       	movw	r14, r22
    316c:	8c 01       	movw	r16, r24
    316e:	80 91 37 07 	lds	r24, 0x0737
    3172:	90 91 38 07 	lds	r25, 0x0738
    3176:	88 1a       	sub	r8, r24
    3178:	99 0a       	sbc	r9, r25
    317a:	b4 01       	movw	r22, r8
    317c:	88 27       	eor	r24, r24
    317e:	77 fd       	sbrc	r23, 7
    3180:	80 95       	com	r24
    3182:	98 2f       	mov	r25, r24
    3184:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3188:	20 91 d3 03 	lds	r18, 0x03D3
    318c:	30 91 d4 03 	lds	r19, 0x03D4
    3190:	40 91 d5 03 	lds	r20, 0x03D5
    3194:	50 91 d6 03 	lds	r21, 0x03D6
    3198:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    319c:	9b 01       	movw	r18, r22
    319e:	ac 01       	movw	r20, r24
    31a0:	c8 01       	movw	r24, r16
    31a2:	b7 01       	movw	r22, r14
    31a4:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    31a8:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    31ac:	70 93 20 08 	sts	0x0820, r23
    31b0:	60 93 1f 08 	sts	0x081F, r22
                scrollMouse = true;
    31b4:	60 92 36 08 	sts	0x0836, r6
    31b8:	e2 c0       	rjmp	.+452    	; 0x337e <_Z12update_mousev+0x73e>
            } else {
                axBase = ax;
    31ba:	d0 93 36 07 	sts	0x0736, r29
    31be:	c0 93 35 07 	sts	0x0735, r28
                ayBase = ay;
    31c2:	90 92 38 07 	sts	0x0738, r9
    31c6:	80 92 37 07 	sts	0x0737, r8
                azBase = az;
    31ca:	80 91 27 07 	lds	r24, 0x0727
    31ce:	90 91 28 07 	lds	r25, 0x0728
    31d2:	90 93 3a 07 	sts	0x073A, r25
    31d6:	80 93 39 07 	sts	0x0739, r24
                aset = true;
    31da:	60 92 3b 07 	sts	0x073B, r6
    31de:	cf c0       	rjmp	.+414    	; 0x337e <_Z12update_mousev+0x73e>
            }
            break;
        case SCROLL_MODE_TILT_POSITION: // gyro
            sy0 = sy;
    31e0:	c0 91 23 08 	lds	r28, 0x0823
    31e4:	d0 91 24 08 	lds	r29, 0x0824
    31e8:	d0 93 2c 08 	sts	0x082C, r29
    31ec:	c0 93 2b 08 	sts	0x082B, r28
            sy -= (gx < 0) ? -sqrt(-gx / 30) : sqrt(gx / 30);
    31f0:	80 91 6e 07 	lds	r24, 0x076E
    31f4:	90 91 6f 07 	lds	r25, 0x076F
    31f8:	97 ff       	sbrs	r25, 7
    31fa:	13 c0       	rjmp	.+38     	; 0x3222 <_Z12update_mousev+0x5e2>
    31fc:	62 ee       	ldi	r22, 0xE2	; 226
    31fe:	7f ef       	ldi	r23, 0xFF	; 255
    3200:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    3204:	88 27       	eor	r24, r24
    3206:	77 fd       	sbrc	r23, 7
    3208:	80 95       	com	r24
    320a:	98 2f       	mov	r25, r24
    320c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3210:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    3214:	7b 01       	movw	r14, r22
    3216:	8c 01       	movw	r16, r24
    3218:	17 fb       	bst	r17, 7
    321a:	10 95       	com	r17
    321c:	17 f9       	bld	r17, 7
    321e:	10 95       	com	r17
    3220:	0e c0       	rjmp	.+28     	; 0x323e <_Z12update_mousev+0x5fe>
    3222:	6e e1       	ldi	r22, 0x1E	; 30
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    322a:	88 27       	eor	r24, r24
    322c:	77 fd       	sbrc	r23, 7
    322e:	80 95       	com	r24
    3230:	98 2f       	mov	r25, r24
    3232:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3236:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    323a:	7b 01       	movw	r14, r22
    323c:	8c 01       	movw	r16, r24
    323e:	be 01       	movw	r22, r28
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    3248:	a8 01       	movw	r20, r16
    324a:	97 01       	movw	r18, r14
    324c:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    3250:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    3254:	70 93 24 08 	sts	0x0824, r23
    3258:	60 93 23 08 	sts	0x0823, r22
    325c:	75 c0       	rjmp	.+234    	; 0x3348 <_Z12update_mousev+0x708>
            scrollMouse = true;
            break;
        case SCROLL_MODE_MOVEMENT_POSITION: // accel
            if (aset) {
    325e:	80 91 3b 07 	lds	r24, 0x073B
    3262:	c0 91 75 06 	lds	r28, 0x0675
    3266:	d0 91 76 06 	lds	r29, 0x0676
    326a:	80 90 79 06 	lds	r8, 0x0679
    326e:	90 90 7a 06 	lds	r9, 0x067A
    3272:	88 23       	and	r24, r24
    3274:	09 f4       	brne	.+2      	; 0x3278 <_Z12update_mousev+0x638>
    3276:	6c c0       	rjmp	.+216    	; 0x3350 <_Z12update_mousev+0x710>
                mx0 = mx;
    3278:	60 91 1d 08 	lds	r22, 0x081D
    327c:	70 91 1e 08 	lds	r23, 0x081E
    3280:	70 93 26 08 	sts	0x0826, r23
    3284:	60 93 25 08 	sts	0x0825, r22
                my0 = my;
    3288:	e0 90 1f 08 	lds	r14, 0x081F
    328c:	f0 90 20 08 	lds	r15, 0x0820
    3290:	f0 92 28 08 	sts	0x0828, r15
    3294:	e0 92 27 08 	sts	0x0827, r14
                mx -= (float)(x - xBase) / opt_mouse_scale_mode3[0];
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    32a0:	5b 01       	movw	r10, r22
    32a2:	6c 01       	movw	r12, r24
    32a4:	80 91 99 06 	lds	r24, 0x0699
    32a8:	90 91 9a 06 	lds	r25, 0x069A
    32ac:	c8 1b       	sub	r28, r24
    32ae:	d9 0b       	sbc	r29, r25
    32b0:	be 01       	movw	r22, r28
    32b2:	88 27       	eor	r24, r24
    32b4:	77 fd       	sbrc	r23, 7
    32b6:	80 95       	com	r24
    32b8:	98 2f       	mov	r25, r24
    32ba:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    32be:	20 91 df 03 	lds	r18, 0x03DF
    32c2:	30 91 e0 03 	lds	r19, 0x03E0
    32c6:	40 91 e1 03 	lds	r20, 0x03E1
    32ca:	50 91 e2 03 	lds	r21, 0x03E2
    32ce:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    32d2:	9b 01       	movw	r18, r22
    32d4:	ac 01       	movw	r20, r24
    32d6:	c6 01       	movw	r24, r12
    32d8:	b5 01       	movw	r22, r10
    32da:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    32de:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    32e2:	70 93 1e 08 	sts	0x081E, r23
    32e6:	60 93 1d 08 	sts	0x081D, r22
                my -= (float)((z - 256) - zBase) / opt_mouse_scale_mode3[1];
    32ea:	00 e0       	ldi	r16, 0x00	; 0
    32ec:	10 e0       	ldi	r17, 0x00	; 0
    32ee:	c8 01       	movw	r24, r16
    32f0:	b7 01       	movw	r22, r14
    32f2:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    32f6:	7b 01       	movw	r14, r22
    32f8:	8c 01       	movw	r16, r24
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	9f ef       	ldi	r25, 0xFF	; 255
    32fe:	88 0e       	add	r8, r24
    3300:	99 1e       	adc	r9, r25
    3302:	80 91 9d 06 	lds	r24, 0x069D
    3306:	90 91 9e 06 	lds	r25, 0x069E
    330a:	88 1a       	sub	r8, r24
    330c:	99 0a       	sbc	r9, r25
    330e:	b4 01       	movw	r22, r8
    3310:	88 27       	eor	r24, r24
    3312:	77 fd       	sbrc	r23, 7
    3314:	80 95       	com	r24
    3316:	98 2f       	mov	r25, r24
    3318:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    331c:	20 91 e3 03 	lds	r18, 0x03E3
    3320:	30 91 e4 03 	lds	r19, 0x03E4
    3324:	40 91 e5 03 	lds	r20, 0x03E5
    3328:	50 91 e6 03 	lds	r21, 0x03E6
    332c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3330:	9b 01       	movw	r18, r22
    3332:	ac 01       	movw	r20, r24
    3334:	c8 01       	movw	r24, r16
    3336:	b7 01       	movw	r22, r14
    3338:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__subsf3>
    333c:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    3340:	70 93 20 08 	sts	0x0820, r23
    3344:	60 93 1f 08 	sts	0x081F, r22
                scrollMouse = true;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	80 93 36 08 	sts	0x0836, r24
    334e:	17 c0       	rjmp	.+46     	; 0x337e <_Z12update_mousev+0x73e>
            } else {
                xBase = x;
    3350:	d0 93 9a 06 	sts	0x069A, r29
    3354:	c0 93 99 06 	sts	0x0699, r28
                yBase = y;
    3358:	80 91 77 06 	lds	r24, 0x0677
    335c:	90 91 78 06 	lds	r25, 0x0678
    3360:	90 93 9c 06 	sts	0x069C, r25
    3364:	80 93 9b 06 	sts	0x069B, r24
                zBase = z - 256;
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	9f ef       	ldi	r25, 0xFF	; 255
    336c:	88 0e       	add	r8, r24
    336e:	99 1e       	adc	r9, r25
    3370:	90 92 9e 06 	sts	0x069E, r9
    3374:	80 92 9d 06 	sts	0x069D, r8
                aset = true;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	80 93 3b 07 	sts	0x073B, r24

    //if (BOUND_MOUSEX > 0 && abs(mx) > BOUND_MOUSEX) mx = mx < 0 ? -BOUND_MOUSEX : BOUND_MOUSEX;
    //if (BOUND_MOUSEY > 0 && abs(my) > BOUND_MOUSEY) my = my < 0 ? -BOUND_MOUSEY : BOUND_MOUSEY;
    
    // get relative movement amounts
    mdx = mx - mx0;
    337e:	20 91 1d 08 	lds	r18, 0x081D
    3382:	30 91 1e 08 	lds	r19, 0x081E
    3386:	80 91 25 08 	lds	r24, 0x0825
    338a:	90 91 26 08 	lds	r25, 0x0826
    338e:	28 1b       	sub	r18, r24
    3390:	39 0b       	sbc	r19, r25
    3392:	30 93 2e 08 	sts	0x082E, r19
    3396:	20 93 2d 08 	sts	0x082D, r18
    mdy = my - my0;
    339a:	40 91 1f 08 	lds	r20, 0x081F
    339e:	50 91 20 08 	lds	r21, 0x0820
    33a2:	80 91 27 08 	lds	r24, 0x0827
    33a6:	90 91 28 08 	lds	r25, 0x0828
    33aa:	48 1b       	sub	r20, r24
    33ac:	59 0b       	sbc	r21, r25
    33ae:	50 93 30 08 	sts	0x0830, r21
    33b2:	40 93 2f 08 	sts	0x082F, r20
    mdz = mz - mz0;
    33b6:	60 91 21 08 	lds	r22, 0x0821
    33ba:	70 91 22 08 	lds	r23, 0x0822
    33be:	80 91 29 08 	lds	r24, 0x0829
    33c2:	90 91 2a 08 	lds	r25, 0x082A
    33c6:	68 1b       	sub	r22, r24
    33c8:	79 0b       	sbc	r23, r25
    33ca:	70 93 32 08 	sts	0x0832, r23
    33ce:	60 93 31 08 	sts	0x0831, r22
    
    if (opt_mouse_invert_x == 1) mdx = -mdx;
    33d2:	80 91 cd 03 	lds	r24, 0x03CD
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	41 f4       	brne	.+16     	; 0x33ea <_Z12update_mousev+0x7aa>
    33da:	88 27       	eor	r24, r24
    33dc:	99 27       	eor	r25, r25
    33de:	82 1b       	sub	r24, r18
    33e0:	93 0b       	sbc	r25, r19
    33e2:	90 93 2e 08 	sts	0x082E, r25
    33e6:	80 93 2d 08 	sts	0x082D, r24
    if (opt_mouse_invert_y == 1) mdy = -mdy;
    33ea:	80 91 ce 03 	lds	r24, 0x03CE
    33ee:	81 30       	cpi	r24, 0x01	; 1
    33f0:	41 f4       	brne	.+16     	; 0x3402 <_Z12update_mousev+0x7c2>
    33f2:	88 27       	eor	r24, r24
    33f4:	99 27       	eor	r25, r25
    33f6:	84 1b       	sub	r24, r20
    33f8:	95 0b       	sbc	r25, r21
    33fa:	90 93 30 08 	sts	0x0830, r25
    33fe:	80 93 2f 08 	sts	0x082F, r24
    if (opt_mouse_invert_z == 1) mdz = -mdz;
    3402:	80 91 37 08 	lds	r24, 0x0837
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	41 f4       	brne	.+16     	; 0x341a <_Z12update_mousev+0x7da>
    340a:	88 27       	eor	r24, r24
    340c:	99 27       	eor	r25, r25
    340e:	86 1b       	sub	r24, r22
    3410:	97 0b       	sbc	r25, r23
    3412:	90 93 32 08 	sts	0x0832, r25
    3416:	80 93 31 08 	sts	0x0831, r24
    if (moveMouse && opt_mouse_mode > 0 && (mdx != 0 || mdy != 0 || mdz != 0)) {
    341a:	80 91 35 08 	lds	r24, 0x0835
    341e:	88 23       	and	r24, r24
    3420:	09 f4       	brne	.+2      	; 0x3424 <_Z12update_mousev+0x7e4>
    3422:	99 c0       	rjmp	.+306    	; 0x3556 <_Z12update_mousev+0x916>
    3424:	80 91 38 08 	lds	r24, 0x0838
    3428:	88 23       	and	r24, r24
    342a:	09 f4       	brne	.+2      	; 0x342e <_Z12update_mousev+0x7ee>
    342c:	94 c0       	rjmp	.+296    	; 0x3556 <_Z12update_mousev+0x916>
    342e:	60 91 2d 08 	lds	r22, 0x082D
    3432:	70 91 2e 08 	lds	r23, 0x082E
    3436:	61 15       	cp	r22, r1
    3438:	71 05       	cpc	r23, r1
    343a:	69 f4       	brne	.+26     	; 0x3456 <_Z12update_mousev+0x816>
    343c:	80 91 2f 08 	lds	r24, 0x082F
    3440:	90 91 30 08 	lds	r25, 0x0830
    3444:	89 2b       	or	r24, r25
    3446:	39 f4       	brne	.+14     	; 0x3456 <_Z12update_mousev+0x816>
    3448:	80 91 31 08 	lds	r24, 0x0831
    344c:	90 91 32 08 	lds	r25, 0x0832
    3450:	89 2b       	or	r24, r25
    3452:	09 f4       	brne	.+2      	; 0x3456 <_Z12update_mousev+0x816>
    3454:	80 c0       	rjmp	.+256    	; 0x3556 <_Z12update_mousev+0x916>
        #ifdef ENABLE_USB
            if (mdz > 0) Mouse.move(mdx, mdy, mdz);
    3456:	20 91 31 08 	lds	r18, 0x0831
    345a:	30 91 32 08 	lds	r19, 0x0832
    345e:	21 15       	cp	r18, r1
    3460:	31 05       	cpc	r19, r1
    3462:	39 f0       	breq	.+14     	; 0x3472 <_Z12update_mousev+0x832>
    3464:	88 ea       	ldi	r24, 0xA8	; 168
    3466:	98 e0       	ldi	r25, 0x08	; 8
    3468:	40 91 2f 08 	lds	r20, 0x082F
    346c:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <_ZN8USBMouse4moveEhhh>
    3470:	06 c0       	rjmp	.+12     	; 0x347e <_Z12update_mousev+0x83e>
            else Mouse.move(mdx, mdy);
    3472:	88 ea       	ldi	r24, 0xA8	; 168
    3474:	98 e0       	ldi	r25, 0x08	; 8
    3476:	40 91 2f 08 	lds	r20, 0x082F
    347a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <_ZN8USBMouse4moveEhh>
        #endif /* ENABLE_USB */
        #ifdef ENABLE_BLUETOOTH
            if (mdz > 0) bluetooth.move(mdx, mdy, mdz);
    347e:	20 91 31 08 	lds	r18, 0x0831
    3482:	30 91 32 08 	lds	r19, 0x0832
    3486:	21 15       	cp	r18, r1
    3488:	31 05       	cpc	r19, r1
    348a:	49 f0       	breq	.+18     	; 0x349e <_Z12update_mousev+0x85e>
    348c:	85 e5       	ldi	r24, 0x55	; 85
    348e:	96 e0       	ldi	r25, 0x06	; 6
    3490:	60 91 2d 08 	lds	r22, 0x082D
    3494:	40 91 2f 08 	lds	r20, 0x082F
    3498:	0e 94 c0 37 	call	0x6f80	; 0x6f80 <_ZN5iWRAP4moveEhhh>
    349c:	08 c0       	rjmp	.+16     	; 0x34ae <_Z12update_mousev+0x86e>
            else bluetooth.move(mdx, mdy);
    349e:	85 e5       	ldi	r24, 0x55	; 85
    34a0:	96 e0       	ldi	r25, 0x06	; 6
    34a2:	60 91 2d 08 	lds	r22, 0x082D
    34a6:	40 91 2f 08 	lds	r20, 0x082F
    34aa:	0e 94 17 38 	call	0x702e	; 0x702e <_ZN5iWRAP4moveEhh>
        #endif /* ENABLE_BLUETOOTH */
        #ifdef ENABLE_RX400
            if (mdz > 0) RX400.move(mdx, mdy, mdz);
            else RX400.move(mdx, mdy);
        #endif /* ENABLE_RX400 */
        DEBUG_PRN_MOUSE("mouse ");
    34ae:	88 e8       	ldi	r24, 0x88	; 136
    34b0:	98 e0       	ldi	r25, 0x08	; 8
    34b2:	6f e9       	ldi	r22, 0x9F	; 159
    34b4:	72 e0       	ldi	r23, 0x02	; 2
    34b6:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_MOUSE(mx); DEBUG_PRN_MOUSE(" ");
    34ba:	60 91 1d 08 	lds	r22, 0x081D
    34be:	70 91 1e 08 	lds	r23, 0x081E
    34c2:	88 e8       	ldi	r24, 0x88	; 136
    34c4:	98 e0       	ldi	r25, 0x08	; 8
    34c6:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    34ca:	88 e8       	ldi	r24, 0x88	; 136
    34cc:	98 e0       	ldi	r25, 0x08	; 8
    34ce:	62 e1       	ldi	r22, 0x12	; 18
    34d0:	71 e0       	ldi	r23, 0x01	; 1
    34d2:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_MOUSE(my); DEBUG_PRN_MOUSE(" ");
    34d6:	60 91 1f 08 	lds	r22, 0x081F
    34da:	70 91 20 08 	lds	r23, 0x0820
    34de:	88 e8       	ldi	r24, 0x88	; 136
    34e0:	98 e0       	ldi	r25, 0x08	; 8
    34e2:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    34e6:	88 e8       	ldi	r24, 0x88	; 136
    34e8:	98 e0       	ldi	r25, 0x08	; 8
    34ea:	62 e1       	ldi	r22, 0x12	; 18
    34ec:	71 e0       	ldi	r23, 0x01	; 1
    34ee:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_MOUSE(mdx); DEBUG_PRN_MOUSE(" ");
    34f2:	60 91 2d 08 	lds	r22, 0x082D
    34f6:	70 91 2e 08 	lds	r23, 0x082E
    34fa:	88 e8       	ldi	r24, 0x88	; 136
    34fc:	98 e0       	ldi	r25, 0x08	; 8
    34fe:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    3502:	88 e8       	ldi	r24, 0x88	; 136
    3504:	98 e0       	ldi	r25, 0x08	; 8
    3506:	62 e1       	ldi	r22, 0x12	; 18
    3508:	71 e0       	ldi	r23, 0x01	; 1
    350a:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_MOUSE(mdy); DEBUG_PRN_MOUSE(" ");
    350e:	60 91 2f 08 	lds	r22, 0x082F
    3512:	70 91 30 08 	lds	r23, 0x0830
    3516:	88 e8       	ldi	r24, 0x88	; 136
    3518:	98 e0       	ldi	r25, 0x08	; 8
    351a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    351e:	88 e8       	ldi	r24, 0x88	; 136
    3520:	98 e0       	ldi	r25, 0x08	; 8
    3522:	62 e1       	ldi	r22, 0x12	; 18
    3524:	71 e0       	ldi	r23, 0x01	; 1
    3526:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_MOUSE(mdz); DEBUG_PRN_MOUSE(" ");
    352a:	60 91 31 08 	lds	r22, 0x0831
    352e:	70 91 32 08 	lds	r23, 0x0832
    3532:	88 e8       	ldi	r24, 0x88	; 136
    3534:	98 e0       	ldi	r25, 0x08	; 8
    3536:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN16USBVirtualSerial5printEj>
    353a:	88 e8       	ldi	r24, 0x88	; 136
    353c:	98 e0       	ldi	r25, 0x08	; 8
    353e:	62 e1       	ldi	r22, 0x12	; 18
    3540:	71 e0       	ldi	r23, 0x01	; 1
    3542:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRNL_MOUSE(mdz);
    3546:	60 91 31 08 	lds	r22, 0x0831
    354a:	70 91 32 08 	lds	r23, 0x0832
    354e:	88 e8       	ldi	r24, 0x88	; 136
    3550:	98 e0       	ldi	r25, 0x08	; 8
    3552:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN16USBVirtualSerial7printlnEj>
    }
    if (scrollMouse && opt_scroll_mode > 0 && sdy != 0) {
    3556:	80 91 36 08 	lds	r24, 0x0836
    355a:	88 23       	and	r24, r24
    355c:	a9 f0       	breq	.+42     	; 0x3588 <_Z12update_mousev+0x948>
    355e:	80 91 39 08 	lds	r24, 0x0839
    3562:	88 23       	and	r24, r24
    3564:	89 f0       	breq	.+34     	; 0x3588 <_Z12update_mousev+0x948>
    3566:	60 91 33 08 	lds	r22, 0x0833
    356a:	70 91 34 08 	lds	r23, 0x0834
    356e:	61 15       	cp	r22, r1
    3570:	71 05       	cpc	r23, r1
    3572:	51 f0       	breq	.+20     	; 0x3588 <_Z12update_mousev+0x948>
        #ifdef ENABLE_USB
            Mouse.scroll(sdy);
    3574:	88 ea       	ldi	r24, 0xA8	; 168
    3576:	98 e0       	ldi	r25, 0x08	; 8
    3578:	0e 94 b1 2b 	call	0x5762	; 0x5762 <_ZN8USBMouse6scrollEh>
        #endif /* ENABLE_USB */
        #ifdef ENABLE_BLUETOOTH
            bluetooth.scroll(sdy);
    357c:	85 e5       	ldi	r24, 0x55	; 85
    357e:	96 e0       	ldi	r25, 0x06	; 6
    3580:	60 91 33 08 	lds	r22, 0x0833
    3584:	0e 94 13 38 	call	0x7026	; 0x7026 <_ZN5iWRAP6scrollEh>
            Serial.print("scroll ");
            Serial.print(sy); Serial.print(" ");
            Serial.println(sdy);
        #endif /* SERIAL_DEBUG_MOUSE */
    }
}
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	bf 90       	pop	r11
    359a:	af 90       	pop	r10
    359c:	9f 90       	pop	r9
    359e:	8f 90       	pop	r8
    35a0:	7f 90       	pop	r7
    35a2:	6f 90       	pop	r6
    35a4:	08 95       	ret

000035a6 <_Z20setup_feedback_piezov>:
#define KG_PIEZO_SHORTBEEP 3
#define KG_PIEZO_SHORTPULSE 4
#define KG_PIEZO_SOLID 5

void setup_feedback_piezo() {
    tone(KG_PIN_PIEZO, 1760, 20);
    35a6:	8a e2       	ldi	r24, 0x2A	; 42
    35a8:	60 ee       	ldi	r22, 0xE0	; 224
    35aa:	76 e0       	ldi	r23, 0x06	; 6
    35ac:	24 e1       	ldi	r18, 0x14	; 20
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	0e 94 77 26 	call	0x4cee	; 0x4cee <_Z4tonehjm>
    delay(100);
    35b8:	64 e6       	ldi	r22, 0x64	; 100
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 9b 39 	call	0x7336	; 0x7336 <delay>
    tone(KG_PIN_PIEZO, 1760, 20);
    35c4:	8a e2       	ldi	r24, 0x2A	; 42
    35c6:	60 ee       	ldi	r22, 0xE0	; 224
    35c8:	76 e0       	ldi	r23, 0x06	; 6
    35ca:	24 e1       	ldi	r18, 0x14	; 20
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	50 e0       	ldi	r21, 0x00	; 0
    35d2:	0e 94 77 26 	call	0x4cee	; 0x4cee <_Z4tonehjm>
    delay(100);
    35d6:	64 e6       	ldi	r22, 0x64	; 100
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0c 94 9b 39 	jmp	0x7336	; 0x7336 <delay>

000035e2 <_Z23update_motion_gyroscopev>:
    gyroCalibrated = false;
    gxMin = gyMin = gzMin = 0;
    gxMax = gyMax = gzMax = 0;
}

void update_motion_gyroscope() {
    35e2:	2f 92       	push	r2
    35e4:	3f 92       	push	r3
    35e6:	4f 92       	push	r4
    35e8:	5f 92       	push	r5
    35ea:	6f 92       	push	r6
    35ec:	7f 92       	push	r7
    35ee:	8f 92       	push	r8
    35f0:	9f 92       	push	r9
    35f2:	af 92       	push	r10
    35f4:	bf 92       	push	r11
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
    360a:	2c 97       	sbiw	r28, 0x0c	; 12
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    gx00 = gx0;
    3616:	80 91 74 07 	lds	r24, 0x0774
    361a:	90 91 75 07 	lds	r25, 0x0775
    361e:	90 93 7b 07 	sts	0x077B, r25
    3622:	80 93 7a 07 	sts	0x077A, r24
    gy00 = gy0;
    3626:	80 91 76 07 	lds	r24, 0x0776
    362a:	90 91 77 07 	lds	r25, 0x0777
    362e:	90 93 7d 07 	sts	0x077D, r25
    3632:	80 93 7c 07 	sts	0x077C, r24
    gz00 = gz0;
    3636:	80 91 78 07 	lds	r24, 0x0778
    363a:	90 91 79 07 	lds	r25, 0x0779
    363e:	90 93 7f 07 	sts	0x077F, r25
    3642:	80 93 7e 07 	sts	0x077E, r24
    gx0 = gx;
    3646:	80 91 6e 07 	lds	r24, 0x076E
    364a:	90 91 6f 07 	lds	r25, 0x076F
    364e:	90 93 75 07 	sts	0x0775, r25
    3652:	80 93 74 07 	sts	0x0774, r24
    gy0 = gy;
    3656:	80 91 70 07 	lds	r24, 0x0770
    365a:	90 91 71 07 	lds	r25, 0x0771
    365e:	90 93 77 07 	sts	0x0777, r25
    3662:	80 93 76 07 	sts	0x0776, r24
    gz0 = gz;
    3666:	80 91 72 07 	lds	r24, 0x0772
    366a:	90 91 73 07 	lds	r25, 0x0773
    366e:	90 93 79 07 	sts	0x0779, r25
    3672:	80 93 78 07 	sts	0x0778, r24

    // read gyroscope with correct rotation settings
    if      (opt_gyro_rot90 == 0) { // no rotation:            x = +x, y = +y, z = +z
    3676:	80 91 cc 03 	lds	r24, 0x03CC
    367a:	88 23       	and	r24, r24
    367c:	59 f4       	brne	.+22     	; 0x3694 <_Z23update_motion_gyroscopev+0xb2>
        gyroscope.readGyroRaw(&gxRaw, &gyRaw, &gzRaw);
    367e:	8f e3       	ldi	r24, 0x3F	; 63
    3680:	97 e0       	ldi	r25, 0x07	; 7
    3682:	68 e6       	ldi	r22, 0x68	; 104
    3684:	77 e0       	ldi	r23, 0x07	; 7
    3686:	4a e6       	ldi	r20, 0x6A	; 106
    3688:	57 e0       	ldi	r21, 0x07	; 7
    368a:	2c e6       	ldi	r18, 0x6C	; 108
    368c:	37 e0       	ldi	r19, 0x07	; 7
    368e:	0e 94 db 33 	call	0x67b6	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
    3692:	78 c0       	rjmp	.+240    	; 0x3784 <_Z23update_motion_gyroscopev+0x1a2>
    }
    else if (opt_gyro_rot90 == 1) { // 90 around x axis:       x = +x, y = -z, z = +y
    3694:	81 30       	cpi	r24, 0x01	; 1
    3696:	49 f4       	brne	.+18     	; 0x36aa <_Z23update_motion_gyroscopev+0xc8>
        gyroscope.readGyroRaw(&gxRaw, &gzRaw, &gyRaw);
    3698:	8f e3       	ldi	r24, 0x3F	; 63
    369a:	97 e0       	ldi	r25, 0x07	; 7
    369c:	68 e6       	ldi	r22, 0x68	; 104
    369e:	77 e0       	ldi	r23, 0x07	; 7
    36a0:	4c e6       	ldi	r20, 0x6C	; 108
    36a2:	57 e0       	ldi	r21, 0x07	; 7
    36a4:	2a e6       	ldi	r18, 0x6A	; 106
    36a6:	37 e0       	ldi	r19, 0x07	; 7
    36a8:	60 c0       	rjmp	.+192    	; 0x376a <_Z23update_motion_gyroscopev+0x188>
        gzRaw = -gzRaw;
    }
    else if (opt_gyro_rot90 == 2) { // 90 around y axis:       x = -z, y = +y, z = +x
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <_Z23update_motion_gyroscopev+0xce>
    36ae:	55 c0       	rjmp	.+170    	; 0x375a <_Z23update_motion_gyroscopev+0x178>
        gyroscope.readGyroRaw(&gzRaw, &gyRaw, &gxRaw);
        gzRaw = -gzRaw;
    }
    else if (opt_gyro_rot90 == 4) { // 90 around z axis;       x = -y, y = +x, z = +z
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	b1 f4       	brne	.+44     	; 0x36e0 <_Z23update_motion_gyroscopev+0xfe>
        gyroscope.readGyroRaw(&gyRaw, &gxRaw, &gzRaw);
    36b4:	8f e3       	ldi	r24, 0x3F	; 63
    36b6:	97 e0       	ldi	r25, 0x07	; 7
    36b8:	6a e6       	ldi	r22, 0x6A	; 106
    36ba:	77 e0       	ldi	r23, 0x07	; 7
    36bc:	48 e6       	ldi	r20, 0x68	; 104
    36be:	57 e0       	ldi	r21, 0x07	; 7
    36c0:	2c e6       	ldi	r18, 0x6C	; 108
    36c2:	37 e0       	ldi	r19, 0x07	; 7
    36c4:	0e 94 db 33 	call	0x67b6	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
        gyRaw = -gyRaw;
    36c8:	80 91 6a 07 	lds	r24, 0x076A
    36cc:	90 91 6b 07 	lds	r25, 0x076B
    36d0:	90 95       	com	r25
    36d2:	81 95       	neg	r24
    36d4:	9f 4f       	sbci	r25, 0xFF	; 255
    36d6:	90 93 6b 07 	sts	0x076B, r25
    36da:	80 93 6a 07 	sts	0x076A, r24
    36de:	52 c0       	rjmp	.+164    	; 0x3784 <_Z23update_motion_gyroscopev+0x1a2>
    }
    else if (opt_gyro_rot90 == 3) { // 90 around x, y axes:    x = -z, y = -x, z = +y
    36e0:	83 30       	cpi	r24, 0x03	; 3
    36e2:	b1 f4       	brne	.+44     	; 0x3710 <_Z23update_motion_gyroscopev+0x12e>
        gyroscope.readGyroRaw(&gzRaw, &gxRaw, &gyRaw);
    36e4:	8f e3       	ldi	r24, 0x3F	; 63
    36e6:	97 e0       	ldi	r25, 0x07	; 7
    36e8:	6c e6       	ldi	r22, 0x6C	; 108
    36ea:	77 e0       	ldi	r23, 0x07	; 7
    36ec:	48 e6       	ldi	r20, 0x68	; 104
    36ee:	57 e0       	ldi	r21, 0x07	; 7
    36f0:	2a e6       	ldi	r18, 0x6A	; 106
    36f2:	37 e0       	ldi	r19, 0x07	; 7
    36f4:	0e 94 db 33 	call	0x67b6	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
        gxRaw = -gxRaw;
    36f8:	80 91 68 07 	lds	r24, 0x0768
    36fc:	90 91 69 07 	lds	r25, 0x0769
    3700:	90 95       	com	r25
    3702:	81 95       	neg	r24
    3704:	9f 4f       	sbci	r25, 0xFF	; 255
    3706:	90 93 69 07 	sts	0x0769, r25
    370a:	80 93 68 07 	sts	0x0768, r24
    370e:	2f c0       	rjmp	.+94     	; 0x376e <_Z23update_motion_gyroscopev+0x18c>
        gzRaw = -gzRaw;
    }
    else if (opt_gyro_rot90 == 5) { // 90 around x, z axes:    x = -y, y = -z, z = +x
    3710:	85 30       	cpi	r24, 0x05	; 5
    3712:	49 f4       	brne	.+18     	; 0x3726 <_Z23update_motion_gyroscopev+0x144>
        gyroscope.readGyroRaw(&gyRaw, &gzRaw, &gxRaw);
    3714:	8f e3       	ldi	r24, 0x3F	; 63
    3716:	97 e0       	ldi	r25, 0x07	; 7
    3718:	6a e6       	ldi	r22, 0x6A	; 106
    371a:	77 e0       	ldi	r23, 0x07	; 7
    371c:	4c e6       	ldi	r20, 0x6C	; 108
    371e:	57 e0       	ldi	r21, 0x07	; 7
    3720:	28 e6       	ldi	r18, 0x68	; 104
    3722:	37 e0       	ldi	r19, 0x07	; 7
    3724:	0a c0       	rjmp	.+20     	; 0x373a <_Z23update_motion_gyroscopev+0x158>
        gyRaw = -gyRaw;
        gzRaw = -gzRaw;
    }
    else if (opt_gyro_rot90 == 6) { // 90 around y, z axes:    x = -z, y = +x, z = -y
    3726:	86 30       	cpi	r24, 0x06	; 6
    3728:	b1 f4       	brne	.+44     	; 0x3756 <_Z23update_motion_gyroscopev+0x174>
        gyroscope.readGyroRaw(&gzRaw, &gxRaw, &gyRaw);
    372a:	8f e3       	ldi	r24, 0x3F	; 63
    372c:	97 e0       	ldi	r25, 0x07	; 7
    372e:	6c e6       	ldi	r22, 0x6C	; 108
    3730:	77 e0       	ldi	r23, 0x07	; 7
    3732:	48 e6       	ldi	r20, 0x68	; 104
    3734:	57 e0       	ldi	r21, 0x07	; 7
    3736:	2a e6       	ldi	r18, 0x6A	; 106
    3738:	37 e0       	ldi	r19, 0x07	; 7
    373a:	0e 94 db 33 	call	0x67b6	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
        gyRaw = -gyRaw;
    373e:	80 91 6a 07 	lds	r24, 0x076A
    3742:	90 91 6b 07 	lds	r25, 0x076B
    3746:	90 95       	com	r25
    3748:	81 95       	neg	r24
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	90 93 6b 07 	sts	0x076B, r25
    3750:	80 93 6a 07 	sts	0x076A, r24
    3754:	0c c0       	rjmp	.+24     	; 0x376e <_Z23update_motion_gyroscopev+0x18c>
        gzRaw = -gzRaw;
    }
    else if (opt_gyro_rot90 == 7) { // 90 around x, y, z axes: x = -z, y = +y, z = +x
    3756:	87 30       	cpi	r24, 0x07	; 7
    3758:	a9 f4       	brne	.+42     	; 0x3784 <_Z23update_motion_gyroscopev+0x1a2>
        gyroscope.readGyroRaw(&gzRaw, &gyRaw, &gxRaw);
    375a:	8f e3       	ldi	r24, 0x3F	; 63
    375c:	97 e0       	ldi	r25, 0x07	; 7
    375e:	6c e6       	ldi	r22, 0x6C	; 108
    3760:	77 e0       	ldi	r23, 0x07	; 7
    3762:	4a e6       	ldi	r20, 0x6A	; 106
    3764:	57 e0       	ldi	r21, 0x07	; 7
    3766:	28 e6       	ldi	r18, 0x68	; 104
    3768:	37 e0       	ldi	r19, 0x07	; 7
    376a:	0e 94 db 33 	call	0x67b6	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
        gzRaw = -gzRaw;
    376e:	80 91 6c 07 	lds	r24, 0x076C
    3772:	90 91 6d 07 	lds	r25, 0x076D
    3776:	90 95       	com	r25
    3778:	81 95       	neg	r24
    377a:	9f 4f       	sbci	r25, 0xFF	; 255
    377c:	90 93 6d 07 	sts	0x076D, r25
    3780:	80 93 6c 07 	sts	0x076C, r24
    }
    
    // calculate reading time difference
    gyroDiff = gyroMicros > 0 ? (micros() - gyroMicros) : 1; // eliminate error from large gaps of inactivity
    3784:	80 91 5f 07 	lds	r24, 0x075F
    3788:	90 91 60 07 	lds	r25, 0x0760
    378c:	a0 91 61 07 	lds	r26, 0x0761
    3790:	b0 91 62 07 	lds	r27, 0x0762
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	a1 05       	cpc	r26, r1
    3798:	b1 05       	cpc	r27, r1
    379a:	29 f4       	brne	.+10     	; 0x37a6 <_Z23update_motion_gyroscopev+0x1c4>
    379c:	21 e0       	ldi	r18, 0x01	; 1
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	10 c0       	rjmp	.+32     	; 0x37c6 <_Z23update_motion_gyroscopev+0x1e4>
    37a6:	0e 94 75 39 	call	0x72ea	; 0x72ea <micros>
    37aa:	9b 01       	movw	r18, r22
    37ac:	ac 01       	movw	r20, r24
    37ae:	80 91 5f 07 	lds	r24, 0x075F
    37b2:	90 91 60 07 	lds	r25, 0x0760
    37b6:	a0 91 61 07 	lds	r26, 0x0761
    37ba:	b0 91 62 07 	lds	r27, 0x0762
    37be:	28 1b       	sub	r18, r24
    37c0:	39 0b       	sbc	r19, r25
    37c2:	4a 0b       	sbc	r20, r26
    37c4:	5b 0b       	sbc	r21, r27
    37c6:	20 93 63 07 	sts	0x0763, r18
    37ca:	30 93 64 07 	sts	0x0764, r19
    37ce:	40 93 65 07 	sts	0x0765, r20
    37d2:	50 93 66 07 	sts	0x0766, r21
    gyroMicros = micros();
    37d6:	0e 94 75 39 	call	0x72ea	; 0x72ea <micros>
    37da:	60 93 5f 07 	sts	0x075F, r22
    37de:	70 93 60 07 	sts	0x0760, r23
    37e2:	80 93 61 07 	sts	0x0761, r24
    37e6:	90 93 62 07 	sts	0x0762, r25

    // offset
    gxRaw += opt_gyro_offset[0];
    37ea:	60 91 68 07 	lds	r22, 0x0768
    37ee:	70 91 69 07 	lds	r23, 0x0769
    37f2:	20 91 58 07 	lds	r18, 0x0758
    37f6:	30 91 59 07 	lds	r19, 0x0759
    37fa:	62 0f       	add	r22, r18
    37fc:	73 1f       	adc	r23, r19
    gyRaw += opt_gyro_offset[1];
    37fe:	e0 90 6a 07 	lds	r14, 0x076A
    3802:	f0 90 6b 07 	lds	r15, 0x076B
    3806:	20 91 5a 07 	lds	r18, 0x075A
    380a:	30 91 5b 07 	lds	r19, 0x075B
    380e:	e2 0e       	add	r14, r18
    3810:	f3 1e       	adc	r15, r19
    gzRaw += opt_gyro_offset[2];
    3812:	a0 90 6c 07 	lds	r10, 0x076C
    3816:	b0 90 6d 07 	lds	r11, 0x076D
    381a:	20 91 5c 07 	lds	r18, 0x075C
    381e:	30 91 5d 07 	lds	r19, 0x075D
    3822:	a2 0e       	add	r10, r18
    3824:	b3 1e       	adc	r11, r19
    
    // calibrate
    gxRaw = (float)gxRaw * opt_gyro_calibrate[0] / 15; //14.375;
    3826:	88 27       	eor	r24, r24
    3828:	77 fd       	sbrc	r23, 7
    382a:	80 95       	com	r24
    382c:	98 2f       	mov	r25, r24
    382e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3832:	20 91 bc 03 	lds	r18, 0x03BC
    3836:	30 91 bd 03 	lds	r19, 0x03BD
    383a:	40 91 be 03 	lds	r20, 0x03BE
    383e:	50 91 bf 03 	lds	r21, 0x03BF
    3842:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e7       	ldi	r20, 0x70	; 112
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3852:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    3856:	3b 01       	movw	r6, r22
    3858:	70 93 69 07 	sts	0x0769, r23
    385c:	60 93 68 07 	sts	0x0768, r22
    gyRaw = (float)gyRaw * opt_gyro_calibrate[1] / 15; //14.375;
    3860:	00 27       	eor	r16, r16
    3862:	f7 fc       	sbrc	r15, 7
    3864:	00 95       	com	r16
    3866:	10 2f       	mov	r17, r16
    3868:	c8 01       	movw	r24, r16
    386a:	b7 01       	movw	r22, r14
    386c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3870:	20 91 c0 03 	lds	r18, 0x03C0
    3874:	30 91 c1 03 	lds	r19, 0x03C1
    3878:	40 91 c2 03 	lds	r20, 0x03C2
    387c:	50 91 c3 03 	lds	r21, 0x03C3
    3880:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e7       	ldi	r20, 0x70	; 112
    388a:	51 e4       	ldi	r21, 0x41	; 65
    388c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    3890:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    3894:	1b 01       	movw	r2, r22
    3896:	70 93 6b 07 	sts	0x076B, r23
    389a:	60 93 6a 07 	sts	0x076A, r22
    gzRaw = (float)gzRaw * opt_gyro_calibrate[2] / 15; //14.375;
    389e:	cc 24       	eor	r12, r12
    38a0:	b7 fc       	sbrc	r11, 7
    38a2:	c0 94       	com	r12
    38a4:	dc 2c       	mov	r13, r12
    38a6:	c6 01       	movw	r24, r12
    38a8:	b5 01       	movw	r22, r10
    38aa:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    38ae:	20 91 c4 03 	lds	r18, 0x03C4
    38b2:	30 91 c5 03 	lds	r19, 0x03C5
    38b6:	40 91 c6 03 	lds	r20, 0x03C6
    38ba:	50 91 c7 03 	lds	r21, 0x03C7
    38be:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e7       	ldi	r20, 0x70	; 112
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    38ce:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    38d2:	6b 01       	movw	r12, r22
    38d4:	70 93 6d 07 	sts	0x076D, r23
    38d8:	60 93 6c 07 	sts	0x076C, r22
    
    // Kalman filtering
    gx = gx0 + (opt_gyro_kalman_constant * (gxRaw - gx0));
    38dc:	00 91 74 07 	lds	r16, 0x0774
    38e0:	10 91 75 07 	lds	r17, 0x0775
    38e4:	80 91 c8 03 	lds	r24, 0x03C8
    38e8:	90 91 c9 03 	lds	r25, 0x03C9
    38ec:	a0 91 ca 03 	lds	r26, 0x03CA
    38f0:	b0 91 cb 03 	lds	r27, 0x03CB
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	9a 83       	std	Y+2, r25	; 0x02
    38f8:	ab 83       	std	Y+3, r26	; 0x03
    38fa:	bc 83       	std	Y+4, r27	; 0x04
    38fc:	b8 01       	movw	r22, r16
    38fe:	88 27       	eor	r24, r24
    3900:	77 fd       	sbrc	r23, 7
    3902:	80 95       	com	r24
    3904:	98 2f       	mov	r25, r24
    3906:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    390a:	6f 83       	std	Y+7, r22	; 0x07
    390c:	78 87       	std	Y+8, r23	; 0x08
    390e:	89 87       	std	Y+9, r24	; 0x09
    3910:	9a 87       	std	Y+10, r25	; 0x0a
    3912:	60 1a       	sub	r6, r16
    3914:	71 0a       	sbc	r7, r17
    3916:	88 24       	eor	r8, r8
    3918:	77 fc       	sbrc	r7, 7
    391a:	80 94       	com	r8
    391c:	98 2c       	mov	r9, r8
    391e:	c4 01       	movw	r24, r8
    3920:	b3 01       	movw	r22, r6
    3922:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	69 81       	ldd	r22, Y+1	; 0x01
    392c:	7a 81       	ldd	r23, Y+2	; 0x02
    392e:	8b 81       	ldd	r24, Y+3	; 0x03
    3930:	9c 81       	ldd	r25, Y+4	; 0x04
    3932:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    3936:	9b 01       	movw	r18, r22
    3938:	ac 01       	movw	r20, r24
    393a:	6f 81       	ldd	r22, Y+7	; 0x07
    393c:	78 85       	ldd	r23, Y+8	; 0x08
    393e:	89 85       	ldd	r24, Y+9	; 0x09
    3940:	9a 85       	ldd	r25, Y+10	; 0x0a
    3942:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    3946:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    394a:	7e 83       	std	Y+6, r23	; 0x06
    394c:	6d 83       	std	Y+5, r22	; 0x05
    394e:	70 93 6f 07 	sts	0x076F, r23
    3952:	60 93 6e 07 	sts	0x076E, r22
    gy = gy0 + (opt_gyro_kalman_constant * (gyRaw - gy0));
    3956:	00 91 76 07 	lds	r16, 0x0776
    395a:	10 91 77 07 	lds	r17, 0x0777
    395e:	b8 01       	movw	r22, r16
    3960:	88 27       	eor	r24, r24
    3962:	77 fd       	sbrc	r23, 7
    3964:	80 95       	com	r24
    3966:	98 2f       	mov	r25, r24
    3968:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    396c:	4b 01       	movw	r8, r22
    396e:	5c 01       	movw	r10, r24
    3970:	20 1a       	sub	r2, r16
    3972:	31 0a       	sbc	r3, r17
    3974:	44 24       	eor	r4, r4
    3976:	37 fc       	sbrc	r3, 7
    3978:	40 94       	com	r4
    397a:	54 2c       	mov	r5, r4
    397c:	c2 01       	movw	r24, r4
    397e:	b1 01       	movw	r22, r2
    3980:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24
    3988:	69 81       	ldd	r22, Y+1	; 0x01
    398a:	7a 81       	ldd	r23, Y+2	; 0x02
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	9c 81       	ldd	r25, Y+4	; 0x04
    3990:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    3994:	9b 01       	movw	r18, r22
    3996:	ac 01       	movw	r20, r24
    3998:	c5 01       	movw	r24, r10
    399a:	b4 01       	movw	r22, r8
    399c:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    39a0:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    39a4:	2b 01       	movw	r4, r22
    39a6:	70 93 71 07 	sts	0x0771, r23
    39aa:	60 93 70 07 	sts	0x0770, r22
    gz = gz0 + (opt_gyro_kalman_constant * (gzRaw - gz0));
    39ae:	00 91 78 07 	lds	r16, 0x0778
    39b2:	10 91 79 07 	lds	r17, 0x0779
    39b6:	b8 01       	movw	r22, r16
    39b8:	88 27       	eor	r24, r24
    39ba:	77 fd       	sbrc	r23, 7
    39bc:	80 95       	com	r24
    39be:	98 2f       	mov	r25, r24
    39c0:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    39c4:	4b 01       	movw	r8, r22
    39c6:	5c 01       	movw	r10, r24
    39c8:	c0 1a       	sub	r12, r16
    39ca:	d1 0a       	sbc	r13, r17
    39cc:	ee 24       	eor	r14, r14
    39ce:	d7 fc       	sbrc	r13, 7
    39d0:	e0 94       	com	r14
    39d2:	fe 2c       	mov	r15, r14
    39d4:	c7 01       	movw	r24, r14
    39d6:	b6 01       	movw	r22, r12
    39d8:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    39dc:	9b 01       	movw	r18, r22
    39de:	ac 01       	movw	r20, r24
    39e0:	69 81       	ldd	r22, Y+1	; 0x01
    39e2:	7a 81       	ldd	r23, Y+2	; 0x02
    39e4:	8b 81       	ldd	r24, Y+3	; 0x03
    39e6:	9c 81       	ldd	r25, Y+4	; 0x04
    39e8:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    39ec:	9b 01       	movw	r18, r22
    39ee:	ac 01       	movw	r20, r24
    39f0:	c5 01       	movw	r24, r10
    39f2:	b4 01       	movw	r22, r8
    39f4:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    39f8:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    39fc:	7c 87       	std	Y+12, r23	; 0x0c
    39fe:	6b 87       	std	Y+11, r22	; 0x0b
    3a00:	70 93 73 07 	sts	0x0773, r23
    3a04:	60 93 72 07 	sts	0x0772, r22
    
    // averaging
    if (opt_gyro_smooth_average > 0) {
    3a08:	20 90 5e 07 	lds	r2, 0x075E
    3a0c:	22 20       	and	r2, r2
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <_Z23update_motion_gyroscopev+0x430>
    3a10:	9c c0       	rjmp	.+312    	; 0x3b4a <_Z23update_motion_gyroscopev+0x568>
        for (i = 1; i < opt_gyro_smooth_average; i++) {
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a0 e0       	ldi	r26, 0x00	; 0
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	80 93 42 06 	sts	0x0642, r24
    3a1e:	90 93 43 06 	sts	0x0643, r25
    3a22:	a0 93 44 06 	sts	0x0644, r26
    3a26:	b0 93 45 06 	sts	0x0645, r27
            gx += gxHist[(gyroTick + i) % opt_gyro_smooth_average];
    3a2a:	30 90 67 07 	lds	r3, 0x0767
    3a2e:	e3 2c       	mov	r14, r3
    3a30:	ff 24       	eor	r15, r15
    3a32:	00 e0       	ldi	r16, 0x00	; 0
    3a34:	10 e0       	ldi	r17, 0x00	; 0
    3a36:	08 94       	sec
    3a38:	e1 1c       	adc	r14, r1
    3a3a:	f1 1c       	adc	r15, r1
    3a3c:	01 1d       	adc	r16, r1
    3a3e:	11 1d       	adc	r17, r1
    3a40:	21 e0       	ldi	r18, 0x01	; 1
    3a42:	a2 2e       	mov	r10, r18
    3a44:	b1 2c       	mov	r11, r1
    3a46:	c1 2c       	mov	r12, r1
    3a48:	d1 2c       	mov	r13, r1
    gy = gy0 + (opt_gyro_kalman_constant * (gyRaw - gy0));
    gz = gz0 + (opt_gyro_kalman_constant * (gzRaw - gz0));
    
    // averaging
    if (opt_gyro_smooth_average > 0) {
        for (i = 1; i < opt_gyro_smooth_average; i++) {
    3a4a:	62 2c       	mov	r6, r2
    3a4c:	77 24       	eor	r7, r7
    3a4e:	88 24       	eor	r8, r8
    3a50:	99 24       	eor	r9, r9
    3a52:	33 c0       	rjmp	.+102    	; 0x3aba <_Z23update_motion_gyroscopev+0x4d8>
    3a54:	c8 01       	movw	r24, r16
    3a56:	b7 01       	movw	r22, r14
    3a58:	a4 01       	movw	r20, r8
    3a5a:	93 01       	movw	r18, r6
    3a5c:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
            gx += gxHist[(gyroTick + i) % opt_gyro_smooth_average];
    3a60:	fb 01       	movw	r30, r22
    3a62:	ee 0f       	add	r30, r30
    3a64:	ff 1f       	adc	r31, r31
    3a66:	ee 56       	subi	r30, 0x6E	; 110
    3a68:	f8 4f       	sbci	r31, 0xF8	; 248
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	ad 81       	ldd	r26, Y+5	; 0x05
    3a70:	be 81       	ldd	r27, Y+6	; 0x06
    3a72:	a8 0f       	add	r26, r24
    3a74:	b9 1f       	adc	r27, r25
    3a76:	be 83       	std	Y+6, r27	; 0x06
    3a78:	ad 83       	std	Y+5, r26	; 0x05
            gy += gyHist[(gyroTick + i) % opt_gyro_smooth_average];
    3a7a:	fb 01       	movw	r30, r22
    3a7c:	ee 0f       	add	r30, r30
    3a7e:	ff 1f       	adc	r31, r31
    3a80:	e6 54       	subi	r30, 0x46	; 70
    3a82:	f8 4f       	sbci	r31, 0xF8	; 248
    3a84:	80 81       	ld	r24, Z
    3a86:	91 81       	ldd	r25, Z+1	; 0x01
    3a88:	48 0e       	add	r4, r24
    3a8a:	59 1e       	adc	r5, r25
            gz += gzHist[(gyroTick + i) % opt_gyro_smooth_average];
    3a8c:	fb 01       	movw	r30, r22
    3a8e:	ee 0f       	add	r30, r30
    3a90:	ff 1f       	adc	r31, r31
    3a92:	ee 51       	subi	r30, 0x1E	; 30
    3a94:	f8 4f       	sbci	r31, 0xF8	; 248
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	eb 85       	ldd	r30, Y+11	; 0x0b
    3a9c:	fc 85       	ldd	r31, Y+12	; 0x0c
    3a9e:	e8 0f       	add	r30, r24
    3aa0:	f9 1f       	adc	r31, r25
    3aa2:	fc 87       	std	Y+12, r31	; 0x0c
    3aa4:	eb 87       	std	Y+11, r30	; 0x0b
    3aa6:	08 94       	sec
    3aa8:	a1 1c       	adc	r10, r1
    3aaa:	b1 1c       	adc	r11, r1
    3aac:	c1 1c       	adc	r12, r1
    3aae:	d1 1c       	adc	r13, r1
    3ab0:	08 94       	sec
    3ab2:	e1 1c       	adc	r14, r1
    3ab4:	f1 1c       	adc	r15, r1
    3ab6:	01 1d       	adc	r16, r1
    3ab8:	11 1d       	adc	r17, r1
    gy = gy0 + (opt_gyro_kalman_constant * (gyRaw - gy0));
    gz = gz0 + (opt_gyro_kalman_constant * (gzRaw - gz0));
    
    // averaging
    if (opt_gyro_smooth_average > 0) {
        for (i = 1; i < opt_gyro_smooth_average; i++) {
    3aba:	a6 14       	cp	r10, r6
    3abc:	b7 04       	cpc	r11, r7
    3abe:	c8 04       	cpc	r12, r8
    3ac0:	d9 04       	cpc	r13, r9
    3ac2:	40 f2       	brcs	.-112    	; 0x3a54 <_Z23update_motion_gyroscopev+0x472>
    3ac4:	a0 92 42 06 	sts	0x0642, r10
    3ac8:	b0 92 43 06 	sts	0x0643, r11
    3acc:	c0 92 44 06 	sts	0x0644, r12
    3ad0:	d0 92 45 06 	sts	0x0645, r13
            gx += gxHist[(gyroTick + i) % opt_gyro_smooth_average];
            gy += gyHist[(gyroTick + i) % opt_gyro_smooth_average];
            gz += gzHist[(gyroTick + i) % opt_gyro_smooth_average];
        }
        gx /= opt_gyro_smooth_average;
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	62 2d       	mov	r22, r2
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    3ae0:	06 2f       	mov	r16, r22
    3ae2:	f7 2e       	mov	r15, r23
    3ae4:	60 93 6e 07 	sts	0x076E, r22
    3ae8:	70 93 6f 07 	sts	0x076F, r23
        gy /= opt_gyro_smooth_average;
    3aec:	c2 01       	movw	r24, r4
    3aee:	62 2d       	mov	r22, r2
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    3af6:	46 2f       	mov	r20, r22
    3af8:	17 2f       	mov	r17, r23
    3afa:	60 93 70 07 	sts	0x0770, r22
    3afe:	70 93 71 07 	sts	0x0771, r23
        gz /= opt_gyro_smooth_average;
    3b02:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b04:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b06:	62 2d       	mov	r22, r2
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    3b0e:	9b 01       	movw	r18, r22
    3b10:	60 93 72 07 	sts	0x0772, r22
    3b14:	30 93 73 07 	sts	0x0773, r19
        gxHist[gyroTick % opt_gyro_smooth_average] = gx;
    3b18:	83 2d       	mov	r24, r3
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	62 2d       	mov	r22, r2
    3b1e:	70 e0       	ldi	r23, 0x00	; 0
    3b20:	0e 94 2b 43 	call	0x8656	; 0x8656 <__udivmodhi4>
    3b24:	fc 01       	movw	r30, r24
    3b26:	ee 0f       	add	r30, r30
    3b28:	ff 1f       	adc	r31, r31
    3b2a:	df 01       	movw	r26, r30
    3b2c:	ae 56       	subi	r26, 0x6E	; 110
    3b2e:	b8 4f       	sbci	r27, 0xF8	; 248
    3b30:	0c 93       	st	X, r16
    3b32:	11 96       	adiw	r26, 0x01	; 1
    3b34:	fc 92       	st	X, r15
        gyHist[gyroTick % opt_gyro_smooth_average] = gy;
    3b36:	df 01       	movw	r26, r30
    3b38:	a6 54       	subi	r26, 0x46	; 70
    3b3a:	b8 4f       	sbci	r27, 0xF8	; 248
    3b3c:	4c 93       	st	X, r20
    3b3e:	11 96       	adiw	r26, 0x01	; 1
    3b40:	1c 93       	st	X, r17
        gzHist[gyroTick % opt_gyro_smooth_average] = gz;
    3b42:	ee 51       	subi	r30, 0x1E	; 30
    3b44:	f8 4f       	sbci	r31, 0xF8	; 248
    3b46:	20 83       	st	Z, r18
    3b48:	31 83       	std	Z+1, r19	; 0x01
    }
    
    if (opt_enable_calibration) {
    3b4a:	80 91 53 06 	lds	r24, 0x0653
    3b4e:	88 23       	and	r24, r24
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <_Z23update_motion_gyroscopev+0x572>
    3b52:	b7 c0       	rjmp	.+366    	; 0x3cc2 <_Z23update_motion_gyroscopev+0x6e0>
        gxMin = min(gxMin, gx);
    3b54:	e0 91 6e 07 	lds	r30, 0x076E
    3b58:	f0 91 6f 07 	lds	r31, 0x076F
    3b5c:	20 91 0a 08 	lds	r18, 0x080A
    3b60:	30 91 0b 08 	lds	r19, 0x080B
    3b64:	cf 01       	movw	r24, r30
    3b66:	4e 2f       	mov	r20, r30
    3b68:	89 2f       	mov	r24, r25
    3b6a:	2e 17       	cp	r18, r30
    3b6c:	3f 07       	cpc	r19, r31
    3b6e:	1c f4       	brge	.+6      	; 0x3b76 <_Z23update_motion_gyroscopev+0x594>
    3b70:	c9 01       	movw	r24, r18
    3b72:	42 2f       	mov	r20, r18
    3b74:	89 2f       	mov	r24, r25
    3b76:	40 93 0a 08 	sts	0x080A, r20
    3b7a:	80 93 0b 08 	sts	0x080B, r24
        gyMin = min(gyMin, gy);
    3b7e:	60 91 70 07 	lds	r22, 0x0770
    3b82:	70 91 71 07 	lds	r23, 0x0771
    3b86:	20 91 0c 08 	lds	r18, 0x080C
    3b8a:	30 91 0d 08 	lds	r19, 0x080D
    3b8e:	cb 01       	movw	r24, r22
    3b90:	46 2f       	mov	r20, r22
    3b92:	89 2f       	mov	r24, r25
    3b94:	26 17       	cp	r18, r22
    3b96:	37 07       	cpc	r19, r23
    3b98:	1c f4       	brge	.+6      	; 0x3ba0 <_Z23update_motion_gyroscopev+0x5be>
    3b9a:	c9 01       	movw	r24, r18
    3b9c:	42 2f       	mov	r20, r18
    3b9e:	89 2f       	mov	r24, r25
    3ba0:	40 93 0c 08 	sts	0x080C, r20
    3ba4:	80 93 0d 08 	sts	0x080D, r24
        gzMin = min(gzMin, gz);
    3ba8:	40 91 72 07 	lds	r20, 0x0772
    3bac:	50 91 73 07 	lds	r21, 0x0773
    3bb0:	20 91 0e 08 	lds	r18, 0x080E
    3bb4:	30 91 0f 08 	lds	r19, 0x080F
    3bb8:	ca 01       	movw	r24, r20
    3bba:	a4 2f       	mov	r26, r20
    3bbc:	89 2f       	mov	r24, r25
    3bbe:	24 17       	cp	r18, r20
    3bc0:	35 07       	cpc	r19, r21
    3bc2:	1c f4       	brge	.+6      	; 0x3bca <_Z23update_motion_gyroscopev+0x5e8>
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	a2 2f       	mov	r26, r18
    3bc8:	89 2f       	mov	r24, r25
    3bca:	a0 93 0e 08 	sts	0x080E, r26
    3bce:	80 93 0f 08 	sts	0x080F, r24
        gxMax = max(gxMax, gx);
    3bd2:	80 91 10 08 	lds	r24, 0x0810
    3bd6:	90 91 11 08 	lds	r25, 0x0811
    3bda:	8e 17       	cp	r24, r30
    3bdc:	9f 07       	cpc	r25, r31
    3bde:	0c f4       	brge	.+2      	; 0x3be2 <_Z23update_motion_gyroscopev+0x600>
    3be0:	cf 01       	movw	r24, r30
    3be2:	90 93 11 08 	sts	0x0811, r25
    3be6:	80 93 10 08 	sts	0x0810, r24
        gyMax = max(gyMax, gy);
    3bea:	80 91 12 08 	lds	r24, 0x0812
    3bee:	90 91 13 08 	lds	r25, 0x0813
    3bf2:	86 17       	cp	r24, r22
    3bf4:	97 07       	cpc	r25, r23
    3bf6:	0c f4       	brge	.+2      	; 0x3bfa <_Z23update_motion_gyroscopev+0x618>
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	90 93 13 08 	sts	0x0813, r25
    3bfe:	80 93 12 08 	sts	0x0812, r24
        gzMax = max(gzMax, gz);
    3c02:	80 91 14 08 	lds	r24, 0x0814
    3c06:	90 91 15 08 	lds	r25, 0x0815
    3c0a:	84 17       	cp	r24, r20
    3c0c:	95 07       	cpc	r25, r21
    3c0e:	0c f4       	brge	.+2      	; 0x3c12 <_Z23update_motion_gyroscopev+0x630>
    3c10:	ca 01       	movw	r24, r20
    3c12:	90 93 15 08 	sts	0x0815, r25
    3c16:	80 93 14 08 	sts	0x0814, r24
        DEBUG_PRN_GYROSCOPE("calibrategyro ");
    3c1a:	88 e8       	ldi	r24, 0x88	; 136
    3c1c:	98 e0       	ldi	r25, 0x08	; 8
    3c1e:	66 ea       	ldi	r22, 0xA6	; 166
    3c20:	72 e0       	ldi	r23, 0x02	; 2
    3c22:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gxMin); DEBUG_PRN_GYROSCOPE(" ");
    3c26:	60 91 0a 08 	lds	r22, 0x080A
    3c2a:	70 91 0b 08 	lds	r23, 0x080B
    3c2e:	88 e8       	ldi	r24, 0x88	; 136
    3c30:	98 e0       	ldi	r25, 0x08	; 8
    3c32:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3c36:	88 e8       	ldi	r24, 0x88	; 136
    3c38:	98 e0       	ldi	r25, 0x08	; 8
    3c3a:	62 e1       	ldi	r22, 0x12	; 18
    3c3c:	71 e0       	ldi	r23, 0x01	; 1
    3c3e:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gyMin); DEBUG_PRN_GYROSCOPE(" ");
    3c42:	60 91 0c 08 	lds	r22, 0x080C
    3c46:	70 91 0d 08 	lds	r23, 0x080D
    3c4a:	88 e8       	ldi	r24, 0x88	; 136
    3c4c:	98 e0       	ldi	r25, 0x08	; 8
    3c4e:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3c52:	88 e8       	ldi	r24, 0x88	; 136
    3c54:	98 e0       	ldi	r25, 0x08	; 8
    3c56:	62 e1       	ldi	r22, 0x12	; 18
    3c58:	71 e0       	ldi	r23, 0x01	; 1
    3c5a:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gzMin); DEBUG_PRN_GYROSCOPE(" ");
    3c5e:	60 91 0e 08 	lds	r22, 0x080E
    3c62:	70 91 0f 08 	lds	r23, 0x080F
    3c66:	88 e8       	ldi	r24, 0x88	; 136
    3c68:	98 e0       	ldi	r25, 0x08	; 8
    3c6a:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3c6e:	88 e8       	ldi	r24, 0x88	; 136
    3c70:	98 e0       	ldi	r25, 0x08	; 8
    3c72:	62 e1       	ldi	r22, 0x12	; 18
    3c74:	71 e0       	ldi	r23, 0x01	; 1
    3c76:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gxMax); DEBUG_PRN_GYROSCOPE(" ");
    3c7a:	60 91 10 08 	lds	r22, 0x0810
    3c7e:	70 91 11 08 	lds	r23, 0x0811
    3c82:	88 e8       	ldi	r24, 0x88	; 136
    3c84:	98 e0       	ldi	r25, 0x08	; 8
    3c86:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3c8a:	88 e8       	ldi	r24, 0x88	; 136
    3c8c:	98 e0       	ldi	r25, 0x08	; 8
    3c8e:	62 e1       	ldi	r22, 0x12	; 18
    3c90:	71 e0       	ldi	r23, 0x01	; 1
    3c92:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gyMax); DEBUG_PRN_GYROSCOPE(" ");
    3c96:	60 91 12 08 	lds	r22, 0x0812
    3c9a:	70 91 13 08 	lds	r23, 0x0813
    3c9e:	88 e8       	ldi	r24, 0x88	; 136
    3ca0:	98 e0       	ldi	r25, 0x08	; 8
    3ca2:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3ca6:	88 e8       	ldi	r24, 0x88	; 136
    3ca8:	98 e0       	ldi	r25, 0x08	; 8
    3caa:	62 e1       	ldi	r22, 0x12	; 18
    3cac:	71 e0       	ldi	r23, 0x01	; 1
    3cae:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_GYROSCOPE(gzMax);
    3cb2:	60 91 14 08 	lds	r22, 0x0814
    3cb6:	70 91 15 08 	lds	r23, 0x0815
    3cba:	88 e8       	ldi	r24, 0x88	; 136
    3cbc:	98 e0       	ldi	r25, 0x08	; 8
    3cbe:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    }

    DEBUG_PRN_GYROSCOPE("gyro ");
    3cc2:	88 e8       	ldi	r24, 0x88	; 136
    3cc4:	98 e0       	ldi	r25, 0x08	; 8
    3cc6:	65 eb       	ldi	r22, 0xB5	; 181
    3cc8:	72 e0       	ldi	r23, 0x02	; 2
    3cca:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gxRaw); DEBUG_PRN_GYROSCOPE(" ");
    3cce:	60 91 68 07 	lds	r22, 0x0768
    3cd2:	70 91 69 07 	lds	r23, 0x0769
    3cd6:	88 e8       	ldi	r24, 0x88	; 136
    3cd8:	98 e0       	ldi	r25, 0x08	; 8
    3cda:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3cde:	88 e8       	ldi	r24, 0x88	; 136
    3ce0:	98 e0       	ldi	r25, 0x08	; 8
    3ce2:	62 e1       	ldi	r22, 0x12	; 18
    3ce4:	71 e0       	ldi	r23, 0x01	; 1
    3ce6:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gyRaw); DEBUG_PRN_GYROSCOPE(" ");
    3cea:	60 91 6a 07 	lds	r22, 0x076A
    3cee:	70 91 6b 07 	lds	r23, 0x076B
    3cf2:	88 e8       	ldi	r24, 0x88	; 136
    3cf4:	98 e0       	ldi	r25, 0x08	; 8
    3cf6:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3cfa:	88 e8       	ldi	r24, 0x88	; 136
    3cfc:	98 e0       	ldi	r25, 0x08	; 8
    3cfe:	62 e1       	ldi	r22, 0x12	; 18
    3d00:	71 e0       	ldi	r23, 0x01	; 1
    3d02:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gzRaw); DEBUG_PRN_GYROSCOPE(" ");
    3d06:	60 91 6c 07 	lds	r22, 0x076C
    3d0a:	70 91 6d 07 	lds	r23, 0x076D
    3d0e:	88 e8       	ldi	r24, 0x88	; 136
    3d10:	98 e0       	ldi	r25, 0x08	; 8
    3d12:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3d16:	88 e8       	ldi	r24, 0x88	; 136
    3d18:	98 e0       	ldi	r25, 0x08	; 8
    3d1a:	62 e1       	ldi	r22, 0x12	; 18
    3d1c:	71 e0       	ldi	r23, 0x01	; 1
    3d1e:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gx); DEBUG_PRN_GYROSCOPE(" ");
    3d22:	60 91 6e 07 	lds	r22, 0x076E
    3d26:	70 91 6f 07 	lds	r23, 0x076F
    3d2a:	88 e8       	ldi	r24, 0x88	; 136
    3d2c:	98 e0       	ldi	r25, 0x08	; 8
    3d2e:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3d32:	88 e8       	ldi	r24, 0x88	; 136
    3d34:	98 e0       	ldi	r25, 0x08	; 8
    3d36:	62 e1       	ldi	r22, 0x12	; 18
    3d38:	71 e0       	ldi	r23, 0x01	; 1
    3d3a:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gy); DEBUG_PRN_GYROSCOPE(" ");
    3d3e:	60 91 70 07 	lds	r22, 0x0770
    3d42:	70 91 71 07 	lds	r23, 0x0771
    3d46:	88 e8       	ldi	r24, 0x88	; 136
    3d48:	98 e0       	ldi	r25, 0x08	; 8
    3d4a:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    3d4e:	88 e8       	ldi	r24, 0x88	; 136
    3d50:	98 e0       	ldi	r25, 0x08	; 8
    3d52:	62 e1       	ldi	r22, 0x12	; 18
    3d54:	71 e0       	ldi	r23, 0x01	; 1
    3d56:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_GYROSCOPE(gz);
    3d5a:	60 91 72 07 	lds	r22, 0x0772
    3d5e:	70 91 73 07 	lds	r23, 0x0773
    3d62:	88 e8       	ldi	r24, 0x88	; 136
    3d64:	98 e0       	ldi	r25, 0x08	; 8
    3d66:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>

    gyroTick++;
    3d6a:	80 91 67 07 	lds	r24, 0x0767
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	80 93 67 07 	sts	0x0767, r24
}
    3d74:	2c 96       	adiw	r28, 0x0c	; 12
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	cf 91       	pop	r28
    3d82:	df 91       	pop	r29
    3d84:	1f 91       	pop	r17
    3d86:	0f 91       	pop	r16
    3d88:	ff 90       	pop	r15
    3d8a:	ef 90       	pop	r14
    3d8c:	df 90       	pop	r13
    3d8e:	cf 90       	pop	r12
    3d90:	bf 90       	pop	r11
    3d92:	af 90       	pop	r10
    3d94:	9f 90       	pop	r9
    3d96:	8f 90       	pop	r8
    3d98:	7f 90       	pop	r7
    3d9a:	6f 90       	pop	r6
    3d9c:	5f 90       	pop	r5
    3d9e:	4f 90       	pop	r4
    3da0:	3f 90       	pop	r3
    3da2:	2f 90       	pop	r2
    3da4:	08 95       	ret

00003da6 <_Z22setup_motion_gyroscopev>:
uint8_t gset = false;             // bool to tell whether initial (*Base) values have been set yet
uint8_t calGyro = 0;
uint8_t gyroCalibrated = false;

void setup_motion_gyroscope() {
    gyroscope.init(ITG3200_ADDR_AD0_LOW);
    3da6:	8f e3       	ldi	r24, 0x3F	; 63
    3da8:	97 e0       	ldi	r25, 0x07	; 7
    3daa:	68 e6       	ldi	r22, 0x68	; 104
    3dac:	0e 94 80 37 	call	0x6f00	; 0x6f00 <_ZN7ITG32004initEh>
    gx = gy = gz = 0;
    3db0:	10 92 73 07 	sts	0x0773, r1
    3db4:	10 92 72 07 	sts	0x0772, r1
    3db8:	10 92 71 07 	sts	0x0771, r1
    3dbc:	10 92 70 07 	sts	0x0770, r1
    3dc0:	10 92 6f 07 	sts	0x076F, r1
    3dc4:	10 92 6e 07 	sts	0x076E, r1
    gyroMicros = 0;
    3dc8:	10 92 5f 07 	sts	0x075F, r1
    3dcc:	10 92 60 07 	sts	0x0760, r1
    3dd0:	10 92 61 07 	sts	0x0761, r1
    3dd4:	10 92 62 07 	sts	0x0762, r1
    gyroTick = 0;
    3dd8:	10 92 67 07 	sts	0x0767, r1
    gyroCalibrated = false;
    3ddc:	10 92 18 08 	sts	0x0818, r1
    gxMin = gyMin = gzMin = 0;
    3de0:	10 92 0f 08 	sts	0x080F, r1
    3de4:	10 92 0e 08 	sts	0x080E, r1
    3de8:	10 92 0d 08 	sts	0x080D, r1
    3dec:	10 92 0c 08 	sts	0x080C, r1
    3df0:	10 92 0b 08 	sts	0x080B, r1
    3df4:	10 92 0a 08 	sts	0x080A, r1
    gxMax = gyMax = gzMax = 0;
    3df8:	10 92 15 08 	sts	0x0815, r1
    3dfc:	10 92 14 08 	sts	0x0814, r1
    3e00:	10 92 13 08 	sts	0x0813, r1
    3e04:	10 92 12 08 	sts	0x0812, r1
    3e08:	10 92 11 08 	sts	0x0811, r1
    3e0c:	10 92 10 08 	sts	0x0810, r1
}
    3e10:	08 95       	ret

00003e12 <_Z27update_motion_accelerometerv>:
    accelCalibrated = false;
    xMin = yMin = zMin = 0;
    xMax = yMax = zMax = 0;
}

void update_motion_accelerometer() {
    3e12:	2f 92       	push	r2
    3e14:	3f 92       	push	r3
    3e16:	4f 92       	push	r4
    3e18:	5f 92       	push	r5
    3e1a:	6f 92       	push	r6
    3e1c:	7f 92       	push	r7
    3e1e:	8f 92       	push	r8
    3e20:	9f 92       	push	r9
    3e22:	af 92       	push	r10
    3e24:	bf 92       	push	r11
    3e26:	cf 92       	push	r12
    3e28:	df 92       	push	r13
    3e2a:	ef 92       	push	r14
    3e2c:	ff 92       	push	r15
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	df 93       	push	r29
    3e34:	cf 93       	push	r28
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	60 97       	sbiw	r28, 0x10	; 16
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61
    x00 = x0;
    3e46:	80 91 7b 06 	lds	r24, 0x067B
    3e4a:	90 91 7c 06 	lds	r25, 0x067C
    3e4e:	90 93 82 06 	sts	0x0682, r25
    3e52:	80 93 81 06 	sts	0x0681, r24
    y00 = y0;
    3e56:	80 91 7d 06 	lds	r24, 0x067D
    3e5a:	90 91 7e 06 	lds	r25, 0x067E
    3e5e:	90 93 84 06 	sts	0x0684, r25
    3e62:	80 93 83 06 	sts	0x0683, r24
    z00 = z0;
    3e66:	80 91 7f 06 	lds	r24, 0x067F
    3e6a:	90 91 80 06 	lds	r25, 0x0680
    3e6e:	90 93 86 06 	sts	0x0686, r25
    3e72:	80 93 85 06 	sts	0x0685, r24
    x0 = x;
    3e76:	80 91 75 06 	lds	r24, 0x0675
    3e7a:	90 91 76 06 	lds	r25, 0x0676
    3e7e:	90 93 7c 06 	sts	0x067C, r25
    3e82:	80 93 7b 06 	sts	0x067B, r24
    y0 = y;
    3e86:	80 91 77 06 	lds	r24, 0x0677
    3e8a:	90 91 78 06 	lds	r25, 0x0678
    3e8e:	90 93 7e 06 	sts	0x067E, r25
    3e92:	80 93 7d 06 	sts	0x067D, r24
    z0 = z;
    3e96:	80 91 79 06 	lds	r24, 0x0679
    3e9a:	90 91 7a 06 	lds	r25, 0x067A
    3e9e:	90 93 80 06 	sts	0x0680, r25
    3ea2:	80 93 7f 06 	sts	0x067F, r24
    
    // read accelerometer with correct rotation settings
    if      (opt_accel_rot90 == 0) { // no rotation:            x = +x, y = +y, z = +z
    3ea6:	80 91 65 06 	lds	r24, 0x0665
    3eaa:	88 23       	and	r24, r24
    3eac:	59 f4       	brne	.+22     	; 0x3ec4 <_Z27update_motion_accelerometerv+0xb2>
        accelerometer.readAccel(&xRaw, &yRaw, &zRaw);
    3eae:	8f e5       	ldi	r24, 0x5F	; 95
    3eb0:	96 e0       	ldi	r25, 0x06	; 6
    3eb2:	6f e6       	ldi	r22, 0x6F	; 111
    3eb4:	76 e0       	ldi	r23, 0x06	; 6
    3eb6:	41 e7       	ldi	r20, 0x71	; 113
    3eb8:	56 e0       	ldi	r21, 0x06	; 6
    3eba:	23 e7       	ldi	r18, 0x73	; 115
    3ebc:	36 e0       	ldi	r19, 0x06	; 6
    3ebe:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN7ADXL3459readAccelEPiS0_S0_>
    3ec2:	78 c0       	rjmp	.+240    	; 0x3fb4 <_Z27update_motion_accelerometerv+0x1a2>
    }
    else if (opt_accel_rot90 == 1) { // 90 around x axis:       x = +x, y = -z, z = +y
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	49 f4       	brne	.+18     	; 0x3eda <_Z27update_motion_accelerometerv+0xc8>
        accelerometer.readAccel(&xRaw, &zRaw, &yRaw);
    3ec8:	8f e5       	ldi	r24, 0x5F	; 95
    3eca:	96 e0       	ldi	r25, 0x06	; 6
    3ecc:	6f e6       	ldi	r22, 0x6F	; 111
    3ece:	76 e0       	ldi	r23, 0x06	; 6
    3ed0:	43 e7       	ldi	r20, 0x73	; 115
    3ed2:	56 e0       	ldi	r21, 0x06	; 6
    3ed4:	21 e7       	ldi	r18, 0x71	; 113
    3ed6:	36 e0       	ldi	r19, 0x06	; 6
    3ed8:	60 c0       	rjmp	.+192    	; 0x3f9a <_Z27update_motion_accelerometerv+0x188>
        zRaw = -zRaw;
    }
    else if (opt_accel_rot90 == 2) { // 90 around y axis:       x = -z, y = +y, z = +x
    3eda:	82 30       	cpi	r24, 0x02	; 2
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <_Z27update_motion_accelerometerv+0xce>
    3ede:	55 c0       	rjmp	.+170    	; 0x3f8a <_Z27update_motion_accelerometerv+0x178>
        accelerometer.readAccel(&zRaw, &yRaw, &xRaw);
        zRaw = -zRaw;
    }
    else if (opt_accel_rot90 == 4) { // 90 around z axis;       x = -y, y = +x, z = +z
    3ee0:	84 30       	cpi	r24, 0x04	; 4
    3ee2:	b1 f4       	brne	.+44     	; 0x3f10 <_Z27update_motion_accelerometerv+0xfe>
        accelerometer.readAccel(&yRaw, &xRaw, &zRaw);
    3ee4:	8f e5       	ldi	r24, 0x5F	; 95
    3ee6:	96 e0       	ldi	r25, 0x06	; 6
    3ee8:	61 e7       	ldi	r22, 0x71	; 113
    3eea:	76 e0       	ldi	r23, 0x06	; 6
    3eec:	4f e6       	ldi	r20, 0x6F	; 111
    3eee:	56 e0       	ldi	r21, 0x06	; 6
    3ef0:	23 e7       	ldi	r18, 0x73	; 115
    3ef2:	36 e0       	ldi	r19, 0x06	; 6
    3ef4:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN7ADXL3459readAccelEPiS0_S0_>
        yRaw = -yRaw;
    3ef8:	80 91 71 06 	lds	r24, 0x0671
    3efc:	90 91 72 06 	lds	r25, 0x0672
    3f00:	90 95       	com	r25
    3f02:	81 95       	neg	r24
    3f04:	9f 4f       	sbci	r25, 0xFF	; 255
    3f06:	90 93 72 06 	sts	0x0672, r25
    3f0a:	80 93 71 06 	sts	0x0671, r24
    3f0e:	52 c0       	rjmp	.+164    	; 0x3fb4 <_Z27update_motion_accelerometerv+0x1a2>
    }
    else if (opt_accel_rot90 == 3) { // 90 around x, y axes:    x = -z, y = -x, z = +y
    3f10:	83 30       	cpi	r24, 0x03	; 3
    3f12:	b1 f4       	brne	.+44     	; 0x3f40 <_Z27update_motion_accelerometerv+0x12e>
        accelerometer.readAccel(&zRaw, &xRaw, &yRaw);
    3f14:	8f e5       	ldi	r24, 0x5F	; 95
    3f16:	96 e0       	ldi	r25, 0x06	; 6
    3f18:	63 e7       	ldi	r22, 0x73	; 115
    3f1a:	76 e0       	ldi	r23, 0x06	; 6
    3f1c:	4f e6       	ldi	r20, 0x6F	; 111
    3f1e:	56 e0       	ldi	r21, 0x06	; 6
    3f20:	21 e7       	ldi	r18, 0x71	; 113
    3f22:	36 e0       	ldi	r19, 0x06	; 6
    3f24:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN7ADXL3459readAccelEPiS0_S0_>
        xRaw = -xRaw;
    3f28:	80 91 6f 06 	lds	r24, 0x066F
    3f2c:	90 91 70 06 	lds	r25, 0x0670
    3f30:	90 95       	com	r25
    3f32:	81 95       	neg	r24
    3f34:	9f 4f       	sbci	r25, 0xFF	; 255
    3f36:	90 93 70 06 	sts	0x0670, r25
    3f3a:	80 93 6f 06 	sts	0x066F, r24
    3f3e:	2f c0       	rjmp	.+94     	; 0x3f9e <_Z27update_motion_accelerometerv+0x18c>
        zRaw = -zRaw;
    }
    else if (opt_accel_rot90 == 5) { // 90 around x, z axes:    x = -y, y = -z, z = +x
    3f40:	85 30       	cpi	r24, 0x05	; 5
    3f42:	49 f4       	brne	.+18     	; 0x3f56 <_Z27update_motion_accelerometerv+0x144>
        accelerometer.readAccel(&yRaw, &zRaw, &xRaw);
    3f44:	8f e5       	ldi	r24, 0x5F	; 95
    3f46:	96 e0       	ldi	r25, 0x06	; 6
    3f48:	61 e7       	ldi	r22, 0x71	; 113
    3f4a:	76 e0       	ldi	r23, 0x06	; 6
    3f4c:	43 e7       	ldi	r20, 0x73	; 115
    3f4e:	56 e0       	ldi	r21, 0x06	; 6
    3f50:	2f e6       	ldi	r18, 0x6F	; 111
    3f52:	36 e0       	ldi	r19, 0x06	; 6
    3f54:	0a c0       	rjmp	.+20     	; 0x3f6a <_Z27update_motion_accelerometerv+0x158>
        yRaw = -yRaw;
        zRaw = -zRaw;
    }
    else if (opt_accel_rot90 == 6) { // 90 around y, z axes:    x = -z, y = +x, z = -y
    3f56:	86 30       	cpi	r24, 0x06	; 6
    3f58:	b1 f4       	brne	.+44     	; 0x3f86 <_Z27update_motion_accelerometerv+0x174>
        accelerometer.readAccel(&zRaw, &xRaw, &yRaw);
    3f5a:	8f e5       	ldi	r24, 0x5F	; 95
    3f5c:	96 e0       	ldi	r25, 0x06	; 6
    3f5e:	63 e7       	ldi	r22, 0x73	; 115
    3f60:	76 e0       	ldi	r23, 0x06	; 6
    3f62:	4f e6       	ldi	r20, 0x6F	; 111
    3f64:	56 e0       	ldi	r21, 0x06	; 6
    3f66:	21 e7       	ldi	r18, 0x71	; 113
    3f68:	36 e0       	ldi	r19, 0x06	; 6
    3f6a:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN7ADXL3459readAccelEPiS0_S0_>
        yRaw = -yRaw;
    3f6e:	80 91 71 06 	lds	r24, 0x0671
    3f72:	90 91 72 06 	lds	r25, 0x0672
    3f76:	90 95       	com	r25
    3f78:	81 95       	neg	r24
    3f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7c:	90 93 72 06 	sts	0x0672, r25
    3f80:	80 93 71 06 	sts	0x0671, r24
    3f84:	0c c0       	rjmp	.+24     	; 0x3f9e <_Z27update_motion_accelerometerv+0x18c>
        zRaw = -zRaw;
    }
    else if (opt_accel_rot90 == 7) { // 90 around x, y, z axes: x = -z, y = +y, z = +x
    3f86:	87 30       	cpi	r24, 0x07	; 7
    3f88:	a9 f4       	brne	.+42     	; 0x3fb4 <_Z27update_motion_accelerometerv+0x1a2>
        accelerometer.readAccel(&zRaw, &yRaw, &xRaw);
    3f8a:	8f e5       	ldi	r24, 0x5F	; 95
    3f8c:	96 e0       	ldi	r25, 0x06	; 6
    3f8e:	63 e7       	ldi	r22, 0x73	; 115
    3f90:	76 e0       	ldi	r23, 0x06	; 6
    3f92:	41 e7       	ldi	r20, 0x71	; 113
    3f94:	56 e0       	ldi	r21, 0x06	; 6
    3f96:	2f e6       	ldi	r18, 0x6F	; 111
    3f98:	36 e0       	ldi	r19, 0x06	; 6
    3f9a:	0e 94 78 31 	call	0x62f0	; 0x62f0 <_ZN7ADXL3459readAccelEPiS0_S0_>
        zRaw = -zRaw;
    3f9e:	80 91 73 06 	lds	r24, 0x0673
    3fa2:	90 91 74 06 	lds	r25, 0x0674
    3fa6:	90 95       	com	r25
    3fa8:	81 95       	neg	r24
    3faa:	9f 4f       	sbci	r25, 0xFF	; 255
    3fac:	90 93 74 06 	sts	0x0674, r25
    3fb0:	80 93 73 06 	sts	0x0673, r24
    }
    
    // calculate reading time difference
    accelDiff = accelMicros > 0 ? (micros() - accelMicros) : 1; // eliminate error from large gaps of inactivity
    3fb4:	80 91 66 06 	lds	r24, 0x0666
    3fb8:	90 91 67 06 	lds	r25, 0x0667
    3fbc:	a0 91 68 06 	lds	r26, 0x0668
    3fc0:	b0 91 69 06 	lds	r27, 0x0669
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	a1 05       	cpc	r26, r1
    3fc8:	b1 05       	cpc	r27, r1
    3fca:	29 f4       	brne	.+10     	; 0x3fd6 <_Z27update_motion_accelerometerv+0x1c4>
    3fcc:	21 e0       	ldi	r18, 0x01	; 1
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	50 e0       	ldi	r21, 0x00	; 0
    3fd4:	10 c0       	rjmp	.+32     	; 0x3ff6 <_Z27update_motion_accelerometerv+0x1e4>
    3fd6:	0e 94 75 39 	call	0x72ea	; 0x72ea <micros>
    3fda:	9b 01       	movw	r18, r22
    3fdc:	ac 01       	movw	r20, r24
    3fde:	80 91 66 06 	lds	r24, 0x0666
    3fe2:	90 91 67 06 	lds	r25, 0x0667
    3fe6:	a0 91 68 06 	lds	r26, 0x0668
    3fea:	b0 91 69 06 	lds	r27, 0x0669
    3fee:	28 1b       	sub	r18, r24
    3ff0:	39 0b       	sbc	r19, r25
    3ff2:	4a 0b       	sbc	r20, r26
    3ff4:	5b 0b       	sbc	r21, r27
    3ff6:	20 93 6a 06 	sts	0x066A, r18
    3ffa:	30 93 6b 06 	sts	0x066B, r19
    3ffe:	40 93 6c 06 	sts	0x066C, r20
    4002:	50 93 6d 06 	sts	0x066D, r21
    accelMicros = micros();
    4006:	0e 94 75 39 	call	0x72ea	; 0x72ea <micros>
    400a:	60 93 66 06 	sts	0x0666, r22
    400e:	70 93 67 06 	sts	0x0667, r23
    4012:	80 93 68 06 	sts	0x0668, r24
    4016:	90 93 69 06 	sts	0x0669, r25
    
    // offset
    xRaw += opt_accel_offset[0];
    401a:	60 91 6f 06 	lds	r22, 0x066F
    401e:	70 91 70 06 	lds	r23, 0x0670
    4022:	20 91 a5 03 	lds	r18, 0x03A5
    4026:	30 91 a6 03 	lds	r19, 0x03A6
    402a:	62 0f       	add	r22, r18
    402c:	73 1f       	adc	r23, r19
    yRaw += opt_accel_offset[1];
    402e:	e0 90 71 06 	lds	r14, 0x0671
    4032:	f0 90 72 06 	lds	r15, 0x0672
    4036:	20 91 a7 03 	lds	r18, 0x03A7
    403a:	30 91 a8 03 	lds	r19, 0x03A8
    403e:	e2 0e       	add	r14, r18
    4040:	f3 1e       	adc	r15, r19
    zRaw += opt_accel_offset[2];
    4042:	a0 90 73 06 	lds	r10, 0x0673
    4046:	b0 90 74 06 	lds	r11, 0x0674
    404a:	20 91 a9 03 	lds	r18, 0x03A9
    404e:	30 91 aa 03 	lds	r19, 0x03AA
    4052:	a2 0e       	add	r10, r18
    4054:	b3 1e       	adc	r11, r19
    
    // calibrate
    xRaw = (float)xRaw * opt_accel_calibrate[0];
    4056:	88 27       	eor	r24, r24
    4058:	77 fd       	sbrc	r23, 7
    405a:	80 95       	com	r24
    405c:	98 2f       	mov	r25, r24
    405e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4062:	20 91 ab 03 	lds	r18, 0x03AB
    4066:	30 91 ac 03 	lds	r19, 0x03AC
    406a:	40 91 ad 03 	lds	r20, 0x03AD
    406e:	50 91 ae 03 	lds	r21, 0x03AE
    4072:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4076:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    407a:	3b 01       	movw	r6, r22
    407c:	4c 01       	movw	r8, r24
    407e:	70 93 70 06 	sts	0x0670, r23
    4082:	60 93 6f 06 	sts	0x066F, r22
    yRaw = (float)yRaw * opt_accel_calibrate[1];
    4086:	00 27       	eor	r16, r16
    4088:	f7 fc       	sbrc	r15, 7
    408a:	00 95       	com	r16
    408c:	10 2f       	mov	r17, r16
    408e:	c8 01       	movw	r24, r16
    4090:	b7 01       	movw	r22, r14
    4092:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4096:	20 91 af 03 	lds	r18, 0x03AF
    409a:	30 91 b0 03 	lds	r19, 0x03B0
    409e:	40 91 b1 03 	lds	r20, 0x03B1
    40a2:	50 91 b2 03 	lds	r21, 0x03B2
    40a6:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    40aa:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    40ae:	1b 01       	movw	r2, r22
    40b0:	2c 01       	movw	r4, r24
    40b2:	70 93 72 06 	sts	0x0672, r23
    40b6:	60 93 71 06 	sts	0x0671, r22
    zRaw = (float)zRaw * opt_accel_calibrate[2];
    40ba:	cc 24       	eor	r12, r12
    40bc:	b7 fc       	sbrc	r11, 7
    40be:	c0 94       	com	r12
    40c0:	dc 2c       	mov	r13, r12
    40c2:	c6 01       	movw	r24, r12
    40c4:	b5 01       	movw	r22, r10
    40c6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    40ca:	20 91 b3 03 	lds	r18, 0x03B3
    40ce:	30 91 b4 03 	lds	r19, 0x03B4
    40d2:	40 91 b5 03 	lds	r20, 0x03B5
    40d6:	50 91 b6 03 	lds	r21, 0x03B6
    40da:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    40de:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    40e2:	6b 83       	std	Y+3, r22	; 0x03
    40e4:	7c 83       	std	Y+4, r23	; 0x04
    40e6:	8d 83       	std	Y+5, r24	; 0x05
    40e8:	9e 83       	std	Y+6, r25	; 0x06
    40ea:	2b 81       	ldd	r18, Y+3	; 0x03
    40ec:	3c 81       	ldd	r19, Y+4	; 0x04
    40ee:	30 93 74 06 	sts	0x0674, r19
    40f2:	20 93 73 06 	sts	0x0673, r18
    
    // Kalman filtering
    x = x0 + (opt_accel_kalman_constant * (xRaw - x0));
    40f6:	00 91 7b 06 	lds	r16, 0x067B
    40fa:	10 91 7c 06 	lds	r17, 0x067C
    40fe:	b8 01       	movw	r22, r16
    4100:	88 27       	eor	r24, r24
    4102:	77 fd       	sbrc	r23, 7
    4104:	80 95       	com	r24
    4106:	98 2f       	mov	r25, r24
    4108:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    410c:	6b 01       	movw	r12, r22
    410e:	7c 01       	movw	r14, r24
    4110:	60 1a       	sub	r6, r16
    4112:	71 0a       	sbc	r7, r17
    4114:	b3 01       	movw	r22, r6
    4116:	88 27       	eor	r24, r24
    4118:	77 fd       	sbrc	r23, 7
    411a:	80 95       	com	r24
    411c:	98 2f       	mov	r25, r24
    411e:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4122:	20 91 b7 03 	lds	r18, 0x03B7
    4126:	30 91 b8 03 	lds	r19, 0x03B8
    412a:	40 91 b9 03 	lds	r20, 0x03B9
    412e:	50 91 ba 03 	lds	r21, 0x03BA
    4132:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4136:	9b 01       	movw	r18, r22
    4138:	ac 01       	movw	r20, r24
    413a:	c7 01       	movw	r24, r14
    413c:	b6 01       	movw	r22, r12
    413e:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    4142:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    4146:	70 93 76 06 	sts	0x0676, r23
    414a:	60 93 75 06 	sts	0x0675, r22
    y = y0 + (opt_accel_kalman_constant * (yRaw - y0));
    414e:	00 91 7d 06 	lds	r16, 0x067D
    4152:	10 91 7e 06 	lds	r17, 0x067E
    4156:	80 90 b7 03 	lds	r8, 0x03B7
    415a:	90 90 b8 03 	lds	r9, 0x03B8
    415e:	a0 90 b9 03 	lds	r10, 0x03B9
    4162:	b0 90 ba 03 	lds	r11, 0x03BA
    4166:	b8 01       	movw	r22, r16
    4168:	88 27       	eor	r24, r24
    416a:	77 fd       	sbrc	r23, 7
    416c:	80 95       	com	r24
    416e:	98 2f       	mov	r25, r24
    4170:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4174:	6b 01       	movw	r12, r22
    4176:	7c 01       	movw	r14, r24
    4178:	20 1a       	sub	r2, r16
    417a:	31 0a       	sbc	r3, r17
    417c:	b1 01       	movw	r22, r2
    417e:	88 27       	eor	r24, r24
    4180:	77 fd       	sbrc	r23, 7
    4182:	80 95       	com	r24
    4184:	98 2f       	mov	r25, r24
    4186:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    418a:	9b 01       	movw	r18, r22
    418c:	ac 01       	movw	r20, r24
    418e:	c5 01       	movw	r24, r10
    4190:	b4 01       	movw	r22, r8
    4192:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4196:	9b 01       	movw	r18, r22
    4198:	ac 01       	movw	r20, r24
    419a:	c7 01       	movw	r24, r14
    419c:	b6 01       	movw	r22, r12
    419e:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    41a2:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    41a6:	7a 83       	std	Y+2, r23	; 0x02
    41a8:	69 83       	std	Y+1, r22	; 0x01
    41aa:	70 93 78 06 	sts	0x0678, r23
    41ae:	60 93 77 06 	sts	0x0677, r22
    z = z0 + (opt_accel_kalman_constant * (zRaw - z0));
    41b2:	00 91 7f 06 	lds	r16, 0x067F
    41b6:	10 91 80 06 	lds	r17, 0x0680
    41ba:	b8 01       	movw	r22, r16
    41bc:	88 27       	eor	r24, r24
    41be:	77 fd       	sbrc	r23, 7
    41c0:	80 95       	com	r24
    41c2:	98 2f       	mov	r25, r24
    41c4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    41c8:	6b 01       	movw	r12, r22
    41ca:	7c 01       	movw	r14, r24
    41cc:	2b 81       	ldd	r18, Y+3	; 0x03
    41ce:	3c 81       	ldd	r19, Y+4	; 0x04
    41d0:	20 1b       	sub	r18, r16
    41d2:	31 0b       	sbc	r19, r17
    41d4:	b9 01       	movw	r22, r18
    41d6:	88 27       	eor	r24, r24
    41d8:	77 fd       	sbrc	r23, 7
    41da:	80 95       	com	r24
    41dc:	98 2f       	mov	r25, r24
    41de:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    41e2:	9b 01       	movw	r18, r22
    41e4:	ac 01       	movw	r20, r24
    41e6:	c5 01       	movw	r24, r10
    41e8:	b4 01       	movw	r22, r8
    41ea:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    41ee:	9b 01       	movw	r18, r22
    41f0:	ac 01       	movw	r20, r24
    41f2:	c7 01       	movw	r24, r14
    41f4:	b6 01       	movw	r22, r12
    41f6:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    41fa:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    41fe:	2b 01       	movw	r4, r22
    4200:	70 93 7a 06 	sts	0x067A, r23
    4204:	60 93 79 06 	sts	0x0679, r22

    // averaging
    if (opt_accel_smooth_average > 0) {
    4208:	20 90 bb 03 	lds	r2, 0x03BB
    420c:	22 20       	and	r2, r2
    420e:	09 f4       	brne	.+2      	; 0x4212 <_Z27update_motion_accelerometerv+0x400>
    4210:	b3 c0       	rjmp	.+358    	; 0x4378 <_Z27update_motion_accelerometerv+0x566>
        for (i = 1; i < opt_accel_smooth_average; i++) {
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	a0 e0       	ldi	r26, 0x00	; 0
    4218:	b0 e0       	ldi	r27, 0x00	; 0
    421a:	80 93 42 06 	sts	0x0642, r24
    421e:	90 93 43 06 	sts	0x0643, r25
    4222:	a0 93 44 06 	sts	0x0644, r26
    4226:	b0 93 45 06 	sts	0x0645, r27
    422a:	11 e0       	ldi	r17, 0x01	; 1
    422c:	a1 2e       	mov	r10, r17
    422e:	b1 2c       	mov	r11, r1
    4230:	c1 2c       	mov	r12, r1
    4232:	d1 2c       	mov	r13, r1
    4234:	62 2c       	mov	r6, r2
    4236:	77 24       	eor	r7, r7
    4238:	88 24       	eor	r8, r8
    423a:	99 24       	eor	r9, r9
    423c:	40 c0       	rjmp	.+128    	; 0x42be <_Z27update_motion_accelerometerv+0x4ac>
            x += xHist[(accelTick + i) % opt_accel_smooth_average];
    423e:	d6 01       	movw	r26, r12
    4240:	c5 01       	movw	r24, r10
    4242:	8e 0d       	add	r24, r14
    4244:	91 1d       	adc	r25, r1
    4246:	a1 1d       	adc	r26, r1
    4248:	b1 1d       	adc	r27, r1
    424a:	7c 01       	movw	r14, r24
    424c:	8d 01       	movw	r16, r26
    424e:	bc 01       	movw	r22, r24
    4250:	cd 01       	movw	r24, r26
    4252:	a4 01       	movw	r20, r8
    4254:	93 01       	movw	r18, r6
    4256:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	88 0f       	add	r24, r24
    4260:	99 1f       	adc	r25, r25
    4262:	81 56       	subi	r24, 0x61	; 97
    4264:	99 4f       	sbci	r25, 0xF9	; 249
    4266:	dc 01       	movw	r26, r24
    4268:	8d 91       	ld	r24, X+
    426a:	9c 91       	ld	r25, X
    426c:	ef 85       	ldd	r30, Y+15	; 0x0f
    426e:	f8 89       	ldd	r31, Y+16	; 0x10
    4270:	e8 0f       	add	r30, r24
    4272:	f9 1f       	adc	r31, r25
    4274:	f0 93 76 06 	sts	0x0676, r31
    4278:	e0 93 75 06 	sts	0x0675, r30
            y += yHist[(accelTick + i) % opt_accel_smooth_average];
    427c:	c8 01       	movw	r24, r16
    427e:	b7 01       	movw	r22, r14
    4280:	a4 01       	movw	r20, r8
    4282:	93 01       	movw	r18, r6
    4284:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4288:	fb 01       	movw	r30, r22
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	e9 53       	subi	r30, 0x39	; 57
    4290:	f9 4f       	sbci	r31, 0xF9	; 249
    4292:	80 81       	ld	r24, Z
    4294:	91 81       	ldd	r25, Z+1	; 0x01
    4296:	29 81       	ldd	r18, Y+1	; 0x01
    4298:	3a 81       	ldd	r19, Y+2	; 0x02
    429a:	28 0f       	add	r18, r24
    429c:	39 1f       	adc	r19, r25
    429e:	3a 83       	std	Y+2, r19	; 0x02
    42a0:	29 83       	std	Y+1, r18	; 0x01
            z += zHist[(accelTick + i) % opt_accel_smooth_average];
    42a2:	fb 01       	movw	r30, r22
    42a4:	ee 0f       	add	r30, r30
    42a6:	ff 1f       	adc	r31, r31
    42a8:	e1 51       	subi	r30, 0x11	; 17
    42aa:	f9 4f       	sbci	r31, 0xF9	; 249
    42ac:	80 81       	ld	r24, Z
    42ae:	91 81       	ldd	r25, Z+1	; 0x01
    42b0:	48 0e       	add	r4, r24
    42b2:	59 1e       	adc	r5, r25
    42b4:	08 94       	sec
    42b6:	a1 1c       	adc	r10, r1
    42b8:	b1 1c       	adc	r11, r1
    42ba:	c1 1c       	adc	r12, r1
    42bc:	d1 1c       	adc	r13, r1
    42be:	80 91 75 06 	lds	r24, 0x0675
    42c2:	90 91 76 06 	lds	r25, 0x0676
    42c6:	98 8b       	std	Y+16, r25	; 0x10
    42c8:	8f 87       	std	Y+15, r24	; 0x0f
    42ca:	e0 90 6e 06 	lds	r14, 0x066E
    y = y0 + (opt_accel_kalman_constant * (yRaw - y0));
    z = z0 + (opt_accel_kalman_constant * (zRaw - z0));

    // averaging
    if (opt_accel_smooth_average > 0) {
        for (i = 1; i < opt_accel_smooth_average; i++) {
    42ce:	a6 14       	cp	r10, r6
    42d0:	b7 04       	cpc	r11, r7
    42d2:	c8 04       	cpc	r12, r8
    42d4:	d9 04       	cpc	r13, r9
    42d6:	08 f4       	brcc	.+2      	; 0x42da <_Z27update_motion_accelerometerv+0x4c8>
    42d8:	b2 cf       	rjmp	.-156    	; 0x423e <_Z27update_motion_accelerometerv+0x42c>
    42da:	a0 92 42 06 	sts	0x0642, r10
    42de:	b0 92 43 06 	sts	0x0643, r11
    42e2:	c0 92 44 06 	sts	0x0644, r12
    42e6:	d0 92 45 06 	sts	0x0645, r13
            x += xHist[(accelTick + i) % opt_accel_smooth_average];
            y += yHist[(accelTick + i) % opt_accel_smooth_average];
            z += zHist[(accelTick + i) % opt_accel_smooth_average];
        }
        x /= opt_accel_smooth_average;
    42ea:	62 2d       	mov	r22, r2
    42ec:	70 e0       	ldi	r23, 0x00	; 0
    42ee:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    42f2:	9b 01       	movw	r18, r22
    42f4:	60 93 75 06 	sts	0x0675, r22
    42f8:	30 93 76 06 	sts	0x0676, r19
        y /= opt_accel_smooth_average;
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4300:	62 2d       	mov	r22, r2
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    4308:	46 2f       	mov	r20, r22
    430a:	17 2f       	mov	r17, r23
    430c:	60 93 77 06 	sts	0x0677, r22
    4310:	70 93 78 06 	sts	0x0678, r23
        z /= opt_accel_smooth_average;
    4314:	c2 01       	movw	r24, r4
    4316:	62 2d       	mov	r22, r2
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	0e 94 3f 43 	call	0x867e	; 0x867e <__divmodhi4>
    431e:	06 2f       	mov	r16, r22
    4320:	f7 2e       	mov	r15, r23
    4322:	60 93 79 06 	sts	0x0679, r22
    4326:	70 93 7a 06 	sts	0x067A, r23
        xHist[accelTick % opt_accel_smooth_average] = x;
    432a:	8e 2d       	mov	r24, r14
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	62 2d       	mov	r22, r2
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	0e 94 2b 43 	call	0x8656	; 0x8656 <__udivmodhi4>
    4336:	fc 01       	movw	r30, r24
    4338:	ee 0f       	add	r30, r30
    433a:	ff 1f       	adc	r31, r31
    433c:	e1 56       	subi	r30, 0x61	; 97
    433e:	f9 4f       	sbci	r31, 0xF9	; 249
    4340:	20 83       	st	Z, r18
    4342:	31 83       	std	Z+1, r19	; 0x01
        yHist[accelTick % opt_accel_smooth_average] = y;
    4344:	8e 2d       	mov	r24, r14
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	62 2d       	mov	r22, r2
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	0e 94 2b 43 	call	0x8656	; 0x8656 <__udivmodhi4>
    4350:	fc 01       	movw	r30, r24
    4352:	ee 0f       	add	r30, r30
    4354:	ff 1f       	adc	r31, r31
    4356:	e9 53       	subi	r30, 0x39	; 57
    4358:	f9 4f       	sbci	r31, 0xF9	; 249
    435a:	40 83       	st	Z, r20
    435c:	11 83       	std	Z+1, r17	; 0x01
        zHist[accelTick % opt_accel_smooth_average] = z;
    435e:	8e 2d       	mov	r24, r14
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	62 2d       	mov	r22, r2
    4364:	70 e0       	ldi	r23, 0x00	; 0
    4366:	0e 94 2b 43 	call	0x8656	; 0x8656 <__udivmodhi4>
    436a:	fc 01       	movw	r30, r24
    436c:	ee 0f       	add	r30, r30
    436e:	ff 1f       	adc	r31, r31
    4370:	e1 51       	subi	r30, 0x11	; 17
    4372:	f9 4f       	sbci	r31, 0xF9	; 249
    4374:	00 83       	st	Z, r16
    4376:	f1 82       	std	Z+1, r15	; 0x01
    }
    
    // calculate linear velocity (INACCURATE SO FAR)
    xv += (x - x0) - (x0 - x00);
    4378:	40 91 7b 06 	lds	r20, 0x067B
    437c:	50 91 7c 06 	lds	r21, 0x067C
    4380:	a0 91 75 06 	lds	r26, 0x0675
    4384:	b0 91 76 06 	lds	r27, 0x0676
    4388:	80 91 87 06 	lds	r24, 0x0687
    438c:	90 91 88 06 	lds	r25, 0x0688
    4390:	8a 0f       	add	r24, r26
    4392:	9b 1f       	adc	r25, r27
    4394:	20 91 81 06 	lds	r18, 0x0681
    4398:	30 91 82 06 	lds	r19, 0x0682
    439c:	82 0f       	add	r24, r18
    439e:	93 1f       	adc	r25, r19
    43a0:	84 1b       	sub	r24, r20
    43a2:	95 0b       	sbc	r25, r21
    43a4:	84 1b       	sub	r24, r20
    43a6:	95 0b       	sbc	r25, r21
    43a8:	90 93 88 06 	sts	0x0688, r25
    43ac:	80 93 87 06 	sts	0x0687, r24
    yv += (y - y0) - (y0 - y00);
    43b0:	e0 91 77 06 	lds	r30, 0x0677
    43b4:	f0 91 78 06 	lds	r31, 0x0678
    43b8:	40 91 7d 06 	lds	r20, 0x067D
    43bc:	50 91 7e 06 	lds	r21, 0x067E
    43c0:	80 91 89 06 	lds	r24, 0x0689
    43c4:	90 91 8a 06 	lds	r25, 0x068A
    43c8:	8e 0f       	add	r24, r30
    43ca:	9f 1f       	adc	r25, r31
    43cc:	20 91 83 06 	lds	r18, 0x0683
    43d0:	30 91 84 06 	lds	r19, 0x0684
    43d4:	82 0f       	add	r24, r18
    43d6:	93 1f       	adc	r25, r19
    43d8:	84 1b       	sub	r24, r20
    43da:	95 0b       	sbc	r25, r21
    43dc:	84 1b       	sub	r24, r20
    43de:	95 0b       	sbc	r25, r21
    43e0:	90 93 8a 06 	sts	0x068A, r25
    43e4:	80 93 89 06 	sts	0x0689, r24
    zv += (z - z0) - (z0 - z00);
    43e8:	60 91 79 06 	lds	r22, 0x0679
    43ec:	70 91 7a 06 	lds	r23, 0x067A
    43f0:	40 91 7f 06 	lds	r20, 0x067F
    43f4:	50 91 80 06 	lds	r21, 0x0680
    43f8:	80 91 8b 06 	lds	r24, 0x068B
    43fc:	90 91 8c 06 	lds	r25, 0x068C
    4400:	86 0f       	add	r24, r22
    4402:	97 1f       	adc	r25, r23
    4404:	20 91 85 06 	lds	r18, 0x0685
    4408:	30 91 86 06 	lds	r19, 0x0686
    440c:	82 0f       	add	r24, r18
    440e:	93 1f       	adc	r25, r19
    4410:	84 1b       	sub	r24, r20
    4412:	95 0b       	sbc	r25, r21
    4414:	84 1b       	sub	r24, r20
    4416:	95 0b       	sbc	r25, r21
    4418:	90 93 8c 06 	sts	0x068C, r25
    441c:	80 93 8b 06 	sts	0x068B, r24

    if (opt_enable_calibration) {
    4420:	80 91 53 06 	lds	r24, 0x0653
    4424:	88 23       	and	r24, r24
    4426:	09 f4       	brne	.+2      	; 0x442a <_Z27update_motion_accelerometerv+0x618>
    4428:	a1 c0       	rjmp	.+322    	; 0x456c <_Z27update_motion_accelerometerv+0x75a>
        xMin = min(xMin, x);
    442a:	20 91 17 07 	lds	r18, 0x0717
    442e:	30 91 18 07 	lds	r19, 0x0718
    4432:	cd 01       	movw	r24, r26
    4434:	2a 17       	cp	r18, r26
    4436:	3b 07       	cpc	r19, r27
    4438:	0c f4       	brge	.+2      	; 0x443c <_Z27update_motion_accelerometerv+0x62a>
    443a:	c9 01       	movw	r24, r18
    443c:	90 93 18 07 	sts	0x0718, r25
    4440:	80 93 17 07 	sts	0x0717, r24
        yMin = min(yMin, y);
    4444:	80 91 19 07 	lds	r24, 0x0719
    4448:	90 91 1a 07 	lds	r25, 0x071A
    444c:	e8 17       	cp	r30, r24
    444e:	f9 07       	cpc	r31, r25
    4450:	0c f4       	brge	.+2      	; 0x4454 <_Z27update_motion_accelerometerv+0x642>
    4452:	cf 01       	movw	r24, r30
    4454:	90 93 1a 07 	sts	0x071A, r25
    4458:	80 93 19 07 	sts	0x0719, r24
        zMin = min(zMin, z);
    445c:	80 91 1b 07 	lds	r24, 0x071B
    4460:	90 91 1c 07 	lds	r25, 0x071C
    4464:	68 17       	cp	r22, r24
    4466:	79 07       	cpc	r23, r25
    4468:	0c f4       	brge	.+2      	; 0x446c <_Z27update_motion_accelerometerv+0x65a>
    446a:	cb 01       	movw	r24, r22
    446c:	90 93 1c 07 	sts	0x071C, r25
    4470:	80 93 1b 07 	sts	0x071B, r24
        xMax = max(xMax, x);
    4474:	20 91 1d 07 	lds	r18, 0x071D
    4478:	30 91 1e 07 	lds	r19, 0x071E
    447c:	80 91 75 06 	lds	r24, 0x0675
    4480:	90 91 76 06 	lds	r25, 0x0676
    4484:	82 17       	cp	r24, r18
    4486:	93 07       	cpc	r25, r19
    4488:	0c f4       	brge	.+2      	; 0x448c <_Z27update_motion_accelerometerv+0x67a>
    448a:	c9 01       	movw	r24, r18
    448c:	90 93 1e 07 	sts	0x071E, r25
    4490:	80 93 1d 07 	sts	0x071D, r24
        yMax = max(yMax, y);
    4494:	80 91 1f 07 	lds	r24, 0x071F
    4498:	90 91 20 07 	lds	r25, 0x0720
    449c:	8e 17       	cp	r24, r30
    449e:	9f 07       	cpc	r25, r31
    44a0:	0c f4       	brge	.+2      	; 0x44a4 <_Z27update_motion_accelerometerv+0x692>
    44a2:	cf 01       	movw	r24, r30
    44a4:	90 93 20 07 	sts	0x0720, r25
    44a8:	80 93 1f 07 	sts	0x071F, r24
        zMax = max(zMax, z);
    44ac:	80 91 21 07 	lds	r24, 0x0721
    44b0:	90 91 22 07 	lds	r25, 0x0722
    44b4:	86 17       	cp	r24, r22
    44b6:	97 07       	cpc	r25, r23
    44b8:	0c f4       	brge	.+2      	; 0x44bc <_Z27update_motion_accelerometerv+0x6aa>
    44ba:	cb 01       	movw	r24, r22
    44bc:	90 93 22 07 	sts	0x0722, r25
    44c0:	80 93 21 07 	sts	0x0721, r24
        DEBUG_PRN_ACCELEROMETER("calibrateaccel ");
    44c4:	88 e8       	ldi	r24, 0x88	; 136
    44c6:	98 e0       	ldi	r25, 0x08	; 8
    44c8:	6b eb       	ldi	r22, 0xBB	; 187
    44ca:	72 e0       	ldi	r23, 0x02	; 2
    44cc:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_ACCELEROMETER(xMin); DEBUG_PRN_ACCELEROMETER(" ");
    44d0:	60 91 17 07 	lds	r22, 0x0717
    44d4:	70 91 18 07 	lds	r23, 0x0718
    44d8:	88 e8       	ldi	r24, 0x88	; 136
    44da:	98 e0       	ldi	r25, 0x08	; 8
    44dc:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    44e0:	88 e8       	ldi	r24, 0x88	; 136
    44e2:	98 e0       	ldi	r25, 0x08	; 8
    44e4:	62 e1       	ldi	r22, 0x12	; 18
    44e6:	71 e0       	ldi	r23, 0x01	; 1
    44e8:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_ACCELEROMETER(yMin); DEBUG_PRN_ACCELEROMETER(" ");
    44ec:	60 91 19 07 	lds	r22, 0x0719
    44f0:	70 91 1a 07 	lds	r23, 0x071A
    44f4:	88 e8       	ldi	r24, 0x88	; 136
    44f6:	98 e0       	ldi	r25, 0x08	; 8
    44f8:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    44fc:	88 e8       	ldi	r24, 0x88	; 136
    44fe:	98 e0       	ldi	r25, 0x08	; 8
    4500:	62 e1       	ldi	r22, 0x12	; 18
    4502:	71 e0       	ldi	r23, 0x01	; 1
    4504:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_ACCELEROMETER(zMin); DEBUG_PRN_ACCELEROMETER(" ");
    4508:	60 91 1b 07 	lds	r22, 0x071B
    450c:	70 91 1c 07 	lds	r23, 0x071C
    4510:	88 e8       	ldi	r24, 0x88	; 136
    4512:	98 e0       	ldi	r25, 0x08	; 8
    4514:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4518:	88 e8       	ldi	r24, 0x88	; 136
    451a:	98 e0       	ldi	r25, 0x08	; 8
    451c:	62 e1       	ldi	r22, 0x12	; 18
    451e:	71 e0       	ldi	r23, 0x01	; 1
    4520:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_ACCELEROMETER(xMax); DEBUG_PRN_ACCELEROMETER(" ");
    4524:	60 91 1d 07 	lds	r22, 0x071D
    4528:	70 91 1e 07 	lds	r23, 0x071E
    452c:	88 e8       	ldi	r24, 0x88	; 136
    452e:	98 e0       	ldi	r25, 0x08	; 8
    4530:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4534:	88 e8       	ldi	r24, 0x88	; 136
    4536:	98 e0       	ldi	r25, 0x08	; 8
    4538:	62 e1       	ldi	r22, 0x12	; 18
    453a:	71 e0       	ldi	r23, 0x01	; 1
    453c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_ACCELEROMETER(yMax); DEBUG_PRN_ACCELEROMETER(" ");
    4540:	60 91 1f 07 	lds	r22, 0x071F
    4544:	70 91 20 07 	lds	r23, 0x0720
    4548:	88 e8       	ldi	r24, 0x88	; 136
    454a:	98 e0       	ldi	r25, 0x08	; 8
    454c:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4550:	88 e8       	ldi	r24, 0x88	; 136
    4552:	98 e0       	ldi	r25, 0x08	; 8
    4554:	62 e1       	ldi	r22, 0x12	; 18
    4556:	71 e0       	ldi	r23, 0x01	; 1
    4558:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRNL_ACCELEROMETER(zMax);
    455c:	60 91 21 07 	lds	r22, 0x0721
    4560:	70 91 22 07 	lds	r23, 0x0722
    4564:	88 e8       	ldi	r24, 0x88	; 136
    4566:	98 e0       	ldi	r25, 0x08	; 8
    4568:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN16USBVirtualSerial7printlnEi>
    }

    // calculate tilt angle and angular velocity
    ax00 = ax0; // 2x-last-iteration
    456c:	80 91 29 07 	lds	r24, 0x0729
    4570:	90 91 2a 07 	lds	r25, 0x072A
    4574:	90 93 30 07 	sts	0x0730, r25
    4578:	80 93 2f 07 	sts	0x072F, r24
    ay00 = ay0;
    457c:	80 91 2b 07 	lds	r24, 0x072B
    4580:	90 91 2c 07 	lds	r25, 0x072C
    4584:	90 93 32 07 	sts	0x0732, r25
    4588:	80 93 31 07 	sts	0x0731, r24
    az00 = az0;
    458c:	80 91 2d 07 	lds	r24, 0x072D
    4590:	90 91 2e 07 	lds	r25, 0x072E
    4594:	90 93 34 07 	sts	0x0734, r25
    4598:	80 93 33 07 	sts	0x0733, r24
    ax0 = ax; // last-iteration
    459c:	80 91 23 07 	lds	r24, 0x0723
    45a0:	90 91 24 07 	lds	r25, 0x0724
    45a4:	90 93 2a 07 	sts	0x072A, r25
    45a8:	80 93 29 07 	sts	0x0729, r24
    ay0 = ay;
    45ac:	80 91 25 07 	lds	r24, 0x0725
    45b0:	90 91 26 07 	lds	r25, 0x0726
    45b4:	90 93 2c 07 	sts	0x072C, r25
    45b8:	80 93 2b 07 	sts	0x072B, r24
    az0 = az;
    45bc:	80 91 27 07 	lds	r24, 0x0727
    45c0:	90 91 28 07 	lds	r25, 0x0728
    45c4:	90 93 2e 07 	sts	0x072E, r25
    45c8:	80 93 2d 07 	sts	0x072D, r24
    
    float xc = (float)x/256, yc = (float)y/256, zc = (float)z/256;
    45cc:	60 91 75 06 	lds	r22, 0x0675
    45d0:	70 91 76 06 	lds	r23, 0x0676
    45d4:	88 27       	eor	r24, r24
    45d6:	77 fd       	sbrc	r23, 7
    45d8:	80 95       	com	r24
    45da:	98 2f       	mov	r25, r24
    45dc:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	40 e8       	ldi	r20, 0x80	; 128
    45e6:	5b e3       	ldi	r21, 0x3B	; 59
    45e8:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    45ec:	7b 01       	movw	r14, r22
    45ee:	8c 01       	movw	r16, r24
    45f0:	60 91 77 06 	lds	r22, 0x0677
    45f4:	70 91 78 06 	lds	r23, 0x0678
    45f8:	88 27       	eor	r24, r24
    45fa:	77 fd       	sbrc	r23, 7
    45fc:	80 95       	com	r24
    45fe:	98 2f       	mov	r25, r24
    4600:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	40 e8       	ldi	r20, 0x80	; 128
    460a:	5b e3       	ldi	r21, 0x3B	; 59
    460c:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4610:	5b 01       	movw	r10, r22
    4612:	6c 01       	movw	r12, r24
    4614:	60 91 79 06 	lds	r22, 0x0679
    4618:	70 91 7a 06 	lds	r23, 0x067A
    461c:	88 27       	eor	r24, r24
    461e:	77 fd       	sbrc	r23, 7
    4620:	80 95       	com	r24
    4622:	98 2f       	mov	r25, r24
    4624:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e8       	ldi	r20, 0x80	; 128
    462e:	5b e3       	ldi	r21, 0x3B	; 59
    4630:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4634:	1b 01       	movw	r2, r22
    4636:	2c 01       	movw	r4, r24
    
    // regular atan method, more work and does not adjust for quadrants automatically
    ax = degrees(atan(xc / sqrt(yc*yc + zc*zc)));
    4638:	c6 01       	movw	r24, r12
    463a:	b5 01       	movw	r22, r10
    463c:	a6 01       	movw	r20, r12
    463e:	95 01       	movw	r18, r10
    4640:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4644:	6f 83       	std	Y+7, r22	; 0x07
    4646:	78 87       	std	Y+8, r23	; 0x08
    4648:	89 87       	std	Y+9, r24	; 0x09
    464a:	9a 87       	std	Y+10, r25	; 0x0a
    464c:	c2 01       	movw	r24, r4
    464e:	b1 01       	movw	r22, r2
    4650:	a2 01       	movw	r20, r4
    4652:	91 01       	movw	r18, r2
    4654:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4658:	6b 87       	std	Y+11, r22	; 0x0b
    465a:	7c 87       	std	Y+12, r23	; 0x0c
    465c:	8d 87       	std	Y+13, r24	; 0x0d
    465e:	9e 87       	std	Y+14, r25	; 0x0e
    4660:	6f 81       	ldd	r22, Y+7	; 0x07
    4662:	78 85       	ldd	r23, Y+8	; 0x08
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	9a 85       	ldd	r25, Y+10	; 0x0a
    4668:	2b 85       	ldd	r18, Y+11	; 0x0b
    466a:	3c 85       	ldd	r19, Y+12	; 0x0c
    466c:	4d 85       	ldd	r20, Y+13	; 0x0d
    466e:	5e 85       	ldd	r21, Y+14	; 0x0e
    4670:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    4674:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    4678:	9b 01       	movw	r18, r22
    467a:	ac 01       	movw	r20, r24
    467c:	c8 01       	movw	r24, r16
    467e:	b7 01       	movw	r22, r14
    4680:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    4684:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atan>
    4688:	21 ee       	ldi	r18, 0xE1	; 225
    468a:	3e e2       	ldi	r19, 0x2E	; 46
    468c:	45 e6       	ldi	r20, 0x65	; 101
    468e:	52 e4       	ldi	r21, 0x42	; 66
    4690:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    4694:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    4698:	3b 01       	movw	r6, r22
    469a:	4c 01       	movw	r8, r24
    469c:	70 93 24 07 	sts	0x0724, r23
    46a0:	60 93 23 07 	sts	0x0723, r22
    ay = degrees(atan(yc / sqrt(xc*xc + zc*zc)));
    46a4:	c8 01       	movw	r24, r16
    46a6:	b7 01       	movw	r22, r14
    46a8:	a8 01       	movw	r20, r16
    46aa:	97 01       	movw	r18, r14
    46ac:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    46b0:	7b 01       	movw	r14, r22
    46b2:	8c 01       	movw	r16, r24
    46b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    46b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    46b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    46ba:	5e 85       	ldd	r21, Y+14	; 0x0e
    46bc:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    46c0:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    46c4:	9b 01       	movw	r18, r22
    46c6:	ac 01       	movw	r20, r24
    46c8:	c6 01       	movw	r24, r12
    46ca:	b5 01       	movw	r22, r10
    46cc:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    46d0:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atan>
    46d4:	21 ee       	ldi	r18, 0xE1	; 225
    46d6:	3e e2       	ldi	r19, 0x2E	; 46
    46d8:	45 e6       	ldi	r20, 0x65	; 101
    46da:	52 e4       	ldi	r21, 0x42	; 66
    46dc:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    46e0:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    46e4:	70 93 26 07 	sts	0x0726, r23
    46e8:	60 93 25 07 	sts	0x0725, r22
    //az = degrees(atan(sqrt(xc*xc + yc*yc) / zc));
    az = degrees(atan(zc / sqrt(xc*xc + yc*yc)));
    46ec:	c8 01       	movw	r24, r16
    46ee:	b7 01       	movw	r22, r14
    46f0:	2f 81       	ldd	r18, Y+7	; 0x07
    46f2:	38 85       	ldd	r19, Y+8	; 0x08
    46f4:	49 85       	ldd	r20, Y+9	; 0x09
    46f6:	5a 85       	ldd	r21, Y+10	; 0x0a
    46f8:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    46fc:	0e 94 d7 41 	call	0x83ae	; 0x83ae <sqrt>
    4700:	9b 01       	movw	r18, r22
    4702:	ac 01       	movw	r20, r24
    4704:	c2 01       	movw	r24, r4
    4706:	b1 01       	movw	r22, r2
    4708:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    470c:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atan>
    4710:	21 ee       	ldi	r18, 0xE1	; 225
    4712:	3e e2       	ldi	r19, 0x2E	; 46
    4714:	45 e6       	ldi	r20, 0x65	; 101
    4716:	52 e4       	ldi	r21, 0x42	; 66
    4718:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    471c:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    4720:	ab 01       	movw	r20, r22
    4722:	70 93 28 07 	sts	0x0728, r23
    4726:	60 93 27 07 	sts	0x0727, r22
    // atan2 is definitely very simple
    //ax = degrees(atan2(yc, zc));
    //ay = degrees(atan2(xc, zc));
    //az = degrees(atan(sqrt(xc*xc + yc*yc) / zc));

    int16_t axa = abs(ax), aya = abs(ay); //, aza = abs(az);
    472a:	20 91 25 07 	lds	r18, 0x0725
    472e:	30 91 26 07 	lds	r19, 0x0726
    if (axa > 90 || aya > 90) az += 180;
    4732:	c3 01       	movw	r24, r6
    4734:	77 fe       	sbrs	r7, 7
    4736:	03 c0       	rjmp	.+6      	; 0x473e <_Z27update_motion_accelerometerv+0x92c>
    4738:	90 95       	com	r25
    473a:	81 95       	neg	r24
    473c:	9f 4f       	sbci	r25, 0xFF	; 255
    473e:	8b 35       	cpi	r24, 0x5B	; 91
    4740:	91 05       	cpc	r25, r1
    4742:	44 f4       	brge	.+16     	; 0x4754 <_Z27update_motion_accelerometerv+0x942>
    4744:	37 ff       	sbrs	r19, 7
    4746:	03 c0       	rjmp	.+6      	; 0x474e <_Z27update_motion_accelerometerv+0x93c>
    4748:	30 95       	com	r19
    474a:	21 95       	neg	r18
    474c:	3f 4f       	sbci	r19, 0xFF	; 255
    474e:	2b 35       	cpi	r18, 0x5B	; 91
    4750:	31 05       	cpc	r19, r1
    4752:	34 f0       	brlt	.+12     	; 0x4760 <_Z27update_motion_accelerometerv+0x94e>
    4754:	4c 54       	subi	r20, 0x4C	; 76
    4756:	5f 4f       	sbci	r21, 0xFF	; 255
    4758:	50 93 28 07 	sts	0x0728, r21
    475c:	40 93 27 07 	sts	0x0727, r20
    // skip angular velocity because it comes from the gyro
    //axv -= ((ax0 - ax00) - (ax - ax0));
    //ayv -= ((ay0 - ay00) - (ay - ay0));
    //azv -= ((az0 - az00) - (az - az0));
    
    DEBUG_PRN_ACCELEROMETER("accel ");
    4760:	88 e8       	ldi	r24, 0x88	; 136
    4762:	98 e0       	ldi	r25, 0x08	; 8
    4764:	6b ec       	ldi	r22, 0xCB	; 203
    4766:	72 e0       	ldi	r23, 0x02	; 2
    4768:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(xRaw); DEBUG_PRN_ACCELEROMETER(" ");
    476c:	60 91 6f 06 	lds	r22, 0x066F
    4770:	70 91 70 06 	lds	r23, 0x0670
    4774:	88 e8       	ldi	r24, 0x88	; 136
    4776:	98 e0       	ldi	r25, 0x08	; 8
    4778:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    477c:	88 e8       	ldi	r24, 0x88	; 136
    477e:	98 e0       	ldi	r25, 0x08	; 8
    4780:	62 e1       	ldi	r22, 0x12	; 18
    4782:	71 e0       	ldi	r23, 0x01	; 1
    4784:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(yRaw); DEBUG_PRN_ACCELEROMETER(" ");
    4788:	60 91 71 06 	lds	r22, 0x0671
    478c:	70 91 72 06 	lds	r23, 0x0672
    4790:	88 e8       	ldi	r24, 0x88	; 136
    4792:	98 e0       	ldi	r25, 0x08	; 8
    4794:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4798:	88 e8       	ldi	r24, 0x88	; 136
    479a:	98 e0       	ldi	r25, 0x08	; 8
    479c:	62 e1       	ldi	r22, 0x12	; 18
    479e:	71 e0       	ldi	r23, 0x01	; 1
    47a0:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(zRaw); DEBUG_PRN_ACCELEROMETER(" ");
    47a4:	60 91 73 06 	lds	r22, 0x0673
    47a8:	70 91 74 06 	lds	r23, 0x0674
    47ac:	88 e8       	ldi	r24, 0x88	; 136
    47ae:	98 e0       	ldi	r25, 0x08	; 8
    47b0:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    47b4:	88 e8       	ldi	r24, 0x88	; 136
    47b6:	98 e0       	ldi	r25, 0x08	; 8
    47b8:	62 e1       	ldi	r22, 0x12	; 18
    47ba:	71 e0       	ldi	r23, 0x01	; 1
    47bc:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(x); DEBUG_PRN_ACCELEROMETER(" ");
    47c0:	60 91 75 06 	lds	r22, 0x0675
    47c4:	70 91 76 06 	lds	r23, 0x0676
    47c8:	88 e8       	ldi	r24, 0x88	; 136
    47ca:	98 e0       	ldi	r25, 0x08	; 8
    47cc:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    47d0:	88 e8       	ldi	r24, 0x88	; 136
    47d2:	98 e0       	ldi	r25, 0x08	; 8
    47d4:	62 e1       	ldi	r22, 0x12	; 18
    47d6:	71 e0       	ldi	r23, 0x01	; 1
    47d8:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(y); DEBUG_PRN_ACCELEROMETER(" ");
    47dc:	60 91 77 06 	lds	r22, 0x0677
    47e0:	70 91 78 06 	lds	r23, 0x0678
    47e4:	88 e8       	ldi	r24, 0x88	; 136
    47e6:	98 e0       	ldi	r25, 0x08	; 8
    47e8:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    47ec:	88 e8       	ldi	r24, 0x88	; 136
    47ee:	98 e0       	ldi	r25, 0x08	; 8
    47f0:	62 e1       	ldi	r22, 0x12	; 18
    47f2:	71 e0       	ldi	r23, 0x01	; 1
    47f4:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(z); DEBUG_PRN_ACCELEROMETER(" ");
    47f8:	60 91 79 06 	lds	r22, 0x0679
    47fc:	70 91 7a 06 	lds	r23, 0x067A
    4800:	88 e8       	ldi	r24, 0x88	; 136
    4802:	98 e0       	ldi	r25, 0x08	; 8
    4804:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4808:	88 e8       	ldi	r24, 0x88	; 136
    480a:	98 e0       	ldi	r25, 0x08	; 8
    480c:	62 e1       	ldi	r22, 0x12	; 18
    480e:	71 e0       	ldi	r23, 0x01	; 1
    4810:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(xv); DEBUG_PRN_ACCELEROMETER(" ");
    4814:	60 91 87 06 	lds	r22, 0x0687
    4818:	70 91 88 06 	lds	r23, 0x0688
    481c:	88 e8       	ldi	r24, 0x88	; 136
    481e:	98 e0       	ldi	r25, 0x08	; 8
    4820:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4824:	88 e8       	ldi	r24, 0x88	; 136
    4826:	98 e0       	ldi	r25, 0x08	; 8
    4828:	62 e1       	ldi	r22, 0x12	; 18
    482a:	71 e0       	ldi	r23, 0x01	; 1
    482c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(yv); DEBUG_PRN_ACCELEROMETER(" ");
    4830:	60 91 89 06 	lds	r22, 0x0689
    4834:	70 91 8a 06 	lds	r23, 0x068A
    4838:	88 e8       	ldi	r24, 0x88	; 136
    483a:	98 e0       	ldi	r25, 0x08	; 8
    483c:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4840:	88 e8       	ldi	r24, 0x88	; 136
    4842:	98 e0       	ldi	r25, 0x08	; 8
    4844:	62 e1       	ldi	r22, 0x12	; 18
    4846:	71 e0       	ldi	r23, 0x01	; 1
    4848:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(zv); DEBUG_PRN_ACCELEROMETER(" ");
    484c:	60 91 8b 06 	lds	r22, 0x068B
    4850:	70 91 8c 06 	lds	r23, 0x068C
    4854:	88 e8       	ldi	r24, 0x88	; 136
    4856:	98 e0       	ldi	r25, 0x08	; 8
    4858:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    485c:	88 e8       	ldi	r24, 0x88	; 136
    485e:	98 e0       	ldi	r25, 0x08	; 8
    4860:	62 e1       	ldi	r22, 0x12	; 18
    4862:	71 e0       	ldi	r23, 0x01	; 1
    4864:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(ax); DEBUG_PRN_ACCELEROMETER(" ");
    4868:	60 91 23 07 	lds	r22, 0x0723
    486c:	70 91 24 07 	lds	r23, 0x0724
    4870:	88 e8       	ldi	r24, 0x88	; 136
    4872:	98 e0       	ldi	r25, 0x08	; 8
    4874:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4878:	88 e8       	ldi	r24, 0x88	; 136
    487a:	98 e0       	ldi	r25, 0x08	; 8
    487c:	62 e1       	ldi	r22, 0x12	; 18
    487e:	71 e0       	ldi	r23, 0x01	; 1
    4880:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRN_ACCELEROMETER(ay); DEBUG_PRN_ACCELEROMETER(" ");
    4884:	60 91 25 07 	lds	r22, 0x0725
    4888:	70 91 26 07 	lds	r23, 0x0726
    488c:	88 e8       	ldi	r24, 0x88	; 136
    488e:	98 e0       	ldi	r25, 0x08	; 8
    4890:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN16USBVirtualSerial5printEi>
    4894:	88 e8       	ldi	r24, 0x88	; 136
    4896:	98 e0       	ldi	r25, 0x08	; 8
    4898:	62 e1       	ldi	r22, 0x12	; 18
    489a:	71 e0       	ldi	r23, 0x01	; 1
    489c:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    DEBUG_PRNL_ACCELEROMETER(az);
    48a0:	60 91 27 07 	lds	r22, 0x0727
    48a4:	70 91 28 07 	lds	r23, 0x0728
    48a8:	88 e8       	ldi	r24, 0x88	; 136
    48aa:	98 e0       	ldi	r25, 0x08	; 8
    48ac:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <_ZN16USBVirtualSerial7printlnEi>

    accelTick++;
    48b0:	80 91 6e 06 	lds	r24, 0x066E
    48b4:	8f 5f       	subi	r24, 0xFF	; 255
    48b6:	80 93 6e 06 	sts	0x066E, r24
}  
    48ba:	60 96       	adiw	r28, 0x10	; 16
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	f8 94       	cli
    48c0:	de bf       	out	0x3e, r29	; 62
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	cf 91       	pop	r28
    48c8:	df 91       	pop	r29
    48ca:	1f 91       	pop	r17
    48cc:	0f 91       	pop	r16
    48ce:	ff 90       	pop	r15
    48d0:	ef 90       	pop	r14
    48d2:	df 90       	pop	r13
    48d4:	cf 90       	pop	r12
    48d6:	bf 90       	pop	r11
    48d8:	af 90       	pop	r10
    48da:	9f 90       	pop	r9
    48dc:	8f 90       	pop	r8
    48de:	7f 90       	pop	r7
    48e0:	6f 90       	pop	r6
    48e2:	5f 90       	pop	r5
    48e4:	4f 90       	pop	r4
    48e6:	3f 90       	pop	r3
    48e8:	2f 90       	pop	r2
    48ea:	08 95       	ret

000048ec <loop>:
}

void loop() {
    // read all defined and active motion sensors
    #ifdef ENABLE_ACCELEROMETER
        if (activeAccelerometer) update_motion_accelerometer();
    48ec:	80 91 4a 06 	lds	r24, 0x064A
    48f0:	88 23       	and	r24, r24
    48f2:	09 f0       	breq	.+2      	; 0x48f6 <loop+0xa>
    48f4:	8e da       	rcall	.-2788   	; 0x3e12 <_Z27update_motion_accelerometerv>
    #endif
    #ifdef ENABLE_GYROSCOPE
        if (activeGyroscope) update_motion_gyroscope();
    48f6:	80 91 4b 06 	lds	r24, 0x064B
    48fa:	88 23       	and	r24, r24
    48fc:	11 f0       	breq	.+4      	; 0x4902 <loop+0x16>
    48fe:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_Z23update_motion_gyroscopev>
    
    // process motion into gestures
    //if (activeGestures) update_gestures();
    
    // process touch sensor status
    if (activeTouch) update_touch();
    4902:	80 91 4e 06 	lds	r24, 0x064E
    4906:	88 23       	and	r24, r24
    4908:	11 f0       	breq	.+4      	; 0x490e <loop+0x22>
    490a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z12update_touchv>

    // keyboard is almost always done in real time, this is usually not necessary
    if (activeKeyboard) update_keyboard();

    // send any unsent mouse control data
    if (activeMouse) update_mouse();
    490e:	80 91 50 06 	lds	r24, 0x0650
    4912:	88 23       	and	r24, r24
    4914:	11 f0       	breq	.+4      	; 0x491a <loop+0x2e>
    4916:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_Z12update_mousev>

    // send any unsent joystick control data
    if (activeJoystick) update_joystick();

    // increment loop tick counter
    counter++;
    491a:	80 91 38 06 	lds	r24, 0x0638
    491e:	90 91 39 06 	lds	r25, 0x0639
    4922:	01 96       	adiw	r24, 0x01	; 1
    4924:	90 93 39 06 	sts	0x0639, r25
    4928:	80 93 38 06 	sts	0x0638, r24
        else if (tricolorBlinkBlue  == 3 && counter %  50 == 0) tricolor(255, 255, counter %  100 >=  50 ? 0 : 1);
        else if (tricolorBlinkBlue  == 4 && counter %  10 == 0) tricolor(255, 255, counter %  100 >=  10 ? 0 : 1);
    #endif /* ENABLE_TRICOLOR */

    // test counter and reset if necessary
    if (counter == 1000) {
    492c:	88 5e       	subi	r24, 0xE8	; 232
    492e:	93 40       	sbci	r25, 0x03	; 3
    4930:	09 f0       	breq	.+2      	; 0x4934 <loop+0x48>
    4932:	3f c0       	rjmp	.+126    	; 0x49b2 <loop+0xc6>
        counter = 0;
    4934:	10 92 39 06 	sts	0x0639, r1
    4938:	10 92 38 06 	sts	0x0638, r1
        ticks++;
    493c:	80 91 3a 06 	lds	r24, 0x063A
    4940:	90 91 3b 06 	lds	r25, 0x063B
    4944:	a0 91 3c 06 	lds	r26, 0x063C
    4948:	b0 91 3d 06 	lds	r27, 0x063D
    494c:	01 96       	adiw	r24, 0x01	; 1
    494e:	a1 1d       	adc	r26, r1
    4950:	b1 1d       	adc	r27, r1
    4952:	80 93 3a 06 	sts	0x063A, r24
    4956:	90 93 3b 06 	sts	0x063B, r25
    495a:	a0 93 3c 06 	sts	0x063C, r26
    495e:	b0 93 3d 06 	sts	0x063D, r27
            blink_led = !blink_led;
            if (blink_led) digitalWrite(BLINK_LED_PIN, HIGH);
            else digitalWrite(BLINK_LED_PIN, LOW);
        #endif /* ENABLE_BLINK */

        DEBUG_PRN_BENCHMARK("benchmark 1000 ");
    4962:	88 e8       	ldi	r24, 0x88	; 136
    4964:	98 e0       	ldi	r25, 0x08	; 8
    4966:	62 ed       	ldi	r22, 0xD2	; 210
    4968:	72 e0       	ldi	r23, 0x02	; 2
    496a:	cb d7       	rcall	.+3990   	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRN_BENCHMARK(millis() - t);
    496c:	0e 94 67 39 	call	0x72ce	; 0x72ce <millis>
    4970:	ab 01       	movw	r20, r22
    4972:	bc 01       	movw	r22, r24
    4974:	80 91 3e 06 	lds	r24, 0x063E
    4978:	90 91 3f 06 	lds	r25, 0x063F
    497c:	a0 91 40 06 	lds	r26, 0x0640
    4980:	b0 91 41 06 	lds	r27, 0x0641
    4984:	48 1b       	sub	r20, r24
    4986:	59 0b       	sbc	r21, r25
    4988:	6a 0b       	sbc	r22, r26
    498a:	7b 0b       	sbc	r23, r27
    498c:	88 e8       	ldi	r24, 0x88	; 136
    498e:	98 e0       	ldi	r25, 0x08	; 8
    4990:	ff d7       	rcall	.+4094   	; 0x5990 <_ZN16USBVirtualSerial5printEm>
        DEBUG_PRN_BENCHMARK(" ");
    4992:	88 e8       	ldi	r24, 0x88	; 136
    4994:	98 e0       	ldi	r25, 0x08	; 8
    4996:	62 e1       	ldi	r22, 0x12	; 18
    4998:	71 e0       	ldi	r23, 0x01	; 1
    499a:	b3 d7       	rcall	.+3942   	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
        DEBUG_PRNL_BENCHMARK(ticks);
    499c:	40 91 3a 06 	lds	r20, 0x063A
    49a0:	50 91 3b 06 	lds	r21, 0x063B
    49a4:	60 91 3c 06 	lds	r22, 0x063C
    49a8:	70 91 3d 06 	lds	r23, 0x063D
    49ac:	88 e8       	ldi	r24, 0x88	; 136
    49ae:	98 e0       	ldi	r25, 0x08	; 8
    49b0:	72 d7       	rcall	.+3812   	; 0x5896 <_ZN16USBVirtualSerial7printlnEm>
    }

    t = millis();
    49b2:	0e 94 67 39 	call	0x72ce	; 0x72ce <millis>
    49b6:	60 93 3e 06 	sts	0x063E, r22
    49ba:	70 93 3f 06 	sts	0x063F, r23
    49be:	80 93 40 06 	sts	0x0640, r24
    49c2:	90 93 41 06 	sts	0x0641, r25
    49c6:	08 95       	ret

000049c8 <_Z26setup_motion_accelerometerv>:
int16_t axBase, ayBase, azBase;       // initial accel tilt angles
uint8_t aset = false;             // bool to tell whether initial (*Base) values have been set yet
int16_t calAccel = 0;
uint8_t accelCalibrated = false;

void setup_motion_accelerometer() {
    49c8:	0f 93       	push	r16
    49ca:	1f 93       	push	r17
    accelerometer.powerOn();
    49cc:	0f e5       	ldi	r16, 0x5F	; 95
    49ce:	16 e0       	ldi	r17, 0x06	; 6
    49d0:	c8 01       	movw	r24, r16
    49d2:	0e 94 b5 31 	call	0x636a	; 0x636a <_ZN7ADXL3457powerOnEv>
    accelerometer.setRate(100);
    49d6:	c8 01       	movw	r24, r16
    49d8:	40 e0       	ldi	r20, 0x00	; 0
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	68 ec       	ldi	r22, 0xC8	; 200
    49de:	72 e4       	ldi	r23, 0x42	; 66
    49e0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_ZN7ADXL3457setRateEf>
    x = y = z = 0;
    49e4:	10 92 7a 06 	sts	0x067A, r1
    49e8:	10 92 79 06 	sts	0x0679, r1
    49ec:	10 92 78 06 	sts	0x0678, r1
    49f0:	10 92 77 06 	sts	0x0677, r1
    49f4:	10 92 76 06 	sts	0x0676, r1
    49f8:	10 92 75 06 	sts	0x0675, r1
    cx = cy = cz = 0;
    49fc:	10 92 95 06 	sts	0x0695, r1
    4a00:	10 92 96 06 	sts	0x0696, r1
    4a04:	10 92 97 06 	sts	0x0697, r1
    4a08:	10 92 98 06 	sts	0x0698, r1
    4a0c:	10 92 91 06 	sts	0x0691, r1
    4a10:	10 92 92 06 	sts	0x0692, r1
    4a14:	10 92 93 06 	sts	0x0693, r1
    4a18:	10 92 94 06 	sts	0x0694, r1
    4a1c:	10 92 8d 06 	sts	0x068D, r1
    4a20:	10 92 8e 06 	sts	0x068E, r1
    4a24:	10 92 8f 06 	sts	0x068F, r1
    4a28:	10 92 90 06 	sts	0x0690, r1
    ax = ay = az = 0;
    4a2c:	10 92 28 07 	sts	0x0728, r1
    4a30:	10 92 27 07 	sts	0x0727, r1
    4a34:	10 92 26 07 	sts	0x0726, r1
    4a38:	10 92 25 07 	sts	0x0725, r1
    4a3c:	10 92 24 07 	sts	0x0724, r1
    4a40:	10 92 23 07 	sts	0x0723, r1
    accelMicros = 0;
    4a44:	10 92 66 06 	sts	0x0666, r1
    4a48:	10 92 67 06 	sts	0x0667, r1
    4a4c:	10 92 68 06 	sts	0x0668, r1
    4a50:	10 92 69 06 	sts	0x0669, r1
    accelTick = 0;
    4a54:	10 92 6e 06 	sts	0x066E, r1
    accelCalibrated = false;
    4a58:	10 92 3e 07 	sts	0x073E, r1
    xMin = yMin = zMin = 0;
    4a5c:	10 92 1c 07 	sts	0x071C, r1
    4a60:	10 92 1b 07 	sts	0x071B, r1
    4a64:	10 92 1a 07 	sts	0x071A, r1
    4a68:	10 92 19 07 	sts	0x0719, r1
    4a6c:	10 92 18 07 	sts	0x0718, r1
    4a70:	10 92 17 07 	sts	0x0717, r1
    xMax = yMax = zMax = 0;
    4a74:	10 92 22 07 	sts	0x0722, r1
    4a78:	10 92 21 07 	sts	0x0721, r1
    4a7c:	10 92 20 07 	sts	0x0720, r1
    4a80:	10 92 1f 07 	sts	0x071F, r1
    4a84:	10 92 1e 07 	sts	0x071E, r1
    4a88:	10 92 1d 07 	sts	0x071D, r1
}
    4a8c:	1f 91       	pop	r17
    4a8e:	0f 91       	pop	r16
    4a90:	08 95       	ret

00004a92 <_Z23update_bluetooth_serialv>:

void update_bluetooth_serial() {
    4a92:	08 c0       	rjmp	.+16     	; 0x4aa4 <_Z23update_bluetooth_serialv+0x12>
    while (Uart.available() > 0) {
        bluetooth.parse(Uart.read());
    4a94:	84 e5       	ldi	r24, 0x54	; 84
    4a96:	96 e0       	ldi	r25, 0x06	; 6
    4a98:	c8 d3       	rcall	.+1936   	; 0x522a <_ZN14HardwareSerial4readEv>
    4a9a:	68 2f       	mov	r22, r24
    4a9c:	85 e5       	ldi	r24, 0x55	; 85
    4a9e:	96 e0       	ldi	r25, 0x06	; 6
    4aa0:	0e 94 0e 39 	call	0x721c	; 0x721c <_ZN5iWRAP5parseEh>

void setup_hostif_bt_spp() {
}

void update_bluetooth_serial() {
    while (Uart.available() > 0) {
    4aa4:	84 e5       	ldi	r24, 0x54	; 84
    4aa6:	96 e0       	ldi	r25, 0x06	; 6
    4aa8:	c2 d3       	rcall	.+1924   	; 0x522e <_ZN14HardwareSerial9availableEv>
    4aaa:	88 23       	and	r24, r24
    4aac:	99 f7       	brne	.-26     	; 0x4a94 <_Z23update_bluetooth_serialv+0x2>
    4aae:	09 c0       	rjmp	.+18     	; 0x4ac2 <_Z23update_bluetooth_serialv+0x30>
        bluetooth.parse(Uart.read());
    }
    while (Serial.available() > 0) {
        uint8_t bs = Serial.read();
    4ab0:	88 e8       	ldi	r24, 0x88	; 136
    4ab2:	98 e0       	ldi	r25, 0x08	; 8
    4ab4:	a1 d3       	rcall	.+1858   	; 0x51f8 <_ZN16USBVirtualSerial4readEv>
    4ab6:	68 2f       	mov	r22, r24
        //Serial.print(bs, BYTE);
        Uart.print(bs, BYTE);
    4ab8:	84 e5       	ldi	r24, 0x54	; 84
    4aba:	96 e0       	ldi	r25, 0x06	; 6
    4abc:	40 e0       	ldi	r20, 0x00	; 0
    4abe:	50 e0       	ldi	r21, 0x00	; 0
    4ac0:	a6 d3       	rcall	.+1868   	; 0x520e <_ZN14HardwareSerial5printEhi>

void update_bluetooth_serial() {
    while (Uart.available() > 0) {
        bluetooth.parse(Uart.read());
    }
    while (Serial.available() > 0) {
    4ac2:	88 e8       	ldi	r24, 0x88	; 136
    4ac4:	98 e0       	ldi	r25, 0x08	; 8
    4ac6:	9a d3       	rcall	.+1844   	; 0x51fc <_ZN16USBVirtualSerial9availableEv>
    4ac8:	88 23       	and	r24, r24
    4aca:	91 f7       	brne	.-28     	; 0x4ab0 <_Z23update_bluetooth_serialv+0x1e>
        uint8_t bs = Serial.read();
        //Serial.print(bs, BYTE);
        Uart.print(bs, BYTE);
    }
}  
    4acc:	08 95       	ret

00004ace <_Z19setup_hostif_bt_hidv>:

void setup_hostif_bt_hid() {
    Uart.begin(38400);
    4ace:	84 e5       	ldi	r24, 0x54	; 84
    4ad0:	96 e0       	ldi	r25, 0x06	; 6
    4ad2:	40 e0       	ldi	r20, 0x00	; 0
    4ad4:	56 e9       	ldi	r21, 0x96	; 150
    4ad6:	60 e0       	ldi	r22, 0x00	; 0
    4ad8:	70 e0       	ldi	r23, 0x00	; 0
}
    4ada:	92 c3       	rjmp	.+1828   	; 0x5200 <_ZN14HardwareSerial5beginEm>

00004adc <_Z14keyglove_setupv>:

/* ===============================================
 * MAIN INIT/SETUP FUNCTION (called by setup())
=============================================== */

void keyglove_setup() {
    4adc:	0f 93       	push	r16
    4ade:	1f 93       	push	r17

    /* ===============================================
     * INITIALIZE SERIAL DEBUGGING AT THIS POINT
    =============================================== */
    #ifdef ENABLE_SERIAL
        Serial.begin(38400);
    4ae0:	08 e8       	ldi	r16, 0x88	; 136
    4ae2:	18 e0       	ldi	r17, 0x08	; 8
    4ae4:	c8 01       	movw	r24, r16
    4ae6:	40 e0       	ldi	r20, 0x00	; 0
    4ae8:	56 e9       	ldi	r21, 0x96	; 150
    4aea:	60 e0       	ldi	r22, 0x00	; 0
    4aec:	70 e0       	ldi	r23, 0x00	; 0
    4aee:	83 d3       	rcall	.+1798   	; 0x51f6 <_ZN16USBVirtualSerial5beginEm>
        Serial.println("info Keyglove device activated");
    4af0:	c8 01       	movw	r24, r16
    4af2:	62 ee       	ldi	r22, 0xE2	; 226
    4af4:	72 e0       	ldi	r23, 0x02	; 2
    4af6:	84 d6       	rcall	.+3336   	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    #endif
    #if (KG_HOSTIF & KG_HOSTIF_USB)
        setup_hostif_usb();
    #endif
    #if (KG_HOSTIF & KG_HOSTIF_BT_HID)
        setup_hostif_bt_hid();
    4af8:	ea df       	rcall	.-44     	; 0x4ace <_Z19setup_hostif_bt_hidv>
        setup_hostif_r400();
    #endif
    
    // multi-option motion sensors
    #ifdef ENABLE_ACCELEROMETER
        setup_motion_accelerometer();
    4afa:	66 df       	rcall	.-308    	; 0x49c8 <_Z26setup_motion_accelerometerv>
    #endif
    #ifdef ENABLE_GYROSCOPE
        setup_motion_gyroscope();
    4afc:	54 d9       	rcall	.-3416   	; 0x3da6 <_Z22setup_motion_gyroscopev>
        setup_motion_fusion();
    #endif

    // multi-option feedback
    #if (KG_FEEDBACK & KG_FEEDBACK_BLINK)
        setup_feedback_blink();
    4afe:	0e 94 2d 04 	call	0x85a	; 0x85a <_Z20setup_feedback_blinkv>
    #endif
    #if (KG_FEEDBACK & KG_FEEDBACK_PIEZO)
        setup_feedback_piezo();
    4b02:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <_Z20setup_feedback_piezov>
    #endif
    #if (KG_FEEDBACK & KG_FEEDBACK_VIBRATE)
        setup_feedback_vibrate();
    4b06:	0e 94 39 05 	call	0xa72	; 0xa72 <_Z22setup_feedback_vibratev>
    #endif
    #if (KG_FEEDBACK & KG_FEEDBACK_RGB)
        setup_feedback_rgb();
    4b0a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z18setup_feedback_rgbv>
    #endif
    
    setup_touch();
    4b0e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_Z11setup_touchv>
    setup_keyboard();
    setup_mouse();
    4b12:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z11setup_mousev>
    setup_joystick();
}
    4b16:	1f 91       	pop	r17
    4b18:	0f 91       	pop	r16
    4b1a:	08 95       	ret

00004b1c <setup>:
 * MAIN SETUP ROUTINE
=============================================== */
void setup() {

    // call main setup function (see setup.h for details)
    keyglove_setup();
    4b1c:	df df       	rcall	.-66     	; 0x4adc <_Z14keyglove_setupv>

    // initialize benchmark
    t = millis();
    4b1e:	0e 94 67 39 	call	0x72ce	; 0x72ce <millis>
    4b22:	60 93 3e 06 	sts	0x063E, r22
    4b26:	70 93 3f 06 	sts	0x063F, r23
    4b2a:	80 93 40 06 	sts	0x0640, r24
    4b2e:	90 93 41 06 	sts	0x0641, r25
}
    4b32:	08 95       	ret

00004b34 <main>:
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    4b34:	ef e1       	ldi	r30, 0x1F	; 31
    4b36:	f4 e0       	ldi	r31, 0x04	; 4
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4b38:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4b3a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
    4b3c:	8a e2       	ldi	r24, 0x2A	; 42
    4b3e:	94 e0       	ldi	r25, 0x04	; 4
    4b40:	91 83       	std	Z+1, r25	; 0x01
    4b42:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    4b44:	93 83       	std	Z+3, r25	; 0x03
    4b46:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    4b48:	95 83       	std	Z+5, r25	; 0x05
    4b4a:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    4b4c:	8a e2       	ldi	r24, 0x2A	; 42
    4b4e:	95 e0       	ldi	r25, 0x05	; 5
    4b50:	97 83       	std	Z+7, r25	; 0x07
    4b52:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    4b54:	10 86       	std	Z+8, r1	; 0x08
			Buffer->Count  = 0;
    4b56:	12 86       	std	Z+10, r1	; 0x0a
    4b58:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4b5a:	2f bf       	out	0x3f, r18	; 63
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    4b5c:	ea e2       	ldi	r30, 0x2A	; 42
    4b5e:	f5 e0       	ldi	r31, 0x05	; 5
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4b60:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4b62:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
    4b64:	85 e3       	ldi	r24, 0x35	; 53
    4b66:	95 e0       	ldi	r25, 0x05	; 5
    4b68:	91 83       	std	Z+1, r25	; 0x01
    4b6a:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    4b6c:	93 83       	std	Z+3, r25	; 0x03
    4b6e:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    4b70:	95 83       	std	Z+5, r25	; 0x05
    4b72:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    4b74:	85 e3       	ldi	r24, 0x35	; 53
    4b76:	96 e0       	ldi	r25, 0x06	; 6
    4b78:	97 83       	std	Z+7, r25	; 0x07
    4b7a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    4b7c:	10 86       	std	Z+8, r1	; 0x08
			Buffer->Count  = 0;
    4b7e:	12 86       	std	Z+10, r1	; 0x0a
    4b80:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4b82:	2f bf       	out	0x3f, r18	; 63
int main(void)
{
    RingBuffer_InitBuffer(&HostRXSerial_Buffer, HostRXSerial_Buffer_Data, sizeof(HostRXSerial_Buffer_Data));
    RingBuffer_InitBuffer(&HostTXSerial_Buffer, HostTXSerial_Buffer_Data, sizeof(HostTXSerial_Buffer_Data));

    SetupHardware();
    4b84:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <SetupHardware>
    //LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    //sei(); // called by init()
    init();
    4b88:	0e 94 bf 39 	call	0x737e	; 0x737e <init>
    setup();
    4b8c:	c7 df       	rcall	.-114    	; 0x4b1c <setup>
            HIDReportInData[6] = 0; // right y exis
            HIDReportInData[7] = 0; // ] - unused
            HIDReportInData[8] = 0; // ]
        }*/

        loop();
    4b8e:	ae de       	rcall	.-676    	; 0x48ec <loop>
        if (!CDCTaskRun) CDC_Task(); else CDCTaskRun = false;
    4b90:	80 91 35 06 	lds	r24, 0x0635
    4b94:	88 23       	and	r24, r24
    4b96:	19 f4       	brne	.+6      	; 0x4b9e <main+0x6a>
    4b98:	0e 94 84 02 	call	0x508	; 0x508 <CDC_Task>
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <main+0x6e>
    4b9e:	10 92 35 06 	sts	0x0635, r1
        if (!HIDTaskRun) HID_Task(); else HIDTaskRun = false;
    4ba2:	80 91 36 06 	lds	r24, 0x0636
    4ba6:	88 23       	and	r24, r24
    4ba8:	19 f4       	brne	.+6      	; 0x4bb0 <main+0x7c>
    4baa:	0e 94 49 02 	call	0x492	; 0x492 <HID_Task>
    4bae:	02 c0       	rjmp	.+4      	; 0x4bb4 <main+0x80>
    4bb0:	10 92 36 06 	sts	0x0636, r1
        USB_USBTask();
    4bb4:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <USB_USBTask>
    4bb8:	ea cf       	rjmp	.-44     	; 0x4b8e <main+0x5a>

00004bba <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	51 f0       	breq	.+20     	; 0x4bd2 <_Z12disableTimerh+0x18>
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	28 f0       	brcs	.+10     	; 0x4bcc <_Z12disableTimerh+0x12>
    4bc2:	82 30       	cpi	r24, 0x02	; 2
    4bc4:	61 f0       	breq	.+24     	; 0x4bde <_Z12disableTimerh+0x24>
    4bc6:	83 30       	cpi	r24, 0x03	; 3
    4bc8:	e9 f4       	brne	.+58     	; 0x4c04 <_Z12disableTimerh+0x4a>
    4bca:	1a c0       	rjmp	.+52     	; 0x4c00 <_Z12disableTimerh+0x46>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    4bcc:	10 92 6e 00 	sts	0x006E, r1
    4bd0:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    4bd2:	80 91 6f 00 	lds	r24, 0x006F
    4bd6:	8d 7f       	andi	r24, 0xFD	; 253
    4bd8:	80 93 6f 00 	sts	0x006F, r24
    4bdc:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    4bde:	80 91 70 00 	lds	r24, 0x0070
    4be2:	8d 7f       	andi	r24, 0xFD	; 253
    4be4:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    4bee:	80 91 b1 00 	lds	r24, 0x00B1
    4bf2:	88 7f       	andi	r24, 0xF8	; 248
    4bf4:	84 60       	ori	r24, 0x04	; 4
    4bf6:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    4bfa:	10 92 b3 00 	sts	0x00B3, r1
    4bfe:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    4c00:	10 92 71 00 	sts	0x0071, r1
    4c04:	08 95       	ret

00004c06 <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
    4c06:	1f 93       	push	r17
    4c08:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    4c0a:	80 91 f3 03 	lds	r24, 0x03F3
    4c0e:	81 17       	cp	r24, r17
    4c10:	11 f0       	breq	.+4      	; 0x4c16 <_Z6noToneh+0x10>
    4c12:	9f ef       	ldi	r25, 0xFF	; 255
    4c14:	06 c0       	rjmp	.+12     	; 0x4c22 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    4c16:	e2 e7       	ldi	r30, 0x72	; 114
    4c18:	f3 e0       	ldi	r31, 0x03	; 3
    4c1a:	94 91       	lpm	r25, Z+
      tone_pins[i] = 255;
    4c1c:	8f ef       	ldi	r24, 0xFF	; 255
    4c1e:	80 93 f3 03 	sts	0x03F3, r24
    }
  }
  
  disableTimer(_timer);
    4c22:	89 2f       	mov	r24, r25
    4c24:	ca df       	rcall	.-108    	; 0x4bba <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    4c26:	81 2f       	mov	r24, r17
    4c28:	60 e0       	ldi	r22, 0x00	; 0
    4c2a:	7c d3       	rcall	.+1784   	; 0x5324 <digitalWrite>
}
    4c2c:	1f 91       	pop	r17
    4c2e:	08 95       	ret

00004c30 <__vector_13>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
    4c30:	1f 92       	push	r1
    4c32:	0f 92       	push	r0
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	0f 92       	push	r0
    4c38:	0b b6       	in	r0, 0x3b	; 59
    4c3a:	0f 92       	push	r0
    4c3c:	11 24       	eor	r1, r1
    4c3e:	2f 93       	push	r18
    4c40:	3f 93       	push	r19
    4c42:	4f 93       	push	r20
    4c44:	5f 93       	push	r21
    4c46:	6f 93       	push	r22
    4c48:	7f 93       	push	r23
    4c4a:	8f 93       	push	r24
    4c4c:	9f 93       	push	r25
    4c4e:	af 93       	push	r26
    4c50:	bf 93       	push	r27
    4c52:	ef 93       	push	r30
    4c54:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
    4c56:	80 91 7a 08 	lds	r24, 0x087A
    4c5a:	90 91 7b 08 	lds	r25, 0x087B
    4c5e:	a0 91 7c 08 	lds	r26, 0x087C
    4c62:	b0 91 7d 08 	lds	r27, 0x087D
    4c66:	00 97       	sbiw	r24, 0x00	; 0
    4c68:	a1 05       	cpc	r26, r1
    4c6a:	b1 05       	cpc	r27, r1
    4c6c:	51 f1       	breq	.+84     	; 0x4cc2 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    4c6e:	e0 91 7e 08 	lds	r30, 0x087E
    4c72:	f0 91 7f 08 	lds	r31, 0x087F
    4c76:	80 81       	ld	r24, Z
    4c78:	90 91 80 08 	lds	r25, 0x0880
    4c7c:	89 27       	eor	r24, r25
    4c7e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    4c80:	80 91 7a 08 	lds	r24, 0x087A
    4c84:	90 91 7b 08 	lds	r25, 0x087B
    4c88:	a0 91 7c 08 	lds	r26, 0x087C
    4c8c:	b0 91 7d 08 	lds	r27, 0x087D
    4c90:	18 16       	cp	r1, r24
    4c92:	19 06       	cpc	r1, r25
    4c94:	1a 06       	cpc	r1, r26
    4c96:	1b 06       	cpc	r1, r27
    4c98:	bc f4       	brge	.+46     	; 0x4cc8 <__vector_13+0x98>
      timer2_toggle_count--;
    4c9a:	80 91 7a 08 	lds	r24, 0x087A
    4c9e:	90 91 7b 08 	lds	r25, 0x087B
    4ca2:	a0 91 7c 08 	lds	r26, 0x087C
    4ca6:	b0 91 7d 08 	lds	r27, 0x087D
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	a1 09       	sbc	r26, r1
    4cae:	b1 09       	sbc	r27, r1
    4cb0:	80 93 7a 08 	sts	0x087A, r24
    4cb4:	90 93 7b 08 	sts	0x087B, r25
    4cb8:	a0 93 7c 08 	sts	0x087C, r26
    4cbc:	b0 93 7d 08 	sts	0x087D, r27
    4cc0:	03 c0       	rjmp	.+6      	; 0x4cc8 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    4cc2:	80 91 f3 03 	lds	r24, 0x03F3
    4cc6:	9f df       	rcall	.-194    	; 0x4c06 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    4cc8:	ff 91       	pop	r31
    4cca:	ef 91       	pop	r30
    4ccc:	bf 91       	pop	r27
    4cce:	af 91       	pop	r26
    4cd0:	9f 91       	pop	r25
    4cd2:	8f 91       	pop	r24
    4cd4:	7f 91       	pop	r23
    4cd6:	6f 91       	pop	r22
    4cd8:	5f 91       	pop	r21
    4cda:	4f 91       	pop	r20
    4cdc:	3f 91       	pop	r19
    4cde:	2f 91       	pop	r18
    4ce0:	0f 90       	pop	r0
    4ce2:	0b be       	out	0x3b, r0	; 59
    4ce4:	0f 90       	pop	r0
    4ce6:	0f be       	out	0x3f, r0	; 63
    4ce8:	0f 90       	pop	r0
    4cea:	1f 90       	pop	r1
    4cec:	18 95       	reti

00004cee <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
    4cee:	2f 92       	push	r2
    4cf0:	3f 92       	push	r3
    4cf2:	5f 92       	push	r5
    4cf4:	6f 92       	push	r6
    4cf6:	7f 92       	push	r7
    4cf8:	8f 92       	push	r8
    4cfa:	9f 92       	push	r9
    4cfc:	af 92       	push	r10
    4cfe:	bf 92       	push	r11
    4d00:	cf 92       	push	r12
    4d02:	df 92       	push	r13
    4d04:	ef 92       	push	r14
    4d06:	ff 92       	push	r15
    4d08:	0f 93       	push	r16
    4d0a:	1f 93       	push	r17
    4d0c:	df 93       	push	r29
    4d0e:	cf 93       	push	r28
    4d10:	00 d0       	rcall	.+0      	; 0x4d12 <_Z4tonehjm+0x24>
    4d12:	00 d0       	rcall	.+0      	; 0x4d14 <_Z4tonehjm+0x26>
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	a8 2f       	mov	r26, r24
    4d1a:	1b 01       	movw	r2, r22
    4d1c:	29 83       	std	Y+1, r18	; 0x01
    4d1e:	3a 83       	std	Y+2, r19	; 0x02
    4d20:	4b 83       	std	Y+3, r20	; 0x03
    4d22:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    4d24:	80 91 f3 03 	lds	r24, 0x03F3
    4d28:	8a 17       	cp	r24, r26
    4d2a:	21 f4       	brne	.+8      	; 0x4d34 <_Z4tonehjm+0x46>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    4d2c:	e2 e7       	ldi	r30, 0x72	; 114
    4d2e:	f3 e0       	ldi	r31, 0x03	; 3
    4d30:	54 90       	lpm	r5, Z+
    4d32:	af c0       	rjmp	.+350    	; 0x4e92 <_Z4tonehjm+0x1a4>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    4d34:	8f 3f       	cpi	r24, 0xFF	; 255
    4d36:	09 f0       	breq	.+2      	; 0x4d3a <_Z4tonehjm+0x4c>
    4d38:	29 c2       	rjmp	.+1106   	; 0x518c <_Z4tonehjm+0x49e>
      tone_pins[i] = _pin;
    4d3a:	a0 93 f3 03 	sts	0x03F3, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    4d3e:	e2 e7       	ldi	r30, 0x72	; 114
    4d40:	f3 e0       	ldi	r31, 0x03	; 3
    4d42:	54 90       	lpm	r5, Z+
      break;
    }
  }
  
  if (_timer != -1)
    4d44:	2f ef       	ldi	r18, 0xFF	; 255
    4d46:	52 16       	cp	r5, r18
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <_Z4tonehjm+0x5e>
    4d4a:	20 c2       	rjmp	.+1088   	; 0x518c <_Z4tonehjm+0x49e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	58 16       	cp	r5, r24
    4d50:	71 f1       	breq	.+92     	; 0x4dae <_Z4tonehjm+0xc0>
    4d52:	85 15       	cp	r24, r5
    4d54:	1c f0       	brlt	.+6      	; 0x4d5c <_Z4tonehjm+0x6e>
    4d56:	55 20       	and	r5, r5
    4d58:	51 f0       	breq	.+20     	; 0x4d6e <_Z4tonehjm+0x80>
    4d5a:	9b c0       	rjmp	.+310    	; 0x4e92 <_Z4tonehjm+0x1a4>
    4d5c:	92 e0       	ldi	r25, 0x02	; 2
    4d5e:	59 16       	cp	r5, r25
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <_Z4tonehjm+0x76>
    4d62:	4b c0       	rjmp	.+150    	; 0x4dfa <_Z4tonehjm+0x10c>
    4d64:	b3 e0       	ldi	r27, 0x03	; 3
    4d66:	5b 16       	cp	r5, r27
    4d68:	09 f0       	breq	.+2      	; 0x4d6c <_Z4tonehjm+0x7e>
    4d6a:	93 c0       	rjmp	.+294    	; 0x4e92 <_Z4tonehjm+0x1a4>
    4d6c:	6c c0       	rjmp	.+216    	; 0x4e46 <_Z4tonehjm+0x158>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    4d6e:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    4d70:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    4d72:	84 b5       	in	r24, 0x24	; 36
    4d74:	82 60       	ori	r24, 0x02	; 2
    4d76:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
    4d78:	85 b5       	in	r24, 0x25	; 37
    4d7a:	81 60       	ori	r24, 0x01	; 1
    4d7c:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    4d7e:	2a 2f       	mov	r18, r26
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	f9 01       	movw	r30, r18
    4d84:	eb 59       	subi	r30, 0x9B	; 155
    4d86:	fe 4f       	sbci	r31, 0xFE	; 254
    4d88:	e4 91       	lpm	r30, Z+
    4d8a:	f0 e0       	ldi	r31, 0x00	; 0
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	ef 5a       	subi	r30, 0xAF	; 175
    4d92:	fe 4f       	sbci	r31, 0xFE	; 254
    4d94:	85 91       	lpm	r24, Z+
    4d96:	94 91       	lpm	r25, Z+
    4d98:	90 93 71 08 	sts	0x0871, r25
    4d9c:	80 93 70 08 	sts	0x0870, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
    4da0:	27 58       	subi	r18, 0x87	; 135
    4da2:	3e 4f       	sbci	r19, 0xFE	; 254
    4da4:	f9 01       	movw	r30, r18
    4da6:	84 91       	lpm	r24, Z+
    4da8:	80 93 72 08 	sts	0x0872, r24
    4dac:	74 c0       	rjmp	.+232    	; 0x4e96 <_Z4tonehjm+0x1a8>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    4dae:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
    4db2:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
    4db6:	80 91 81 00 	lds	r24, 0x0081
    4dba:	88 60       	ori	r24, 0x08	; 8
    4dbc:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
    4dc0:	80 91 81 00 	lds	r24, 0x0081
    4dc4:	81 60       	ori	r24, 0x01	; 1
    4dc6:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    4dca:	2a 2f       	mov	r18, r26
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	f9 01       	movw	r30, r18
    4dd0:	eb 59       	subi	r30, 0x9B	; 155
    4dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd4:	e4 91       	lpm	r30, Z+
    4dd6:	f0 e0       	ldi	r31, 0x00	; 0
    4dd8:	ee 0f       	add	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	ef 5a       	subi	r30, 0xAF	; 175
    4dde:	fe 4f       	sbci	r31, 0xFE	; 254
    4de0:	85 91       	lpm	r24, Z+
    4de2:	94 91       	lpm	r25, Z+
    4de4:	90 93 78 08 	sts	0x0878, r25
    4de8:	80 93 77 08 	sts	0x0877, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
    4dec:	27 58       	subi	r18, 0x87	; 135
    4dee:	3e 4f       	sbci	r19, 0xFE	; 254
    4df0:	f9 01       	movw	r30, r18
    4df2:	84 91       	lpm	r24, Z+
    4df4:	80 93 79 08 	sts	0x0879, r24
    4df8:	4e c0       	rjmp	.+156    	; 0x4e96 <_Z4tonehjm+0x1a8>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    4dfa:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
    4dfe:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
    4e02:	80 91 b0 00 	lds	r24, 0x00B0
    4e06:	82 60       	ori	r24, 0x02	; 2
    4e08:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
    4e0c:	80 91 b1 00 	lds	r24, 0x00B1
    4e10:	81 60       	ori	r24, 0x01	; 1
    4e12:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    4e16:	2a 2f       	mov	r18, r26
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	f9 01       	movw	r30, r18
    4e1c:	eb 59       	subi	r30, 0x9B	; 155
    4e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e20:	e4 91       	lpm	r30, Z+
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	ee 0f       	add	r30, r30
    4e26:	ff 1f       	adc	r31, r31
    4e28:	ef 5a       	subi	r30, 0xAF	; 175
    4e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2c:	85 91       	lpm	r24, Z+
    4e2e:	94 91       	lpm	r25, Z+
    4e30:	90 93 7f 08 	sts	0x087F, r25
    4e34:	80 93 7e 08 	sts	0x087E, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
    4e38:	27 58       	subi	r18, 0x87	; 135
    4e3a:	3e 4f       	sbci	r19, 0xFE	; 254
    4e3c:	f9 01       	movw	r30, r18
    4e3e:	84 91       	lpm	r24, Z+
    4e40:	80 93 80 08 	sts	0x0880, r24
    4e44:	28 c0       	rjmp	.+80     	; 0x4e96 <_Z4tonehjm+0x1a8>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    4e46:	10 92 90 00 	sts	0x0090, r1
        TCCR3B = 0;
    4e4a:	10 92 91 00 	sts	0x0091, r1
        bitWrite(TCCR3B, WGM32, 1);
    4e4e:	80 91 91 00 	lds	r24, 0x0091
    4e52:	88 60       	ori	r24, 0x08	; 8
    4e54:	80 93 91 00 	sts	0x0091, r24
        bitWrite(TCCR3B, CS30, 1);
    4e58:	80 91 91 00 	lds	r24, 0x0091
    4e5c:	81 60       	ori	r24, 0x01	; 1
    4e5e:	80 93 91 00 	sts	0x0091, r24
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    4e62:	2a 2f       	mov	r18, r26
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	f9 01       	movw	r30, r18
    4e68:	eb 59       	subi	r30, 0x9B	; 155
    4e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e6c:	e4 91       	lpm	r30, Z+
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	ee 0f       	add	r30, r30
    4e72:	ff 1f       	adc	r31, r31
    4e74:	ef 5a       	subi	r30, 0xAF	; 175
    4e76:	fe 4f       	sbci	r31, 0xFE	; 254
    4e78:	85 91       	lpm	r24, Z+
    4e7a:	94 91       	lpm	r25, Z+
    4e7c:	90 93 86 08 	sts	0x0886, r25
    4e80:	80 93 85 08 	sts	0x0885, r24
        timer3_pin_mask = digitalPinToBitMask(_pin);
    4e84:	27 58       	subi	r18, 0x87	; 135
    4e86:	3e 4f       	sbci	r19, 0xFE	; 254
    4e88:	f9 01       	movw	r30, r18
    4e8a:	84 91       	lpm	r24, Z+
    4e8c:	80 93 87 08 	sts	0x0887, r24
    4e90:	02 c0       	rjmp	.+4      	; 0x4e96 <_Z4tonehjm+0x1a8>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    4e92:	57 fc       	sbrc	r5, 7
    4e94:	7b c1       	rjmp	.+758    	; 0x518c <_Z4tonehjm+0x49e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    4e96:	8a 2f       	mov	r24, r26
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	4d d3       	rcall	.+1690   	; 0x5536 <pinMode>

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    4e9c:	55 20       	and	r5, r5
    4e9e:	21 f0       	breq	.+8      	; 0x4ea8 <_Z4tonehjm+0x1ba>
    4ea0:	f2 e0       	ldi	r31, 0x02	; 2
    4ea2:	5f 16       	cp	r5, r31
    4ea4:	09 f0       	breq	.+2      	; 0x4ea8 <_Z4tonehjm+0x1ba>
    4ea6:	bd c0       	rjmp	.+378    	; 0x5022 <_Z4tonehjm+0x334>
    {
      ocr = F_CPU / frequency / 2 - 1;
    4ea8:	31 01       	movw	r6, r2
    4eaa:	88 24       	eor	r8, r8
    4eac:	99 24       	eor	r9, r9
    4eae:	60 e0       	ldi	r22, 0x00	; 0
    4eb0:	79 e0       	ldi	r23, 0x09	; 9
    4eb2:	8d e3       	ldi	r24, 0x3D	; 61
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	a4 01       	movw	r20, r8
    4eb8:	93 01       	movw	r18, r6
    4eba:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4ebe:	59 01       	movw	r10, r18
    4ec0:	6a 01       	movw	r12, r20
    4ec2:	86 01       	movw	r16, r12
    4ec4:	75 01       	movw	r14, r10
    4ec6:	08 94       	sec
    4ec8:	e1 08       	sbc	r14, r1
    4eca:	f1 08       	sbc	r15, r1
    4ecc:	01 09       	sbc	r16, r1
    4ece:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    4ed0:	2f ef       	ldi	r18, 0xFF	; 255
    4ed2:	e2 16       	cp	r14, r18
    4ed4:	f1 04       	cpc	r15, r1
    4ed6:	01 05       	cpc	r16, r1
    4ed8:	11 05       	cpc	r17, r1
    4eda:	09 f0       	breq	.+2      	; 0x4ede <_Z4tonehjm+0x1f0>
    4edc:	08 f4       	brcc	.+2      	; 0x4ee0 <_Z4tonehjm+0x1f2>
    4ede:	98 c0       	rjmp	.+304    	; 0x5010 <_Z4tonehjm+0x322>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    4ee0:	60 e2       	ldi	r22, 0x20	; 32
    4ee2:	71 ea       	ldi	r23, 0xA1	; 161
    4ee4:	87 e0       	ldi	r24, 0x07	; 7
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	a4 01       	movw	r20, r8
    4eea:	93 01       	movw	r18, r6
    4eec:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4ef0:	79 01       	movw	r14, r18
    4ef2:	8a 01       	movw	r16, r20
    4ef4:	08 94       	sec
    4ef6:	e1 08       	sbc	r14, r1
    4ef8:	f1 08       	sbc	r15, r1
    4efa:	01 09       	sbc	r16, r1
    4efc:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    4efe:	82 e0       	ldi	r24, 0x02	; 2
    4f00:	58 16       	cp	r5, r24
    4f02:	c1 f4       	brne	.+48     	; 0x4f34 <_Z4tonehjm+0x246>
    4f04:	9f ef       	ldi	r25, 0xFF	; 255
    4f06:	e9 16       	cp	r14, r25
    4f08:	f1 04       	cpc	r15, r1
    4f0a:	01 05       	cpc	r16, r1
    4f0c:	11 05       	cpc	r17, r1
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <_Z4tonehjm+0x224>
    4f10:	08 f4       	brcc	.+2      	; 0x4f14 <_Z4tonehjm+0x226>
    4f12:	83 c0       	rjmp	.+262    	; 0x501a <_Z4tonehjm+0x32c>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    4f14:	68 e4       	ldi	r22, 0x48	; 72
    4f16:	78 ee       	ldi	r23, 0xE8	; 232
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	a4 01       	movw	r20, r8
    4f1e:	93 01       	movw	r18, r6
    4f20:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4f24:	79 01       	movw	r14, r18
    4f26:	8a 01       	movw	r16, r20
    4f28:	08 94       	sec
    4f2a:	e1 08       	sbc	r14, r1
    4f2c:	f1 08       	sbc	r15, r1
    4f2e:	01 09       	sbc	r16, r1
    4f30:	11 09       	sbc	r17, r1
    4f32:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    4f34:	af ef       	ldi	r26, 0xFF	; 255
    4f36:	ea 16       	cp	r14, r26
    4f38:	f1 04       	cpc	r15, r1
    4f3a:	01 05       	cpc	r16, r1
    4f3c:	11 05       	cpc	r17, r1
    4f3e:	09 f0       	breq	.+2      	; 0x4f42 <_Z4tonehjm+0x254>
    4f40:	08 f4       	brcc	.+2      	; 0x4f44 <_Z4tonehjm+0x256>
    4f42:	67 c0       	rjmp	.+206    	; 0x5012 <_Z4tonehjm+0x324>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    4f44:	64 e2       	ldi	r22, 0x24	; 36
    4f46:	74 ef       	ldi	r23, 0xF4	; 244
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	a4 01       	movw	r20, r8
    4f4e:	93 01       	movw	r18, r6
    4f50:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4f54:	79 01       	movw	r14, r18
    4f56:	8a 01       	movw	r16, r20
    4f58:	08 94       	sec
    4f5a:	e1 08       	sbc	r14, r1
    4f5c:	f1 08       	sbc	r15, r1
    4f5e:	01 09       	sbc	r16, r1
    4f60:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    4f62:	55 20       	and	r5, r5
    4f64:	11 f4       	brne	.+4      	; 0x4f6a <_Z4tonehjm+0x27c>
    4f66:	83 e0       	ldi	r24, 0x03	; 3
    4f68:	1d c0       	rjmp	.+58     	; 0x4fa4 <_Z4tonehjm+0x2b6>

          if (_timer == 2 && ocr > 255)
    4f6a:	b2 e0       	ldi	r27, 0x02	; 2
    4f6c:	5b 16       	cp	r5, r27
    4f6e:	11 f0       	breq	.+4      	; 0x4f74 <_Z4tonehjm+0x286>
    4f70:	84 e0       	ldi	r24, 0x04	; 4
    4f72:	18 c0       	rjmp	.+48     	; 0x4fa4 <_Z4tonehjm+0x2b6>
    4f74:	ef ef       	ldi	r30, 0xFF	; 255
    4f76:	ee 16       	cp	r14, r30
    4f78:	f1 04       	cpc	r15, r1
    4f7a:	01 05       	cpc	r16, r1
    4f7c:	11 05       	cpc	r17, r1
    4f7e:	09 f0       	breq	.+2      	; 0x4f82 <_Z4tonehjm+0x294>
    4f80:	08 f4       	brcc	.+2      	; 0x4f84 <_Z4tonehjm+0x296>
    4f82:	02 c1       	rjmp	.+516    	; 0x5188 <_Z4tonehjm+0x49a>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    4f84:	62 e1       	ldi	r22, 0x12	; 18
    4f86:	7a e7       	ldi	r23, 0x7A	; 122
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	a4 01       	movw	r20, r8
    4f8e:	93 01       	movw	r18, r6
    4f90:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4f94:	79 01       	movw	r14, r18
    4f96:	8a 01       	movw	r16, r20
    4f98:	08 94       	sec
    4f9a:	e1 08       	sbc	r14, r1
    4f9c:	f1 08       	sbc	r15, r1
    4f9e:	01 09       	sbc	r16, r1
    4fa0:	11 09       	sbc	r17, r1
    4fa2:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    4fa4:	ff ef       	ldi	r31, 0xFF	; 255
    4fa6:	ef 16       	cp	r14, r31
    4fa8:	f1 04       	cpc	r15, r1
    4faa:	01 05       	cpc	r16, r1
    4fac:	11 05       	cpc	r17, r1
    4fae:	89 f1       	breq	.+98     	; 0x5012 <_Z4tonehjm+0x324>
    4fb0:	80 f1       	brcs	.+96     	; 0x5012 <_Z4tonehjm+0x324>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    4fb2:	69 e0       	ldi	r22, 0x09	; 9
    4fb4:	7d e3       	ldi	r23, 0x3D	; 61
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	a4 01       	movw	r20, r8
    4fbc:	93 01       	movw	r18, r6
    4fbe:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    4fc2:	79 01       	movw	r14, r18
    4fc4:	8a 01       	movw	r16, r20
    4fc6:	08 94       	sec
    4fc8:	e1 08       	sbc	r14, r1
    4fca:	f1 08       	sbc	r15, r1
    4fcc:	01 09       	sbc	r16, r1
    4fce:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    4fd0:	55 20       	and	r5, r5
    4fd2:	11 f0       	breq	.+4      	; 0x4fd8 <_Z4tonehjm+0x2ea>
    4fd4:	86 e0       	ldi	r24, 0x06	; 6
    4fd6:	01 c0       	rjmp	.+2      	; 0x4fda <_Z4tonehjm+0x2ec>
    4fd8:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
    4fda:	2f ef       	ldi	r18, 0xFF	; 255
    4fdc:	e2 16       	cp	r14, r18
    4fde:	f1 04       	cpc	r15, r1
    4fe0:	01 05       	cpc	r16, r1
    4fe2:	11 05       	cpc	r17, r1
    4fe4:	b1 f0       	breq	.+44     	; 0x5012 <_Z4tonehjm+0x324>
    4fe6:	a8 f0       	brcs	.+42     	; 0x5012 <_Z4tonehjm+0x324>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    4fe8:	86 01       	movw	r16, r12
    4fea:	75 01       	movw	r14, r10
    4fec:	9a e0       	ldi	r25, 0x0A	; 10
    4fee:	16 95       	lsr	r17
    4ff0:	07 95       	ror	r16
    4ff2:	f7 94       	ror	r15
    4ff4:	e7 94       	ror	r14
    4ff6:	9a 95       	dec	r25
    4ff8:	d1 f7       	brne	.-12     	; 0x4fee <_Z4tonehjm+0x300>
    4ffa:	08 94       	sec
    4ffc:	e1 08       	sbc	r14, r1
    4ffe:	f1 08       	sbc	r15, r1
    5000:	01 09       	sbc	r16, r1
    5002:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    5004:	55 20       	and	r5, r5
    5006:	11 f0       	breq	.+4      	; 0x500c <_Z4tonehjm+0x31e>
    5008:	87 e0       	ldi	r24, 0x07	; 7
    500a:	08 c0       	rjmp	.+16     	; 0x501c <_Z4tonehjm+0x32e>
    500c:	85 e0       	ldi	r24, 0x05	; 5
    500e:	03 c0       	rjmp	.+6      	; 0x5016 <_Z4tonehjm+0x328>
    5010:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    5012:	55 20       	and	r5, r5
    5014:	19 f4       	brne	.+6      	; 0x501c <_Z4tonehjm+0x32e>
      {
        TCCR0B = prescalarbits;
    5016:	85 bd       	out	0x25, r24	; 37
    5018:	44 c0       	rjmp	.+136    	; 0x50a2 <_Z4tonehjm+0x3b4>
    501a:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
    501c:	80 93 b1 00 	sts	0x00B1, r24
    5020:	40 c0       	rjmp	.+128    	; 0x50a2 <_Z4tonehjm+0x3b4>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    5022:	51 01       	movw	r10, r2
    5024:	cc 24       	eor	r12, r12
    5026:	dd 24       	eor	r13, r13
    5028:	60 e0       	ldi	r22, 0x00	; 0
    502a:	79 e0       	ldi	r23, 0x09	; 9
    502c:	8d e3       	ldi	r24, 0x3D	; 61
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	a6 01       	movw	r20, r12
    5032:	95 01       	movw	r18, r10
    5034:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    5038:	79 01       	movw	r14, r18
    503a:	8a 01       	movw	r16, r20
    503c:	08 94       	sec
    503e:	e1 08       	sbc	r14, r1
    5040:	f1 08       	sbc	r15, r1
    5042:	01 09       	sbc	r16, r1
    5044:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	e8 16       	cp	r14, r24
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	f8 06       	cpc	r15, r24
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	08 07       	cpc	r16, r24
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	18 07       	cpc	r17, r24
    5056:	10 f4       	brcc	.+4      	; 0x505c <_Z4tonehjm+0x36e>
    5058:	91 e0       	ldi	r25, 0x01	; 1
    505a:	10 c0       	rjmp	.+32     	; 0x507c <_Z4tonehjm+0x38e>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    505c:	64 e2       	ldi	r22, 0x24	; 36
    505e:	74 ef       	ldi	r23, 0xF4	; 244
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	a6 01       	movw	r20, r12
    5066:	95 01       	movw	r18, r10
    5068:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    506c:	79 01       	movw	r14, r18
    506e:	8a 01       	movw	r16, r20
    5070:	08 94       	sec
    5072:	e1 08       	sbc	r14, r1
    5074:	f1 08       	sbc	r15, r1
    5076:	01 09       	sbc	r16, r1
    5078:	11 09       	sbc	r17, r1
    507a:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    507c:	a1 e0       	ldi	r26, 0x01	; 1
    507e:	5a 16       	cp	r5, r26
    5080:	39 f4       	brne	.+14     	; 0x5090 <_Z4tonehjm+0x3a2>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    5082:	80 91 81 00 	lds	r24, 0x0081
    5086:	88 7f       	andi	r24, 0xF8	; 248
    5088:	98 2b       	or	r25, r24
    508a:	90 93 81 00 	sts	0x0081, r25
    508e:	09 c0       	rjmp	.+18     	; 0x50a2 <_Z4tonehjm+0x3b4>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    5090:	b3 e0       	ldi	r27, 0x03	; 3
    5092:	5b 16       	cp	r5, r27
    5094:	31 f4       	brne	.+12     	; 0x50a2 <_Z4tonehjm+0x3b4>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    5096:	80 91 91 00 	lds	r24, 0x0091
    509a:	88 7f       	andi	r24, 0xF8	; 248
    509c:	98 2b       	or	r25, r24
    509e:	90 93 91 00 	sts	0x0091, r25

    }
    

    // Calculate the toggle count
    if (duration > 0)
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	9a 81       	ldd	r25, Y+2	; 0x02
    50a6:	ab 81       	ldd	r26, Y+3	; 0x03
    50a8:	bc 81       	ldd	r27, Y+4	; 0x04
    50aa:	00 97       	sbiw	r24, 0x00	; 0
    50ac:	a1 05       	cpc	r26, r1
    50ae:	b1 05       	cpc	r27, r1
    50b0:	29 f4       	brne	.+10     	; 0x50bc <_Z4tonehjm+0x3ce>
    50b2:	8f ef       	ldi	r24, 0xFF	; 255
    50b4:	9f ef       	ldi	r25, 0xFF	; 255
    50b6:	af ef       	ldi	r26, 0xFF	; 255
    50b8:	bf ef       	ldi	r27, 0xFF	; 255
    50ba:	13 c0       	rjmp	.+38     	; 0x50e2 <_Z4tonehjm+0x3f4>
    {
      toggle_count = 2 * frequency * duration / 1000;
    50bc:	22 0c       	add	r2, r2
    50be:	33 1c       	adc	r3, r3
    50c0:	b1 01       	movw	r22, r2
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	29 81       	ldd	r18, Y+1	; 0x01
    50c8:	3a 81       	ldd	r19, Y+2	; 0x02
    50ca:	4b 81       	ldd	r20, Y+3	; 0x03
    50cc:	5c 81       	ldd	r21, Y+4	; 0x04
    50ce:	0e 94 0c 43 	call	0x8618	; 0x8618 <__mulsi3>
    50d2:	28 ee       	ldi	r18, 0xE8	; 232
    50d4:	33 e0       	ldi	r19, 0x03	; 3
    50d6:	40 e0       	ldi	r20, 0x00	; 0
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__udivmodsi4>
    50de:	c9 01       	movw	r24, r18
    50e0:	da 01       	movw	r26, r20
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    50e2:	e1 e0       	ldi	r30, 0x01	; 1
    50e4:	5e 16       	cp	r5, r30
    50e6:	e1 f0       	breq	.+56     	; 0x5120 <_Z4tonehjm+0x432>
    50e8:	e5 15       	cp	r30, r5
    50ea:	1c f0       	brlt	.+6      	; 0x50f2 <_Z4tonehjm+0x404>
    50ec:	55 20       	and	r5, r5
    50ee:	49 f0       	breq	.+18     	; 0x5102 <_Z4tonehjm+0x414>
    50f0:	4d c0       	rjmp	.+154    	; 0x518c <_Z4tonehjm+0x49e>
    50f2:	f2 e0       	ldi	r31, 0x02	; 2
    50f4:	5f 16       	cp	r5, r31
    50f6:	31 f1       	breq	.+76     	; 0x5144 <_Z4tonehjm+0x456>
    50f8:	23 e0       	ldi	r18, 0x03	; 3
    50fa:	52 16       	cp	r5, r18
    50fc:	09 f0       	breq	.+2      	; 0x5100 <_Z4tonehjm+0x412>
    50fe:	46 c0       	rjmp	.+140    	; 0x518c <_Z4tonehjm+0x49e>
    5100:	31 c0       	rjmp	.+98     	; 0x5164 <_Z4tonehjm+0x476>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    5102:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
    5104:	80 93 6c 08 	sts	0x086C, r24
    5108:	90 93 6d 08 	sts	0x086D, r25
    510c:	a0 93 6e 08 	sts	0x086E, r26
    5110:	b0 93 6f 08 	sts	0x086F, r27
        bitWrite(TIMSK0, OCIE0A, 1);
    5114:	80 91 6e 00 	lds	r24, 0x006E
    5118:	82 60       	ori	r24, 0x02	; 2
    511a:	80 93 6e 00 	sts	0x006E, r24
    511e:	36 c0       	rjmp	.+108    	; 0x518c <_Z4tonehjm+0x49e>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    5120:	f0 92 89 00 	sts	0x0089, r15
    5124:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
    5128:	80 93 73 08 	sts	0x0873, r24
    512c:	90 93 74 08 	sts	0x0874, r25
    5130:	a0 93 75 08 	sts	0x0875, r26
    5134:	b0 93 76 08 	sts	0x0876, r27
        bitWrite(TIMSK1, OCIE1A, 1);
    5138:	80 91 6f 00 	lds	r24, 0x006F
    513c:	82 60       	ori	r24, 0x02	; 2
    513e:	80 93 6f 00 	sts	0x006F, r24
    5142:	24 c0       	rjmp	.+72     	; 0x518c <_Z4tonehjm+0x49e>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    5144:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
    5148:	80 93 7a 08 	sts	0x087A, r24
    514c:	90 93 7b 08 	sts	0x087B, r25
    5150:	a0 93 7c 08 	sts	0x087C, r26
    5154:	b0 93 7d 08 	sts	0x087D, r27
        bitWrite(TIMSK2, OCIE2A, 1);
    5158:	80 91 70 00 	lds	r24, 0x0070
    515c:	82 60       	ori	r24, 0x02	; 2
    515e:	80 93 70 00 	sts	0x0070, r24
    5162:	14 c0       	rjmp	.+40     	; 0x518c <_Z4tonehjm+0x49e>
        break;
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
    5164:	f0 92 99 00 	sts	0x0099, r15
    5168:	e0 92 98 00 	sts	0x0098, r14
        timer3_toggle_count = toggle_count;
    516c:	80 93 81 08 	sts	0x0881, r24
    5170:	90 93 82 08 	sts	0x0882, r25
    5174:	a0 93 83 08 	sts	0x0883, r26
    5178:	b0 93 84 08 	sts	0x0884, r27
        bitWrite(TIMSK3, OCIE3A, 1);
    517c:	80 91 71 00 	lds	r24, 0x0071
    5180:	82 60       	ori	r24, 0x02	; 2
    5182:	80 93 71 00 	sts	0x0071, r24
    5186:	02 c0       	rjmp	.+4      	; 0x518c <_Z4tonehjm+0x49e>
        break;
#endif

    }
  }
}
    5188:	84 e0       	ldi	r24, 0x04	; 4
    518a:	48 cf       	rjmp	.-368    	; 0x501c <_Z4tonehjm+0x32e>
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	cf 91       	pop	r28
    5196:	df 91       	pop	r29
    5198:	1f 91       	pop	r17
    519a:	0f 91       	pop	r16
    519c:	ff 90       	pop	r15
    519e:	ef 90       	pop	r14
    51a0:	df 90       	pop	r13
    51a2:	cf 90       	pop	r12
    51a4:	bf 90       	pop	r11
    51a6:	af 90       	pop	r10
    51a8:	9f 90       	pop	r9
    51aa:	8f 90       	pop	r8
    51ac:	7f 90       	pop	r7
    51ae:	6f 90       	pop	r6
    51b0:	5f 90       	pop	r5
    51b2:	3f 90       	pop	r3
    51b4:	2f 90       	pop	r2
    51b6:	08 95       	ret

000051b8 <RingBuffer_Insert>:
		 *
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    51bc:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
    51be:	e8 81       	ld	r30, Y
    51c0:	f9 81       	ldd	r31, Y+1	; 0x01
    51c2:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
    51c4:	88 81       	ld	r24, Y
    51c6:	99 81       	ldd	r25, Y+1	; 0x01
    51c8:	01 96       	adiw	r24, 0x01	; 1
    51ca:	99 83       	std	Y+1, r25	; 0x01
    51cc:	88 83       	st	Y, r24
    51ce:	2e 81       	ldd	r18, Y+6	; 0x06
    51d0:	3f 81       	ldd	r19, Y+7	; 0x07
    51d2:	82 17       	cp	r24, r18
    51d4:	93 07       	cpc	r25, r19
    51d6:	21 f4       	brne	.+8      	; 0x51e0 <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
    51d8:	8c 81       	ldd	r24, Y+4	; 0x04
    51da:	9d 81       	ldd	r25, Y+5	; 0x05
    51dc:	99 83       	std	Y+1, r25	; 0x01
    51de:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    51e0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    51e2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
    51e4:	89 85       	ldd	r24, Y+9	; 0x09
    51e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    51e8:	01 96       	adiw	r24, 0x01	; 1
    51ea:	9a 87       	std	Y+10, r25	; 0x0a
    51ec:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    51ee:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
    51f0:	df 91       	pop	r29
    51f2:	cf 91       	pop	r28
    51f4:	08 95       	ret

000051f6 <_ZN16USBVirtualSerial5beginEm>:

extern "C" {
    #include "Keyglove.h"
}

void USBVirtualSerial::begin(uint32_t baud) { /* no baud setting for virtual serial */ }
    51f6:	08 95       	ret

000051f8 <_ZN16USBVirtualSerial4readEv>:
void USBVirtualSerial::println(uint16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(int32_t val, uint8_t format) { println(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint32_t val, uint8_t format) { println(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::println(double val, uint8_t format) { println(ultoa(val, numStr, DEC)); }

uint8_t USBVirtualSerial::read() { return 0; }
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	08 95       	ret

000051fc <_ZN16USBVirtualSerial9availableEv>:
uint8_t USBVirtualSerial::available() { return 0; }
    51fc:	80 e0       	ldi	r24, 0x00	; 0
    51fe:	08 95       	ret

00005200 <_ZN14HardwareSerial5beginEm>:

void HardwareSerial::begin(uint32_t baud) { /*Serial_Init(baud, false);*/ }
    5200:	08 95       	ret

00005202 <_ZN14HardwareSerial5printEPKc>:
// bool Serial_IsCharReceived();

void HardwareSerial::print(const char *str) { }
    5202:	08 95       	ret

00005204 <_ZN14HardwareSerial5printEh>:
void HardwareSerial::print(uint8_t val) { }
    5204:	08 95       	ret

00005206 <_ZN14HardwareSerial5printEi>:
void HardwareSerial::print(int16_t val) { }
    5206:	08 95       	ret

00005208 <_ZN14HardwareSerial5printEm>:
void HardwareSerial::print(uint32_t val) { }
    5208:	08 95       	ret

0000520a <_ZN14HardwareSerial5printEe>:
void HardwareSerial::print(long double val) { }
    520a:	08 95       	ret

0000520c <_ZN14HardwareSerial5printEPKci>:

void HardwareSerial::print(const char *str, int16_t format) { }
    520c:	08 95       	ret

0000520e <_ZN14HardwareSerial5printEhi>:
void HardwareSerial::print(uint8_t val, int16_t format) { }
    520e:	08 95       	ret

00005210 <_ZN14HardwareSerial5printEii>:
void HardwareSerial::print(int16_t val, int16_t format) { }
    5210:	08 95       	ret

00005212 <_ZN14HardwareSerial5printEmi>:
void HardwareSerial::print(uint32_t val, int16_t format) { }
    5212:	08 95       	ret

00005214 <_ZN14HardwareSerial5printEei>:
void HardwareSerial::print(long double val, int16_t format) { }
    5214:	08 95       	ret

00005216 <_ZN14HardwareSerial7printlnEPKc>:

void HardwareSerial::println(const char *str) { }
    5216:	08 95       	ret

00005218 <_ZN14HardwareSerial7printlnEh>:
void HardwareSerial::println(uint8_t val) { }
    5218:	08 95       	ret

0000521a <_ZN14HardwareSerial7printlnEi>:
void HardwareSerial::println(int16_t val) { }
    521a:	08 95       	ret

0000521c <_ZN14HardwareSerial7printlnEm>:
void HardwareSerial::println(uint32_t val) { }
    521c:	08 95       	ret

0000521e <_ZN14HardwareSerial7printlnEe>:
void HardwareSerial::println(long double val) { }
    521e:	08 95       	ret

00005220 <_ZN14HardwareSerial7printlnEPKci>:

void HardwareSerial::println(const char *str, int16_t format) { }
    5220:	08 95       	ret

00005222 <_ZN14HardwareSerial7printlnEhi>:
void HardwareSerial::println(uint8_t val, int16_t format) { }
    5222:	08 95       	ret

00005224 <_ZN14HardwareSerial7printlnEii>:
void HardwareSerial::println(int16_t val, int16_t format) { }
    5224:	08 95       	ret

00005226 <_ZN14HardwareSerial7printlnEmi>:
void HardwareSerial::println(uint32_t val, int16_t format) { }
    5226:	08 95       	ret

00005228 <_ZN14HardwareSerial7printlnEei>:
void HardwareSerial::println(long double val, int16_t format) { }
    5228:	08 95       	ret

0000522a <_ZN14HardwareSerial4readEv>:

uint8_t HardwareSerial::read() { return 0; }
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	08 95       	ret

0000522e <_ZN14HardwareSerial9availableEv>:
uint8_t HardwareSerial::available() { return 0; }
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	08 95       	ret

00005232 <_ZN11USBKeyboard12set_modifierEh>:
    report[3] = z;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}

void USBKeyboard::set_modifier(uint8_t modifier) {
    5232:	fc 01       	movw	r30, r24
    report[0] = modifier;
    5234:	60 83       	st	Z, r22
}
    5236:	08 95       	ret

00005238 <_ZN11USBKeyboard8set_key1Eh>:
void USBKeyboard::set_key1(uint8_t code) {
    report[2] = code;
    5238:	fc 01       	movw	r30, r24
    523a:	62 83       	std	Z+2, r22	; 0x02
}
    523c:	08 95       	ret

0000523e <_ZN11USBKeyboard8set_key2Eh>:
void USBKeyboard::set_key2(uint8_t code) {
    report[3] = code;
    523e:	fc 01       	movw	r30, r24
    5240:	63 83       	std	Z+3, r22	; 0x03
}
    5242:	08 95       	ret

00005244 <_ZN11USBKeyboard8set_key3Eh>:
void USBKeyboard::set_key3(uint8_t code) {
    report[4] = code;
    5244:	fc 01       	movw	r30, r24
    5246:	64 83       	std	Z+4, r22	; 0x04
}
    5248:	08 95       	ret

0000524a <_ZN11USBKeyboard8set_key4Eh>:
void USBKeyboard::set_key4(uint8_t code) {
    report[5] = code;
    524a:	fc 01       	movw	r30, r24
    524c:	65 83       	std	Z+5, r22	; 0x05
}
    524e:	08 95       	ret

00005250 <_ZN11USBKeyboard8set_key5Eh>:
void USBKeyboard::set_key5(uint8_t code) {
    report[6] = code;
    5250:	fc 01       	movw	r30, r24
    5252:	66 83       	std	Z+6, r22	; 0x06
}
    5254:	08 95       	ret

00005256 <_ZN11USBKeyboard8set_key6Eh>:
void USBKeyboard::set_key6(uint8_t code) {
    report[7] = code;
    5256:	fc 01       	movw	r30, r24
    5258:	67 83       	std	Z+7, r22	; 0x07
}
    525a:	08 95       	ret

0000525c <_ZN7WireI2C5beginEv>:
    HIDReportInData[0] = HID_REPORTID_KeyboardReport;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}

void WireI2C::begin() { }
    525c:	08 95       	ret

0000525e <_ZN7WireI2C17beginTransmissionEi>:
void WireI2C::beginTransmission(int16_t) { }
    525e:	08 95       	ret

00005260 <_ZN7WireI2C15endTransmissionEv>:
void WireI2C::endTransmission() { }
    5260:	08 95       	ret

00005262 <_ZN7WireI2C4sendEh>:
void WireI2C::send(uint8_t) { }
    5262:	08 95       	ret

00005264 <_ZN7WireI2C7receiveEv>:
uint8_t WireI2C::receive() { return 0; }
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	08 95       	ret

00005268 <_ZN7WireI2C11requestFromEii>:
void WireI2C::requestFrom(int16_t, int16_t) { }
    5268:	08 95       	ret

0000526a <_ZN7WireI2C9availableEv>:
bool WireI2C::available() { return false; }
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	08 95       	ret

0000526e <digitalRead>:

int16_t digitalRead(uint8_t pin) {
    526e:	98 2f       	mov	r25, r24
    if (pin >= 0 && pin < 8) {
    5270:	88 30       	cpi	r24, 0x08	; 8
    5272:	60 f4       	brcc	.+24     	; 0x528c <digitalRead+0x1e>
        return PIND & (1 << pin);
    5274:	89 b1       	in	r24, 0x09	; 9
    5276:	41 e0       	ldi	r20, 0x01	; 1
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	02 c0       	rjmp	.+4      	; 0x5280 <digitalRead+0x12>
    527c:	44 0f       	add	r20, r20
    527e:	55 1f       	adc	r21, r21
    5280:	9a 95       	dec	r25
    5282:	e2 f7       	brpl	.-8      	; 0x527c <digitalRead+0xe>
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	48 23       	and	r20, r24
    5288:	59 23       	and	r21, r25
    528a:	4a c0       	rjmp	.+148    	; 0x5320 <digitalRead+0xb2>
    } else if (pin >= 8 && pin < 10) {
    528c:	88 50       	subi	r24, 0x08	; 8
    528e:	82 30       	cpi	r24, 0x02	; 2
    5290:	28 f4       	brcc	.+10     	; 0x529c <digitalRead+0x2e>
        return PINE & (1 << (pin - 8));
    5292:	2c b1       	in	r18, 0x0c	; 12
    5294:	89 2f       	mov	r24, r25
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	08 97       	sbiw	r24, 0x08	; 8
    529a:	38 c0       	rjmp	.+112    	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 10 && pin < 18) {
    529c:	89 2f       	mov	r24, r25
    529e:	8a 50       	subi	r24, 0x0A	; 10
    52a0:	88 30       	cpi	r24, 0x08	; 8
    52a2:	28 f4       	brcc	.+10     	; 0x52ae <digitalRead+0x40>
        return PINC & (1 << (pin - 10));
    52a4:	26 b1       	in	r18, 0x06	; 6
    52a6:	89 2f       	mov	r24, r25
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	0a 97       	sbiw	r24, 0x0a	; 10
    52ac:	2f c0       	rjmp	.+94     	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 18 && pin < 20) {
    52ae:	89 2f       	mov	r24, r25
    52b0:	82 51       	subi	r24, 0x12	; 18
    52b2:	82 30       	cpi	r24, 0x02	; 2
    52b4:	28 f4       	brcc	.+10     	; 0x52c0 <digitalRead+0x52>
        return PINE & (1 << (pin - 18 + 6));
    52b6:	2c b1       	in	r18, 0x0c	; 12
    52b8:	89 2f       	mov	r24, r25
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	0c 97       	sbiw	r24, 0x0c	; 12
    52be:	26 c0       	rjmp	.+76     	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 20 && pin < 28) {
    52c0:	89 2f       	mov	r24, r25
    52c2:	84 51       	subi	r24, 0x14	; 20
    52c4:	88 30       	cpi	r24, 0x08	; 8
    52c6:	28 f4       	brcc	.+10     	; 0x52d2 <digitalRead+0x64>
        return PINB & (1 << (pin - 20));
    52c8:	23 b1       	in	r18, 0x03	; 3
    52ca:	89 2f       	mov	r24, r25
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	44 97       	sbiw	r24, 0x14	; 20
    52d0:	1d c0       	rjmp	.+58     	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 28 && pin < 36) {
    52d2:	89 2f       	mov	r24, r25
    52d4:	8c 51       	subi	r24, 0x1C	; 28
    52d6:	88 30       	cpi	r24, 0x08	; 8
    52d8:	28 f4       	brcc	.+10     	; 0x52e4 <digitalRead+0x76>
        return PINA & (1 << (pin - 28));
    52da:	20 b1       	in	r18, 0x00	; 0
    52dc:	89 2f       	mov	r24, r25
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	4c 97       	sbiw	r24, 0x1c	; 28
    52e2:	14 c0       	rjmp	.+40     	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 36 && pin < 38) {
    52e4:	89 2f       	mov	r24, r25
    52e6:	84 52       	subi	r24, 0x24	; 36
    52e8:	82 30       	cpi	r24, 0x02	; 2
    52ea:	28 f4       	brcc	.+10     	; 0x52f6 <digitalRead+0x88>
        return PINE & (1 << (pin - 36 + 4));
    52ec:	2c b1       	in	r18, 0x0c	; 12
    52ee:	89 2f       	mov	r24, r25
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	80 97       	sbiw	r24, 0x20	; 32
    52f4:	0b c0       	rjmp	.+22     	; 0x530c <digitalRead+0x9e>
    } else if (pin >= 38 && pin < 46) {
    52f6:	89 2f       	mov	r24, r25
    52f8:	86 52       	subi	r24, 0x26	; 38
    52fa:	88 30       	cpi	r24, 0x08	; 8
    52fc:	18 f0       	brcs	.+6      	; 0x5304 <digitalRead+0x96>
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	0e c0       	rjmp	.+28     	; 0x5320 <digitalRead+0xb2>
        return PINF & (1 << (pin - 38));
    5304:	2f b1       	in	r18, 0x0f	; 15
    5306:	89 2f       	mov	r24, r25
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	86 97       	sbiw	r24, 0x26	; 38
    530c:	41 e0       	ldi	r20, 0x01	; 1
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <digitalRead+0xa8>
    5312:	44 0f       	add	r20, r20
    5314:	55 1f       	adc	r21, r21
    5316:	8a 95       	dec	r24
    5318:	e2 f7       	brpl	.-8      	; 0x5312 <digitalRead+0xa4>
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	42 23       	and	r20, r18
    531e:	53 23       	and	r21, r19
    }
    return 0;
}
    5320:	ca 01       	movw	r24, r20
    5322:	08 95       	ret

00005324 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t level) {
    5324:	38 2f       	mov	r19, r24
    if (level == LOW) {
    5326:	66 23       	and	r22, r22
    5328:	09 f0       	breq	.+2      	; 0x532c <digitalWrite+0x8>
    532a:	86 c0       	rjmp	.+268    	; 0x5438 <digitalWrite+0x114>
        if (pin >= 0 && pin < 8) {
    532c:	88 30       	cpi	r24, 0x08	; 8
    532e:	60 f4       	brcc	.+24     	; 0x5348 <digitalWrite+0x24>
            PORTD &= ~(1 << pin);
    5330:	2b b1       	in	r18, 0x0b	; 11
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	02 c0       	rjmp	.+4      	; 0x533c <digitalWrite+0x18>
    5338:	88 0f       	add	r24, r24
    533a:	99 1f       	adc	r25, r25
    533c:	3a 95       	dec	r19
    533e:	e2 f7       	brpl	.-8      	; 0x5338 <digitalWrite+0x14>
    5340:	80 95       	com	r24
    5342:	82 23       	and	r24, r18
    5344:	8b b9       	out	0x0b, r24	; 11
    5346:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    5348:	88 50       	subi	r24, 0x08	; 8
    534a:	82 30       	cpi	r24, 0x02	; 2
    534c:	30 f4       	brcc	.+12     	; 0x535a <digitalWrite+0x36>
            PORTE &= ~(1 << (pin - 8));
    534e:	4e b1       	in	r20, 0x0e	; 14
    5350:	23 2f       	mov	r18, r19
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	28 50       	subi	r18, 0x08	; 8
    5356:	30 40       	sbci	r19, 0x00	; 0
    5358:	4f c0       	rjmp	.+158    	; 0x53f8 <digitalWrite+0xd4>
        } else if (pin >= 10 && pin < 18) {
    535a:	83 2f       	mov	r24, r19
    535c:	8a 50       	subi	r24, 0x0A	; 10
    535e:	88 30       	cpi	r24, 0x08	; 8
    5360:	80 f4       	brcc	.+32     	; 0x5382 <digitalWrite+0x5e>
            PORTC &= ~(1 << (pin - 10));
    5362:	48 b1       	in	r20, 0x08	; 8
    5364:	23 2f       	mov	r18, r19
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	2a 50       	subi	r18, 0x0A	; 10
    536a:	30 40       	sbci	r19, 0x00	; 0
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	02 c0       	rjmp	.+4      	; 0x5376 <digitalWrite+0x52>
    5372:	88 0f       	add	r24, r24
    5374:	99 1f       	adc	r25, r25
    5376:	2a 95       	dec	r18
    5378:	e2 f7       	brpl	.-8      	; 0x5372 <digitalWrite+0x4e>
    537a:	80 95       	com	r24
    537c:	84 23       	and	r24, r20
    537e:	88 b9       	out	0x08, r24	; 8
    5380:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    5382:	83 2f       	mov	r24, r19
    5384:	82 51       	subi	r24, 0x12	; 18
    5386:	82 30       	cpi	r24, 0x02	; 2
    5388:	30 f4       	brcc	.+12     	; 0x5396 <digitalWrite+0x72>
            PORTE &= ~(1 << (pin - 18 + 6));
    538a:	4e b1       	in	r20, 0x0e	; 14
    538c:	23 2f       	mov	r18, r19
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	2c 50       	subi	r18, 0x0C	; 12
    5392:	30 40       	sbci	r19, 0x00	; 0
    5394:	31 c0       	rjmp	.+98     	; 0x53f8 <digitalWrite+0xd4>
        } else if (pin >= 20 && pin < 28) {
    5396:	83 2f       	mov	r24, r19
    5398:	84 51       	subi	r24, 0x14	; 20
    539a:	88 30       	cpi	r24, 0x08	; 8
    539c:	80 f4       	brcc	.+32     	; 0x53be <digitalWrite+0x9a>
            PORTB &= ~(1 << (pin - 20));
    539e:	45 b1       	in	r20, 0x05	; 5
    53a0:	23 2f       	mov	r18, r19
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	24 51       	subi	r18, 0x14	; 20
    53a6:	30 40       	sbci	r19, 0x00	; 0
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	02 c0       	rjmp	.+4      	; 0x53b2 <digitalWrite+0x8e>
    53ae:	88 0f       	add	r24, r24
    53b0:	99 1f       	adc	r25, r25
    53b2:	2a 95       	dec	r18
    53b4:	e2 f7       	brpl	.-8      	; 0x53ae <digitalWrite+0x8a>
    53b6:	80 95       	com	r24
    53b8:	84 23       	and	r24, r20
    53ba:	85 b9       	out	0x05, r24	; 5
    53bc:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    53be:	83 2f       	mov	r24, r19
    53c0:	8c 51       	subi	r24, 0x1C	; 28
    53c2:	88 30       	cpi	r24, 0x08	; 8
    53c4:	80 f4       	brcc	.+32     	; 0x53e6 <digitalWrite+0xc2>
            PORTA &= ~(1 << (pin - 28));
    53c6:	42 b1       	in	r20, 0x02	; 2
    53c8:	23 2f       	mov	r18, r19
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	2c 51       	subi	r18, 0x1C	; 28
    53ce:	30 40       	sbci	r19, 0x00	; 0
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	02 c0       	rjmp	.+4      	; 0x53da <digitalWrite+0xb6>
    53d6:	88 0f       	add	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	2a 95       	dec	r18
    53dc:	e2 f7       	brpl	.-8      	; 0x53d6 <digitalWrite+0xb2>
    53de:	80 95       	com	r24
    53e0:	84 23       	and	r24, r20
    53e2:	82 b9       	out	0x02, r24	; 2
    53e4:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    53e6:	83 2f       	mov	r24, r19
    53e8:	84 52       	subi	r24, 0x24	; 36
    53ea:	82 30       	cpi	r24, 0x02	; 2
    53ec:	80 f4       	brcc	.+32     	; 0x540e <digitalWrite+0xea>
            PORTE &= ~(1 << (pin - 36 + 4));
    53ee:	4e b1       	in	r20, 0x0e	; 14
    53f0:	23 2f       	mov	r18, r19
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	20 52       	subi	r18, 0x20	; 32
    53f6:	30 40       	sbci	r19, 0x00	; 0
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	02 c0       	rjmp	.+4      	; 0x5402 <digitalWrite+0xde>
    53fe:	88 0f       	add	r24, r24
    5400:	99 1f       	adc	r25, r25
    5402:	2a 95       	dec	r18
    5404:	e2 f7       	brpl	.-8      	; 0x53fe <digitalWrite+0xda>
    5406:	80 95       	com	r24
    5408:	84 23       	and	r24, r20
    540a:	8e b9       	out	0x0e, r24	; 14
    540c:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    540e:	83 2f       	mov	r24, r19
    5410:	86 52       	subi	r24, 0x26	; 38
    5412:	88 30       	cpi	r24, 0x08	; 8
    5414:	08 f0       	brcs	.+2      	; 0x5418 <digitalWrite+0xf4>
    5416:	8e c0       	rjmp	.+284    	; 0x5534 <digitalWrite+0x210>
            PORTF &= ~(1 << (pin - 38));
    5418:	41 b3       	in	r20, 0x11	; 17
    541a:	23 2f       	mov	r18, r19
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	26 52       	subi	r18, 0x26	; 38
    5420:	30 40       	sbci	r19, 0x00	; 0
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	02 c0       	rjmp	.+4      	; 0x542c <digitalWrite+0x108>
    5428:	88 0f       	add	r24, r24
    542a:	99 1f       	adc	r25, r25
    542c:	2a 95       	dec	r18
    542e:	e2 f7       	brpl	.-8      	; 0x5428 <digitalWrite+0x104>
    5430:	80 95       	com	r24
    5432:	84 23       	and	r24, r20
    5434:	81 bb       	out	0x11, r24	; 17
    5436:	08 95       	ret
        }
    } else {
        if (pin >= 0 && pin < 8) {
    5438:	88 30       	cpi	r24, 0x08	; 8
    543a:	58 f4       	brcc	.+22     	; 0x5452 <digitalWrite+0x12e>
            PORTD |= (1 << pin);
    543c:	2b b1       	in	r18, 0x0b	; 11
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	02 c0       	rjmp	.+4      	; 0x5448 <digitalWrite+0x124>
    5444:	88 0f       	add	r24, r24
    5446:	99 1f       	adc	r25, r25
    5448:	3a 95       	dec	r19
    544a:	e2 f7       	brpl	.-8      	; 0x5444 <digitalWrite+0x120>
    544c:	28 2b       	or	r18, r24
    544e:	2b b9       	out	0x0b, r18	; 11
    5450:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    5452:	88 50       	subi	r24, 0x08	; 8
    5454:	82 30       	cpi	r24, 0x02	; 2
    5456:	30 f4       	brcc	.+12     	; 0x5464 <digitalWrite+0x140>
            PORTE |= (1 << (pin - 8));
    5458:	4e b1       	in	r20, 0x0e	; 14
    545a:	23 2f       	mov	r18, r19
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	28 50       	subi	r18, 0x08	; 8
    5460:	30 40       	sbci	r19, 0x00	; 0
    5462:	4c c0       	rjmp	.+152    	; 0x54fc <digitalWrite+0x1d8>
        } else if (pin >= 10 && pin < 18) {
    5464:	83 2f       	mov	r24, r19
    5466:	8a 50       	subi	r24, 0x0A	; 10
    5468:	88 30       	cpi	r24, 0x08	; 8
    546a:	78 f4       	brcc	.+30     	; 0x548a <digitalWrite+0x166>
            PORTC |= (1 << (pin - 10));
    546c:	48 b1       	in	r20, 0x08	; 8
    546e:	23 2f       	mov	r18, r19
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	2a 50       	subi	r18, 0x0A	; 10
    5474:	30 40       	sbci	r19, 0x00	; 0
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	02 c0       	rjmp	.+4      	; 0x5480 <digitalWrite+0x15c>
    547c:	88 0f       	add	r24, r24
    547e:	99 1f       	adc	r25, r25
    5480:	2a 95       	dec	r18
    5482:	e2 f7       	brpl	.-8      	; 0x547c <digitalWrite+0x158>
    5484:	48 2b       	or	r20, r24
    5486:	48 b9       	out	0x08, r20	; 8
    5488:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    548a:	83 2f       	mov	r24, r19
    548c:	82 51       	subi	r24, 0x12	; 18
    548e:	82 30       	cpi	r24, 0x02	; 2
    5490:	30 f4       	brcc	.+12     	; 0x549e <digitalWrite+0x17a>
            PORTE |= (1 << (pin - 18 + 6));
    5492:	4e b1       	in	r20, 0x0e	; 14
    5494:	23 2f       	mov	r18, r19
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	2c 50       	subi	r18, 0x0C	; 12
    549a:	30 40       	sbci	r19, 0x00	; 0
    549c:	2f c0       	rjmp	.+94     	; 0x54fc <digitalWrite+0x1d8>
        } else if (pin >= 20 && pin < 28) {
    549e:	83 2f       	mov	r24, r19
    54a0:	84 51       	subi	r24, 0x14	; 20
    54a2:	88 30       	cpi	r24, 0x08	; 8
    54a4:	78 f4       	brcc	.+30     	; 0x54c4 <digitalWrite+0x1a0>
            PORTB |= (1 << (pin - 20));
    54a6:	45 b1       	in	r20, 0x05	; 5
    54a8:	23 2f       	mov	r18, r19
    54aa:	30 e0       	ldi	r19, 0x00	; 0
    54ac:	24 51       	subi	r18, 0x14	; 20
    54ae:	30 40       	sbci	r19, 0x00	; 0
    54b0:	81 e0       	ldi	r24, 0x01	; 1
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	02 c0       	rjmp	.+4      	; 0x54ba <digitalWrite+0x196>
    54b6:	88 0f       	add	r24, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	2a 95       	dec	r18
    54bc:	e2 f7       	brpl	.-8      	; 0x54b6 <digitalWrite+0x192>
    54be:	48 2b       	or	r20, r24
    54c0:	45 b9       	out	0x05, r20	; 5
    54c2:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    54c4:	83 2f       	mov	r24, r19
    54c6:	8c 51       	subi	r24, 0x1C	; 28
    54c8:	88 30       	cpi	r24, 0x08	; 8
    54ca:	78 f4       	brcc	.+30     	; 0x54ea <digitalWrite+0x1c6>
            PORTA |= (1 << (pin - 28));
    54cc:	42 b1       	in	r20, 0x02	; 2
    54ce:	23 2f       	mov	r18, r19
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	2c 51       	subi	r18, 0x1C	; 28
    54d4:	30 40       	sbci	r19, 0x00	; 0
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	02 c0       	rjmp	.+4      	; 0x54e0 <digitalWrite+0x1bc>
    54dc:	88 0f       	add	r24, r24
    54de:	99 1f       	adc	r25, r25
    54e0:	2a 95       	dec	r18
    54e2:	e2 f7       	brpl	.-8      	; 0x54dc <digitalWrite+0x1b8>
    54e4:	48 2b       	or	r20, r24
    54e6:	42 b9       	out	0x02, r20	; 2
    54e8:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    54ea:	83 2f       	mov	r24, r19
    54ec:	84 52       	subi	r24, 0x24	; 36
    54ee:	82 30       	cpi	r24, 0x02	; 2
    54f0:	78 f4       	brcc	.+30     	; 0x5510 <digitalWrite+0x1ec>
            PORTE |= (1 << (pin - 36 + 4));
    54f2:	4e b1       	in	r20, 0x0e	; 14
    54f4:	23 2f       	mov	r18, r19
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	20 52       	subi	r18, 0x20	; 32
    54fa:	30 40       	sbci	r19, 0x00	; 0
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <digitalWrite+0x1e2>
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	2a 95       	dec	r18
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <digitalWrite+0x1de>
    550a:	48 2b       	or	r20, r24
    550c:	4e b9       	out	0x0e, r20	; 14
    550e:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    5510:	83 2f       	mov	r24, r19
    5512:	86 52       	subi	r24, 0x26	; 38
    5514:	88 30       	cpi	r24, 0x08	; 8
    5516:	70 f4       	brcc	.+28     	; 0x5534 <digitalWrite+0x210>
            PORTF |= (1 << (pin - 38));
    5518:	41 b3       	in	r20, 0x11	; 17
    551a:	23 2f       	mov	r18, r19
    551c:	30 e0       	ldi	r19, 0x00	; 0
    551e:	26 52       	subi	r18, 0x26	; 38
    5520:	30 40       	sbci	r19, 0x00	; 0
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	02 c0       	rjmp	.+4      	; 0x552c <digitalWrite+0x208>
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	2a 95       	dec	r18
    552e:	e2 f7       	brpl	.-8      	; 0x5528 <digitalWrite+0x204>
    5530:	48 2b       	or	r20, r24
    5532:	41 bb       	out	0x11, r20	; 17
    5534:	08 95       	ret

00005536 <pinMode>:
        }
    }
}

void pinMode(uint8_t pin, uint8_t mode) {
    5536:	38 2f       	mov	r19, r24
    if (mode == INPUT) {
    5538:	66 23       	and	r22, r22
    553a:	09 f0       	breq	.+2      	; 0x553e <pinMode+0x8>
    553c:	86 c0       	rjmp	.+268    	; 0x564a <pinMode+0x114>
        if (pin >= 0 && pin < 8) {
    553e:	88 30       	cpi	r24, 0x08	; 8
    5540:	60 f4       	brcc	.+24     	; 0x555a <pinMode+0x24>
            DDRD &= ~(1 << pin);
    5542:	2a b1       	in	r18, 0x0a	; 10
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	02 c0       	rjmp	.+4      	; 0x554e <pinMode+0x18>
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	3a 95       	dec	r19
    5550:	e2 f7       	brpl	.-8      	; 0x554a <pinMode+0x14>
    5552:	80 95       	com	r24
    5554:	82 23       	and	r24, r18
    5556:	8a b9       	out	0x0a, r24	; 10
    5558:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    555a:	88 50       	subi	r24, 0x08	; 8
    555c:	82 30       	cpi	r24, 0x02	; 2
    555e:	30 f4       	brcc	.+12     	; 0x556c <pinMode+0x36>
            DDRE &= ~(1 << (pin - 8));
    5560:	4d b1       	in	r20, 0x0d	; 13
    5562:	23 2f       	mov	r18, r19
    5564:	30 e0       	ldi	r19, 0x00	; 0
    5566:	28 50       	subi	r18, 0x08	; 8
    5568:	30 40       	sbci	r19, 0x00	; 0
    556a:	4f c0       	rjmp	.+158    	; 0x560a <pinMode+0xd4>
        } else if (pin >= 10 && pin < 18) {
    556c:	83 2f       	mov	r24, r19
    556e:	8a 50       	subi	r24, 0x0A	; 10
    5570:	88 30       	cpi	r24, 0x08	; 8
    5572:	80 f4       	brcc	.+32     	; 0x5594 <pinMode+0x5e>
            DDRC &= ~(1 << (pin - 10));
    5574:	47 b1       	in	r20, 0x07	; 7
    5576:	23 2f       	mov	r18, r19
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	2a 50       	subi	r18, 0x0A	; 10
    557c:	30 40       	sbci	r19, 0x00	; 0
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	02 c0       	rjmp	.+4      	; 0x5588 <pinMode+0x52>
    5584:	88 0f       	add	r24, r24
    5586:	99 1f       	adc	r25, r25
    5588:	2a 95       	dec	r18
    558a:	e2 f7       	brpl	.-8      	; 0x5584 <pinMode+0x4e>
    558c:	80 95       	com	r24
    558e:	84 23       	and	r24, r20
    5590:	87 b9       	out	0x07, r24	; 7
    5592:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    5594:	83 2f       	mov	r24, r19
    5596:	82 51       	subi	r24, 0x12	; 18
    5598:	82 30       	cpi	r24, 0x02	; 2
    559a:	30 f4       	brcc	.+12     	; 0x55a8 <pinMode+0x72>
            DDRE &= ~(1 << (pin - 18 + 6));
    559c:	4d b1       	in	r20, 0x0d	; 13
    559e:	23 2f       	mov	r18, r19
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	2c 50       	subi	r18, 0x0C	; 12
    55a4:	30 40       	sbci	r19, 0x00	; 0
    55a6:	31 c0       	rjmp	.+98     	; 0x560a <pinMode+0xd4>
        } else if (pin >= 20 && pin < 28) {
    55a8:	83 2f       	mov	r24, r19
    55aa:	84 51       	subi	r24, 0x14	; 20
    55ac:	88 30       	cpi	r24, 0x08	; 8
    55ae:	80 f4       	brcc	.+32     	; 0x55d0 <pinMode+0x9a>
            DDRB &= ~(1 << (pin - 20));
    55b0:	44 b1       	in	r20, 0x04	; 4
    55b2:	23 2f       	mov	r18, r19
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	24 51       	subi	r18, 0x14	; 20
    55b8:	30 40       	sbci	r19, 0x00	; 0
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	02 c0       	rjmp	.+4      	; 0x55c4 <pinMode+0x8e>
    55c0:	88 0f       	add	r24, r24
    55c2:	99 1f       	adc	r25, r25
    55c4:	2a 95       	dec	r18
    55c6:	e2 f7       	brpl	.-8      	; 0x55c0 <pinMode+0x8a>
    55c8:	80 95       	com	r24
    55ca:	84 23       	and	r24, r20
    55cc:	84 b9       	out	0x04, r24	; 4
    55ce:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    55d0:	83 2f       	mov	r24, r19
    55d2:	8c 51       	subi	r24, 0x1C	; 28
    55d4:	88 30       	cpi	r24, 0x08	; 8
    55d6:	80 f4       	brcc	.+32     	; 0x55f8 <pinMode+0xc2>
            DDRA &= ~(1 << (pin - 28));
    55d8:	41 b1       	in	r20, 0x01	; 1
    55da:	23 2f       	mov	r18, r19
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	2c 51       	subi	r18, 0x1C	; 28
    55e0:	30 40       	sbci	r19, 0x00	; 0
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	02 c0       	rjmp	.+4      	; 0x55ec <pinMode+0xb6>
    55e8:	88 0f       	add	r24, r24
    55ea:	99 1f       	adc	r25, r25
    55ec:	2a 95       	dec	r18
    55ee:	e2 f7       	brpl	.-8      	; 0x55e8 <pinMode+0xb2>
    55f0:	80 95       	com	r24
    55f2:	84 23       	and	r24, r20
    55f4:	81 b9       	out	0x01, r24	; 1
    55f6:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    55f8:	83 2f       	mov	r24, r19
    55fa:	84 52       	subi	r24, 0x24	; 36
    55fc:	82 30       	cpi	r24, 0x02	; 2
    55fe:	80 f4       	brcc	.+32     	; 0x5620 <pinMode+0xea>
            DDRE &= ~(1 << (pin - 36 + 4));
    5600:	4d b1       	in	r20, 0x0d	; 13
    5602:	23 2f       	mov	r18, r19
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	20 52       	subi	r18, 0x20	; 32
    5608:	30 40       	sbci	r19, 0x00	; 0
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	02 c0       	rjmp	.+4      	; 0x5614 <pinMode+0xde>
    5610:	88 0f       	add	r24, r24
    5612:	99 1f       	adc	r25, r25
    5614:	2a 95       	dec	r18
    5616:	e2 f7       	brpl	.-8      	; 0x5610 <pinMode+0xda>
    5618:	80 95       	com	r24
    561a:	84 23       	and	r24, r20
    561c:	8d b9       	out	0x0d, r24	; 13
    561e:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    5620:	83 2f       	mov	r24, r19
    5622:	86 52       	subi	r24, 0x26	; 38
    5624:	88 30       	cpi	r24, 0x08	; 8
    5626:	08 f0       	brcs	.+2      	; 0x562a <pinMode+0xf4>
    5628:	8e c0       	rjmp	.+284    	; 0x5746 <pinMode+0x210>
            DDRF &= ~(1 << (pin - 38));
    562a:	40 b3       	in	r20, 0x10	; 16
    562c:	23 2f       	mov	r18, r19
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	26 52       	subi	r18, 0x26	; 38
    5632:	30 40       	sbci	r19, 0x00	; 0
    5634:	81 e0       	ldi	r24, 0x01	; 1
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	02 c0       	rjmp	.+4      	; 0x563e <pinMode+0x108>
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	2a 95       	dec	r18
    5640:	e2 f7       	brpl	.-8      	; 0x563a <pinMode+0x104>
    5642:	80 95       	com	r24
    5644:	84 23       	and	r24, r20
    5646:	80 bb       	out	0x10, r24	; 16
    5648:	08 95       	ret
        }
    } else {
        if (pin >= 0 && pin < 8) {
    564a:	88 30       	cpi	r24, 0x08	; 8
    564c:	58 f4       	brcc	.+22     	; 0x5664 <pinMode+0x12e>
            DDRD |= (1 << pin);
    564e:	2a b1       	in	r18, 0x0a	; 10
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	02 c0       	rjmp	.+4      	; 0x565a <pinMode+0x124>
    5656:	88 0f       	add	r24, r24
    5658:	99 1f       	adc	r25, r25
    565a:	3a 95       	dec	r19
    565c:	e2 f7       	brpl	.-8      	; 0x5656 <pinMode+0x120>
    565e:	28 2b       	or	r18, r24
    5660:	2a b9       	out	0x0a, r18	; 10
    5662:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    5664:	88 50       	subi	r24, 0x08	; 8
    5666:	82 30       	cpi	r24, 0x02	; 2
    5668:	30 f4       	brcc	.+12     	; 0x5676 <pinMode+0x140>
            DDRE |= (1 << (pin - 8));
    566a:	4d b1       	in	r20, 0x0d	; 13
    566c:	23 2f       	mov	r18, r19
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	28 50       	subi	r18, 0x08	; 8
    5672:	30 40       	sbci	r19, 0x00	; 0
    5674:	4c c0       	rjmp	.+152    	; 0x570e <pinMode+0x1d8>
        } else if (pin >= 10 && pin < 18) {
    5676:	83 2f       	mov	r24, r19
    5678:	8a 50       	subi	r24, 0x0A	; 10
    567a:	88 30       	cpi	r24, 0x08	; 8
    567c:	78 f4       	brcc	.+30     	; 0x569c <pinMode+0x166>
            DDRC |= (1 << (pin - 10));
    567e:	47 b1       	in	r20, 0x07	; 7
    5680:	23 2f       	mov	r18, r19
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	2a 50       	subi	r18, 0x0A	; 10
    5686:	30 40       	sbci	r19, 0x00	; 0
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	02 c0       	rjmp	.+4      	; 0x5692 <pinMode+0x15c>
    568e:	88 0f       	add	r24, r24
    5690:	99 1f       	adc	r25, r25
    5692:	2a 95       	dec	r18
    5694:	e2 f7       	brpl	.-8      	; 0x568e <pinMode+0x158>
    5696:	48 2b       	or	r20, r24
    5698:	47 b9       	out	0x07, r20	; 7
    569a:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    569c:	83 2f       	mov	r24, r19
    569e:	82 51       	subi	r24, 0x12	; 18
    56a0:	82 30       	cpi	r24, 0x02	; 2
    56a2:	30 f4       	brcc	.+12     	; 0x56b0 <pinMode+0x17a>
            DDRE |= (1 << (pin - 18 + 6));
    56a4:	4d b1       	in	r20, 0x0d	; 13
    56a6:	23 2f       	mov	r18, r19
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	2c 50       	subi	r18, 0x0C	; 12
    56ac:	30 40       	sbci	r19, 0x00	; 0
    56ae:	2f c0       	rjmp	.+94     	; 0x570e <pinMode+0x1d8>
        } else if (pin >= 20 && pin < 28) {
    56b0:	83 2f       	mov	r24, r19
    56b2:	84 51       	subi	r24, 0x14	; 20
    56b4:	88 30       	cpi	r24, 0x08	; 8
    56b6:	78 f4       	brcc	.+30     	; 0x56d6 <pinMode+0x1a0>
            DDRB |= (1 << (pin - 20));
    56b8:	44 b1       	in	r20, 0x04	; 4
    56ba:	23 2f       	mov	r18, r19
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	24 51       	subi	r18, 0x14	; 20
    56c0:	30 40       	sbci	r19, 0x00	; 0
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	02 c0       	rjmp	.+4      	; 0x56cc <pinMode+0x196>
    56c8:	88 0f       	add	r24, r24
    56ca:	99 1f       	adc	r25, r25
    56cc:	2a 95       	dec	r18
    56ce:	e2 f7       	brpl	.-8      	; 0x56c8 <pinMode+0x192>
    56d0:	48 2b       	or	r20, r24
    56d2:	44 b9       	out	0x04, r20	; 4
    56d4:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    56d6:	83 2f       	mov	r24, r19
    56d8:	8c 51       	subi	r24, 0x1C	; 28
    56da:	88 30       	cpi	r24, 0x08	; 8
    56dc:	78 f4       	brcc	.+30     	; 0x56fc <pinMode+0x1c6>
            DDRA |= (1 << (pin - 28));
    56de:	41 b1       	in	r20, 0x01	; 1
    56e0:	23 2f       	mov	r18, r19
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	2c 51       	subi	r18, 0x1C	; 28
    56e6:	30 40       	sbci	r19, 0x00	; 0
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	02 c0       	rjmp	.+4      	; 0x56f2 <pinMode+0x1bc>
    56ee:	88 0f       	add	r24, r24
    56f0:	99 1f       	adc	r25, r25
    56f2:	2a 95       	dec	r18
    56f4:	e2 f7       	brpl	.-8      	; 0x56ee <pinMode+0x1b8>
    56f6:	48 2b       	or	r20, r24
    56f8:	41 b9       	out	0x01, r20	; 1
    56fa:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    56fc:	83 2f       	mov	r24, r19
    56fe:	84 52       	subi	r24, 0x24	; 36
    5700:	82 30       	cpi	r24, 0x02	; 2
    5702:	78 f4       	brcc	.+30     	; 0x5722 <pinMode+0x1ec>
            DDRE |= (1 << (pin - 36 + 4));
    5704:	4d b1       	in	r20, 0x0d	; 13
    5706:	23 2f       	mov	r18, r19
    5708:	30 e0       	ldi	r19, 0x00	; 0
    570a:	20 52       	subi	r18, 0x20	; 32
    570c:	30 40       	sbci	r19, 0x00	; 0
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	02 c0       	rjmp	.+4      	; 0x5718 <pinMode+0x1e2>
    5714:	88 0f       	add	r24, r24
    5716:	99 1f       	adc	r25, r25
    5718:	2a 95       	dec	r18
    571a:	e2 f7       	brpl	.-8      	; 0x5714 <pinMode+0x1de>
    571c:	48 2b       	or	r20, r24
    571e:	4d b9       	out	0x0d, r20	; 13
    5720:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    5722:	83 2f       	mov	r24, r19
    5724:	86 52       	subi	r24, 0x26	; 38
    5726:	88 30       	cpi	r24, 0x08	; 8
    5728:	70 f4       	brcc	.+28     	; 0x5746 <pinMode+0x210>
            DDRF |= (1 << (pin - 38));
    572a:	40 b3       	in	r20, 0x10	; 16
    572c:	23 2f       	mov	r18, r19
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	26 52       	subi	r18, 0x26	; 38
    5732:	30 40       	sbci	r19, 0x00	; 0
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	02 c0       	rjmp	.+4      	; 0x573e <pinMode+0x208>
    573a:	88 0f       	add	r24, r24
    573c:	99 1f       	adc	r25, r25
    573e:	2a 95       	dec	r18
    5740:	e2 f7       	brpl	.-8      	; 0x573a <pinMode+0x204>
    5742:	48 2b       	or	r20, r24
    5744:	40 bb       	out	0x10, r20	; 16
    5746:	08 95       	ret

00005748 <_ZN11USBKeyboard8send_nowEv>:
}
void USBKeyboard::set_key6(uint8_t code) {
    report[7] = code;
}
void USBKeyboard::send_now() {
    HIDReportInData[0] = HID_REPORTID_KeyboardReport;
    5748:	22 e0       	ldi	r18, 0x02	; 2
    574a:	20 93 0d 04 	sts	0x040D, r18
    memcpy(HIDReportInData + 1, report, 8);
    574e:	ae e0       	ldi	r26, 0x0E	; 14
    5750:	b4 e0       	ldi	r27, 0x04	; 4
    5752:	fc 01       	movw	r30, r24
    5754:	88 e0       	ldi	r24, 0x08	; 8
    5756:	01 90       	ld	r0, Z+
    5758:	0d 92       	st	X+, r0
    575a:	81 50       	subi	r24, 0x01	; 1
    575c:	e1 f7       	brne	.-8      	; 0x5756 <_ZN11USBKeyboard8send_nowEv+0xe>
    HID_Task();
    575e:	0c 94 49 02 	jmp	0x492	; 0x492 <HID_Task>

00005762 <_ZN8USBMouse6scrollEh>:
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    report[0] = (b1 << 2) + (b2 << 1) + b3;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}
void USBMouse::scroll(uint8_t z) {
    5762:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	80 93 0d 04 	sts	0x040D, r24
    report[1] = 0;
    576a:	11 82       	std	Z+1, r1	; 0x01
    report[2] = 0;
    576c:	12 82       	std	Z+2, r1	; 0x02
    report[3] = z;
    576e:	63 83       	std	Z+3, r22	; 0x03
    memcpy(HIDReportInData + 1, report, 8);
    5770:	ae e0       	ldi	r26, 0x0E	; 14
    5772:	b4 e0       	ldi	r27, 0x04	; 4
    5774:	88 e0       	ldi	r24, 0x08	; 8
    5776:	01 90       	ld	r0, Z+
    5778:	0d 92       	st	X+, r0
    577a:	81 50       	subi	r24, 0x01	; 1
    577c:	e1 f7       	brne	.-8      	; 0x5776 <_ZN8USBMouse6scrollEh+0x14>
    HID_Task();
    577e:	0c 94 49 02 	jmp	0x492	; 0x492 <HID_Task>

00005782 <_ZN8USBMouse11set_buttonsEhhh>:
    report[2] = y;
    report[3] = z;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}
void USBMouse::set_buttons(uint8_t b1, uint8_t b2, uint8_t b3) {
    5782:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	80 93 0d 04 	sts	0x040D, r24
    report[0] = (b1 << 2) + (b2 << 1) + b3;
    578a:	44 0f       	add	r20, r20
    578c:	42 0f       	add	r20, r18
    578e:	66 0f       	add	r22, r22
    5790:	66 0f       	add	r22, r22
    5792:	46 0f       	add	r20, r22
    5794:	40 83       	st	Z, r20
    memcpy(HIDReportInData + 1, report, 8);
    5796:	ae e0       	ldi	r26, 0x0E	; 14
    5798:	b4 e0       	ldi	r27, 0x04	; 4
    579a:	88 e0       	ldi	r24, 0x08	; 8
    579c:	01 90       	ld	r0, Z+
    579e:	0d 92       	st	X+, r0
    57a0:	81 50       	subi	r24, 0x01	; 1
    57a2:	e1 f7       	brne	.-8      	; 0x579c <_ZN8USBMouse11set_buttonsEhhh+0x1a>
    HID_Task();
    57a4:	0c 94 49 02 	jmp	0x492	; 0x492 <HID_Task>

000057a8 <_ZN8USBMouse4moveEhhh>:
uint8_t HardwareSerial::available() { return 0; }

void USBMouse::move(uint8_t x, uint8_t y) {
    move(x, y, 0);
}
void USBMouse::move(uint8_t x, uint8_t y, uint8_t z) {
    57a8:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    57aa:	81 e0       	ldi	r24, 0x01	; 1
    57ac:	80 93 0d 04 	sts	0x040D, r24
    report[1] = x;
    57b0:	61 83       	std	Z+1, r22	; 0x01
    report[2] = y;
    57b2:	42 83       	std	Z+2, r20	; 0x02
    report[3] = z;
    57b4:	23 83       	std	Z+3, r18	; 0x03
    memcpy(HIDReportInData + 1, report, 8);
    57b6:	ae e0       	ldi	r26, 0x0E	; 14
    57b8:	b4 e0       	ldi	r27, 0x04	; 4
    57ba:	88 e0       	ldi	r24, 0x08	; 8
    57bc:	01 90       	ld	r0, Z+
    57be:	0d 92       	st	X+, r0
    57c0:	81 50       	subi	r24, 0x01	; 1
    57c2:	e1 f7       	brne	.-8      	; 0x57bc <_ZN8USBMouse4moveEhhh+0x14>
    HID_Task();
    57c4:	0c 94 49 02 	jmp	0x492	; 0x492 <HID_Task>

000057c8 <_ZN8USBMouse4moveEhh>:

uint8_t HardwareSerial::read() { return 0; }
uint8_t HardwareSerial::available() { return 0; }

void USBMouse::move(uint8_t x, uint8_t y) {
    move(x, y, 0);
    57c8:	20 e0       	ldi	r18, 0x00	; 0
}
    57ca:	ee cf       	rjmp	.-36     	; 0x57a8 <_ZN8USBMouse4moveEhhh>

000057cc <_ZN16USBVirtualSerial7printlnEhh>:
void USBVirtualSerial::println(uint16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int32_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint32_t val) { println(val, BYTE); }
void USBVirtualSerial::println(double val) { print(val, BYTE); }

void USBVirtualSerial::println(uint8_t val, uint8_t format) {
    57cc:	0f 93       	push	r16
    57ce:	1f 93       	push	r17
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    57d0:	0a e2       	ldi	r16, 0x2A	; 42
    57d2:	15 e0       	ldi	r17, 0x05	; 5
    57d4:	c8 01       	movw	r24, r16
    57d6:	f0 dc       	rcall	.-1568   	; 0x51b8 <RingBuffer_Insert>
    RingBuffer_Insert(&HostTXSerial_Buffer, '\r');
    57d8:	c8 01       	movw	r24, r16
    57da:	6d e0       	ldi	r22, 0x0D	; 13
    57dc:	ed dc       	rcall	.-1574   	; 0x51b8 <RingBuffer_Insert>
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    57de:	c8 01       	movw	r24, r16
    57e0:	6a e0       	ldi	r22, 0x0A	; 10
    57e2:	ea dc       	rcall	.-1580   	; 0x51b8 <RingBuffer_Insert>
    CDC_Task();
    57e4:	0e 94 84 02 	call	0x508	; 0x508 <CDC_Task>
}
    57e8:	1f 91       	pop	r17
    57ea:	0f 91       	pop	r16
    57ec:	08 95       	ret

000057ee <_ZN16USBVirtualSerial7printlnEh>:
void USBVirtualSerial::print(uint16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(int32_t val, uint8_t format) { print(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint32_t val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::print(double val, uint8_t format) { print(ultoa(val, numStr, DEC)); }

void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
    57ee:	40 e0       	ldi	r20, 0x00	; 0
    57f0:	ed cf       	rjmp	.-38     	; 0x57cc <_ZN16USBVirtualSerial7printlnEhh>

000057f2 <_ZN16USBVirtualSerial5printEhh>:
void USBVirtualSerial::print(int32_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint32_t val) { print(val, BYTE); }
void USBVirtualSerial::print(double val) { print(val, BYTE); }

void USBVirtualSerial::print(uint8_t val, uint8_t format) {
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    57f2:	8a e2       	ldi	r24, 0x2A	; 42
    57f4:	95 e0       	ldi	r25, 0x05	; 5
    57f6:	e0 dc       	rcall	.-1600   	; 0x51b8 <RingBuffer_Insert>
    CDC_Task();
    57f8:	0c 94 84 02 	jmp	0x508	; 0x508 <CDC_Task>

000057fc <_ZN16USBVirtualSerial5printEh>:
    RingBuffer_Insert(&HostTXSerial_Buffer, '\r');
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    CDC_Task();
}

void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
    57fc:	40 e0       	ldi	r20, 0x00	; 0
    57fe:	f9 cf       	rjmp	.-14     	; 0x57f2 <_ZN16USBVirtualSerial5printEhh>

00005800 <_ZN16USBVirtualSerial7printlnEPKc>:

void USBVirtualSerial::print(const char *str) {
    for (uint16_t i = 0; i < strlen(str); i++) RingBuffer_Insert(&HostTXSerial_Buffer, str[i]);
    CDC_Task();
}
void USBVirtualSerial::println(const char *str) {
    5800:	0f 93       	push	r16
    5802:	1f 93       	push	r17
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	8b 01       	movw	r16, r22
    580a:	c0 e0       	ldi	r28, 0x00	; 0
    580c:	d0 e0       	ldi	r29, 0x00	; 0
    580e:	08 c0       	rjmp	.+16     	; 0x5820 <_ZN16USBVirtualSerial7printlnEPKc+0x20>
    for (uint16_t i = 0; i < strlen(str); i++) RingBuffer_Insert(&HostTXSerial_Buffer, str[i]);
    5810:	f8 01       	movw	r30, r16
    5812:	ec 0f       	add	r30, r28
    5814:	fd 1f       	adc	r31, r29
    5816:	8a e2       	ldi	r24, 0x2A	; 42
    5818:	95 e0       	ldi	r25, 0x05	; 5
    581a:	60 81       	ld	r22, Z
    581c:	cd dc       	rcall	.-1638   	; 0x51b8 <RingBuffer_Insert>
    581e:	21 96       	adiw	r28, 0x01	; 1
    5820:	f8 01       	movw	r30, r16
    5822:	01 90       	ld	r0, Z+
    5824:	00 20       	and	r0, r0
    5826:	e9 f7       	brne	.-6      	; 0x5822 <_ZN16USBVirtualSerial7printlnEPKc+0x22>
    5828:	31 97       	sbiw	r30, 0x01	; 1
    582a:	e0 1b       	sub	r30, r16
    582c:	f1 0b       	sbc	r31, r17
    582e:	ce 17       	cp	r28, r30
    5830:	df 07       	cpc	r29, r31
    5832:	70 f3       	brcs	.-36     	; 0x5810 <_ZN16USBVirtualSerial7printlnEPKc+0x10>
    RingBuffer_Insert(&HostTXSerial_Buffer, '\r');
    5834:	8a e2       	ldi	r24, 0x2A	; 42
    5836:	95 e0       	ldi	r25, 0x05	; 5
    5838:	6d e0       	ldi	r22, 0x0D	; 13
    583a:	be dc       	rcall	.-1668   	; 0x51b8 <RingBuffer_Insert>
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    583c:	8a e2       	ldi	r24, 0x2A	; 42
    583e:	95 e0       	ldi	r25, 0x05	; 5
    5840:	6a e0       	ldi	r22, 0x0A	; 10
    5842:	ba dc       	rcall	.-1676   	; 0x51b8 <RingBuffer_Insert>
    CDC_Task();
    5844:	0e 94 84 02 	call	0x508	; 0x508 <CDC_Task>
}
    5848:	df 91       	pop	r29
    584a:	cf 91       	pop	r28
    584c:	1f 91       	pop	r17
    584e:	0f 91       	pop	r16
    5850:	08 95       	ret

00005852 <_ZN16USBVirtualSerial7printlnEdh>:
}
void USBVirtualSerial::println(int16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(int32_t val, uint8_t format) { println(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint32_t val, uint8_t format) { println(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::println(double val, uint8_t format) { println(ultoa(val, numStr, DEC)); }
    5852:	0f 93       	push	r16
    5854:	1f 93       	push	r17
    5856:	8c 01       	movw	r16, r24
    5858:	cb 01       	movw	r24, r22
    585a:	ba 01       	movw	r22, r20
    585c:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    5860:	a8 01       	movw	r20, r16
    5862:	2a e0       	ldi	r18, 0x0A	; 10
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	0e 94 cb 43 	call	0x8796	; 0x8796 <ultoa>
    586a:	bc 01       	movw	r22, r24
    586c:	c8 01       	movw	r24, r16
    586e:	c8 df       	rcall	.-112    	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    5870:	1f 91       	pop	r17
    5872:	0f 91       	pop	r16
    5874:	08 95       	ret

00005876 <_ZN16USBVirtualSerial7printlnEmh>:
    CDC_Task();
}
void USBVirtualSerial::println(int16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(int32_t val, uint8_t format) { println(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint32_t val, uint8_t format) { println(ultoa(val, numStr, DEC)); }
    5876:	0f 93       	push	r16
    5878:	1f 93       	push	r17
    587a:	8c 01       	movw	r16, r24
    587c:	cb 01       	movw	r24, r22
    587e:	ba 01       	movw	r22, r20
    5880:	a8 01       	movw	r20, r16
    5882:	2a e0       	ldi	r18, 0x0A	; 10
    5884:	30 e0       	ldi	r19, 0x00	; 0
    5886:	0e 94 cb 43 	call	0x8796	; 0x8796 <ultoa>
    588a:	bc 01       	movw	r22, r24
    588c:	c8 01       	movw	r24, r16
    588e:	b8 df       	rcall	.-144    	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    5890:	1f 91       	pop	r17
    5892:	0f 91       	pop	r16
    5894:	08 95       	ret

00005896 <_ZN16USBVirtualSerial7printlnEm>:

void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int32_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint32_t val) { println(val, BYTE); }
    5896:	20 e0       	ldi	r18, 0x00	; 0
    5898:	ee cf       	rjmp	.-36     	; 0x5876 <_ZN16USBVirtualSerial7printlnEmh>

0000589a <_ZN16USBVirtualSerial7printlnElh>:
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    CDC_Task();
}
void USBVirtualSerial::println(int16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(int32_t val, uint8_t format) { println(ltoa(val, numStr, DEC)); }
    589a:	0f 93       	push	r16
    589c:	1f 93       	push	r17
    589e:	8c 01       	movw	r16, r24
    58a0:	cb 01       	movw	r24, r22
    58a2:	ba 01       	movw	r22, r20
    58a4:	a8 01       	movw	r20, r16
    58a6:	2a e0       	ldi	r18, 0x0A	; 10
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	0e 94 99 43 	call	0x8732	; 0x8732 <ltoa>
    58ae:	bc 01       	movw	r22, r24
    58b0:	c8 01       	movw	r24, r16
    58b2:	a6 df       	rcall	.-180    	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    58b4:	1f 91       	pop	r17
    58b6:	0f 91       	pop	r16
    58b8:	08 95       	ret

000058ba <_ZN16USBVirtualSerial7printlnEl>:
void USBVirtualSerial::print(double val, uint8_t format) { print(ultoa(val, numStr, DEC)); }

void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int32_t val) { println(val, BYTE); }
    58ba:	20 e0       	ldi	r18, 0x00	; 0
    58bc:	ee cf       	rjmp	.-36     	; 0x589a <_ZN16USBVirtualSerial7printlnElh>

000058be <_ZN16USBVirtualSerial7printlnEjh>:
    RingBuffer_Insert(&HostTXSerial_Buffer, '\r');
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    CDC_Task();
}
void USBVirtualSerial::println(int16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
void USBVirtualSerial::println(uint16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
    58be:	0f 93       	push	r16
    58c0:	1f 93       	push	r17
    58c2:	8c 01       	movw	r16, r24
    58c4:	cb 01       	movw	r24, r22
    58c6:	b8 01       	movw	r22, r16
    58c8:	4a e0       	ldi	r20, 0x0A	; 10
    58ca:	50 e0       	ldi	r21, 0x00	; 0
    58cc:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <itoa>
    58d0:	bc 01       	movw	r22, r24
    58d2:	c8 01       	movw	r24, r16
    58d4:	95 df       	rcall	.-214    	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	08 95       	ret

000058dc <_ZN16USBVirtualSerial7printlnEj>:
void USBVirtualSerial::print(uint32_t val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::print(double val, uint8_t format) { print(ultoa(val, numStr, DEC)); }

void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint16_t val) { println(val, BYTE); }
    58dc:	40 e0       	ldi	r20, 0x00	; 0
    58de:	ef cf       	rjmp	.-34     	; 0x58be <_ZN16USBVirtualSerial7printlnEjh>

000058e0 <_ZN16USBVirtualSerial7printlnEih>:
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    RingBuffer_Insert(&HostTXSerial_Buffer, '\r');
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    CDC_Task();
}
void USBVirtualSerial::println(int16_t val, uint8_t format) { println(itoa(val, numStr, DEC)); }
    58e0:	0f 93       	push	r16
    58e2:	1f 93       	push	r17
    58e4:	8c 01       	movw	r16, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	b8 01       	movw	r22, r16
    58ea:	4a e0       	ldi	r20, 0x0A	; 10
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <itoa>
    58f2:	bc 01       	movw	r22, r24
    58f4:	c8 01       	movw	r24, r16
    58f6:	84 df       	rcall	.-248    	; 0x5800 <_ZN16USBVirtualSerial7printlnEPKc>
    58f8:	1f 91       	pop	r17
    58fa:	0f 91       	pop	r16
    58fc:	08 95       	ret

000058fe <_ZN16USBVirtualSerial7printlnEi>:
void USBVirtualSerial::print(int32_t val, uint8_t format) { print(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint32_t val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::print(double val, uint8_t format) { print(ultoa(val, numStr, DEC)); }

void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int16_t val) { println(val, BYTE); }
    58fe:	40 e0       	ldi	r20, 0x00	; 0
    5900:	ef cf       	rjmp	.-34     	; 0x58e0 <_ZN16USBVirtualSerial7printlnEih>

00005902 <_ZN16USBVirtualSerial5printEPKc>:
    #include "Keyglove.h"
}

void USBVirtualSerial::begin(uint32_t baud) { /* no baud setting for virtual serial */ }

void USBVirtualSerial::print(const char *str) {
    5902:	0f 93       	push	r16
    5904:	1f 93       	push	r17
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	8b 01       	movw	r16, r22
    590c:	c0 e0       	ldi	r28, 0x00	; 0
    590e:	d0 e0       	ldi	r29, 0x00	; 0
    5910:	08 c0       	rjmp	.+16     	; 0x5922 <_ZN16USBVirtualSerial5printEPKc+0x20>
    for (uint16_t i = 0; i < strlen(str); i++) RingBuffer_Insert(&HostTXSerial_Buffer, str[i]);
    5912:	f8 01       	movw	r30, r16
    5914:	ec 0f       	add	r30, r28
    5916:	fd 1f       	adc	r31, r29
    5918:	8a e2       	ldi	r24, 0x2A	; 42
    591a:	95 e0       	ldi	r25, 0x05	; 5
    591c:	60 81       	ld	r22, Z
    591e:	4c dc       	rcall	.-1896   	; 0x51b8 <RingBuffer_Insert>
    5920:	21 96       	adiw	r28, 0x01	; 1
    5922:	f8 01       	movw	r30, r16
    5924:	01 90       	ld	r0, Z+
    5926:	00 20       	and	r0, r0
    5928:	e9 f7       	brne	.-6      	; 0x5924 <_ZN16USBVirtualSerial5printEPKc+0x22>
    592a:	31 97       	sbiw	r30, 0x01	; 1
    592c:	e0 1b       	sub	r30, r16
    592e:	f1 0b       	sbc	r31, r17
    5930:	ce 17       	cp	r28, r30
    5932:	df 07       	cpc	r29, r31
    5934:	70 f3       	brcs	.-36     	; 0x5912 <_ZN16USBVirtualSerial5printEPKc+0x10>
    CDC_Task();
    5936:	0e 94 84 02 	call	0x508	; 0x508 <CDC_Task>
}
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	1f 91       	pop	r17
    5940:	0f 91       	pop	r16
    5942:	08 95       	ret

00005944 <_ZN16USBVirtualSerial5printEdh>:
}
void USBVirtualSerial::print(int16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(int32_t val, uint8_t format) { print(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint32_t val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
void USBVirtualSerial::print(double val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
    5944:	0f 93       	push	r16
    5946:	1f 93       	push	r17
    5948:	8c 01       	movw	r16, r24
    594a:	cb 01       	movw	r24, r22
    594c:	ba 01       	movw	r22, r20
    594e:	0e 94 3e 40 	call	0x807c	; 0x807c <__fixunssfsi>
    5952:	a8 01       	movw	r20, r16
    5954:	2a e0       	ldi	r18, 0x0A	; 10
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	0e 94 cb 43 	call	0x8796	; 0x8796 <ultoa>
    595c:	bc 01       	movw	r22, r24
    595e:	c8 01       	movw	r24, r16
    5960:	d0 df       	rcall	.-96     	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    5962:	1f 91       	pop	r17
    5964:	0f 91       	pop	r16
    5966:	08 95       	ret

00005968 <_ZN16USBVirtualSerial7printlnEd>:
void USBVirtualSerial::println(uint8_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint16_t val) { println(val, BYTE); }
void USBVirtualSerial::println(int32_t val) { println(val, BYTE); }
void USBVirtualSerial::println(uint32_t val) { println(val, BYTE); }
void USBVirtualSerial::println(double val) { print(val, BYTE); }
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	ec cf       	rjmp	.-40     	; 0x5944 <_ZN16USBVirtualSerial5printEdh>

0000596c <_ZN16USBVirtualSerial5printEd>:
void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int32_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint32_t val) { print(val, BYTE); }
void USBVirtualSerial::print(double val) { print(val, BYTE); }
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	ea cf       	rjmp	.-44     	; 0x5944 <_ZN16USBVirtualSerial5printEdh>

00005970 <_ZN16USBVirtualSerial5printEmh>:
    CDC_Task();
}
void USBVirtualSerial::print(int16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(int32_t val, uint8_t format) { print(ltoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint32_t val, uint8_t format) { print(ultoa(val, numStr, DEC)); }
    5970:	0f 93       	push	r16
    5972:	1f 93       	push	r17
    5974:	8c 01       	movw	r16, r24
    5976:	cb 01       	movw	r24, r22
    5978:	ba 01       	movw	r22, r20
    597a:	a8 01       	movw	r20, r16
    597c:	2a e0       	ldi	r18, 0x0A	; 10
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	0e 94 cb 43 	call	0x8796	; 0x8796 <ultoa>
    5984:	bc 01       	movw	r22, r24
    5986:	c8 01       	movw	r24, r16
    5988:	bc df       	rcall	.-136    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    598a:	1f 91       	pop	r17
    598c:	0f 91       	pop	r16
    598e:	08 95       	ret

00005990 <_ZN16USBVirtualSerial5printEm>:

void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int32_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint32_t val) { print(val, BYTE); }
    5990:	20 e0       	ldi	r18, 0x00	; 0
    5992:	ee cf       	rjmp	.-36     	; 0x5970 <_ZN16USBVirtualSerial5printEmh>

00005994 <_ZN16USBVirtualSerial5printElh>:
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    CDC_Task();
}
void USBVirtualSerial::print(int16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(int32_t val, uint8_t format) { print(ltoa(val, numStr, DEC)); }
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	8c 01       	movw	r16, r24
    599a:	cb 01       	movw	r24, r22
    599c:	ba 01       	movw	r22, r20
    599e:	a8 01       	movw	r20, r16
    59a0:	2a e0       	ldi	r18, 0x0A	; 10
    59a2:	30 e0       	ldi	r19, 0x00	; 0
    59a4:	0e 94 99 43 	call	0x8732	; 0x8732 <ltoa>
    59a8:	bc 01       	movw	r22, r24
    59aa:	c8 01       	movw	r24, r16
    59ac:	aa df       	rcall	.-172    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    59ae:	1f 91       	pop	r17
    59b0:	0f 91       	pop	r16
    59b2:	08 95       	ret

000059b4 <_ZN16USBVirtualSerial5printEl>:
}

void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int32_t val) { print(val, BYTE); }
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	ee cf       	rjmp	.-36     	; 0x5994 <_ZN16USBVirtualSerial5printElh>

000059b8 <_ZN16USBVirtualSerial5printEjh>:
void USBVirtualSerial::print(uint8_t val, uint8_t format) {
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    CDC_Task();
}
void USBVirtualSerial::print(int16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
void USBVirtualSerial::print(uint16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
    59b8:	0f 93       	push	r16
    59ba:	1f 93       	push	r17
    59bc:	8c 01       	movw	r16, r24
    59be:	cb 01       	movw	r24, r22
    59c0:	b8 01       	movw	r22, r16
    59c2:	4a e0       	ldi	r20, 0x0A	; 10
    59c4:	50 e0       	ldi	r21, 0x00	; 0
    59c6:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <itoa>
    59ca:	bc 01       	movw	r22, r24
    59cc:	c8 01       	movw	r24, r16
    59ce:	99 df       	rcall	.-206    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	08 95       	ret

000059d6 <_ZN16USBVirtualSerial5printEj>:
    CDC_Task();
}

void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int16_t val) { print(val, BYTE); }
void USBVirtualSerial::print(uint16_t val) { print(val, BYTE); }
    59d6:	40 e0       	ldi	r20, 0x00	; 0
    59d8:	ef cf       	rjmp	.-34     	; 0x59b8 <_ZN16USBVirtualSerial5printEjh>

000059da <_ZN16USBVirtualSerial5printEih>:

void USBVirtualSerial::print(uint8_t val, uint8_t format) {
    RingBuffer_Insert(&HostTXSerial_Buffer, val);
    CDC_Task();
}
void USBVirtualSerial::print(int16_t val, uint8_t format) { print(itoa(val, numStr, DEC)); }
    59da:	0f 93       	push	r16
    59dc:	1f 93       	push	r17
    59de:	8c 01       	movw	r16, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	b8 01       	movw	r22, r16
    59e4:	4a e0       	ldi	r20, 0x0A	; 10
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <itoa>
    59ec:	bc 01       	movw	r22, r24
    59ee:	c8 01       	movw	r24, r16
    59f0:	88 df       	rcall	.-240    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    59f2:	1f 91       	pop	r17
    59f4:	0f 91       	pop	r16
    59f6:	08 95       	ret

000059f8 <_ZN16USBVirtualSerial5printEi>:
    RingBuffer_Insert(&HostTXSerial_Buffer, '\n');
    CDC_Task();
}

void USBVirtualSerial::print(uint8_t val) { print(val, BYTE); }
void USBVirtualSerial::print(int16_t val) { print(val, BYTE); }
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	ef cf       	rjmp	.-34     	; 0x59da <_ZN16USBVirtualSerial5printEih>

000059fc <_ZN7ADXL345C2Ev>:
#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

ADXL345::ADXL345() {

}
    59fc:	08 95       	ret

000059fe <_ZN7ADXL345C1Ev>:
    59fe:	08 95       	ret

00005a00 <_ZN7ADXL3457writeToEihh>:
  *y = (((int16_t)_buff[3]) << 8) | _buff[2];
  *z = (((int16_t)_buff[5]) << 8) | _buff[4];
}

// Writes val to address register on device
void ADXL345::writeTo(int16_t device, uint8_t address, uint8_t val) {
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	f4 2e       	mov	r15, r20
    5a0a:	e2 2e       	mov	r14, r18
  Wire.beginTransmission(device); // start transmission to device 
    5a0c:	08 eb       	ldi	r16, 0xB8	; 184
    5a0e:	18 e0       	ldi	r17, 0x08	; 8
    5a10:	c8 01       	movw	r24, r16
    5a12:	25 dc       	rcall	.-1974   	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(address);             // send register address
    5a14:	c8 01       	movw	r24, r16
    5a16:	6f 2d       	mov	r22, r15
    5a18:	24 dc       	rcall	.-1976   	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.send(val);                 // send value to write
    5a1a:	c8 01       	movw	r24, r16
    5a1c:	6e 2d       	mov	r22, r14
    5a1e:	21 dc       	rcall	.-1982   	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.endTransmission();         // end transmission
    5a20:	c8 01       	movw	r24, r16
    5a22:	1e dc       	rcall	.-1988   	; 0x5260 <_ZN7WireI2C15endTransmissionEv>
}
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	ff 90       	pop	r15
    5a2a:	ef 90       	pop	r14
    5a2c:	08 95       	ret

00005a2e <_ZN7ADXL34519setFreeFallDurationEi>:
// Sets the TIME_FF register, which holds an unsigned time value representing the minimum
// time that the RSS value of all axes must be less than THRESH_FF to generate a free-fall 
// interrupt. The scale factor is 5ms/LSB. A value of 0 may result in undesirable behavior if
// the free-fall interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallDuration(int16_t freeFallDuration) {
  freeFallDuration = min(max(freeFallDuration,0),255);  
    5a2e:	6f 3f       	cpi	r22, 0xFF	; 255
    5a30:	71 05       	cpc	r23, r1
    5a32:	1c f0       	brlt	.+6      	; 0x5a3a <_ZN7ADXL34519setFreeFallDurationEi+0xc>
    5a34:	2f ef       	ldi	r18, 0xFF	; 255
    5a36:	30 e0       	ldi	r19, 0x00	; 0
    5a38:	05 c0       	rjmp	.+10     	; 0x5a44 <_ZN7ADXL34519setFreeFallDurationEi+0x16>
    5a3a:	9b 01       	movw	r18, r22
    5a3c:	77 ff       	sbrs	r23, 7
    5a3e:	02 c0       	rjmp	.+4      	; 0x5a44 <_ZN7ADXL34519setFreeFallDurationEi+0x16>
    5a40:	20 e0       	ldi	r18, 0x00	; 0
    5a42:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (freeFallDuration);
  writeTo(DEVICE, ADXL345_TIME_FF, _b);  
    5a44:	63 e5       	ldi	r22, 0x53	; 83
    5a46:	70 e0       	ldi	r23, 0x00	; 0
    5a48:	49 e2       	ldi	r20, 0x29	; 41
}
    5a4a:	da cf       	rjmp	.-76     	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005a4c <_ZN7ADXL34520setFreeFallThresholdEi>:
// free-fall detection. The root-sum-square (RSS) value of all axes is calculated and
// compared whith the value in THRESH_FF to determine if a free-fall event occured. The 
// scale factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the free-fall
// interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallThreshold(int16_t freeFallThreshold) {
  freeFallThreshold = min(max(freeFallThreshold,0),255);
    5a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    5a4e:	71 05       	cpc	r23, r1
    5a50:	1c f0       	brlt	.+6      	; 0x5a58 <_ZN7ADXL34520setFreeFallThresholdEi+0xc>
    5a52:	2f ef       	ldi	r18, 0xFF	; 255
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	05 c0       	rjmp	.+10     	; 0x5a62 <_ZN7ADXL34520setFreeFallThresholdEi+0x16>
    5a58:	9b 01       	movw	r18, r22
    5a5a:	77 ff       	sbrs	r23, 7
    5a5c:	02 c0       	rjmp	.+4      	; 0x5a62 <_ZN7ADXL34520setFreeFallThresholdEi+0x16>
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (freeFallThreshold);
  writeTo(DEVICE, ADXL345_THRESH_FF, _b);  
    5a62:	63 e5       	ldi	r22, 0x53	; 83
    5a64:	70 e0       	ldi	r23, 0x00	; 0
    5a66:	48 e2       	ldi	r20, 0x28	; 40
}
    5a68:	cb cf       	rjmp	.-106    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005a6a <_ZN7ADXL34517setTimeInactivityEi>:
// Sets the TIME_INACT register, which contains an unsigned time value representing the
// amount of time that acceleration must be less thant the value in the THRESH_INACT
// register for inactivity to be declared. The scale factor is 1sec/LSB. The value must
// be between 0 and 255.
void ADXL345::setTimeInactivity(int16_t timeInactivity) {
  timeInactivity = min(max(timeInactivity,0),255);
    5a6a:	6f 3f       	cpi	r22, 0xFF	; 255
    5a6c:	71 05       	cpc	r23, r1
    5a6e:	1c f0       	brlt	.+6      	; 0x5a76 <_ZN7ADXL34517setTimeInactivityEi+0xc>
    5a70:	2f ef       	ldi	r18, 0xFF	; 255
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	05 c0       	rjmp	.+10     	; 0x5a80 <_ZN7ADXL34517setTimeInactivityEi+0x16>
    5a76:	9b 01       	movw	r18, r22
    5a78:	77 ff       	sbrs	r23, 7
    5a7a:	02 c0       	rjmp	.+4      	; 0x5a80 <_ZN7ADXL34517setTimeInactivityEi+0x16>
    5a7c:	20 e0       	ldi	r18, 0x00	; 0
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (timeInactivity);
  writeTo(DEVICE, ADXL345_TIME_INACT, _b);  
    5a80:	63 e5       	ldi	r22, 0x53	; 83
    5a82:	70 e0       	ldi	r23, 0x00	; 0
    5a84:	46 e2       	ldi	r20, 0x26	; 38
}
    5a86:	bc cf       	rjmp	.-136    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005a88 <_ZN7ADXL34522setInactivityThresholdEi>:
// The data format is unsigned, so the magnitude of the inactivity event is compared 
// with the value is compared with the value in the THRESH_INACT register. The scale
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// inactivity interrupt is enabled. The maximum value is 255.
void ADXL345::setInactivityThreshold(int16_t inactivityThreshold) {
  inactivityThreshold = min(max(inactivityThreshold,0),255);
    5a88:	6f 3f       	cpi	r22, 0xFF	; 255
    5a8a:	71 05       	cpc	r23, r1
    5a8c:	1c f0       	brlt	.+6      	; 0x5a94 <_ZN7ADXL34522setInactivityThresholdEi+0xc>
    5a8e:	2f ef       	ldi	r18, 0xFF	; 255
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	05 c0       	rjmp	.+10     	; 0x5a9e <_ZN7ADXL34522setInactivityThresholdEi+0x16>
    5a94:	9b 01       	movw	r18, r22
    5a96:	77 ff       	sbrs	r23, 7
    5a98:	02 c0       	rjmp	.+4      	; 0x5a9e <_ZN7ADXL34522setInactivityThresholdEi+0x16>
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (inactivityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_INACT, _b);  
    5a9e:	63 e5       	ldi	r22, 0x53	; 83
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	45 e2       	ldi	r20, 0x25	; 37
}
    5aa4:	ad cf       	rjmp	.-166    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005aa6 <_ZN7ADXL34520setActivityThresholdEi>:
// The data format is unsigned, so the magnitude of the activity event is compared 
// with the value is compared with the value in the THRESH_ACT register. The scale
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// activity interrupt is enabled. The maximum value is 255.
void ADXL345::setActivityThreshold(int16_t activityThreshold) {
  activityThreshold = min(max(activityThreshold,0),255);
    5aa6:	6f 3f       	cpi	r22, 0xFF	; 255
    5aa8:	71 05       	cpc	r23, r1
    5aaa:	1c f0       	brlt	.+6      	; 0x5ab2 <_ZN7ADXL34520setActivityThresholdEi+0xc>
    5aac:	2f ef       	ldi	r18, 0xFF	; 255
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	05 c0       	rjmp	.+10     	; 0x5abc <_ZN7ADXL34520setActivityThresholdEi+0x16>
    5ab2:	9b 01       	movw	r18, r22
    5ab4:	77 ff       	sbrs	r23, 7
    5ab6:	02 c0       	rjmp	.+4      	; 0x5abc <_ZN7ADXL34520setActivityThresholdEi+0x16>
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (activityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_ACT, _b);  
    5abc:	63 e5       	ldi	r22, 0x53	; 83
    5abe:	70 e0       	ldi	r23, 0x00	; 0
    5ac0:	44 e2       	ldi	r20, 0x24	; 36
}
    5ac2:	9e cf       	rjmp	.-196    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005ac4 <_ZN7ADXL34518setDoubleTapWindowEi>:
// Sets the Window register, which contains an unsigned time value representing
// the amount of time after the expiration of the latency time (Latent register)
// during which a second valud tap can begin. The scale factor is 1.25ms/LSB. A
// value of 0 disables the double tap function. The maximum value is 255.
void ADXL345::setDoubleTapWindow(int16_t doubleTapWindow) {
  doubleTapWindow = min(max(doubleTapWindow,0),255);
    5ac4:	6f 3f       	cpi	r22, 0xFF	; 255
    5ac6:	71 05       	cpc	r23, r1
    5ac8:	1c f0       	brlt	.+6      	; 0x5ad0 <_ZN7ADXL34518setDoubleTapWindowEi+0xc>
    5aca:	2f ef       	ldi	r18, 0xFF	; 255
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	05 c0       	rjmp	.+10     	; 0x5ada <_ZN7ADXL34518setDoubleTapWindowEi+0x16>
    5ad0:	9b 01       	movw	r18, r22
    5ad2:	77 ff       	sbrs	r23, 7
    5ad4:	02 c0       	rjmp	.+4      	; 0x5ada <_ZN7ADXL34518setDoubleTapWindowEi+0x16>
    5ad6:	20 e0       	ldi	r18, 0x00	; 0
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (doubleTapWindow);
  writeTo(DEVICE, ADXL345_WINDOW, _b);  
    5ada:	63 e5       	ldi	r22, 0x53	; 83
    5adc:	70 e0       	ldi	r23, 0x00	; 0
    5ade:	43 e2       	ldi	r20, 0x23	; 35
}
    5ae0:	8f cf       	rjmp	.-226    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005ae2 <_ZN7ADXL34519setDoubleTapLatencyEi>:
// Sets the latency (latent register) which contains an unsigned time value
// representing the wait time from the detection of a tap event to the start
// of the time window, during which a possible second tap can be detected.
// The scale factor is 1.25ms/LSB. A value of 0 disables the double tap function.
// It accepts a maximum value of 255.
void ADXL345::setDoubleTapLatency(int16_t doubleTapLatency) {
    5ae2:	26 2f       	mov	r18, r22
  uint8_t _b = uint8_t (doubleTapLatency);
  writeTo(DEVICE, ADXL345_LATENT, _b);  
    5ae4:	63 e5       	ldi	r22, 0x53	; 83
    5ae6:	70 e0       	ldi	r23, 0x00	; 0
    5ae8:	42 e2       	ldi	r20, 0x22	; 34
}
    5aea:	8a cf       	rjmp	.-236    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005aec <_ZN7ADXL34514setTapDurationEi>:
// The DUR byte contains an unsigned time value representing the maximum time
// that an event must be above THRESH_TAP threshold to qualify as a tap event
// The scale factor is 625µs/LSB
// A value of 0 disables the tap/double tap funcitons. Max value is 255.
void ADXL345::setTapDuration(int16_t tapDuration) {
  tapDuration = min(max(tapDuration,0),255);
    5aec:	6f 3f       	cpi	r22, 0xFF	; 255
    5aee:	71 05       	cpc	r23, r1
    5af0:	1c f0       	brlt	.+6      	; 0x5af8 <_ZN7ADXL34514setTapDurationEi+0xc>
    5af2:	2f ef       	ldi	r18, 0xFF	; 255
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	05 c0       	rjmp	.+10     	; 0x5b02 <_ZN7ADXL34514setTapDurationEi+0x16>
    5af8:	9b 01       	movw	r18, r22
    5afa:	77 ff       	sbrs	r23, 7
    5afc:	02 c0       	rjmp	.+4      	; 0x5b02 <_ZN7ADXL34514setTapDurationEi+0x16>
    5afe:	20 e0       	ldi	r18, 0x00	; 0
    5b00:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (tapDuration);
  writeTo(DEVICE, ADXL345_DUR, _b);  
    5b02:	63 e5       	ldi	r22, 0x53	; 83
    5b04:	70 e0       	ldi	r23, 0x00	; 0
    5b06:	41 e2       	ldi	r20, 0x21	; 33
}
    5b08:	7b cf       	rjmp	.-266    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005b0a <_ZN7ADXL34513setAxisOffsetEiii>:

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int16_t x, int16_t y, int16_t z) {
    5b0a:	ef 92       	push	r14
    5b0c:	ff 92       	push	r15
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
    5b12:	8c 01       	movw	r16, r24
    5b14:	36 2f       	mov	r19, r22
    5b16:	f4 2e       	mov	r15, r20
    5b18:	e2 2e       	mov	r14, r18
  writeTo(DEVICE, ADXL345_OFSX, uint8_t (x));
    5b1a:	63 e5       	ldi	r22, 0x53	; 83
    5b1c:	70 e0       	ldi	r23, 0x00	; 0
    5b1e:	4e e1       	ldi	r20, 0x1E	; 30
    5b20:	23 2f       	mov	r18, r19
    5b22:	6e df       	rcall	.-292    	; 0x5a00 <_ZN7ADXL3457writeToEihh>
  writeTo(DEVICE, ADXL345_OFSY, uint8_t (y));
    5b24:	c8 01       	movw	r24, r16
    5b26:	63 e5       	ldi	r22, 0x53	; 83
    5b28:	70 e0       	ldi	r23, 0x00	; 0
    5b2a:	4f e1       	ldi	r20, 0x1F	; 31
    5b2c:	2f 2d       	mov	r18, r15
    5b2e:	68 df       	rcall	.-304    	; 0x5a00 <_ZN7ADXL3457writeToEihh>
  writeTo(DEVICE, ADXL345_OFSZ, uint8_t (z));
    5b30:	c8 01       	movw	r24, r16
    5b32:	63 e5       	ldi	r22, 0x53	; 83
    5b34:	70 e0       	ldi	r23, 0x00	; 0
    5b36:	40 e2       	ldi	r20, 0x20	; 32
    5b38:	2e 2d       	mov	r18, r14
    5b3a:	62 df       	rcall	.-316    	; 0x5a00 <_ZN7ADXL3457writeToEihh>
}
    5b3c:	1f 91       	pop	r17
    5b3e:	0f 91       	pop	r16
    5b40:	ff 90       	pop	r15
    5b42:	ef 90       	pop	r14
    5b44:	08 95       	ret

00005b46 <_ZN7ADXL34515setTapThresholdEi>:
// Sets the THRESH_TAP byte value
// it should be between 0 and 255
// the scale factor is 62.5 mg/LSB
// A value of 0 may result in undesirable behavior
void ADXL345::setTapThreshold(int16_t tapThreshold) {
  tapThreshold = min(max(tapThreshold,0),255);
    5b46:	6f 3f       	cpi	r22, 0xFF	; 255
    5b48:	71 05       	cpc	r23, r1
    5b4a:	1c f0       	brlt	.+6      	; 0x5b52 <_ZN7ADXL34515setTapThresholdEi+0xc>
    5b4c:	2f ef       	ldi	r18, 0xFF	; 255
    5b4e:	30 e0       	ldi	r19, 0x00	; 0
    5b50:	05 c0       	rjmp	.+10     	; 0x5b5c <_ZN7ADXL34515setTapThresholdEi+0x16>
    5b52:	9b 01       	movw	r18, r22
    5b54:	77 ff       	sbrs	r23, 7
    5b56:	02 c0       	rjmp	.+4      	; 0x5b5c <_ZN7ADXL34515setTapThresholdEi+0x16>
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t _b = uint8_t (tapThreshold);
  writeTo(DEVICE, ADXL345_THRESH_TAP, _b);  
    5b5c:	63 e5       	ldi	r22, 0x53	; 83
    5b5e:	70 e0       	ldi	r23, 0x00	; 0
    5b60:	4d e1       	ldi	r20, 0x1D	; 29
}
    5b62:	4e cf       	rjmp	.-356    	; 0x5a00 <_ZN7ADXL3457writeToEihh>

00005b64 <_ZN7ADXL3458readFromEihhPh>:
  Wire.send(val);                 // send value to write
  Wire.endTransmission();         // end transmission
}

// Reads num bytes starting from address register on device in to _buff array
void ADXL345::readFrom(int16_t device, uint8_t address, uint8_t num, uint8_t _buff[]) {
    5b64:	cf 92       	push	r12
    5b66:	df 92       	push	r13
    5b68:	ef 92       	push	r14
    5b6a:	ff 92       	push	r15
    5b6c:	0f 93       	push	r16
    5b6e:	1f 93       	push	r17
    5b70:	cf 93       	push	r28
    5b72:	df 93       	push	r29
    5b74:	7b 01       	movw	r14, r22
    5b76:	d4 2e       	mov	r13, r20
    5b78:	c2 2e       	mov	r12, r18
  Wire.beginTransmission(device); // start transmission to device 
    5b7a:	88 eb       	ldi	r24, 0xB8	; 184
    5b7c:	98 e0       	ldi	r25, 0x08	; 8
    5b7e:	6f db       	rcall	.-2338   	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(address);             // sends address to read from
    5b80:	88 eb       	ldi	r24, 0xB8	; 184
    5b82:	98 e0       	ldi	r25, 0x08	; 8
    5b84:	6d 2d       	mov	r22, r13
    5b86:	6d db       	rcall	.-2342   	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.endTransmission();         // end transmission
    5b88:	88 eb       	ldi	r24, 0xB8	; 184
    5b8a:	98 e0       	ldi	r25, 0x08	; 8
    5b8c:	69 db       	rcall	.-2350   	; 0x5260 <_ZN7WireI2C15endTransmissionEv>

    Wire.beginTransmission(device); // start transmission to device
    5b8e:	88 eb       	ldi	r24, 0xB8	; 184
    5b90:	98 e0       	ldi	r25, 0x08	; 8
    5b92:	b7 01       	movw	r22, r14
    5b94:	64 db       	rcall	.-2360   	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.requestFrom(device, num);    // request 6 bytes from device
    5b96:	88 eb       	ldi	r24, 0xB8	; 184
    5b98:	98 e0       	ldi	r25, 0x08	; 8
    5b9a:	b7 01       	movw	r22, r14
    5b9c:	4c 2d       	mov	r20, r12
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	63 db       	rcall	.-2362   	; 0x5268 <_ZN7WireI2C11requestFromEii>
    5ba2:	e8 01       	movw	r28, r16
    5ba4:	04 c0       	rjmp	.+8      	; 0x5bae <_ZN7ADXL3458readFromEihhPh+0x4a>

  int16_t i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
  { 
    _buff[i] = Wire.receive();    // receive a byte
    5ba6:	88 eb       	ldi	r24, 0xB8	; 184
    5ba8:	98 e0       	ldi	r25, 0x08	; 8
    5baa:	5c db       	rcall	.-2376   	; 0x5264 <_ZN7WireI2C7receiveEv>
    5bac:	89 93       	st	Y+, r24

    Wire.beginTransmission(device); // start transmission to device
  Wire.requestFrom(device, num);    // request 6 bytes from device

  int16_t i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
    5bae:	88 eb       	ldi	r24, 0xB8	; 184
    5bb0:	98 e0       	ldi	r25, 0x08	; 8
    5bb2:	5b db       	rcall	.-2378   	; 0x526a <_ZN7WireI2C9availableEv>
    5bb4:	88 23       	and	r24, r24
    5bb6:	b9 f7       	brne	.-18     	; 0x5ba6 <_ZN7ADXL3458readFromEihhPh+0x42>
  { 
    _buff[i] = Wire.receive();    // receive a byte
    i++;
  }
  Wire.endTransmission();         // end transmission
    5bb8:	88 eb       	ldi	r24, 0xB8	; 184
    5bba:	98 e0       	ldi	r25, 0x08	; 8
    5bbc:	51 db       	rcall	.-2398   	; 0x5260 <_ZN7WireI2C15endTransmissionEv>
}
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	1f 91       	pop	r17
    5bc4:	0f 91       	pop	r16
    5bc6:	ff 90       	pop	r15
    5bc8:	ef 90       	pop	r14
    5bca:	df 90       	pop	r13
    5bcc:	cf 90       	pop	r12
    5bce:	08 95       	ret

00005bd0 <_ZN7ADXL34516printAllRegisterEv>:
  return ((_b >> bitPos) & 1);
}

// print all register value to the serial ouptut, which requires it to be setup
// this can be used to manually to check the current configuration of the device
void ADXL345::printAllRegister() {
    5bd0:	9f 92       	push	r9
    5bd2:	af 92       	push	r10
    5bd4:	bf 92       	push	r11
    5bd6:	cf 92       	push	r12
    5bd8:	df 92       	push	r13
    5bda:	ef 92       	push	r14
    5bdc:	ff 92       	push	r15
    5bde:	0f 93       	push	r16
    5be0:	1f 93       	push	r17
    5be2:	df 93       	push	r29
    5be4:	cf 93       	push	r28
    5be6:	0f 92       	push	r0
    5be8:	cd b7       	in	r28, 0x3d	; 61
    5bea:	de b7       	in	r29, 0x3e	; 62
    5bec:	5c 01       	movw	r10, r24
  uint8_t _b;
  Serial.print("0x00:\t");
    5bee:	88 e8       	ldi	r24, 0x88	; 136
    5bf0:	98 e0       	ldi	r25, 0x08	; 8
    5bf2:	64 ef       	ldi	r22, 0xF4	; 244
    5bf4:	73 e0       	ldi	r23, 0x03	; 3
    5bf6:	85 de       	rcall	.-758    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
  readFrom(DEVICE, 0x00, 1, &_b);
    5bf8:	c5 01       	movw	r24, r10
    5bfa:	63 e5       	ldi	r22, 0x53	; 83
    5bfc:	70 e0       	ldi	r23, 0x00	; 0
    5bfe:	40 e0       	ldi	r20, 0x00	; 0
    5c00:	21 e0       	ldi	r18, 0x01	; 1
    5c02:	7e 01       	movw	r14, r28
    5c04:	08 94       	sec
    5c06:	e1 1c       	adc	r14, r1
    5c08:	f1 1c       	adc	r15, r1
    5c0a:	87 01       	movw	r16, r14
    5c0c:	ab df       	rcall	.-170    	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  Serial.print(_b, BIN);
    5c0e:	88 e8       	ldi	r24, 0x88	; 136
    5c10:	98 e0       	ldi	r25, 0x08	; 8
    5c12:	69 81       	ldd	r22, Y+1	; 0x01
    5c14:	42 e0       	ldi	r20, 0x02	; 2
    5c16:	ed dd       	rcall	.-1062   	; 0x57f2 <_ZN16USBVirtualSerial5printEhh>
  Serial.print("\r\n");
    5c18:	88 e8       	ldi	r24, 0x88	; 136
    5c1a:	98 e0       	ldi	r25, 0x08	; 8
    5c1c:	6b ef       	ldi	r22, 0xFB	; 251
    5c1e:	73 e0       	ldi	r23, 0x03	; 3
    5c20:	70 de       	rcall	.-800    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    5c22:	8d e1       	ldi	r24, 0x1D	; 29
    5c24:	c8 2e       	mov	r12, r24
    5c26:	d1 2c       	mov	r13, r1
  int16_t i;
  for (i=29;i<=57;i++){
    Serial.print("0x");
    Serial.print(i, HEX);
    Serial.print(":\t");
    readFrom(DEVICE, i, 1, &_b);
    5c28:	9e 2c       	mov	r9, r14
    5c2a:	ef 2c       	mov	r14, r15
  readFrom(DEVICE, 0x00, 1, &_b);
  Serial.print(_b, BIN);
  Serial.print("\r\n");
  int16_t i;
  for (i=29;i<=57;i++){
    Serial.print("0x");
    5c2c:	88 e8       	ldi	r24, 0x88	; 136
    5c2e:	98 e0       	ldi	r25, 0x08	; 8
    5c30:	6e ef       	ldi	r22, 0xFE	; 254
    5c32:	73 e0       	ldi	r23, 0x03	; 3
    5c34:	66 de       	rcall	.-820    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    Serial.print(i, HEX);
    5c36:	88 e8       	ldi	r24, 0x88	; 136
    5c38:	98 e0       	ldi	r25, 0x08	; 8
    5c3a:	b6 01       	movw	r22, r12
    5c3c:	40 e1       	ldi	r20, 0x10	; 16
    5c3e:	cd de       	rcall	.-614    	; 0x59da <_ZN16USBVirtualSerial5printEih>
    Serial.print(":\t");
    5c40:	88 e8       	ldi	r24, 0x88	; 136
    5c42:	98 e0       	ldi	r25, 0x08	; 8
    5c44:	61 e0       	ldi	r22, 0x01	; 1
    5c46:	74 e0       	ldi	r23, 0x04	; 4
    5c48:	5c de       	rcall	.-840    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
    readFrom(DEVICE, i, 1, &_b);
    5c4a:	c5 01       	movw	r24, r10
    5c4c:	63 e5       	ldi	r22, 0x53	; 83
    5c4e:	70 e0       	ldi	r23, 0x00	; 0
    5c50:	4c 2d       	mov	r20, r12
    5c52:	21 e0       	ldi	r18, 0x01	; 1
    5c54:	09 2d       	mov	r16, r9
    5c56:	1e 2d       	mov	r17, r14
    5c58:	85 df       	rcall	.-246    	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
    Serial.print(_b, BIN);
    5c5a:	88 e8       	ldi	r24, 0x88	; 136
    5c5c:	98 e0       	ldi	r25, 0x08	; 8
    5c5e:	69 81       	ldd	r22, Y+1	; 0x01
    5c60:	42 e0       	ldi	r20, 0x02	; 2
    5c62:	c7 dd       	rcall	.-1138   	; 0x57f2 <_ZN16USBVirtualSerial5printEhh>
    Serial.print("\r\n");    
    5c64:	88 e8       	ldi	r24, 0x88	; 136
    5c66:	98 e0       	ldi	r25, 0x08	; 8
    5c68:	6b ef       	ldi	r22, 0xFB	; 251
    5c6a:	73 e0       	ldi	r23, 0x03	; 3
    5c6c:	4a de       	rcall	.-876    	; 0x5902 <_ZN16USBVirtualSerial5printEPKc>
  Serial.print("0x00:\t");
  readFrom(DEVICE, 0x00, 1, &_b);
  Serial.print(_b, BIN);
  Serial.print("\r\n");
  int16_t i;
  for (i=29;i<=57;i++){
    5c6e:	08 94       	sec
    5c70:	c1 1c       	adc	r12, r1
    5c72:	d1 1c       	adc	r13, r1
    5c74:	8a e3       	ldi	r24, 0x3A	; 58
    5c76:	c8 16       	cp	r12, r24
    5c78:	d1 04       	cpc	r13, r1
    5c7a:	c1 f6       	brne	.-80     	; 0x5c2c <_ZN7ADXL34516printAllRegisterEv+0x5c>
    Serial.print(":\t");
    readFrom(DEVICE, i, 1, &_b);
    Serial.print(_b, BIN);
    Serial.print("\r\n");    
  }
}
    5c7c:	0f 90       	pop	r0
    5c7e:	cf 91       	pop	r28
    5c80:	df 91       	pop	r29
    5c82:	1f 91       	pop	r17
    5c84:	0f 91       	pop	r16
    5c86:	ff 90       	pop	r15
    5c88:	ef 90       	pop	r14
    5c8a:	df 90       	pop	r13
    5c8c:	cf 90       	pop	r12
    5c8e:	bf 90       	pop	r11
    5c90:	af 90       	pop	r10
    5c92:	9f 90       	pop	r9
    5c94:	08 95       	ret

00005c96 <_ZN7ADXL34514getRegisterBitEhi>:
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
  }
  writeTo(DEVICE, regAdress, _b);  
}

bool ADXL345::getRegisterBit(uint8_t regAdress, int16_t bitPos) {
    5c96:	ff 92       	push	r15
    5c98:	0f 93       	push	r16
    5c9a:	1f 93       	push	r17
    5c9c:	df 93       	push	r29
    5c9e:	cf 93       	push	r28
    5ca0:	0f 92       	push	r0
    5ca2:	cd b7       	in	r28, 0x3d	; 61
    5ca4:	de b7       	in	r29, 0x3e	; 62
    5ca6:	26 2f       	mov	r18, r22
    5ca8:	f4 2e       	mov	r15, r20
  uint8_t _b;
  readFrom(DEVICE, regAdress, 1, &_b);
    5caa:	63 e5       	ldi	r22, 0x53	; 83
    5cac:	70 e0       	ldi	r23, 0x00	; 0
    5cae:	42 2f       	mov	r20, r18
    5cb0:	21 e0       	ldi	r18, 0x01	; 1
    5cb2:	8e 01       	movw	r16, r28
    5cb4:	0f 5f       	subi	r16, 0xFF	; 255
    5cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb8:	55 df       	rcall	.-342    	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
    5cba:	89 81       	ldd	r24, Y+1	; 0x01
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	02 c0       	rjmp	.+4      	; 0x5cc4 <_ZN7ADXL34514getRegisterBitEhi+0x2e>
    5cc0:	95 95       	asr	r25
    5cc2:	87 95       	ror	r24
    5cc4:	fa 94       	dec	r15
    5cc6:	e2 f7       	brpl	.-8      	; 0x5cc0 <_ZN7ADXL34514getRegisterBitEhi+0x2a>
  return ((_b >> bitPos) & 1);
}
    5cc8:	81 70       	andi	r24, 0x01	; 1
    5cca:	0f 90       	pop	r0
    5ccc:	cf 91       	pop	r28
    5cce:	df 91       	pop	r29
    5cd0:	1f 91       	pop	r17
    5cd2:	0f 91       	pop	r16
    5cd4:	ff 90       	pop	r15
    5cd6:	08 95       	ret

00005cd8 <_ZN7ADXL34518isInterruptEnabledEh>:
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(uint8_t interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

bool ADXL345::isInterruptEnabled(uint8_t interruptBit) {
    5cd8:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
    5cda:	6e e2       	ldi	r22, 0x2E	; 46
    5cdc:	50 e0       	ldi	r21, 0x00	; 0
}
    5cde:	db cf       	rjmp	.-74     	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005ce0 <_ZN7ADXL34519getInterruptMappingEh>:

bool ADXL345::getInterruptSource(uint8_t interruptBit) {
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
}

bool ADXL345::getInterruptMapping(uint8_t interruptBit) {
    5ce0:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
    5ce2:	6f e2       	ldi	r22, 0x2F	; 47
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
}
    5ce6:	d7 cf       	rjmp	.-82     	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005ce8 <_ZN7ADXL34518getInterruptSourceEh>:
  uint8_t _b;
  readFrom(DEVICE, ADXL345_INT_SOURCE, 1, &_b);
  return _b;
}

bool ADXL345::getInterruptSource(uint8_t interruptBit) {
    5ce8:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
    5cea:	60 e3       	ldi	r22, 0x30	; 48
    5cec:	50 e0       	ldi	r21, 0x00	; 0
}
    5cee:	d3 cf       	rjmp	.-90     	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005cf0 <_ZN7ADXL34510isLowPowerEv>:
bool ADXL345::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
}

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
    5cf0:	6c e2       	ldi	r22, 0x2C	; 44
    5cf2:	44 e0       	ldi	r20, 0x04	; 4
    5cf4:	50 e0       	ldi	r21, 0x00	; 0
}
    5cf6:	cf cf       	rjmp	.-98     	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005cf8 <_ZN7ADXL3458isAsleepEv>:
bool ADXL345::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
}

bool ADXL345::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
    5cf8:	6b e2       	ldi	r22, 0x2B	; 43
    5cfa:	43 e0       	ldi	r20, 0x03	; 3
    5cfc:	50 e0       	ldi	r21, 0x00	; 0
}
    5cfe:	cb cf       	rjmp	.-106    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d00 <_ZN7ADXL34514isTapSourceOnZEv>:
}
bool ADXL345::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
}
bool ADXL345::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
    5d00:	6b e2       	ldi	r22, 0x2B	; 43
    5d02:	40 e0       	ldi	r20, 0x00	; 0
    5d04:	50 e0       	ldi	r21, 0x00	; 0
}
    5d06:	c7 cf       	rjmp	.-114    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d08 <_ZN7ADXL34514isTapSourceOnYEv>:

bool ADXL345::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
}
bool ADXL345::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
    5d08:	6b e2       	ldi	r22, 0x2B	; 43
    5d0a:	41 e0       	ldi	r20, 0x01	; 1
    5d0c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d0e:	c3 cf       	rjmp	.-122    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d10 <_ZN7ADXL34514isTapSourceOnXEv>:
bool ADXL345::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
}

bool ADXL345::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
    5d10:	6b e2       	ldi	r22, 0x2B	; 43
    5d12:	42 e0       	ldi	r20, 0x02	; 2
    5d14:	50 e0       	ldi	r21, 0x00	; 0
}
    5d16:	bf cf       	rjmp	.-130    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d18 <_ZN7ADXL34519isActivitySourceOnZEv>:
}
bool ADXL345::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
}
bool ADXL345::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
    5d18:	6b e2       	ldi	r22, 0x2B	; 43
    5d1a:	44 e0       	ldi	r20, 0x04	; 4
    5d1c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d1e:	bb cf       	rjmp	.-138    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d20 <_ZN7ADXL34519isActivitySourceOnYEv>:

bool ADXL345::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
}
bool ADXL345::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
    5d20:	6b e2       	ldi	r22, 0x2B	; 43
    5d22:	45 e0       	ldi	r20, 0x05	; 5
    5d24:	50 e0       	ldi	r21, 0x00	; 0
}
    5d26:	b7 cf       	rjmp	.-146    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d28 <_ZN7ADXL34519isActivitySourceOnXEv>:
void ADXL345::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
}

bool ADXL345::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
    5d28:	6b e2       	ldi	r22, 0x2B	; 43
    5d2a:	46 e0       	ldi	r20, 0x06	; 6
    5d2c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d2e:	b3 cf       	rjmp	.-154    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d30 <_ZN7ADXL34517isTapDetectionOnZEv>:
}
void ADXL345::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
    5d30:	6a e2       	ldi	r22, 0x2A	; 42
    5d32:	40 e0       	ldi	r20, 0x00	; 0
    5d34:	50 e0       	ldi	r21, 0x00	; 0
}
    5d36:	af cf       	rjmp	.-162    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d38 <_ZN7ADXL34517isTapDetectionOnYEv>:
}
void ADXL345::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
    5d38:	6a e2       	ldi	r22, 0x2A	; 42
    5d3a:	41 e0       	ldi	r20, 0x01	; 1
    5d3c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d3e:	ab cf       	rjmp	.-170    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d40 <_ZN7ADXL34517isTapDetectionOnXEv>:
void ADXL345::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
}

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
    5d40:	6a e2       	ldi	r22, 0x2A	; 42
    5d42:	42 e0       	ldi	r20, 0x02	; 2
    5d44:	50 e0       	ldi	r21, 0x00	; 0
}
    5d46:	a7 cf       	rjmp	.-178    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d48 <_ZN7ADXL34514getSuppressBitEv>:
void ADXL345::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
}

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
    5d48:	6a e2       	ldi	r22, 0x2A	; 42
    5d4a:	43 e0       	ldi	r20, 0x03	; 3
    5d4c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d4e:	a3 cf       	rjmp	.-186    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d50 <_ZN7ADXL34514isInactivityAcEv>:

bool ADXL345::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
}
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
    5d50:	67 e2       	ldi	r22, 0x27	; 39
    5d52:	43 e0       	ldi	r20, 0x03	; 3
    5d54:	50 e0       	ldi	r21, 0x00	; 0
}
    5d56:	9f cf       	rjmp	.-194    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d58 <_ZN7ADXL34512isActivityAcEv>:
void ADXL345::setInactivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}

bool ADXL345::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
    5d58:	67 e2       	ldi	r22, 0x27	; 39
    5d5a:	47 e0       	ldi	r20, 0x07	; 7
    5d5c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d5e:	9b cf       	rjmp	.-202    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d60 <_ZN7ADXL34520isInactivityZEnabledEv>:
}
bool ADXL345::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
}
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
    5d60:	67 e2       	ldi	r22, 0x27	; 39
    5d62:	40 e0       	ldi	r20, 0x00	; 0
    5d64:	50 e0       	ldi	r21, 0x00	; 0
}
    5d66:	97 cf       	rjmp	.-210    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d68 <_ZN7ADXL34520isInactivityYEnabledEv>:
}
bool ADXL345::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
}
bool ADXL345::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
    5d68:	67 e2       	ldi	r22, 0x27	; 39
    5d6a:	41 e0       	ldi	r20, 0x01	; 1
    5d6c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d6e:	93 cf       	rjmp	.-218    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d70 <_ZN7ADXL34520isInactivityXEnabledEv>:
}
bool ADXL345::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
}
bool ADXL345::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
    5d70:	67 e2       	ldi	r22, 0x27	; 39
    5d72:	42 e0       	ldi	r20, 0x02	; 2
    5d74:	50 e0       	ldi	r21, 0x00	; 0
}
    5d76:	8f cf       	rjmp	.-226    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d78 <_ZN7ADXL34518isActivityZEnabledEv>:
}
bool ADXL345::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
}
bool ADXL345::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
    5d78:	67 e2       	ldi	r22, 0x27	; 39
    5d7a:	44 e0       	ldi	r20, 0x04	; 4
    5d7c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d7e:	8b cf       	rjmp	.-234    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d80 <_ZN7ADXL34518isActivityYEnabledEv>:

bool ADXL345::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
}
bool ADXL345::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
    5d80:	67 e2       	ldi	r22, 0x27	; 39
    5d82:	45 e0       	ldi	r20, 0x05	; 5
    5d84:	50 e0       	ldi	r21, 0x00	; 0
}
    5d86:	87 cf       	rjmp	.-242    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d88 <_ZN7ADXL34518isActivityXEnabledEv>:
  readFrom(DEVICE, ADXL345_TIME_FF, 1, &_b);  
  return int16_t (_b);
}

bool ADXL345::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
    5d88:	67 e2       	ldi	r22, 0x27	; 39
    5d8a:	46 e0       	ldi	r20, 0x06	; 6
    5d8c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d8e:	83 cf       	rjmp	.-250    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d90 <_ZN7ADXL34513getJustifyBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 3, fullResBit);
}

// Gets the state of the justify bit
bool ADXL345::getJustifyBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 2);
    5d90:	61 e3       	ldi	r22, 0x31	; 49
    5d92:	42 e0       	ldi	r20, 0x02	; 2
    5d94:	50 e0       	ldi	r21, 0x00	; 0
}
    5d96:	7f cf       	rjmp	.-258    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005d98 <_ZN7ADXL34513getFullResBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 5, interruptLevelBit);
}

// Gets the state of the FULL_RES bit
bool ADXL345::getFullResBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 3);
    5d98:	61 e3       	ldi	r22, 0x31	; 49
    5d9a:	43 e0       	ldi	r20, 0x03	; 3
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
}
    5d9e:	7b cf       	rjmp	.-266    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005da0 <_ZN7ADXL34520getInterruptLevelBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 6, spiBit);
}

// Gets the state of the INT_INVERT bit
bool ADXL345::getInterruptLevelBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 5);
    5da0:	61 e3       	ldi	r22, 0x31	; 49
    5da2:	45 e0       	ldi	r20, 0x05	; 5
    5da4:	50 e0       	ldi	r21, 0x00	; 0
}
    5da6:	77 cf       	rjmp	.-274    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005da8 <_ZN7ADXL3459getSpiBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
}

// Gets the state of the SPI bit
bool ADXL345::getSpiBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 6);
    5da8:	61 e3       	ldi	r22, 0x31	; 49
    5daa:	46 e0       	ldi	r20, 0x06	; 6
    5dac:	50 e0       	ldi	r21, 0x00	; 0
}
    5dae:	73 cf       	rjmp	.-282    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005db0 <_ZN7ADXL34514getSelfTestBitEv>:
  _s |= (_b & 0B11101100);
  writeTo(DEVICE, ADXL345_DATA_FORMAT, _s);
}
// gets the state of the SELF_TEST bit
bool ADXL345::getSelfTestBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 7);
    5db0:	61 e3       	ldi	r22, 0x31	; 49
    5db2:	47 e0       	ldi	r20, 0x07	; 7
    5db4:	50 e0       	ldi	r21, 0x00	; 0
}
    5db6:	6f cf       	rjmp	.-290    	; 0x5c96 <_ZN7ADXL34514getRegisterBitEhi>

00005db8 <_ZN7ADXL34514setRegisterBitEhib>:

void ADXL345::setInterrupt(uint8_t interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void ADXL345::setRegisterBit(uint8_t regAdress, int16_t bitPos, bool state) {
    5db8:	bf 92       	push	r11
    5dba:	cf 92       	push	r12
    5dbc:	df 92       	push	r13
    5dbe:	ef 92       	push	r14
    5dc0:	ff 92       	push	r15
    5dc2:	0f 93       	push	r16
    5dc4:	1f 93       	push	r17
    5dc6:	df 93       	push	r29
    5dc8:	cf 93       	push	r28
    5dca:	0f 92       	push	r0
    5dcc:	cd b7       	in	r28, 0x3d	; 61
    5dce:	de b7       	in	r29, 0x3e	; 62
    5dd0:	6c 01       	movw	r12, r24
    5dd2:	b6 2e       	mov	r11, r22
    5dd4:	e4 2e       	mov	r14, r20
    5dd6:	f2 2e       	mov	r15, r18
  uint8_t _b;
  readFrom(DEVICE, regAdress, 1, &_b);
    5dd8:	63 e5       	ldi	r22, 0x53	; 83
    5dda:	70 e0       	ldi	r23, 0x00	; 0
    5ddc:	4b 2d       	mov	r20, r11
    5dde:	21 e0       	ldi	r18, 0x01	; 1
    5de0:	8e 01       	movw	r16, r28
    5de2:	0f 5f       	subi	r16, 0xFF	; 255
    5de4:	1f 4f       	sbci	r17, 0xFF	; 255
    5de6:	be de       	rcall	.-644    	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
    5de8:	29 81       	ldd	r18, Y+1	; 0x01
  if (state) {
    5dea:	ff 20       	and	r15, r15
    5dec:	49 f0       	breq	.+18     	; 0x5e00 <_ZN7ADXL34514setRegisterBitEhib+0x48>
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
    5dee:	81 e0       	ldi	r24, 0x01	; 1
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	02 c0       	rjmp	.+4      	; 0x5df8 <_ZN7ADXL34514setRegisterBitEhib+0x40>
    5df4:	88 0f       	add	r24, r24
    5df6:	99 1f       	adc	r25, r25
    5df8:	ea 94       	dec	r14
    5dfa:	e2 f7       	brpl	.-8      	; 0x5df4 <_ZN7ADXL34514setRegisterBitEhib+0x3c>
    5dfc:	28 2b       	or	r18, r24
    5dfe:	09 c0       	rjmp	.+18     	; 0x5e12 <_ZN7ADXL34514setRegisterBitEhib+0x5a>
  } 
  else {
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	02 c0       	rjmp	.+4      	; 0x5e0a <_ZN7ADXL34514setRegisterBitEhib+0x52>
    5e06:	88 0f       	add	r24, r24
    5e08:	99 1f       	adc	r25, r25
    5e0a:	ea 94       	dec	r14
    5e0c:	e2 f7       	brpl	.-8      	; 0x5e06 <_ZN7ADXL34514setRegisterBitEhib+0x4e>
    5e0e:	80 95       	com	r24
    5e10:	28 23       	and	r18, r24
    5e12:	29 83       	std	Y+1, r18	; 0x01
  }
  writeTo(DEVICE, regAdress, _b);  
    5e14:	c6 01       	movw	r24, r12
    5e16:	63 e5       	ldi	r22, 0x53	; 83
    5e18:	70 e0       	ldi	r23, 0x00	; 0
    5e1a:	4b 2d       	mov	r20, r11
    5e1c:	29 81       	ldd	r18, Y+1	; 0x01
    5e1e:	f0 dd       	rcall	.-1056   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
}
    5e20:	0f 90       	pop	r0
    5e22:	cf 91       	pop	r28
    5e24:	df 91       	pop	r29
    5e26:	1f 91       	pop	r17
    5e28:	0f 91       	pop	r16
    5e2a:	ff 90       	pop	r15
    5e2c:	ef 90       	pop	r14
    5e2e:	df 90       	pop	r13
    5e30:	cf 90       	pop	r12
    5e32:	bf 90       	pop	r11
    5e34:	08 95       	ret

00005e36 <_ZN7ADXL34512setInterruptEhb>:

bool ADXL345::isInterruptEnabled(uint8_t interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(uint8_t interruptBit, bool state) {
    5e36:	36 2f       	mov	r19, r22
    5e38:	24 2f       	mov	r18, r20
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
    5e3a:	6e e2       	ldi	r22, 0x2E	; 46
    5e3c:	43 2f       	mov	r20, r19
    5e3e:	50 e0       	ldi	r21, 0x00	; 0
}
    5e40:	bb cf       	rjmp	.-138    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e42 <_ZN7ADXL34519setInterruptMappingEhb>:
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
}

// Set the mapping of an interrupt to pin1 or pin2
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(uint8_t interruptBit, bool interruptPin) {
    5e42:	36 2f       	mov	r19, r22
    5e44:	24 2f       	mov	r18, r20
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
    5e46:	6f e2       	ldi	r22, 0x2F	; 47
    5e48:	43 2f       	mov	r20, r19
    5e4a:	50 e0       	ldi	r21, 0x00	; 0
}
    5e4c:	b5 cf       	rjmp	.-150    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e4e <_ZN7ADXL34511setLowPowerEb>:
}

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
}
void ADXL345::setLowPower(bool state) {  
    5e4e:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
    5e50:	6c e2       	ldi	r22, 0x2C	; 44
    5e52:	44 e0       	ldi	r20, 0x04	; 4
    5e54:	50 e0       	ldi	r21, 0x00	; 0
}
    5e56:	b0 cf       	rjmp	.-160    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e58 <_ZN7ADXL34518setTapDetectionOnZEb>:
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
}
void ADXL345::setTapDetectionOnZ(bool state) {  
    5e58:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
    5e5a:	6a e2       	ldi	r22, 0x2A	; 42
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	50 e0       	ldi	r21, 0x00	; 0
}
    5e60:	ab cf       	rjmp	.-170    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e62 <_ZN7ADXL34518setTapDetectionOnYEb>:
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
}
void ADXL345::setTapDetectionOnY(bool state) {  
    5e62:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
    5e64:	6a e2       	ldi	r22, 0x2A	; 42
    5e66:	41 e0       	ldi	r20, 0x01	; 1
    5e68:	50 e0       	ldi	r21, 0x00	; 0
}
    5e6a:	a6 cf       	rjmp	.-180    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e6c <_ZN7ADXL34518setTapDetectionOnXEb>:
}

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
}
void ADXL345::setTapDetectionOnX(bool state) {  
    5e6c:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
    5e6e:	6a e2       	ldi	r22, 0x2A	; 42
    5e70:	42 e0       	ldi	r20, 0x02	; 2
    5e72:	50 e0       	ldi	r21, 0x00	; 0
}
    5e74:	a1 cf       	rjmp	.-190    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e76 <_ZN7ADXL34514setSuppressBitEb>:
}

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
}
void ADXL345::setSuppressBit(bool state) {  
    5e76:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
    5e78:	6a e2       	ldi	r22, 0x2A	; 42
    5e7a:	43 e0       	ldi	r20, 0x03	; 3
    5e7c:	50 e0       	ldi	r21, 0x00	; 0
}
    5e7e:	9c cf       	rjmp	.-200    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e80 <_ZN7ADXL34515setInactivityAcEb>:
}

void ADXL345::setActivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
}
void ADXL345::setInactivityAc(bool state) {  
    5e80:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
    5e82:	67 e2       	ldi	r22, 0x27	; 39
    5e84:	43 e0       	ldi	r20, 0x03	; 3
    5e86:	50 e0       	ldi	r21, 0x00	; 0
}
    5e88:	97 cf       	rjmp	.-210    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e8a <_ZN7ADXL34513setActivityAcEb>:
}
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
}

void ADXL345::setActivityAc(bool state) {  
    5e8a:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
    5e8c:	67 e2       	ldi	r22, 0x27	; 39
    5e8e:	47 e0       	ldi	r20, 0x07	; 7
    5e90:	50 e0       	ldi	r21, 0x00	; 0
}
    5e92:	92 cf       	rjmp	.-220    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e94 <_ZN7ADXL34514setInactivityZEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
}
void ADXL345::setInactivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
}
void ADXL345::setInactivityZ(bool state) {  
    5e94:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
    5e96:	67 e2       	ldi	r22, 0x27	; 39
    5e98:	40 e0       	ldi	r20, 0x00	; 0
    5e9a:	50 e0       	ldi	r21, 0x00	; 0
}
    5e9c:	8d cf       	rjmp	.-230    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005e9e <_ZN7ADXL34514setInactivityYEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setInactivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
}
void ADXL345::setInactivityY(bool state) {  
    5e9e:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
    5ea0:	67 e2       	ldi	r22, 0x27	; 39
    5ea2:	41 e0       	ldi	r20, 0x01	; 1
    5ea4:	50 e0       	ldi	r21, 0x00	; 0
}
    5ea6:	88 cf       	rjmp	.-240    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ea8 <_ZN7ADXL34514setInactivityXEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
}
void ADXL345::setActivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void ADXL345::setInactivityX(bool state) {  
    5ea8:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
    5eaa:	67 e2       	ldi	r22, 0x27	; 39
    5eac:	42 e0       	ldi	r20, 0x02	; 2
    5eae:	50 e0       	ldi	r21, 0x00	; 0
}
    5eb0:	83 cf       	rjmp	.-250    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005eb2 <_ZN7ADXL34512setActivityZEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
}
void ADXL345::setActivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
}
void ADXL345::setActivityZ(bool state) {  
    5eb2:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
    5eb4:	67 e2       	ldi	r22, 0x27	; 39
    5eb6:	44 e0       	ldi	r20, 0x04	; 4
    5eb8:	50 e0       	ldi	r21, 0x00	; 0
}
    5eba:	7e cf       	rjmp	.-260    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ebc <_ZN7ADXL34512setActivityYEb>:
}

void ADXL345::setActivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
}
void ADXL345::setActivityY(bool state) {  
    5ebc:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
    5ebe:	67 e2       	ldi	r22, 0x27	; 39
    5ec0:	45 e0       	ldi	r20, 0x05	; 5
    5ec2:	50 e0       	ldi	r21, 0x00	; 0
}
    5ec4:	79 cf       	rjmp	.-270    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ec6 <_ZN7ADXL34512setActivityXEb>:
}
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
    5ec6:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
    5ec8:	67 e2       	ldi	r22, 0x27	; 39
    5eca:	46 e0       	ldi	r20, 0x06	; 6
    5ecc:	50 e0       	ldi	r21, 0x00	; 0
}
    5ece:	74 cf       	rjmp	.-280    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ed0 <_ZN7ADXL34513setJustifyBitEb>:
}

// Sets the JUSTIFY bit
// if sets to 1 selects the left justified mode
// if sets to 0 selects right justified mode with sign extension
void ADXL345::setJustifyBit(bool justifyBit) {
    5ed0:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 2, justifyBit);
    5ed2:	61 e3       	ldi	r22, 0x31	; 49
    5ed4:	42 e0       	ldi	r20, 0x02	; 2
    5ed6:	50 e0       	ldi	r21, 0x00	; 0
}
    5ed8:	6f cf       	rjmp	.-290    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005eda <_ZN7ADXL34513setFullResBitEb>:
// Sets the FULL_RES bit
// if set to 1, the device is in full resolution mode, where the output resolution increases with the
//   g range set by the range bits to maintain a 4mg/LSB scal factor
// if set to 0, the device is in 10-bit mode, and the range buts determine the maximum g range
//   and scale factor
void ADXL345::setFullResBit(bool fullResBit) {
    5eda:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 3, fullResBit);
    5edc:	61 e3       	ldi	r22, 0x31	; 49
    5ede:	43 e0       	ldi	r20, 0x03	; 3
    5ee0:	50 e0       	ldi	r21, 0x00	; 0
}
    5ee2:	6a cf       	rjmp	.-300    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ee4 <_ZN7ADXL34520setInterruptLevelBitEb>:
}

// Sets the INT_INVERT bit
// if set to 0 sets the interrupts to active high
// if set to 1 sets the interrupts to active low
void ADXL345::setInterruptLevelBit(bool interruptLevelBit) {
    5ee4:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 5, interruptLevelBit);
    5ee6:	61 e3       	ldi	r22, 0x31	; 49
    5ee8:	45 e0       	ldi	r20, 0x05	; 5
    5eea:	50 e0       	ldi	r21, 0x00	; 0
}
    5eec:	65 cf       	rjmp	.-310    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005eee <_ZN7ADXL3459setSpiBitEb>:
}

// Sets the SPI bit
// if set to 1 it sets the device to 3-wire mode
// if set to 0 it sets the device to 4-wire SPI mode
void ADXL345::setSpiBit(bool spiBit) {
    5eee:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 6, spiBit);
    5ef0:	61 e3       	ldi	r22, 0x31	; 49
    5ef2:	46 e0       	ldi	r20, 0x06	; 6
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
}
    5ef6:	60 cf       	rjmp	.-320    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005ef8 <_ZN7ADXL34514setSelfTestBitEb>:
}

// Sets the SELF-TEST bit
// if set to 1 it applies a self-test force to the sensor causing a shift in the output data
// if set to 0 it disables the self-test force
void ADXL345::setSelfTestBit(bool selfTestBit) {
    5ef8:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
    5efa:	61 e3       	ldi	r22, 0x31	; 49
    5efc:	47 e0       	ldi	r20, 0x07	; 7
    5efe:	50 e0       	ldi	r21, 0x00	; 0
}
    5f00:	5b cf       	rjmp	.-330    	; 0x5db8 <_ZN7ADXL34514setRegisterBitEhib>

00005f02 <_ZN7ADXL34518getInterruptSourceEv>:
    _s = (uint8_t) (r + 6) | (_b & 0B11110000);
    writeTo(DEVICE, ADXL345_BW_RATE, _s);
  }
}

uint8_t ADXL345::getInterruptSource() {
    5f02:	0f 93       	push	r16
    5f04:	1f 93       	push	r17
    5f06:	df 93       	push	r29
    5f08:	cf 93       	push	r28
    5f0a:	0f 92       	push	r0
    5f0c:	cd b7       	in	r28, 0x3d	; 61
    5f0e:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_INT_SOURCE, 1, &_b);
    5f10:	63 e5       	ldi	r22, 0x53	; 83
    5f12:	70 e0       	ldi	r23, 0x00	; 0
    5f14:	40 e3       	ldi	r20, 0x30	; 48
    5f16:	21 e0       	ldi	r18, 0x01	; 1
    5f18:	8e 01       	movw	r16, r28
    5f1a:	0f 5f       	subi	r16, 0xFF	; 255
    5f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f1e:	22 de       	rcall	.-956    	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return _b;
}
    5f20:	89 81       	ldd	r24, Y+1	; 0x01
    5f22:	0f 90       	pop	r0
    5f24:	cf 91       	pop	r28
    5f26:	df 91       	pop	r29
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	08 95       	ret

00005f2e <_ZN7ADXL3457setRateEf>:
  readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
  _b &= 0B00001111;
  return (pow(2,((int16_t) _b)-6)) * 6.25;
}

void ADXL345::setRate(float rate){
    5f2e:	cf 92       	push	r12
    5f30:	df 92       	push	r13
    5f32:	ef 92       	push	r14
    5f34:	ff 92       	push	r15
    5f36:	0f 93       	push	r16
    5f38:	1f 93       	push	r17
    5f3a:	df 93       	push	r29
    5f3c:	cf 93       	push	r28
    5f3e:	0f 92       	push	r0
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
    5f44:	6c 01       	movw	r12, r24
  uint8_t _b,_s;
  int16_t v = (int16_t) (rate / 6.25);
    5f46:	cb 01       	movw	r24, r22
    5f48:	ba 01       	movw	r22, r20
    5f4a:	20 e0       	ldi	r18, 0x00	; 0
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	48 ec       	ldi	r20, 0xC8	; 200
    5f50:	50 e4       	ldi	r21, 0x40	; 64
    5f52:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    5f56:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    5f5a:	ee 24       	eor	r14, r14
    5f5c:	ff 24       	eor	r15, r15
    5f5e:	03 c0       	rjmp	.+6      	; 0x5f66 <_ZN7ADXL3457setRateEf+0x38>
  int16_t r = 0;
  while (v >>= 1)
  {
    r++;
    5f60:	08 94       	sec
    5f62:	e1 1c       	adc	r14, r1
    5f64:	f1 1c       	adc	r15, r1

void ADXL345::setRate(float rate){
  uint8_t _b,_s;
  int16_t v = (int16_t) (rate / 6.25);
  int16_t r = 0;
  while (v >>= 1)
    5f66:	75 95       	asr	r23
    5f68:	67 95       	ror	r22
    5f6a:	61 15       	cp	r22, r1
    5f6c:	71 05       	cpc	r23, r1
    5f6e:	c1 f7       	brne	.-16     	; 0x5f60 <_ZN7ADXL3457setRateEf+0x32>
  {
    r++;
  }
  if (r <= 9) { 
    5f70:	8a e0       	ldi	r24, 0x0A	; 10
    5f72:	e8 16       	cp	r14, r24
    5f74:	f1 04       	cpc	r15, r1
    5f76:	9c f4       	brge	.+38     	; 0x5f9e <_ZN7ADXL3457setRateEf+0x70>
    readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
    5f78:	c6 01       	movw	r24, r12
    5f7a:	63 e5       	ldi	r22, 0x53	; 83
    5f7c:	70 e0       	ldi	r23, 0x00	; 0
    5f7e:	4c e2       	ldi	r20, 0x2C	; 44
    5f80:	21 e0       	ldi	r18, 0x01	; 1
    5f82:	8e 01       	movw	r16, r28
    5f84:	0f 5f       	subi	r16, 0xFF	; 255
    5f86:	1f 4f       	sbci	r17, 0xFF	; 255
    5f88:	ed dd       	rcall	.-1062   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
    _s = (uint8_t) (r + 6) | (_b & 0B11110000);
    writeTo(DEVICE, ADXL345_BW_RATE, _s);
    5f8a:	2e 2d       	mov	r18, r14
    5f8c:	2a 5f       	subi	r18, 0xFA	; 250
    5f8e:	89 81       	ldd	r24, Y+1	; 0x01
    5f90:	80 7f       	andi	r24, 0xF0	; 240
    5f92:	28 2b       	or	r18, r24
    5f94:	c6 01       	movw	r24, r12
    5f96:	63 e5       	ldi	r22, 0x53	; 83
    5f98:	70 e0       	ldi	r23, 0x00	; 0
    5f9a:	4c e2       	ldi	r20, 0x2C	; 44
    5f9c:	31 dd       	rcall	.-1438   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
  }
}
    5f9e:	0f 90       	pop	r0
    5fa0:	cf 91       	pop	r28
    5fa2:	df 91       	pop	r29
    5fa4:	1f 91       	pop	r17
    5fa6:	0f 91       	pop	r16
    5fa8:	ff 90       	pop	r15
    5faa:	ef 90       	pop	r14
    5fac:	df 90       	pop	r13
    5fae:	cf 90       	pop	r12
    5fb0:	08 95       	ret

00005fb2 <_ZN7ADXL3457getRateEv>:
}
void ADXL345::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
}

float ADXL345::getRate(){
    5fb2:	0f 93       	push	r16
    5fb4:	1f 93       	push	r17
    5fb6:	df 93       	push	r29
    5fb8:	cf 93       	push	r28
    5fba:	0f 92       	push	r0
    5fbc:	cd b7       	in	r28, 0x3d	; 61
    5fbe:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
    5fc0:	63 e5       	ldi	r22, 0x53	; 83
    5fc2:	70 e0       	ldi	r23, 0x00	; 0
    5fc4:	4c e2       	ldi	r20, 0x2C	; 44
    5fc6:	21 e0       	ldi	r18, 0x01	; 1
    5fc8:	8e 01       	movw	r16, r28
    5fca:	0f 5f       	subi	r16, 0xFF	; 255
    5fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5fce:	ca dd       	rcall	.-1132   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  _b &= 0B00001111;
  return (pow(2,((int16_t) _b)-6)) * 6.25;
    5fd0:	69 81       	ldd	r22, Y+1	; 0x01
    5fd2:	6f 70       	andi	r22, 0x0F	; 15
    5fd4:	70 e0       	ldi	r23, 0x00	; 0
    5fd6:	66 50       	subi	r22, 0x06	; 6
    5fd8:	70 40       	sbci	r23, 0x00	; 0
    5fda:	88 27       	eor	r24, r24
    5fdc:	77 fd       	sbrc	r23, 7
    5fde:	80 95       	com	r24
    5fe0:	98 2f       	mov	r25, r24
    5fe2:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    5fe6:	9b 01       	movw	r18, r22
    5fe8:	ac 01       	movw	r20, r24
    5fea:	60 e0       	ldi	r22, 0x00	; 0
    5fec:	70 e0       	ldi	r23, 0x00	; 0
    5fee:	80 e0       	ldi	r24, 0x00	; 0
    5ff0:	90 e4       	ldi	r25, 0x40	; 64
    5ff2:	0e 94 87 41 	call	0x830e	; 0x830e <pow>
    5ff6:	9b 01       	movw	r18, r22
    5ff8:	ac 01       	movw	r20, r24
    5ffa:	ca 01       	movw	r24, r20
    5ffc:	b9 01       	movw	r22, r18
    5ffe:	20 e0       	ldi	r18, 0x00	; 0
    6000:	30 e0       	ldi	r19, 0x00	; 0
    6002:	48 ec       	ldi	r20, 0xC8	; 200
    6004:	50 e4       	ldi	r21, 0x40	; 64
    6006:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
}
    600a:	0f 90       	pop	r0
    600c:	cf 91       	pop	r28
    600e:	df 91       	pop	r29
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	08 95       	ret

00006016 <_ZN7ADXL34519getFreeFallDurationEv>:
  uint8_t _b = uint8_t (freeFallDuration);
  writeTo(DEVICE, ADXL345_TIME_FF, _b);  
}

// Gets the TIME_FF register.
int16_t ADXL345::getFreeFallDuration() {
    6016:	0f 93       	push	r16
    6018:	1f 93       	push	r17
    601a:	df 93       	push	r29
    601c:	cf 93       	push	r28
    601e:	0f 92       	push	r0
    6020:	cd b7       	in	r28, 0x3d	; 61
    6022:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_TIME_FF, 1, &_b);  
    6024:	63 e5       	ldi	r22, 0x53	; 83
    6026:	70 e0       	ldi	r23, 0x00	; 0
    6028:	49 e2       	ldi	r20, 0x29	; 41
    602a:	21 e0       	ldi	r18, 0x01	; 1
    602c:	8e 01       	movw	r16, r28
    602e:	0f 5f       	subi	r16, 0xFF	; 255
    6030:	1f 4f       	sbci	r17, 0xFF	; 255
    6032:	98 dd       	rcall	.-1232   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6034:	89 81       	ldd	r24, Y+1	; 0x01
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	0f 90       	pop	r0
    603a:	cf 91       	pop	r28
    603c:	df 91       	pop	r29
    603e:	1f 91       	pop	r17
    6040:	0f 91       	pop	r16
    6042:	08 95       	ret

00006044 <_ZN7ADXL34520getFreeFallThresholdEv>:
  uint8_t _b = uint8_t (freeFallThreshold);
  writeTo(DEVICE, ADXL345_THRESH_FF, _b);  
}

// Gets the THRESH_FF register.
int16_t ADXL345::getFreeFallThreshold() {
    6044:	0f 93       	push	r16
    6046:	1f 93       	push	r17
    6048:	df 93       	push	r29
    604a:	cf 93       	push	r28
    604c:	0f 92       	push	r0
    604e:	cd b7       	in	r28, 0x3d	; 61
    6050:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_THRESH_FF, 1, &_b);  
    6052:	63 e5       	ldi	r22, 0x53	; 83
    6054:	70 e0       	ldi	r23, 0x00	; 0
    6056:	48 e2       	ldi	r20, 0x28	; 40
    6058:	21 e0       	ldi	r18, 0x01	; 1
    605a:	8e 01       	movw	r16, r28
    605c:	0f 5f       	subi	r16, 0xFF	; 255
    605e:	1f 4f       	sbci	r17, 0xFF	; 255
    6060:	81 dd       	rcall	.-1278   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	0f 90       	pop	r0
    6068:	cf 91       	pop	r28
    606a:	df 91       	pop	r29
    606c:	1f 91       	pop	r17
    606e:	0f 91       	pop	r16
    6070:	08 95       	ret

00006072 <_ZN7ADXL34517getTimeInactivityEv>:
  uint8_t _b = uint8_t (timeInactivity);
  writeTo(DEVICE, ADXL345_TIME_INACT, _b);  
}

// Gets the TIME_INACT register
int16_t ADXL345::getTimeInactivity() {
    6072:	0f 93       	push	r16
    6074:	1f 93       	push	r17
    6076:	df 93       	push	r29
    6078:	cf 93       	push	r28
    607a:	0f 92       	push	r0
    607c:	cd b7       	in	r28, 0x3d	; 61
    607e:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_TIME_INACT, 1, &_b);  
    6080:	63 e5       	ldi	r22, 0x53	; 83
    6082:	70 e0       	ldi	r23, 0x00	; 0
    6084:	46 e2       	ldi	r20, 0x26	; 38
    6086:	21 e0       	ldi	r18, 0x01	; 1
    6088:	8e 01       	movw	r16, r28
    608a:	0f 5f       	subi	r16, 0xFF	; 255
    608c:	1f 4f       	sbci	r17, 0xFF	; 255
    608e:	6a dd       	rcall	.-1324   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6090:	89 81       	ldd	r24, Y+1	; 0x01
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	0f 90       	pop	r0
    6096:	cf 91       	pop	r28
    6098:	df 91       	pop	r29
    609a:	1f 91       	pop	r17
    609c:	0f 91       	pop	r16
    609e:	08 95       	ret

000060a0 <_ZN7ADXL34522getInactivityThresholdEv>:
  uint8_t _b = uint8_t (inactivityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_INACT, _b);  
}

// Gets the THRESH_INACT byte
int16_t ADXL345::getInactivityThreshold() {
    60a0:	0f 93       	push	r16
    60a2:	1f 93       	push	r17
    60a4:	df 93       	push	r29
    60a6:	cf 93       	push	r28
    60a8:	0f 92       	push	r0
    60aa:	cd b7       	in	r28, 0x3d	; 61
    60ac:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_THRESH_INACT, 1, &_b);  
    60ae:	63 e5       	ldi	r22, 0x53	; 83
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	45 e2       	ldi	r20, 0x25	; 37
    60b4:	21 e0       	ldi	r18, 0x01	; 1
    60b6:	8e 01       	movw	r16, r28
    60b8:	0f 5f       	subi	r16, 0xFF	; 255
    60ba:	1f 4f       	sbci	r17, 0xFF	; 255
    60bc:	53 dd       	rcall	.-1370   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    60be:	89 81       	ldd	r24, Y+1	; 0x01
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	0f 90       	pop	r0
    60c4:	cf 91       	pop	r28
    60c6:	df 91       	pop	r29
    60c8:	1f 91       	pop	r17
    60ca:	0f 91       	pop	r16
    60cc:	08 95       	ret

000060ce <_ZN7ADXL34520getActivityThresholdEv>:
  uint8_t _b = uint8_t (activityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_ACT, _b);  
}

// Gets the THRESH_ACT byte
int16_t ADXL345::getActivityThreshold() {
    60ce:	0f 93       	push	r16
    60d0:	1f 93       	push	r17
    60d2:	df 93       	push	r29
    60d4:	cf 93       	push	r28
    60d6:	0f 92       	push	r0
    60d8:	cd b7       	in	r28, 0x3d	; 61
    60da:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_THRESH_ACT, 1, &_b);  
    60dc:	63 e5       	ldi	r22, 0x53	; 83
    60de:	70 e0       	ldi	r23, 0x00	; 0
    60e0:	44 e2       	ldi	r20, 0x24	; 36
    60e2:	21 e0       	ldi	r18, 0x01	; 1
    60e4:	8e 01       	movw	r16, r28
    60e6:	0f 5f       	subi	r16, 0xFF	; 255
    60e8:	1f 4f       	sbci	r17, 0xFF	; 255
    60ea:	3c dd       	rcall	.-1416   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    60ec:	89 81       	ldd	r24, Y+1	; 0x01
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	0f 90       	pop	r0
    60f2:	cf 91       	pop	r28
    60f4:	df 91       	pop	r29
    60f6:	1f 91       	pop	r17
    60f8:	0f 91       	pop	r16
    60fa:	08 95       	ret

000060fc <_ZN7ADXL34518getDoubleTapWindowEv>:
  uint8_t _b = uint8_t (doubleTapWindow);
  writeTo(DEVICE, ADXL345_WINDOW, _b);  
}

// Gets the Window register
int16_t ADXL345::getDoubleTapWindow() {
    60fc:	0f 93       	push	r16
    60fe:	1f 93       	push	r17
    6100:	df 93       	push	r29
    6102:	cf 93       	push	r28
    6104:	0f 92       	push	r0
    6106:	cd b7       	in	r28, 0x3d	; 61
    6108:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_WINDOW, 1, &_b);  
    610a:	63 e5       	ldi	r22, 0x53	; 83
    610c:	70 e0       	ldi	r23, 0x00	; 0
    610e:	43 e2       	ldi	r20, 0x23	; 35
    6110:	21 e0       	ldi	r18, 0x01	; 1
    6112:	8e 01       	movw	r16, r28
    6114:	0f 5f       	subi	r16, 0xFF	; 255
    6116:	1f 4f       	sbci	r17, 0xFF	; 255
    6118:	25 dd       	rcall	.-1462   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    611a:	89 81       	ldd	r24, Y+1	; 0x01
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0f 90       	pop	r0
    6120:	cf 91       	pop	r28
    6122:	df 91       	pop	r29
    6124:	1f 91       	pop	r17
    6126:	0f 91       	pop	r16
    6128:	08 95       	ret

0000612a <_ZN7ADXL34519getDoubleTapLatencyEv>:
  uint8_t _b = uint8_t (doubleTapLatency);
  writeTo(DEVICE, ADXL345_LATENT, _b);  
}

// Gets the Latent value
int16_t ADXL345::getDoubleTapLatency() {
    612a:	0f 93       	push	r16
    612c:	1f 93       	push	r17
    612e:	df 93       	push	r29
    6130:	cf 93       	push	r28
    6132:	0f 92       	push	r0
    6134:	cd b7       	in	r28, 0x3d	; 61
    6136:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_LATENT, 1, &_b);  
    6138:	63 e5       	ldi	r22, 0x53	; 83
    613a:	70 e0       	ldi	r23, 0x00	; 0
    613c:	42 e2       	ldi	r20, 0x22	; 34
    613e:	21 e0       	ldi	r18, 0x01	; 1
    6140:	8e 01       	movw	r16, r28
    6142:	0f 5f       	subi	r16, 0xFF	; 255
    6144:	1f 4f       	sbci	r17, 0xFF	; 255
    6146:	0e dd       	rcall	.-1508   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6148:	89 81       	ldd	r24, Y+1	; 0x01
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	0f 90       	pop	r0
    614e:	cf 91       	pop	r28
    6150:	df 91       	pop	r29
    6152:	1f 91       	pop	r17
    6154:	0f 91       	pop	r16
    6156:	08 95       	ret

00006158 <_ZN7ADXL34514getTapDurationEv>:
  uint8_t _b = uint8_t (tapDuration);
  writeTo(DEVICE, ADXL345_DUR, _b);  
}

// Gets the DUR byte
int16_t ADXL345::getTapDuration() {
    6158:	0f 93       	push	r16
    615a:	1f 93       	push	r17
    615c:	df 93       	push	r29
    615e:	cf 93       	push	r28
    6160:	0f 92       	push	r0
    6162:	cd b7       	in	r28, 0x3d	; 61
    6164:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_DUR, 1, &_b);  
    6166:	63 e5       	ldi	r22, 0x53	; 83
    6168:	70 e0       	ldi	r23, 0x00	; 0
    616a:	41 e2       	ldi	r20, 0x21	; 33
    616c:	21 e0       	ldi	r18, 0x01	; 1
    616e:	8e 01       	movw	r16, r28
    6170:	0f 5f       	subi	r16, 0xFF	; 255
    6172:	1f 4f       	sbci	r17, 0xFF	; 255
    6174:	f7 dc       	rcall	.-1554   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6176:	89 81       	ldd	r24, Y+1	; 0x01
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	0f 90       	pop	r0
    617c:	cf 91       	pop	r28
    617e:	df 91       	pop	r29
    6180:	1f 91       	pop	r17
    6182:	0f 91       	pop	r16
    6184:	08 95       	ret

00006186 <_ZN7ADXL34513getAxisOffsetEPiS0_S0_>:
  writeTo(DEVICE, ADXL345_OFSY, uint8_t (y));
  writeTo(DEVICE, ADXL345_OFSZ, uint8_t (z));
}

// Gets the OFSX, OFSY and OFSZ bytes
void ADXL345::getAxisOffset(int16_t* x, int16_t* y, int16_t*z) {
    6186:	6f 92       	push	r6
    6188:	7f 92       	push	r7
    618a:	8f 92       	push	r8
    618c:	9f 92       	push	r9
    618e:	af 92       	push	r10
    6190:	bf 92       	push	r11
    6192:	cf 92       	push	r12
    6194:	df 92       	push	r13
    6196:	ef 92       	push	r14
    6198:	ff 92       	push	r15
    619a:	0f 93       	push	r16
    619c:	1f 93       	push	r17
    619e:	df 93       	push	r29
    61a0:	cf 93       	push	r28
    61a2:	0f 92       	push	r0
    61a4:	cd b7       	in	r28, 0x3d	; 61
    61a6:	de b7       	in	r29, 0x3e	; 62
    61a8:	6c 01       	movw	r12, r24
    61aa:	5b 01       	movw	r10, r22
    61ac:	4a 01       	movw	r8, r20
    61ae:	39 01       	movw	r6, r18
  uint8_t _b;
  readFrom(DEVICE, ADXL345_OFSX, 1, &_b);  
    61b0:	63 e5       	ldi	r22, 0x53	; 83
    61b2:	70 e0       	ldi	r23, 0x00	; 0
    61b4:	4e e1       	ldi	r20, 0x1E	; 30
    61b6:	21 e0       	ldi	r18, 0x01	; 1
    61b8:	7e 01       	movw	r14, r28
    61ba:	08 94       	sec
    61bc:	e1 1c       	adc	r14, r1
    61be:	f1 1c       	adc	r15, r1
    61c0:	87 01       	movw	r16, r14
    61c2:	d0 dc       	rcall	.-1632   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  *x = int16_t (_b);
    61c4:	89 81       	ldd	r24, Y+1	; 0x01
    61c6:	f5 01       	movw	r30, r10
    61c8:	80 83       	st	Z, r24
    61ca:	11 82       	std	Z+1, r1	; 0x01
  readFrom(DEVICE, ADXL345_OFSY, 1, &_b);  
    61cc:	c6 01       	movw	r24, r12
    61ce:	63 e5       	ldi	r22, 0x53	; 83
    61d0:	70 e0       	ldi	r23, 0x00	; 0
    61d2:	4f e1       	ldi	r20, 0x1F	; 31
    61d4:	21 e0       	ldi	r18, 0x01	; 1
    61d6:	c6 dc       	rcall	.-1652   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  *y = int16_t (_b);
    61d8:	89 81       	ldd	r24, Y+1	; 0x01
    61da:	f4 01       	movw	r30, r8
    61dc:	80 83       	st	Z, r24
    61de:	11 82       	std	Z+1, r1	; 0x01
  readFrom(DEVICE, ADXL345_OFSZ, 1, &_b);  
    61e0:	c6 01       	movw	r24, r12
    61e2:	63 e5       	ldi	r22, 0x53	; 83
    61e4:	70 e0       	ldi	r23, 0x00	; 0
    61e6:	40 e2       	ldi	r20, 0x20	; 32
    61e8:	21 e0       	ldi	r18, 0x01	; 1
    61ea:	bc dc       	rcall	.-1672   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  *z = int16_t (_b);
    61ec:	89 81       	ldd	r24, Y+1	; 0x01
    61ee:	f3 01       	movw	r30, r6
    61f0:	80 83       	st	Z, r24
    61f2:	11 82       	std	Z+1, r1	; 0x01
}
    61f4:	0f 90       	pop	r0
    61f6:	cf 91       	pop	r28
    61f8:	df 91       	pop	r29
    61fa:	1f 91       	pop	r17
    61fc:	0f 91       	pop	r16
    61fe:	ff 90       	pop	r15
    6200:	ef 90       	pop	r14
    6202:	df 90       	pop	r13
    6204:	cf 90       	pop	r12
    6206:	bf 90       	pop	r11
    6208:	af 90       	pop	r10
    620a:	9f 90       	pop	r9
    620c:	8f 90       	pop	r8
    620e:	7f 90       	pop	r7
    6210:	6f 90       	pop	r6
    6212:	08 95       	ret

00006214 <_ZN7ADXL34515getTapThresholdEv>:
}

// Gets the THRESH_TAP byte value
// return value is comprised between 0 and 255
// the scale factor is 62.5 mg/LSB
int16_t ADXL345::getTapThreshold() {
    6214:	0f 93       	push	r16
    6216:	1f 93       	push	r17
    6218:	df 93       	push	r29
    621a:	cf 93       	push	r28
    621c:	0f 92       	push	r0
    621e:	cd b7       	in	r28, 0x3d	; 61
    6220:	de b7       	in	r29, 0x3e	; 62
  uint8_t _b;
  readFrom(DEVICE, ADXL345_THRESH_TAP, 1, &_b);  
    6222:	63 e5       	ldi	r22, 0x53	; 83
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	4d e1       	ldi	r20, 0x1D	; 29
    6228:	21 e0       	ldi	r18, 0x01	; 1
    622a:	8e 01       	movw	r16, r28
    622c:	0f 5f       	subi	r16, 0xFF	; 255
    622e:	1f 4f       	sbci	r17, 0xFF	; 255
    6230:	99 dc       	rcall	.-1742   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  return int16_t (_b);
}
    6232:	89 81       	ldd	r24, Y+1	; 0x01
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	0f 90       	pop	r0
    6238:	cf 91       	pop	r28
    623a:	df 91       	pop	r29
    623c:	1f 91       	pop	r17
    623e:	0f 91       	pop	r16
    6240:	08 95       	ret

00006242 <_ZN7ADXL34515setRangeSettingEi>:
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
  *rangeSetting = _b & 0B00000011;
}

// Sets the range setting, possible values are: 2, 4, 8, 16
void ADXL345::setRangeSetting(int16_t val) {
    6242:	cf 92       	push	r12
    6244:	df 92       	push	r13
    6246:	ff 92       	push	r15
    6248:	0f 93       	push	r16
    624a:	1f 93       	push	r17
    624c:	df 93       	push	r29
    624e:	cf 93       	push	r28
    6250:	0f 92       	push	r0
    6252:	cd b7       	in	r28, 0x3d	; 61
    6254:	de b7       	in	r29, 0x3e	; 62
    6256:	6c 01       	movw	r12, r24
  uint8_t _s;
  uint8_t _b;

  switch (val) {
    6258:	68 30       	cpi	r22, 0x08	; 8
    625a:	71 05       	cpc	r23, r1
    625c:	59 f0       	breq	.+22     	; 0x6274 <_ZN7ADXL34515setRangeSettingEi+0x32>
    625e:	60 31       	cpi	r22, 0x10	; 16
    6260:	71 05       	cpc	r23, r1
    6262:	59 f0       	breq	.+22     	; 0x627a <_ZN7ADXL34515setRangeSettingEi+0x38>
    6264:	64 30       	cpi	r22, 0x04	; 4
    6266:	71 05       	cpc	r23, r1
    6268:	19 f4       	brne	.+6      	; 0x6270 <_ZN7ADXL34515setRangeSettingEi+0x2e>
    626a:	ff 24       	eor	r15, r15
    626c:	f3 94       	inc	r15
    626e:	07 c0       	rjmp	.+14     	; 0x627e <_ZN7ADXL34515setRangeSettingEi+0x3c>
    6270:	ff 24       	eor	r15, r15
    6272:	05 c0       	rjmp	.+10     	; 0x627e <_ZN7ADXL34515setRangeSettingEi+0x3c>
    6274:	32 e0       	ldi	r19, 0x02	; 2
    6276:	f3 2e       	mov	r15, r19
    6278:	02 c0       	rjmp	.+4      	; 0x627e <_ZN7ADXL34515setRangeSettingEi+0x3c>
  case 4:  
    _s = 0B00000001;
    break;
  case 8:  
    _s = 0B00000010;
    break;
    627a:	23 e0       	ldi	r18, 0x03	; 3
    627c:	f2 2e       	mov	r15, r18
    _s = 0B00000011;
    break;
  default: 
    _s = 0B00000000;
  }
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
    627e:	c6 01       	movw	r24, r12
    6280:	63 e5       	ldi	r22, 0x53	; 83
    6282:	70 e0       	ldi	r23, 0x00	; 0
    6284:	41 e3       	ldi	r20, 0x31	; 49
    6286:	21 e0       	ldi	r18, 0x01	; 1
    6288:	8e 01       	movw	r16, r28
    628a:	0f 5f       	subi	r16, 0xFF	; 255
    628c:	1f 4f       	sbci	r17, 0xFF	; 255
    628e:	6a dc       	rcall	.-1836   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  _s |= (_b & 0B11101100);
    6290:	89 81       	ldd	r24, Y+1	; 0x01
    6292:	8c 7e       	andi	r24, 0xEC	; 236
    6294:	f8 2a       	or	r15, r24
  writeTo(DEVICE, ADXL345_DATA_FORMAT, _s);
    6296:	c6 01       	movw	r24, r12
    6298:	63 e5       	ldi	r22, 0x53	; 83
    629a:	70 e0       	ldi	r23, 0x00	; 0
    629c:	41 e3       	ldi	r20, 0x31	; 49
    629e:	2f 2d       	mov	r18, r15
    62a0:	af db       	rcall	.-2210   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
}
    62a2:	0f 90       	pop	r0
    62a4:	cf 91       	pop	r28
    62a6:	df 91       	pop	r29
    62a8:	1f 91       	pop	r17
    62aa:	0f 91       	pop	r16
    62ac:	ff 90       	pop	r15
    62ae:	df 90       	pop	r13
    62b0:	cf 90       	pop	r12
    62b2:	08 95       	ret

000062b4 <_ZN7ADXL34515getRangeSettingEPh>:
  Wire.endTransmission();         // end transmission
}

// Gets the range setting and return it into rangeSetting
// it can be 2, 4, 8 or 16
void ADXL345::getRangeSetting(uint8_t* rangeSetting) {
    62b4:	ef 92       	push	r14
    62b6:	ff 92       	push	r15
    62b8:	0f 93       	push	r16
    62ba:	1f 93       	push	r17
    62bc:	df 93       	push	r29
    62be:	cf 93       	push	r28
    62c0:	0f 92       	push	r0
    62c2:	cd b7       	in	r28, 0x3d	; 61
    62c4:	de b7       	in	r29, 0x3e	; 62
    62c6:	7b 01       	movw	r14, r22
  uint8_t _b;
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
    62c8:	63 e5       	ldi	r22, 0x53	; 83
    62ca:	70 e0       	ldi	r23, 0x00	; 0
    62cc:	41 e3       	ldi	r20, 0x31	; 49
    62ce:	21 e0       	ldi	r18, 0x01	; 1
    62d0:	8e 01       	movw	r16, r28
    62d2:	0f 5f       	subi	r16, 0xFF	; 255
    62d4:	1f 4f       	sbci	r17, 0xFF	; 255
    62d6:	46 dc       	rcall	.-1908   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>
  *rangeSetting = _b & 0B00000011;
    62d8:	89 81       	ldd	r24, Y+1	; 0x01
    62da:	83 70       	andi	r24, 0x03	; 3
    62dc:	f7 01       	movw	r30, r14
    62de:	80 83       	st	Z, r24
}
    62e0:	0f 90       	pop	r0
    62e2:	cf 91       	pop	r28
    62e4:	df 91       	pop	r29
    62e6:	1f 91       	pop	r17
    62e8:	0f 91       	pop	r16
    62ea:	ff 90       	pop	r15
    62ec:	ef 90       	pop	r14
    62ee:	08 95       	ret

000062f0 <_ZN7ADXL3459readAccelEPiS0_S0_>:
  writeTo(DEVICE, ADXL345_POWER_CTL, 16);
  writeTo(DEVICE, ADXL345_POWER_CTL, 8); 
}

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int16_t* x, int16_t* y, int16_t* z) {
    62f0:	8f 92       	push	r8
    62f2:	9f 92       	push	r9
    62f4:	af 92       	push	r10
    62f6:	bf 92       	push	r11
    62f8:	cf 92       	push	r12
    62fa:	df 92       	push	r13
    62fc:	ef 92       	push	r14
    62fe:	ff 92       	push	r15
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	7c 01       	movw	r14, r24
    6306:	6b 01       	movw	r12, r22
    6308:	5a 01       	movw	r10, r20
    630a:	49 01       	movw	r8, r18
  readFrom(DEVICE, ADXL345_DATAX0, TO_READ, _buff); //read the acceleration data from the ADXL345
    630c:	63 e5       	ldi	r22, 0x53	; 83
    630e:	70 e0       	ldi	r23, 0x00	; 0
    6310:	42 e3       	ldi	r20, 0x32	; 50
    6312:	26 e0       	ldi	r18, 0x06	; 6
    6314:	87 01       	movw	r16, r14
    6316:	26 dc       	rcall	.-1972   	; 0x5b64 <_ZN7ADXL3458readFromEihhPh>

  // each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
  // thus we are converting both bytes in to one int
  *x = (((int16_t)_buff[1]) << 8) | _buff[0];
    6318:	f7 01       	movw	r30, r14
    631a:	91 81       	ldd	r25, Z+1	; 0x01
    631c:	80 e0       	ldi	r24, 0x00	; 0
    631e:	20 81       	ld	r18, Z
    6320:	30 e0       	ldi	r19, 0x00	; 0
    6322:	82 2b       	or	r24, r18
    6324:	93 2b       	or	r25, r19
    6326:	f6 01       	movw	r30, r12
    6328:	91 83       	std	Z+1, r25	; 0x01
    632a:	80 83       	st	Z, r24
  *y = (((int16_t)_buff[3]) << 8) | _buff[2];
    632c:	f7 01       	movw	r30, r14
    632e:	93 81       	ldd	r25, Z+3	; 0x03
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	22 81       	ldd	r18, Z+2	; 0x02
    6334:	30 e0       	ldi	r19, 0x00	; 0
    6336:	82 2b       	or	r24, r18
    6338:	93 2b       	or	r25, r19
    633a:	f5 01       	movw	r30, r10
    633c:	91 83       	std	Z+1, r25	; 0x01
    633e:	80 83       	st	Z, r24
  *z = (((int16_t)_buff[5]) << 8) | _buff[4];
    6340:	f7 01       	movw	r30, r14
    6342:	95 81       	ldd	r25, Z+5	; 0x05
    6344:	80 e0       	ldi	r24, 0x00	; 0
    6346:	24 81       	ldd	r18, Z+4	; 0x04
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	82 2b       	or	r24, r18
    634c:	93 2b       	or	r25, r19
    634e:	f4 01       	movw	r30, r8
    6350:	91 83       	std	Z+1, r25	; 0x01
    6352:	80 83       	st	Z, r24
}
    6354:	1f 91       	pop	r17
    6356:	0f 91       	pop	r16
    6358:	ff 90       	pop	r15
    635a:	ef 90       	pop	r14
    635c:	df 90       	pop	r13
    635e:	cf 90       	pop	r12
    6360:	bf 90       	pop	r11
    6362:	af 90       	pop	r10
    6364:	9f 90       	pop	r9
    6366:	8f 90       	pop	r8
    6368:	08 95       	ret

0000636a <_ZN7ADXL3457powerOnEv>:

ADXL345::ADXL345() {

}

void ADXL345::powerOn() {
    636a:	0f 93       	push	r16
    636c:	1f 93       	push	r17
    636e:	8c 01       	movw	r16, r24
  Wire.begin();        // join i2c bus (address optional for master)
    6370:	88 eb       	ldi	r24, 0xB8	; 184
    6372:	98 e0       	ldi	r25, 0x08	; 8
    6374:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN7WireI2C5beginEv>
  //Turning on the ADXL345
  writeTo(DEVICE, ADXL345_POWER_CTL, 0);      
    6378:	c8 01       	movw	r24, r16
    637a:	63 e5       	ldi	r22, 0x53	; 83
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	4d e2       	ldi	r20, 0x2D	; 45
    6380:	20 e0       	ldi	r18, 0x00	; 0
    6382:	3e db       	rcall	.-2436   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
  writeTo(DEVICE, ADXL345_POWER_CTL, 16);
    6384:	c8 01       	movw	r24, r16
    6386:	63 e5       	ldi	r22, 0x53	; 83
    6388:	70 e0       	ldi	r23, 0x00	; 0
    638a:	4d e2       	ldi	r20, 0x2D	; 45
    638c:	20 e1       	ldi	r18, 0x10	; 16
    638e:	38 db       	rcall	.-2448   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
  writeTo(DEVICE, ADXL345_POWER_CTL, 8); 
    6390:	c8 01       	movw	r24, r16
    6392:	63 e5       	ldi	r22, 0x53	; 83
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	4d e2       	ldi	r20, 0x2D	; 45
    6398:	28 e0       	ldi	r18, 0x08	; 8
    639a:	32 db       	rcall	.-2460   	; 0x5a00 <_ZN7ADXL3457writeToEihh>
}
    639c:	1f 91       	pop	r17
    639e:	0f 91       	pop	r16
    63a0:	08 95       	ret

000063a2 <_ZN7ITG320010getDevAddrEv>:

uint8_t ITG3200::getDevAddr() {
  /*readmem(WHO_AM_I, 1, &_buff[0]); 
  return _buff[0];  */
  return _dev_address;
}
    63a2:	fc 01       	movw	r30, r24
    63a4:	82 89       	ldd	r24, Z+18	; 0x12
    63a6:	08 95       	ret

000063a8 <_ZN7ITG320014setScaleFactorEfffb>:

void ITG3200::readGyroRaw(int16_t *_GyroXYZ){
  readGyroRaw(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
}

void ITG3200::setScaleFactor(float _Xcoeff, float _Ycoeff, float _Zcoeff, bool _Radians) {
    63a8:	2f 92       	push	r2
    63aa:	3f 92       	push	r3
    63ac:	4f 92       	push	r4
    63ae:	5f 92       	push	r5
    63b0:	6f 92       	push	r6
    63b2:	7f 92       	push	r7
    63b4:	8f 92       	push	r8
    63b6:	9f 92       	push	r9
    63b8:	af 92       	push	r10
    63ba:	cf 92       	push	r12
    63bc:	df 92       	push	r13
    63be:	ef 92       	push	r14
    63c0:	ff 92       	push	r15
    63c2:	0f 93       	push	r16
    63c4:	1f 93       	push	r17
    63c6:	cf 93       	push	r28
    63c8:	df 93       	push	r29
    63ca:	ec 01       	movw	r28, r24
    63cc:	38 01       	movw	r6, r16
    63ce:	49 01       	movw	r8, r18
  scalefactor[0] = 14.375 * _Xcoeff;   
    63d0:	cb 01       	movw	r24, r22
    63d2:	ba 01       	movw	r22, r20
    63d4:	20 e0       	ldi	r18, 0x00	; 0
    63d6:	30 e0       	ldi	r19, 0x00	; 0
    63d8:	46 e6       	ldi	r20, 0x66	; 102
    63da:	51 e4       	ldi	r21, 0x41	; 65
    63dc:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    63e0:	1b 01       	movw	r2, r22
    63e2:	2c 01       	movw	r4, r24
    63e4:	68 83       	st	Y, r22
    63e6:	79 83       	std	Y+1, r23	; 0x01
    63e8:	8a 83       	std	Y+2, r24	; 0x02
    63ea:	9b 83       	std	Y+3, r25	; 0x03
  scalefactor[1] = 14.375 * _Ycoeff;
    63ec:	c4 01       	movw	r24, r8
    63ee:	b3 01       	movw	r22, r6
    63f0:	20 e0       	ldi	r18, 0x00	; 0
    63f2:	30 e0       	ldi	r19, 0x00	; 0
    63f4:	46 e6       	ldi	r20, 0x66	; 102
    63f6:	51 e4       	ldi	r21, 0x41	; 65
    63f8:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    63fc:	3b 01       	movw	r6, r22
    63fe:	4c 01       	movw	r8, r24
    6400:	6c 83       	std	Y+4, r22	; 0x04
    6402:	7d 83       	std	Y+5, r23	; 0x05
    6404:	8e 83       	std	Y+6, r24	; 0x06
    6406:	9f 83       	std	Y+7, r25	; 0x07
  scalefactor[2] = 14.375 * _Zcoeff;    
    6408:	c7 01       	movw	r24, r14
    640a:	b6 01       	movw	r22, r12
    640c:	20 e0       	ldi	r18, 0x00	; 0
    640e:	30 e0       	ldi	r19, 0x00	; 0
    6410:	46 e6       	ldi	r20, 0x66	; 102
    6412:	51 e4       	ldi	r21, 0x41	; 65
    6414:	0e 94 24 41 	call	0x8248	; 0x8248 <__mulsf3>
    6418:	7b 01       	movw	r14, r22
    641a:	8c 01       	movw	r16, r24
    641c:	68 87       	std	Y+8, r22	; 0x08
    641e:	79 87       	std	Y+9, r23	; 0x09
    6420:	8a 87       	std	Y+10, r24	; 0x0a
    6422:	9b 87       	std	Y+11, r25	; 0x0b
    
  if (_Radians){
    6424:	aa 20       	and	r10, r10
    6426:	21 f1       	breq	.+72     	; 0x6470 <_ZN7ITG320014setScaleFactorEfffb+0xc8>
    scalefactor[0] /= 0.0174532925;//0.0174532925 = PI/180
    6428:	c2 01       	movw	r24, r4
    642a:	b1 01       	movw	r22, r2
    642c:	25 e3       	ldi	r18, 0x35	; 53
    642e:	3a ef       	ldi	r19, 0xFA	; 250
    6430:	4e e8       	ldi	r20, 0x8E	; 142
    6432:	5c e3       	ldi	r21, 0x3C	; 60
    6434:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6438:	68 83       	st	Y, r22
    643a:	79 83       	std	Y+1, r23	; 0x01
    643c:	8a 83       	std	Y+2, r24	; 0x02
    643e:	9b 83       	std	Y+3, r25	; 0x03
    scalefactor[1] /= 0.0174532925;
    6440:	c4 01       	movw	r24, r8
    6442:	b3 01       	movw	r22, r6
    6444:	25 e3       	ldi	r18, 0x35	; 53
    6446:	3a ef       	ldi	r19, 0xFA	; 250
    6448:	4e e8       	ldi	r20, 0x8E	; 142
    644a:	5c e3       	ldi	r21, 0x3C	; 60
    644c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6450:	6c 83       	std	Y+4, r22	; 0x04
    6452:	7d 83       	std	Y+5, r23	; 0x05
    6454:	8e 83       	std	Y+6, r24	; 0x06
    6456:	9f 83       	std	Y+7, r25	; 0x07
    scalefactor[2] /= 0.0174532925;
    6458:	c8 01       	movw	r24, r16
    645a:	b7 01       	movw	r22, r14
    645c:	25 e3       	ldi	r18, 0x35	; 53
    645e:	3a ef       	ldi	r19, 0xFA	; 250
    6460:	4e e8       	ldi	r20, 0x8E	; 142
    6462:	5c e3       	ldi	r21, 0x3C	; 60
    6464:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6468:	68 87       	std	Y+8, r22	; 0x08
    646a:	79 87       	std	Y+9, r23	; 0x09
    646c:	8a 87       	std	Y+10, r24	; 0x0a
    646e:	9b 87       	std	Y+11, r25	; 0x0b
  }
}
    6470:	df 91       	pop	r29
    6472:	cf 91       	pop	r28
    6474:	1f 91       	pop	r17
    6476:	0f 91       	pop	r16
    6478:	ff 90       	pop	r15
    647a:	ef 90       	pop	r14
    647c:	df 90       	pop	r13
    647e:	cf 90       	pop	r12
    6480:	af 90       	pop	r10
    6482:	9f 90       	pop	r9
    6484:	8f 90       	pop	r8
    6486:	7f 90       	pop	r7
    6488:	6f 90       	pop	r6
    648a:	5f 90       	pop	r5
    648c:	4f 90       	pop	r4
    648e:	3f 90       	pop	r3
    6490:	2f 90       	pop	r2
    6492:	08 95       	ret

00006494 <_ZN7ITG3200C1Ev>:

#ifndef LUFA
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
    6494:	af 92       	push	r10
    6496:	cf 92       	push	r12
    6498:	df 92       	push	r13
    649a:	ef 92       	push	r14
    649c:	ff 92       	push	r15
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
    64a2:	fc 01       	movw	r30, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int16_t _Xoffset, int16_t _Yoffset, int16_t _Zoffset) {
  offsets[0] = _Xoffset;
    64a4:	15 86       	std	Z+13, r1	; 0x0d
    64a6:	14 86       	std	Z+12, r1	; 0x0c
  offsets[1] = _Yoffset;
    64a8:	17 86       	std	Z+15, r1	; 0x0f
    64aa:	16 86       	std	Z+14, r1	; 0x0e
  offsets[2] = _Zoffset;
    64ac:	11 8a       	std	Z+17, r1	; 0x11
    64ae:	10 8a       	std	Z+16, r1	; 0x10
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
  setOffsets(0,0,0);
  setScaleFactor(1.0, 1.0, 1.0, false);  // true to change readGyro output to radians
    64b0:	40 e0       	ldi	r20, 0x00	; 0
    64b2:	50 e0       	ldi	r21, 0x00	; 0
    64b4:	60 e8       	ldi	r22, 0x80	; 128
    64b6:	7f e3       	ldi	r23, 0x3F	; 63
    64b8:	8a 01       	movw	r16, r20
    64ba:	9b 01       	movw	r18, r22
    64bc:	6a 01       	movw	r12, r20
    64be:	7b 01       	movw	r14, r22
    64c0:	aa 24       	eor	r10, r10
    64c2:	72 df       	rcall	.-284    	; 0x63a8 <_ZN7ITG320014setScaleFactorEfffb>
  //Wire.begin();       //Normally this code is called from setup() at user code
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}
    64c4:	1f 91       	pop	r17
    64c6:	0f 91       	pop	r16
    64c8:	ff 90       	pop	r15
    64ca:	ef 90       	pop	r14
    64cc:	df 90       	pop	r13
    64ce:	cf 90       	pop	r12
    64d0:	af 90       	pop	r10
    64d2:	08 95       	ret

000064d4 <_ZN7ITG3200C2Ev>:

#ifndef LUFA
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
    64d4:	af 92       	push	r10
    64d6:	cf 92       	push	r12
    64d8:	df 92       	push	r13
    64da:	ef 92       	push	r14
    64dc:	ff 92       	push	r15
    64de:	0f 93       	push	r16
    64e0:	1f 93       	push	r17
    64e2:	fc 01       	movw	r30, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int16_t _Xoffset, int16_t _Yoffset, int16_t _Zoffset) {
  offsets[0] = _Xoffset;
    64e4:	15 86       	std	Z+13, r1	; 0x0d
    64e6:	14 86       	std	Z+12, r1	; 0x0c
  offsets[1] = _Yoffset;
    64e8:	17 86       	std	Z+15, r1	; 0x0f
    64ea:	16 86       	std	Z+14, r1	; 0x0e
  offsets[2] = _Zoffset;
    64ec:	11 8a       	std	Z+17, r1	; 0x11
    64ee:	10 8a       	std	Z+16, r1	; 0x10
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
  setOffsets(0,0,0);
  setScaleFactor(1.0, 1.0, 1.0, false);  // true to change readGyro output to radians
    64f0:	40 e0       	ldi	r20, 0x00	; 0
    64f2:	50 e0       	ldi	r21, 0x00	; 0
    64f4:	60 e8       	ldi	r22, 0x80	; 128
    64f6:	7f e3       	ldi	r23, 0x3F	; 63
    64f8:	8a 01       	movw	r16, r20
    64fa:	9b 01       	movw	r18, r22
    64fc:	6a 01       	movw	r12, r20
    64fe:	7b 01       	movw	r14, r22
    6500:	aa 24       	eor	r10, r10
    6502:	52 df       	rcall	.-348    	; 0x63a8 <_ZN7ITG320014setScaleFactorEfffb>
  //Wire.begin();       //Normally this code is called from setup() at user code
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}
    6504:	1f 91       	pop	r17
    6506:	0f 91       	pop	r16
    6508:	ff 90       	pop	r15
    650a:	ef 90       	pop	r14
    650c:	df 90       	pop	r13
    650e:	cf 90       	pop	r12
    6510:	af 90       	pop	r10
    6512:	08 95       	ret

00006514 <_ZN7ITG320010setOffsetsEiii>:
    scalefactor[1] /= 0.0174532925;
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int16_t _Xoffset, int16_t _Yoffset, int16_t _Zoffset) {
    6514:	fc 01       	movw	r30, r24
  offsets[0] = _Xoffset;
    6516:	75 87       	std	Z+13, r23	; 0x0d
    6518:	64 87       	std	Z+12, r22	; 0x0c
  offsets[1] = _Yoffset;
    651a:	57 87       	std	Z+15, r21	; 0x0f
    651c:	46 87       	std	Z+14, r20	; 0x0e
  offsets[2] = _Zoffset;
    651e:	31 8b       	std	Z+17, r19	; 0x11
    6520:	20 8b       	std	Z+16, r18	; 0x10
}
    6522:	08 95       	ret

00006524 <_ZN7ITG32008writememEhh>:
void ITG3200::setClockSource(uint8_t _CLKsource) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_CLK_SEL) | _CLKsource)); 
}

void ITG3200::writemem(uint8_t _addr, uint8_t _val) {
    6524:	ef 92       	push	r14
    6526:	ff 92       	push	r15
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	f6 2e       	mov	r15, r22
    652e:	e4 2e       	mov	r14, r20
  Wire.beginTransmission(_dev_address);   // start transmission to device 
    6530:	08 eb       	ldi	r16, 0xB8	; 184
    6532:	18 e0       	ldi	r17, 0x08	; 8
    6534:	fc 01       	movw	r30, r24
    6536:	62 89       	ldd	r22, Z+18	; 0x12
    6538:	c8 01       	movw	r24, r16
    653a:	70 e0       	ldi	r23, 0x00	; 0
    653c:	0e 94 2f 29 	call	0x525e	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(_addr); // send register address
    6540:	c8 01       	movw	r24, r16
    6542:	6f 2d       	mov	r22, r15
    6544:	0e 94 31 29 	call	0x5262	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.send(_val); // send value to write
    6548:	c8 01       	movw	r24, r16
    654a:	6e 2d       	mov	r22, r14
    654c:	0e 94 31 29 	call	0x5262	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.endTransmission(); // end transmission
    6550:	c8 01       	movw	r24, r16
    6552:	0e 94 30 29 	call	0x5260	; 0x5260 <_ZN7WireI2C15endTransmissionEv>
}
    6556:	1f 91       	pop	r17
    6558:	0f 91       	pop	r16
    655a:	ff 90       	pop	r15
    655c:	ef 90       	pop	r14
    655e:	08 95       	ret

00006560 <_ZN7ITG320016setSampleRateDivEh>:
uint8_t ITG3200::getSampleRateDiv() {
  readmem(SMPLRT_DIV, 1, &_buff[0]);
  return _buff[0];
}

void ITG3200::setSampleRateDiv(uint8_t _SampleRate) {
    6560:	46 2f       	mov	r20, r22
  writemem(SMPLRT_DIV, _SampleRate);
    6562:	65 e1       	ldi	r22, 0x15	; 21
}
    6564:	df cf       	rjmp	.-66     	; 0x6524 <_ZN7ITG32008writememEhh>

00006566 <_ZN7ITG320010setDevAddrEh>:
  /*readmem(WHO_AM_I, 1, &_buff[0]); 
  return _buff[0];  */
  return _dev_address;
}

void ITG3200::setDevAddr(uint8_t _addr) {
    6566:	ff 92       	push	r15
    6568:	0f 93       	push	r16
    656a:	1f 93       	push	r17
    656c:	8c 01       	movw	r16, r24
    656e:	f6 2e       	mov	r15, r22
  writemem(WHO_AM_I, _addr); 
    6570:	60 e0       	ldi	r22, 0x00	; 0
    6572:	4f 2d       	mov	r20, r15
    6574:	d7 df       	rcall	.-82     	; 0x6524 <_ZN7ITG32008writememEhh>
  _dev_address = _addr;
    6576:	f8 01       	movw	r30, r16
    6578:	f2 8a       	std	Z+18, r15	; 0x12
}
    657a:	1f 91       	pop	r17
    657c:	0f 91       	pop	r16
    657e:	ff 90       	pop	r15
    6580:	08 95       	ret

00006582 <_ZN7ITG32007readmemEhhPh>:
  Wire.send(_addr); // send register address
  Wire.send(_val); // send value to write
  Wire.endTransmission(); // end transmission
}

void ITG3200::readmem(uint8_t _addr, uint8_t _nbytes, uint8_t __buff[]) {
    6582:	ef 92       	push	r14
    6584:	ff 92       	push	r15
    6586:	0f 93       	push	r16
    6588:	1f 93       	push	r17
    658a:	cf 93       	push	r28
    658c:	df 93       	push	r29
    658e:	8c 01       	movw	r16, r24
    6590:	f6 2e       	mov	r15, r22
    6592:	e4 2e       	mov	r14, r20
    6594:	e9 01       	movw	r28, r18
  Wire.beginTransmission(_dev_address); // start transmission to device 
    6596:	fc 01       	movw	r30, r24
    6598:	62 89       	ldd	r22, Z+18	; 0x12
    659a:	88 eb       	ldi	r24, 0xB8	; 184
    659c:	98 e0       	ldi	r25, 0x08	; 8
    659e:	70 e0       	ldi	r23, 0x00	; 0
    65a0:	0e 94 2f 29 	call	0x525e	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(_addr); // sends register address to read from
    65a4:	88 eb       	ldi	r24, 0xB8	; 184
    65a6:	98 e0       	ldi	r25, 0x08	; 8
    65a8:	6f 2d       	mov	r22, r15
    65aa:	0e 94 31 29 	call	0x5262	; 0x5262 <_ZN7WireI2C4sendEh>
  Wire.endTransmission(); // end transmission
    65ae:	88 eb       	ldi	r24, 0xB8	; 184
    65b0:	98 e0       	ldi	r25, 0x08	; 8
    65b2:	0e 94 30 29 	call	0x5260	; 0x5260 <_ZN7WireI2C15endTransmissionEv>
  
  Wire.beginTransmission(_dev_address); // start transmission to device 
    65b6:	f8 01       	movw	r30, r16
    65b8:	62 89       	ldd	r22, Z+18	; 0x12
    65ba:	88 eb       	ldi	r24, 0xB8	; 184
    65bc:	98 e0       	ldi	r25, 0x08	; 8
    65be:	70 e0       	ldi	r23, 0x00	; 0
    65c0:	0e 94 2f 29 	call	0x525e	; 0x525e <_ZN7WireI2C17beginTransmissionEi>
  Wire.requestFrom(_dev_address, _nbytes);// send data n-bytes read
    65c4:	f8 01       	movw	r30, r16
    65c6:	62 89       	ldd	r22, Z+18	; 0x12
    65c8:	88 eb       	ldi	r24, 0xB8	; 184
    65ca:	98 e0       	ldi	r25, 0x08	; 8
    65cc:	70 e0       	ldi	r23, 0x00	; 0
    65ce:	4e 2d       	mov	r20, r14
    65d0:	50 e0       	ldi	r21, 0x00	; 0
    65d2:	0e 94 34 29 	call	0x5268	; 0x5268 <_ZN7WireI2C11requestFromEii>
    65d6:	00 e0       	ldi	r16, 0x00	; 0
    65d8:	09 c0       	rjmp	.+18     	; 0x65ec <_ZN7ITG32007readmemEhhPh+0x6a>
  uint8_t i = 0; 
  while (Wire.available()) {
    __buff[i] = Wire.receive(); // receive DATA
    65da:	88 eb       	ldi	r24, 0xB8	; 184
    65dc:	98 e0       	ldi	r25, 0x08	; 8
    65de:	0e 94 32 29 	call	0x5264	; 0x5264 <_ZN7WireI2C7receiveEv>
    65e2:	fe 01       	movw	r30, r28
    65e4:	e0 0f       	add	r30, r16
    65e6:	f1 1d       	adc	r31, r1
    65e8:	80 83       	st	Z, r24
    i++;
    65ea:	0f 5f       	subi	r16, 0xFF	; 255
  Wire.endTransmission(); // end transmission
  
  Wire.beginTransmission(_dev_address); // start transmission to device 
  Wire.requestFrom(_dev_address, _nbytes);// send data n-bytes read
  uint8_t i = 0; 
  while (Wire.available()) {
    65ec:	88 eb       	ldi	r24, 0xB8	; 184
    65ee:	98 e0       	ldi	r25, 0x08	; 8
    65f0:	0e 94 35 29 	call	0x526a	; 0x526a <_ZN7WireI2C9availableEv>
    65f4:	88 23       	and	r24, r24
    65f6:	89 f7       	brne	.-30     	; 0x65da <_ZN7ITG32007readmemEhhPh+0x58>
    __buff[i] = Wire.receive(); // receive DATA
    i++;
  }
  Wire.endTransmission(); // end transmission
    65f8:	88 eb       	ldi	r24, 0xB8	; 184
    65fa:	98 e0       	ldi	r25, 0x08	; 8
    65fc:	0e 94 30 29 	call	0x5260	; 0x5260 <_ZN7WireI2C15endTransmissionEv>
    6600:	df 91       	pop	r29
    6602:	cf 91       	pop	r28
    6604:	1f 91       	pop	r17
    6606:	0f 91       	pop	r16
    6608:	ff 90       	pop	r15
    660a:	ef 90       	pop	r14
    660c:	08 95       	ret

0000660e <_ZN7ITG320014setClockSourceEh>:
uint8_t ITG3200::getClockSource() {  
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_CLK_SEL);
}

void ITG3200::setClockSource(uint8_t _CLKsource) {
    660e:	ff 92       	push	r15
    6610:	0f 93       	push	r16
    6612:	1f 93       	push	r17
    6614:	8c 01       	movw	r16, r24
    6616:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6618:	9c 01       	movw	r18, r24
    661a:	2d 5e       	subi	r18, 0xED	; 237
    661c:	3f 4f       	sbci	r19, 0xFF	; 255
    661e:	6e e3       	ldi	r22, 0x3E	; 62
    6620:	41 e0       	ldi	r20, 0x01	; 1
    6622:	af df       	rcall	.-162    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_CLK_SEL) | _CLKsource)); 
    6624:	f8 01       	movw	r30, r16
    6626:	43 89       	ldd	r20, Z+19	; 0x13
    6628:	48 7f       	andi	r20, 0xF8	; 248
    662a:	4f 29       	or	r20, r15
    662c:	c8 01       	movw	r24, r16
    662e:	6e e3       	ldi	r22, 0x3E	; 62
    6630:	79 df       	rcall	.-270    	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6632:	1f 91       	pop	r17
    6634:	0f 91       	pop	r16
    6636:	ff 90       	pop	r15
    6638:	08 95       	ret

0000663a <_ZN7ITG320014getClockSourceEv>:
void ITG3200::setZgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_ZG) | _Status << 3));
}

uint8_t ITG3200::getClockSource() {  
    663a:	0f 93       	push	r16
    663c:	1f 93       	push	r17
    663e:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    6640:	9c 01       	movw	r18, r24
    6642:	2d 5e       	subi	r18, 0xED	; 237
    6644:	3f 4f       	sbci	r19, 0xFF	; 255
    6646:	6e e3       	ldi	r22, 0x3E	; 62
    6648:	41 e0       	ldi	r20, 0x01	; 1
    664a:	9b df       	rcall	.-202    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    664c:	f8 01       	movw	r30, r16
    664e:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & PWRMGM_CLK_SEL);
}
    6650:	87 70       	andi	r24, 0x07	; 7
    6652:	1f 91       	pop	r17
    6654:	0f 91       	pop	r16
    6656:	08 95       	ret

00006658 <_ZN7ITG320015setZgyroStandbyEb>:
void ITG3200::setYgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_YG) | _Status << 4));
}

void ITG3200::setZgyroStandby(bool _Status) {
    6658:	ff 92       	push	r15
    665a:	0f 93       	push	r16
    665c:	1f 93       	push	r17
    665e:	8c 01       	movw	r16, r24
    6660:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6662:	9c 01       	movw	r18, r24
    6664:	2d 5e       	subi	r18, 0xED	; 237
    6666:	3f 4f       	sbci	r19, 0xFF	; 255
    6668:	6e e3       	ldi	r22, 0x3E	; 62
    666a:	41 e0       	ldi	r20, 0x01	; 1
    666c:	8a df       	rcall	.-236    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_ZG) | _Status << 3));
    666e:	ff 0c       	add	r15, r15
    6670:	ff 0c       	add	r15, r15
    6672:	ff 0c       	add	r15, r15
    6674:	f8 01       	movw	r30, r16
    6676:	43 89       	ldd	r20, Z+19	; 0x13
    6678:	48 70       	andi	r20, 0x08	; 8
    667a:	4f 29       	or	r20, r15
    667c:	c8 01       	movw	r24, r16
    667e:	6e e3       	ldi	r22, 0x3E	; 62
    6680:	51 df       	rcall	.-350    	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6682:	1f 91       	pop	r17
    6684:	0f 91       	pop	r16
    6686:	ff 90       	pop	r15
    6688:	08 95       	ret

0000668a <_ZN7ITG320015setYgyroStandbyEb>:
void ITG3200::setXgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_XG) | _Status << 5));
}

void ITG3200::setYgyroStandby(bool _Status) {
    668a:	ff 92       	push	r15
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	8c 01       	movw	r16, r24
    6692:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6694:	9c 01       	movw	r18, r24
    6696:	2d 5e       	subi	r18, 0xED	; 237
    6698:	3f 4f       	sbci	r19, 0xFF	; 255
    669a:	6e e3       	ldi	r22, 0x3E	; 62
    669c:	41 e0       	ldi	r20, 0x01	; 1
    669e:	71 df       	rcall	.-286    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_YG) | _Status << 4));
    66a0:	f2 94       	swap	r15
    66a2:	80 ef       	ldi	r24, 0xF0	; 240
    66a4:	f8 22       	and	r15, r24
    66a6:	f8 01       	movw	r30, r16
    66a8:	43 89       	ldd	r20, Z+19	; 0x13
    66aa:	40 71       	andi	r20, 0x10	; 16
    66ac:	4f 29       	or	r20, r15
    66ae:	c8 01       	movw	r24, r16
    66b0:	6e e3       	ldi	r22, 0x3E	; 62
    66b2:	38 df       	rcall	.-400    	; 0x6524 <_ZN7ITG32008writememEhh>
}
    66b4:	1f 91       	pop	r17
    66b6:	0f 91       	pop	r16
    66b8:	ff 90       	pop	r15
    66ba:	08 95       	ret

000066bc <_ZN7ITG320015setXgyroStandbyEb>:
bool ITG3200::isZgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_ZG) >> 3;
}

void ITG3200::setXgyroStandby(bool _Status) {
    66bc:	ff 92       	push	r15
    66be:	0f 93       	push	r16
    66c0:	1f 93       	push	r17
    66c2:	8c 01       	movw	r16, r24
    66c4:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    66c6:	9c 01       	movw	r18, r24
    66c8:	2d 5e       	subi	r18, 0xED	; 237
    66ca:	3f 4f       	sbci	r19, 0xFF	; 255
    66cc:	6e e3       	ldi	r22, 0x3E	; 62
    66ce:	41 e0       	ldi	r20, 0x01	; 1
    66d0:	58 df       	rcall	.-336    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_XG) | _Status << 5));
    66d2:	f2 94       	swap	r15
    66d4:	ff 0c       	add	r15, r15
    66d6:	90 ee       	ldi	r25, 0xE0	; 224
    66d8:	f9 22       	and	r15, r25
    66da:	f8 01       	movw	r30, r16
    66dc:	43 89       	ldd	r20, Z+19	; 0x13
    66de:	40 72       	andi	r20, 0x20	; 32
    66e0:	4f 29       	or	r20, r15
    66e2:	c8 01       	movw	r24, r16
    66e4:	6e e3       	ldi	r22, 0x3E	; 62
    66e6:	1e df       	rcall	.-452    	; 0x6524 <_ZN7ITG32008writememEhh>
}
    66e8:	1f 91       	pop	r17
    66ea:	0f 91       	pop	r16
    66ec:	ff 90       	pop	r15
    66ee:	08 95       	ret

000066f0 <_ZN7ITG320014isZgyroStandbyEv>:
bool ITG3200::isYgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_YG) >> 4;
}

bool ITG3200::isZgyroStandby() {
    66f0:	0f 93       	push	r16
    66f2:	1f 93       	push	r17
    66f4:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    66f6:	9c 01       	movw	r18, r24
    66f8:	2d 5e       	subi	r18, 0xED	; 237
    66fa:	3f 4f       	sbci	r19, 0xFF	; 255
    66fc:	6e e3       	ldi	r22, 0x3E	; 62
    66fe:	41 e0       	ldi	r20, 0x01	; 1
    6700:	40 df       	rcall	.-384    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	f8 01       	movw	r30, r16
    6706:	83 89       	ldd	r24, Z+19	; 0x13
    6708:	83 fd       	sbrc	r24, 3
    670a:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_ZG) >> 3;
}
    670c:	89 2f       	mov	r24, r25
    670e:	1f 91       	pop	r17
    6710:	0f 91       	pop	r16
    6712:	08 95       	ret

00006714 <_ZN7ITG320014isYgyroStandbyEv>:
bool ITG3200::isXgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_XG) >> 5;
}

bool ITG3200::isYgyroStandby() {
    6714:	0f 93       	push	r16
    6716:	1f 93       	push	r17
    6718:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    671a:	9c 01       	movw	r18, r24
    671c:	2d 5e       	subi	r18, 0xED	; 237
    671e:	3f 4f       	sbci	r19, 0xFF	; 255
    6720:	6e e3       	ldi	r22, 0x3E	; 62
    6722:	41 e0       	ldi	r20, 0x01	; 1
    6724:	2e df       	rcall	.-420    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	f8 01       	movw	r30, r16
    672a:	83 89       	ldd	r24, Z+19	; 0x13
    672c:	84 fd       	sbrc	r24, 4
    672e:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_YG) >> 4;
}
    6730:	89 2f       	mov	r24, r25
    6732:	1f 91       	pop	r17
    6734:	0f 91       	pop	r16
    6736:	08 95       	ret

00006738 <_ZN7ITG320014isXgyroStandbyEv>:
void ITG3200::setPowerMode(bool _State) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_SLEEP) | _State << 6));  
}

bool ITG3200::isXgyroStandby() {
    6738:	0f 93       	push	r16
    673a:	1f 93       	push	r17
    673c:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    673e:	9c 01       	movw	r18, r24
    6740:	2d 5e       	subi	r18, 0xED	; 237
    6742:	3f 4f       	sbci	r19, 0xFF	; 255
    6744:	6e e3       	ldi	r22, 0x3E	; 62
    6746:	41 e0       	ldi	r20, 0x01	; 1
    6748:	1c df       	rcall	.-456    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	f8 01       	movw	r30, r16
    674e:	83 89       	ldd	r24, Z+19	; 0x13
    6750:	85 fd       	sbrc	r24, 5
    6752:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_XG) >> 5;
}
    6754:	89 2f       	mov	r24, r25
    6756:	1f 91       	pop	r17
    6758:	0f 91       	pop	r16
    675a:	08 95       	ret

0000675c <_ZN7ITG320012setPowerModeEb>:
bool ITG3200::isLowPower() {   
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_SLEEP) >> 6;
}
  
void ITG3200::setPowerMode(bool _State) {
    675c:	ff 92       	push	r15
    675e:	0f 93       	push	r16
    6760:	1f 93       	push	r17
    6762:	8c 01       	movw	r16, r24
    6764:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6766:	9c 01       	movw	r18, r24
    6768:	2d 5e       	subi	r18, 0xED	; 237
    676a:	3f 4f       	sbci	r19, 0xFF	; 255
    676c:	6e e3       	ldi	r22, 0x3E	; 62
    676e:	41 e0       	ldi	r20, 0x01	; 1
    6770:	08 df       	rcall	.-496    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_SLEEP) | _State << 6));  
    6772:	f2 94       	swap	r15
    6774:	ff 0c       	add	r15, r15
    6776:	ff 0c       	add	r15, r15
    6778:	20 ec       	ldi	r18, 0xC0	; 192
    677a:	f2 22       	and	r15, r18
    677c:	f8 01       	movw	r30, r16
    677e:	43 89       	ldd	r20, Z+19	; 0x13
    6780:	4f 7b       	andi	r20, 0xBF	; 191
    6782:	4f 29       	or	r20, r15
    6784:	c8 01       	movw	r24, r16
    6786:	6e e3       	ldi	r22, 0x3E	; 62
    6788:	cd de       	rcall	.-614    	; 0x6524 <_ZN7ITG32008writememEhh>
}
    678a:	1f 91       	pop	r17
    678c:	0f 91       	pop	r16
    678e:	ff 90       	pop	r15
    6790:	08 95       	ret

00006792 <_ZN7ITG320010isLowPowerEv>:
void ITG3200::reset() {     
  writemem(PWR_MGM, PWRMGM_HRESET); 
  delay(GYROSTART_UP_DELAY); //gyro startup 
}

bool ITG3200::isLowPower() {   
    6792:	0f 93       	push	r16
    6794:	1f 93       	push	r17
    6796:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    6798:	9c 01       	movw	r18, r24
    679a:	2d 5e       	subi	r18, 0xED	; 237
    679c:	3f 4f       	sbci	r19, 0xFF	; 255
    679e:	6e e3       	ldi	r22, 0x3E	; 62
    67a0:	41 e0       	ldi	r20, 0x01	; 1
    67a2:	ef de       	rcall	.-546    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    67a4:	90 e0       	ldi	r25, 0x00	; 0
    67a6:	f8 01       	movw	r30, r16
    67a8:	83 89       	ldd	r24, Z+19	; 0x13
    67aa:	86 fd       	sbrc	r24, 6
    67ac:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_SLEEP) >> 6;
}
    67ae:	89 2f       	mov	r24, r25
    67b0:	1f 91       	pop	r17
    67b2:	0f 91       	pop	r16
    67b4:	08 95       	ret

000067b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>:
void ITG3200::readTemp(float *_Temp) {
  readmem(TEMP_OUT,2,_buff);
  *_Temp = 35 + ((_buff[0] << 8 | _buff[1]) + 13200) / 280.0;    // F=C*9/5+32
}

void ITG3200::readGyroRaw(int16_t *_GyroX, int16_t *_GyroY, int16_t *_GyroZ){
    67b6:	af 92       	push	r10
    67b8:	bf 92       	push	r11
    67ba:	cf 92       	push	r12
    67bc:	df 92       	push	r13
    67be:	ef 92       	push	r14
    67c0:	ff 92       	push	r15
    67c2:	0f 93       	push	r16
    67c4:	1f 93       	push	r17
    67c6:	8c 01       	movw	r16, r24
    67c8:	7b 01       	movw	r14, r22
    67ca:	6a 01       	movw	r12, r20
    67cc:	59 01       	movw	r10, r18
  readmem(GYRO_XOUT, 6, _buff);
    67ce:	9c 01       	movw	r18, r24
    67d0:	2d 5e       	subi	r18, 0xED	; 237
    67d2:	3f 4f       	sbci	r19, 0xFF	; 255
    67d4:	6d e1       	ldi	r22, 0x1D	; 29
    67d6:	46 e0       	ldi	r20, 0x06	; 6
    67d8:	d4 de       	rcall	.-600    	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  *_GyroX = _buff[0] << 8 | _buff[1];
    67da:	f8 01       	movw	r30, r16
    67dc:	93 89       	ldd	r25, Z+19	; 0x13
    67de:	80 e0       	ldi	r24, 0x00	; 0
    67e0:	24 89       	ldd	r18, Z+20	; 0x14
    67e2:	30 e0       	ldi	r19, 0x00	; 0
    67e4:	82 2b       	or	r24, r18
    67e6:	93 2b       	or	r25, r19
    67e8:	f7 01       	movw	r30, r14
    67ea:	91 83       	std	Z+1, r25	; 0x01
    67ec:	80 83       	st	Z, r24
  *_GyroY = _buff[2] << 8 | _buff[3]; 
    67ee:	f8 01       	movw	r30, r16
    67f0:	95 89       	ldd	r25, Z+21	; 0x15
    67f2:	80 e0       	ldi	r24, 0x00	; 0
    67f4:	26 89       	ldd	r18, Z+22	; 0x16
    67f6:	30 e0       	ldi	r19, 0x00	; 0
    67f8:	82 2b       	or	r24, r18
    67fa:	93 2b       	or	r25, r19
    67fc:	f6 01       	movw	r30, r12
    67fe:	91 83       	std	Z+1, r25	; 0x01
    6800:	80 83       	st	Z, r24
  *_GyroZ = _buff[4] << 8 | _buff[5];
    6802:	f8 01       	movw	r30, r16
    6804:	97 89       	ldd	r25, Z+23	; 0x17
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	20 8d       	ldd	r18, Z+24	; 0x18
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	82 2b       	or	r24, r18
    680e:	93 2b       	or	r25, r19
    6810:	f5 01       	movw	r30, r10
    6812:	91 83       	std	Z+1, r25	; 0x01
    6814:	80 83       	st	Z, r24
}
    6816:	1f 91       	pop	r17
    6818:	0f 91       	pop	r16
    681a:	ff 90       	pop	r15
    681c:	ef 90       	pop	r14
    681e:	df 90       	pop	r13
    6820:	cf 90       	pop	r12
    6822:	bf 90       	pop	r11
    6824:	af 90       	pop	r10
    6826:	08 95       	ret

00006828 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>:
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
}

void ITG3200::readGyroRawCal(int16_t *_GyroX, int16_t *_GyroY, int16_t *_GyroZ) {
    6828:	af 92       	push	r10
    682a:	bf 92       	push	r11
    682c:	cf 92       	push	r12
    682e:	df 92       	push	r13
    6830:	ef 92       	push	r14
    6832:	ff 92       	push	r15
    6834:	0f 93       	push	r16
    6836:	1f 93       	push	r17
    6838:	6c 01       	movw	r12, r24
    683a:	8b 01       	movw	r16, r22
    683c:	7a 01       	movw	r14, r20
    683e:	59 01       	movw	r10, r18
  readGyroRaw(_GyroX, _GyroY, _GyroZ); 
    6840:	ba df       	rcall	.-140    	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>
  *_GyroX += offsets[0]; 
    6842:	f8 01       	movw	r30, r16
    6844:	80 81       	ld	r24, Z
    6846:	91 81       	ldd	r25, Z+1	; 0x01
    6848:	f6 01       	movw	r30, r12
    684a:	24 85       	ldd	r18, Z+12	; 0x0c
    684c:	35 85       	ldd	r19, Z+13	; 0x0d
    684e:	82 0f       	add	r24, r18
    6850:	93 1f       	adc	r25, r19
    6852:	f8 01       	movw	r30, r16
    6854:	91 83       	std	Z+1, r25	; 0x01
    6856:	80 83       	st	Z, r24
  *_GyroY += offsets[1]; 
    6858:	f7 01       	movw	r30, r14
    685a:	80 81       	ld	r24, Z
    685c:	91 81       	ldd	r25, Z+1	; 0x01
    685e:	f6 01       	movw	r30, r12
    6860:	26 85       	ldd	r18, Z+14	; 0x0e
    6862:	37 85       	ldd	r19, Z+15	; 0x0f
    6864:	82 0f       	add	r24, r18
    6866:	93 1f       	adc	r25, r19
    6868:	f7 01       	movw	r30, r14
    686a:	91 83       	std	Z+1, r25	; 0x01
    686c:	80 83       	st	Z, r24
  *_GyroZ += offsets[2]; 
    686e:	f5 01       	movw	r30, r10
    6870:	80 81       	ld	r24, Z
    6872:	91 81       	ldd	r25, Z+1	; 0x01
    6874:	f6 01       	movw	r30, r12
    6876:	20 89       	ldd	r18, Z+16	; 0x10
    6878:	31 89       	ldd	r19, Z+17	; 0x11
    687a:	82 0f       	add	r24, r18
    687c:	93 1f       	adc	r25, r19
    687e:	f5 01       	movw	r30, r10
    6880:	91 83       	std	Z+1, r25	; 0x01
    6882:	80 83       	st	Z, r24
} 
    6884:	1f 91       	pop	r17
    6886:	0f 91       	pop	r16
    6888:	ff 90       	pop	r15
    688a:	ef 90       	pop	r14
    688c:	df 90       	pop	r13
    688e:	cf 90       	pop	r12
    6890:	bf 90       	pop	r11
    6892:	af 90       	pop	r10
    6894:	08 95       	ret

00006896 <_ZN7ITG32008readGyroEPfS0_S0_>:

void ITG3200::readGyroRawCal(int16_t *_GyroXYZ) {
  readGyroRawCal(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2); 
} 

void ITG3200::readGyro(float *_GyroX, float *_GyroY, float *_GyroZ){
    6896:	af 92       	push	r10
    6898:	bf 92       	push	r11
    689a:	cf 92       	push	r12
    689c:	df 92       	push	r13
    689e:	ef 92       	push	r14
    68a0:	ff 92       	push	r15
    68a2:	0f 93       	push	r16
    68a4:	1f 93       	push	r17
    68a6:	df 93       	push	r29
    68a8:	cf 93       	push	r28
    68aa:	00 d0       	rcall	.+0      	; 0x68ac <_ZN7ITG32008readGyroEPfS0_S0_+0x16>
    68ac:	00 d0       	rcall	.+0      	; 0x68ae <_ZN7ITG32008readGyroEPfS0_S0_+0x18>
    68ae:	00 d0       	rcall	.+0      	; 0x68b0 <_ZN7ITG32008readGyroEPfS0_S0_+0x1a>
    68b0:	cd b7       	in	r28, 0x3d	; 61
    68b2:	de b7       	in	r29, 0x3e	; 62
    68b4:	8c 01       	movw	r16, r24
    68b6:	7b 01       	movw	r14, r22
    68b8:	6a 01       	movw	r12, r20
    68ba:	59 01       	movw	r10, r18
  int16_t x, y, z;
  readGyroRawCal(&x, &y, &z); // x,y,z will contain calibrated integer values from the sensor 
    68bc:	be 01       	movw	r22, r28
    68be:	6f 5f       	subi	r22, 0xFF	; 255
    68c0:	7f 4f       	sbci	r23, 0xFF	; 255
    68c2:	ae 01       	movw	r20, r28
    68c4:	4d 5f       	subi	r20, 0xFD	; 253
    68c6:	5f 4f       	sbci	r21, 0xFF	; 255
    68c8:	9e 01       	movw	r18, r28
    68ca:	2b 5f       	subi	r18, 0xFB	; 251
    68cc:	3f 4f       	sbci	r19, 0xFF	; 255
    68ce:	ac df       	rcall	.-168    	; 0x6828 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>
  *_GyroX =  x / scalefactor[0]; 
    68d0:	69 81       	ldd	r22, Y+1	; 0x01
    68d2:	7a 81       	ldd	r23, Y+2	; 0x02
    68d4:	88 27       	eor	r24, r24
    68d6:	77 fd       	sbrc	r23, 7
    68d8:	80 95       	com	r24
    68da:	98 2f       	mov	r25, r24
    68dc:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    68e0:	f8 01       	movw	r30, r16
    68e2:	20 81       	ld	r18, Z
    68e4:	31 81       	ldd	r19, Z+1	; 0x01
    68e6:	42 81       	ldd	r20, Z+2	; 0x02
    68e8:	53 81       	ldd	r21, Z+3	; 0x03
    68ea:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    68ee:	f7 01       	movw	r30, r14
    68f0:	60 83       	st	Z, r22
    68f2:	71 83       	std	Z+1, r23	; 0x01
    68f4:	82 83       	std	Z+2, r24	; 0x02
    68f6:	93 83       	std	Z+3, r25	; 0x03
  *_GyroY =  y / scalefactor[1]; 
    68f8:	6b 81       	ldd	r22, Y+3	; 0x03
    68fa:	7c 81       	ldd	r23, Y+4	; 0x04
    68fc:	88 27       	eor	r24, r24
    68fe:	77 fd       	sbrc	r23, 7
    6900:	80 95       	com	r24
    6902:	98 2f       	mov	r25, r24
    6904:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    6908:	f8 01       	movw	r30, r16
    690a:	24 81       	ldd	r18, Z+4	; 0x04
    690c:	35 81       	ldd	r19, Z+5	; 0x05
    690e:	46 81       	ldd	r20, Z+6	; 0x06
    6910:	57 81       	ldd	r21, Z+7	; 0x07
    6912:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6916:	f6 01       	movw	r30, r12
    6918:	60 83       	st	Z, r22
    691a:	71 83       	std	Z+1, r23	; 0x01
    691c:	82 83       	std	Z+2, r24	; 0x02
    691e:	93 83       	std	Z+3, r25	; 0x03
  *_GyroZ =  z / scalefactor[2];     
    6920:	6d 81       	ldd	r22, Y+5	; 0x05
    6922:	7e 81       	ldd	r23, Y+6	; 0x06
    6924:	88 27       	eor	r24, r24
    6926:	77 fd       	sbrc	r23, 7
    6928:	80 95       	com	r24
    692a:	98 2f       	mov	r25, r24
    692c:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    6930:	f8 01       	movw	r30, r16
    6932:	20 85       	ldd	r18, Z+8	; 0x08
    6934:	31 85       	ldd	r19, Z+9	; 0x09
    6936:	42 85       	ldd	r20, Z+10	; 0x0a
    6938:	53 85       	ldd	r21, Z+11	; 0x0b
    693a:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    693e:	f5 01       	movw	r30, r10
    6940:	60 83       	st	Z, r22
    6942:	71 83       	std	Z+1, r23	; 0x01
    6944:	82 83       	std	Z+2, r24	; 0x02
    6946:	93 83       	std	Z+3, r25	; 0x03
} 
    6948:	26 96       	adiw	r28, 0x06	; 6
    694a:	0f b6       	in	r0, 0x3f	; 63
    694c:	f8 94       	cli
    694e:	de bf       	out	0x3e, r29	; 62
    6950:	0f be       	out	0x3f, r0	; 63
    6952:	cd bf       	out	0x3d, r28	; 61
    6954:	cf 91       	pop	r28
    6956:	df 91       	pop	r29
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	ff 90       	pop	r15
    695e:	ef 90       	pop	r14
    6960:	df 90       	pop	r13
    6962:	cf 90       	pop	r12
    6964:	bf 90       	pop	r11
    6966:	af 90       	pop	r10
    6968:	08 95       	ret

0000696a <_ZN7ITG32008readGyroEPf>:

void ITG3200::readGyro(float *_GyroXYZ){
    696a:	ab 01       	movw	r20, r22
  readGyro(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
    696c:	9b 01       	movw	r18, r22
    696e:	28 5f       	subi	r18, 0xF8	; 248
    6970:	3f 4f       	sbci	r19, 0xFF	; 255
    6972:	4c 5f       	subi	r20, 0xFC	; 252
    6974:	5f 4f       	sbci	r21, 0xFF	; 255
}
    6976:	8f cf       	rjmp	.-226    	; 0x6896 <_ZN7ITG32008readGyroEPfS0_S0_>

00006978 <_ZN7ITG320014readGyroRawCalEPi>:
  *_GyroX += offsets[0]; 
  *_GyroY += offsets[1]; 
  *_GyroZ += offsets[2]; 
} 

void ITG3200::readGyroRawCal(int16_t *_GyroXYZ) {
    6978:	ab 01       	movw	r20, r22
  readGyroRawCal(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2); 
    697a:	9b 01       	movw	r18, r22
    697c:	2c 5f       	subi	r18, 0xFC	; 252
    697e:	3f 4f       	sbci	r19, 0xFF	; 255
    6980:	4e 5f       	subi	r20, 0xFE	; 254
    6982:	5f 4f       	sbci	r21, 0xFF	; 255
} 
    6984:	51 cf       	rjmp	.-350    	; 0x6828 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>

00006986 <_ZN7ITG320011readGyroRawEPi>:
  *_GyroX = _buff[0] << 8 | _buff[1];
  *_GyroY = _buff[2] << 8 | _buff[3]; 
  *_GyroZ = _buff[4] << 8 | _buff[5];
}

void ITG3200::readGyroRaw(int16_t *_GyroXYZ){
    6986:	ab 01       	movw	r20, r22
  readGyroRaw(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
    6988:	9b 01       	movw	r18, r22
    698a:	2c 5f       	subi	r18, 0xFC	; 252
    698c:	3f 4f       	sbci	r19, 0xFF	; 255
    698e:	4e 5f       	subi	r20, 0xFE	; 254
    6990:	5f 4f       	sbci	r21, 0xFF	; 255
}
    6992:	11 cf       	rjmp	.-478    	; 0x67b6 <_ZN7ITG320011readGyroRawEPiS0_S0_>

00006994 <_ZN7ITG32008readTempEPf>:
bool ITG3200::isRawDataReady() {
  readmem(INT_STATUS, 1, &_buff[0]);
  return (_buff[0] & INTSTATUS_RAW_DATA_RDY);
}

void ITG3200::readTemp(float *_Temp) {
    6994:	ef 92       	push	r14
    6996:	ff 92       	push	r15
    6998:	0f 93       	push	r16
    699a:	1f 93       	push	r17
    699c:	8c 01       	movw	r16, r24
    699e:	7b 01       	movw	r14, r22
  readmem(TEMP_OUT,2,_buff);
    69a0:	9c 01       	movw	r18, r24
    69a2:	2d 5e       	subi	r18, 0xED	; 237
    69a4:	3f 4f       	sbci	r19, 0xFF	; 255
    69a6:	6b e1       	ldi	r22, 0x1B	; 27
    69a8:	42 e0       	ldi	r20, 0x02	; 2
    69aa:	eb dd       	rcall	.-1066   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  *_Temp = 35 + ((_buff[0] << 8 | _buff[1]) + 13200) / 280.0;    // F=C*9/5+32
    69ac:	f8 01       	movw	r30, r16
    69ae:	73 89       	ldd	r23, Z+19	; 0x13
    69b0:	60 e0       	ldi	r22, 0x00	; 0
    69b2:	24 89       	ldd	r18, Z+20	; 0x14
    69b4:	30 e0       	ldi	r19, 0x00	; 0
    69b6:	62 2b       	or	r22, r18
    69b8:	73 2b       	or	r23, r19
    69ba:	60 57       	subi	r22, 0x70	; 112
    69bc:	7c 4c       	sbci	r23, 0xCC	; 204
    69be:	88 27       	eor	r24, r24
    69c0:	77 fd       	sbrc	r23, 7
    69c2:	80 95       	com	r24
    69c4:	98 2f       	mov	r25, r24
    69c6:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    69ca:	20 e0       	ldi	r18, 0x00	; 0
    69cc:	30 e0       	ldi	r19, 0x00	; 0
    69ce:	4c e8       	ldi	r20, 0x8C	; 140
    69d0:	53 e4       	ldi	r21, 0x43	; 67
    69d2:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    69d6:	20 e0       	ldi	r18, 0x00	; 0
    69d8:	30 e0       	ldi	r19, 0x00	; 0
    69da:	4c e0       	ldi	r20, 0x0C	; 12
    69dc:	52 e4       	ldi	r21, 0x42	; 66
    69de:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    69e2:	f7 01       	movw	r30, r14
    69e4:	60 83       	st	Z, r22
    69e6:	71 83       	std	Z+1, r23	; 0x01
    69e8:	82 83       	std	Z+2, r24	; 0x02
    69ea:	93 83       	std	Z+3, r25	; 0x03
}
    69ec:	1f 91       	pop	r17
    69ee:	0f 91       	pop	r16
    69f0:	ff 90       	pop	r15
    69f2:	ef 90       	pop	r14
    69f4:	08 95       	ret

000069f6 <_ZN7ITG320014isRawDataReadyEv>:
bool ITG3200::isITGReady() {
  readmem(INT_STATUS, 1, &_buff[0]);
  return ((_buff[0] & INTSTATUS_ITG_RDY) >> 2);
}

bool ITG3200::isRawDataReady() {
    69f6:	0f 93       	push	r16
    69f8:	1f 93       	push	r17
    69fa:	8c 01       	movw	r16, r24
  readmem(INT_STATUS, 1, &_buff[0]);
    69fc:	9c 01       	movw	r18, r24
    69fe:	2d 5e       	subi	r18, 0xED	; 237
    6a00:	3f 4f       	sbci	r19, 0xFF	; 255
    6a02:	6a e1       	ldi	r22, 0x1A	; 26
    6a04:	41 e0       	ldi	r20, 0x01	; 1
    6a06:	bd dd       	rcall	.-1158   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6a08:	f8 01       	movw	r30, r16
    6a0a:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & INTSTATUS_RAW_DATA_RDY);
}
    6a0c:	81 70       	andi	r24, 0x01	; 1
    6a0e:	1f 91       	pop	r17
    6a10:	0f 91       	pop	r16
    6a12:	08 95       	ret

00006a14 <_ZN7ITG320010isITGReadyEv>:
void ITG3200::setRawDataReady(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_RAW_RDY_EN) | _State)); 
}

bool ITG3200::isITGReady() {
    6a14:	0f 93       	push	r16
    6a16:	1f 93       	push	r17
    6a18:	8c 01       	movw	r16, r24
  readmem(INT_STATUS, 1, &_buff[0]);
    6a1a:	9c 01       	movw	r18, r24
    6a1c:	2d 5e       	subi	r18, 0xED	; 237
    6a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a20:	6a e1       	ldi	r22, 0x1A	; 26
    6a22:	41 e0       	ldi	r20, 0x01	; 1
    6a24:	ae dd       	rcall	.-1188   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	f8 01       	movw	r30, r16
    6a2a:	83 89       	ldd	r24, Z+19	; 0x13
    6a2c:	82 fd       	sbrc	r24, 2
    6a2e:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTSTATUS_ITG_RDY) >> 2);
}
    6a30:	89 2f       	mov	r24, r25
    6a32:	1f 91       	pop	r17
    6a34:	0f 91       	pop	r16
    6a36:	08 95       	ret

00006a38 <_ZN7ITG320015setRawDataReadyEb>:
bool ITG3200::isRawDataReadyOn() {
  readmem(INT_CFG, 1, &_buff[0]);
  return (_buff[0] & INTCFG_RAW_RDY_EN);
}

void ITG3200::setRawDataReady(bool _State) {
    6a38:	ff 92       	push	r15
    6a3a:	0f 93       	push	r16
    6a3c:	1f 93       	push	r17
    6a3e:	8c 01       	movw	r16, r24
    6a40:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6a42:	9c 01       	movw	r18, r24
    6a44:	2d 5e       	subi	r18, 0xED	; 237
    6a46:	3f 4f       	sbci	r19, 0xFF	; 255
    6a48:	67 e1       	ldi	r22, 0x17	; 23
    6a4a:	41 e0       	ldi	r20, 0x01	; 1
    6a4c:	9a dd       	rcall	.-1228   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_RAW_RDY_EN) | _State)); 
    6a4e:	f8 01       	movw	r30, r16
    6a50:	43 89       	ldd	r20, Z+19	; 0x13
    6a52:	4e 7f       	andi	r20, 0xFE	; 254
    6a54:	4f 29       	or	r20, r15
    6a56:	c8 01       	movw	r24, r16
    6a58:	67 e1       	ldi	r22, 0x17	; 23
    6a5a:	64 dd       	rcall	.-1336   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6a5c:	1f 91       	pop	r17
    6a5e:	0f 91       	pop	r16
    6a60:	ff 90       	pop	r15
    6a62:	08 95       	ret

00006a64 <_ZN7ITG320016isRawDataReadyOnEv>:
void ITG3200::setITGReady(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ITG_RDY_EN) | _State << 2)); 
}

bool ITG3200::isRawDataReadyOn() {
    6a64:	0f 93       	push	r16
    6a66:	1f 93       	push	r17
    6a68:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6a6a:	9c 01       	movw	r18, r24
    6a6c:	2d 5e       	subi	r18, 0xED	; 237
    6a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a70:	67 e1       	ldi	r22, 0x17	; 23
    6a72:	41 e0       	ldi	r20, 0x01	; 1
    6a74:	86 dd       	rcall	.-1268   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6a76:	f8 01       	movw	r30, r16
    6a78:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & INTCFG_RAW_RDY_EN);
}
    6a7a:	81 70       	andi	r24, 0x01	; 1
    6a7c:	1f 91       	pop	r17
    6a7e:	0f 91       	pop	r16
    6a80:	08 95       	ret

00006a82 <_ZN7ITG320011setITGReadyEb>:
bool ITG3200::isITGReadyOn() {   
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_ITG_RDY_EN) >> 2);
}

void ITG3200::setITGReady(bool _State) {
    6a82:	ff 92       	push	r15
    6a84:	0f 93       	push	r16
    6a86:	1f 93       	push	r17
    6a88:	8c 01       	movw	r16, r24
    6a8a:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6a8c:	9c 01       	movw	r18, r24
    6a8e:	2d 5e       	subi	r18, 0xED	; 237
    6a90:	3f 4f       	sbci	r19, 0xFF	; 255
    6a92:	67 e1       	ldi	r22, 0x17	; 23
    6a94:	41 e0       	ldi	r20, 0x01	; 1
    6a96:	75 dd       	rcall	.-1302   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ITG_RDY_EN) | _State << 2)); 
    6a98:	ff 0c       	add	r15, r15
    6a9a:	ff 0c       	add	r15, r15
    6a9c:	f8 01       	movw	r30, r16
    6a9e:	43 89       	ldd	r20, Z+19	; 0x13
    6aa0:	4b 7f       	andi	r20, 0xFB	; 251
    6aa2:	4f 29       	or	r20, r15
    6aa4:	c8 01       	movw	r24, r16
    6aa6:	67 e1       	ldi	r22, 0x17	; 23
    6aa8:	3d dd       	rcall	.-1414   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6aaa:	1f 91       	pop	r17
    6aac:	0f 91       	pop	r16
    6aae:	ff 90       	pop	r15
    6ab0:	08 95       	ret

00006ab2 <_ZN7ITG320012isITGReadyOnEv>:
void ITG3200::setLatchClearMode(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_INT_ANYRD_2CLEAR) | _State << 4)); 
}

bool ITG3200::isITGReadyOn() {   
    6ab2:	0f 93       	push	r16
    6ab4:	1f 93       	push	r17
    6ab6:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6ab8:	9c 01       	movw	r18, r24
    6aba:	2d 5e       	subi	r18, 0xED	; 237
    6abc:	3f 4f       	sbci	r19, 0xFF	; 255
    6abe:	67 e1       	ldi	r22, 0x17	; 23
    6ac0:	41 e0       	ldi	r20, 0x01	; 1
    6ac2:	5f dd       	rcall	.-1346   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6ac4:	90 e0       	ldi	r25, 0x00	; 0
    6ac6:	f8 01       	movw	r30, r16
    6ac8:	83 89       	ldd	r24, Z+19	; 0x13
    6aca:	82 fd       	sbrc	r24, 2
    6acc:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_ITG_RDY_EN) >> 2);
}
    6ace:	89 2f       	mov	r24, r25
    6ad0:	1f 91       	pop	r17
    6ad2:	0f 91       	pop	r16
    6ad4:	08 95       	ret

00006ad6 <_ZN7ITG320017setLatchClearModeEb>:
bool ITG3200::isAnyRegClrMode() {    
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_INT_ANYRD_2CLEAR) >> 4);
}

void ITG3200::setLatchClearMode(bool _State) {
    6ad6:	ff 92       	push	r15
    6ad8:	0f 93       	push	r16
    6ada:	1f 93       	push	r17
    6adc:	8c 01       	movw	r16, r24
    6ade:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6ae0:	9c 01       	movw	r18, r24
    6ae2:	2d 5e       	subi	r18, 0xED	; 237
    6ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae6:	67 e1       	ldi	r22, 0x17	; 23
    6ae8:	41 e0       	ldi	r20, 0x01	; 1
    6aea:	4b dd       	rcall	.-1386   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_INT_ANYRD_2CLEAR) | _State << 4)); 
    6aec:	f2 94       	swap	r15
    6aee:	30 ef       	ldi	r19, 0xF0	; 240
    6af0:	f3 22       	and	r15, r19
    6af2:	f8 01       	movw	r30, r16
    6af4:	43 89       	ldd	r20, Z+19	; 0x13
    6af6:	4f 7e       	andi	r20, 0xEF	; 239
    6af8:	4f 29       	or	r20, r15
    6afa:	c8 01       	movw	r24, r16
    6afc:	67 e1       	ldi	r22, 0x17	; 23
    6afe:	12 dd       	rcall	.-1500   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6b00:	1f 91       	pop	r17
    6b02:	0f 91       	pop	r16
    6b04:	ff 90       	pop	r15
    6b06:	08 95       	ret

00006b08 <_ZN7ITG320015isAnyRegClrModeEv>:
void ITG3200::setLatchMode(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_LATCH_INT_EN) | _State << 5)); 
}

bool ITG3200::isAnyRegClrMode() {    
    6b08:	0f 93       	push	r16
    6b0a:	1f 93       	push	r17
    6b0c:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6b0e:	9c 01       	movw	r18, r24
    6b10:	2d 5e       	subi	r18, 0xED	; 237
    6b12:	3f 4f       	sbci	r19, 0xFF	; 255
    6b14:	67 e1       	ldi	r22, 0x17	; 23
    6b16:	41 e0       	ldi	r20, 0x01	; 1
    6b18:	34 dd       	rcall	.-1432   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	f8 01       	movw	r30, r16
    6b1e:	83 89       	ldd	r24, Z+19	; 0x13
    6b20:	84 fd       	sbrc	r24, 4
    6b22:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_INT_ANYRD_2CLEAR) >> 4);
}
    6b24:	89 2f       	mov	r24, r25
    6b26:	1f 91       	pop	r17
    6b28:	0f 91       	pop	r16
    6b2a:	08 95       	ret

00006b2c <_ZN7ITG320012setLatchModeEb>:
bool ITG3200::isLatchUntilCleared() {    
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_LATCH_INT_EN) >> 5);
}

void ITG3200::setLatchMode(bool _State) {
    6b2c:	ff 92       	push	r15
    6b2e:	0f 93       	push	r16
    6b30:	1f 93       	push	r17
    6b32:	8c 01       	movw	r16, r24
    6b34:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6b36:	9c 01       	movw	r18, r24
    6b38:	2d 5e       	subi	r18, 0xED	; 237
    6b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b3c:	67 e1       	ldi	r22, 0x17	; 23
    6b3e:	41 e0       	ldi	r20, 0x01	; 1
    6b40:	20 dd       	rcall	.-1472   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_LATCH_INT_EN) | _State << 5)); 
    6b42:	f2 94       	swap	r15
    6b44:	ff 0c       	add	r15, r15
    6b46:	40 ee       	ldi	r20, 0xE0	; 224
    6b48:	f4 22       	and	r15, r20
    6b4a:	f8 01       	movw	r30, r16
    6b4c:	43 89       	ldd	r20, Z+19	; 0x13
    6b4e:	4f 7d       	andi	r20, 0xDF	; 223
    6b50:	4f 29       	or	r20, r15
    6b52:	c8 01       	movw	r24, r16
    6b54:	67 e1       	ldi	r22, 0x17	; 23
    6b56:	e6 dc       	rcall	.-1588   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6b58:	1f 91       	pop	r17
    6b5a:	0f 91       	pop	r16
    6b5c:	ff 90       	pop	r15
    6b5e:	08 95       	ret

00006b60 <_ZN7ITG320019isLatchUntilClearedEv>:
void ITG3200::setINTDriveType(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_OPEN) | _State << 6)); 
}

bool ITG3200::isLatchUntilCleared() {    
    6b60:	0f 93       	push	r16
    6b62:	1f 93       	push	r17
    6b64:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6b66:	9c 01       	movw	r18, r24
    6b68:	2d 5e       	subi	r18, 0xED	; 237
    6b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6c:	67 e1       	ldi	r22, 0x17	; 23
    6b6e:	41 e0       	ldi	r20, 0x01	; 1
    6b70:	08 dd       	rcall	.-1520   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	f8 01       	movw	r30, r16
    6b76:	83 89       	ldd	r24, Z+19	; 0x13
    6b78:	85 fd       	sbrc	r24, 5
    6b7a:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_LATCH_INT_EN) >> 5);
}
    6b7c:	89 2f       	mov	r24, r25
    6b7e:	1f 91       	pop	r17
    6b80:	0f 91       	pop	r16
    6b82:	08 95       	ret

00006b84 <_ZN7ITG320015setINTDriveTypeEb>:
bool ITG3200::isINTOpenDrain() {  
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_OPEN) >> 6);
}

void ITG3200::setINTDriveType(bool _State) {
    6b84:	ff 92       	push	r15
    6b86:	0f 93       	push	r16
    6b88:	1f 93       	push	r17
    6b8a:	8c 01       	movw	r16, r24
    6b8c:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6b8e:	9c 01       	movw	r18, r24
    6b90:	2d 5e       	subi	r18, 0xED	; 237
    6b92:	3f 4f       	sbci	r19, 0xFF	; 255
    6b94:	67 e1       	ldi	r22, 0x17	; 23
    6b96:	41 e0       	ldi	r20, 0x01	; 1
    6b98:	f4 dc       	rcall	.-1560   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_OPEN) | _State << 6)); 
    6b9a:	f2 94       	swap	r15
    6b9c:	ff 0c       	add	r15, r15
    6b9e:	ff 0c       	add	r15, r15
    6ba0:	50 ec       	ldi	r21, 0xC0	; 192
    6ba2:	f5 22       	and	r15, r21
    6ba4:	f8 01       	movw	r30, r16
    6ba6:	43 89       	ldd	r20, Z+19	; 0x13
    6ba8:	4f 7b       	andi	r20, 0xBF	; 191
    6baa:	4f 29       	or	r20, r15
    6bac:	c8 01       	movw	r24, r16
    6bae:	67 e1       	ldi	r22, 0x17	; 23
    6bb0:	b9 dc       	rcall	.-1678   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6bb2:	1f 91       	pop	r17
    6bb4:	0f 91       	pop	r16
    6bb6:	ff 90       	pop	r15
    6bb8:	08 95       	ret

00006bba <_ZN7ITG320014isINTOpenDrainEv>:
void ITG3200::setINTLogiclvl(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ACTL) | (_State << 7))); 
}

bool ITG3200::isINTOpenDrain() {  
    6bba:	0f 93       	push	r16
    6bbc:	1f 93       	push	r17
    6bbe:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6bc0:	9c 01       	movw	r18, r24
    6bc2:	2d 5e       	subi	r18, 0xED	; 237
    6bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc6:	67 e1       	ldi	r22, 0x17	; 23
    6bc8:	41 e0       	ldi	r20, 0x01	; 1
    6bca:	db dc       	rcall	.-1610   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6bcc:	90 e0       	ldi	r25, 0x00	; 0
    6bce:	f8 01       	movw	r30, r16
    6bd0:	83 89       	ldd	r24, Z+19	; 0x13
    6bd2:	86 fd       	sbrc	r24, 6
    6bd4:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_OPEN) >> 6);
}
    6bd6:	89 2f       	mov	r24, r25
    6bd8:	1f 91       	pop	r17
    6bda:	0f 91       	pop	r16
    6bdc:	08 95       	ret

00006bde <_ZN7ITG320014setINTLogiclvlEb>:
bool ITG3200::isINTActiveOnLow() {  
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_ACTL) >> 7);
}

void ITG3200::setINTLogiclvl(bool _State) {
    6bde:	ff 92       	push	r15
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	8c 01       	movw	r16, r24
    6be6:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6be8:	9c 01       	movw	r18, r24
    6bea:	2d 5e       	subi	r18, 0xED	; 237
    6bec:	3f 4f       	sbci	r19, 0xFF	; 255
    6bee:	67 e1       	ldi	r22, 0x17	; 23
    6bf0:	41 e0       	ldi	r20, 0x01	; 1
    6bf2:	c7 dc       	rcall	.-1650   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ACTL) | (_State << 7))); 
    6bf4:	f7 94       	ror	r15
    6bf6:	ff 24       	eor	r15, r15
    6bf8:	f7 94       	ror	r15
    6bfa:	f8 01       	movw	r30, r16
    6bfc:	43 89       	ldd	r20, Z+19	; 0x13
    6bfe:	4f 77       	andi	r20, 0x7F	; 127
    6c00:	4f 29       	or	r20, r15
    6c02:	c8 01       	movw	r24, r16
    6c04:	67 e1       	ldi	r22, 0x17	; 23
    6c06:	8e dc       	rcall	.-1764   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6c08:	1f 91       	pop	r17
    6c0a:	0f 91       	pop	r16
    6c0c:	ff 90       	pop	r15
    6c0e:	08 95       	ret

00006c10 <_ZN7ITG320016isINTActiveOnLowEv>:
void ITG3200::setFilterBW(uint8_t _BW) {
  readmem(DLPF_FS, 1, &_buff[0]);
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_DLPF_CFG) | _BW)); 
}

bool ITG3200::isINTActiveOnLow() {  
    6c10:	0f 93       	push	r16
    6c12:	1f 93       	push	r17
    6c14:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6c16:	9c 01       	movw	r18, r24
    6c18:	2d 5e       	subi	r18, 0xED	; 237
    6c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c1c:	67 e1       	ldi	r22, 0x17	; 23
    6c1e:	41 e0       	ldi	r20, 0x01	; 1
    6c20:	b0 dc       	rcall	.-1696   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	f8 01       	movw	r30, r16
    6c26:	83 89       	ldd	r24, Z+19	; 0x13
    6c28:	87 fd       	sbrc	r24, 7
    6c2a:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_ACTL) >> 7);
}
    6c2c:	89 2f       	mov	r24, r25
    6c2e:	1f 91       	pop	r17
    6c30:	0f 91       	pop	r16
    6c32:	08 95       	ret

00006c34 <_ZN7ITG320011setFilterBWEh>:
uint8_t ITG3200::getFilterBW() {
  readmem(DLPF_FS, 1, &_buff[0]);
  return (_buff[0] & DLPFFS_DLPF_CFG); 
}

void ITG3200::setFilterBW(uint8_t _BW) {
    6c34:	ff 92       	push	r15
    6c36:	0f 93       	push	r16
    6c38:	1f 93       	push	r17
    6c3a:	8c 01       	movw	r16, r24
    6c3c:	f6 2e       	mov	r15, r22
  readmem(DLPF_FS, 1, &_buff[0]);
    6c3e:	9c 01       	movw	r18, r24
    6c40:	2d 5e       	subi	r18, 0xED	; 237
    6c42:	3f 4f       	sbci	r19, 0xFF	; 255
    6c44:	66 e1       	ldi	r22, 0x16	; 22
    6c46:	41 e0       	ldi	r20, 0x01	; 1
    6c48:	9c dc       	rcall	.-1736   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_DLPF_CFG) | _BW)); 
    6c4a:	f8 01       	movw	r30, r16
    6c4c:	43 89       	ldd	r20, Z+19	; 0x13
    6c4e:	48 7f       	andi	r20, 0xF8	; 248
    6c50:	4f 29       	or	r20, r15
    6c52:	c8 01       	movw	r24, r16
    6c54:	66 e1       	ldi	r22, 0x16	; 22
    6c56:	66 dc       	rcall	.-1844   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6c58:	1f 91       	pop	r17
    6c5a:	0f 91       	pop	r16
    6c5c:	ff 90       	pop	r15
    6c5e:	08 95       	ret

00006c60 <_ZN7ITG320011getFilterBWEv>:
void ITG3200::setFSRange(uint8_t _Range) {
  readmem(DLPF_FS, 1, &_buff[0]);   
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_FS_SEL) | (_Range << 3)) ); 
}

uint8_t ITG3200::getFilterBW() {
    6c60:	0f 93       	push	r16
    6c62:	1f 93       	push	r17
    6c64:	8c 01       	movw	r16, r24
  readmem(DLPF_FS, 1, &_buff[0]);
    6c66:	9c 01       	movw	r18, r24
    6c68:	2d 5e       	subi	r18, 0xED	; 237
    6c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c6c:	66 e1       	ldi	r22, 0x16	; 22
    6c6e:	41 e0       	ldi	r20, 0x01	; 1
    6c70:	88 dc       	rcall	.-1776   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6c72:	f8 01       	movw	r30, r16
    6c74:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & DLPFFS_DLPF_CFG); 
}
    6c76:	87 70       	andi	r24, 0x07	; 7
    6c78:	1f 91       	pop	r17
    6c7a:	0f 91       	pop	r16
    6c7c:	08 95       	ret

00006c7e <_ZN7ITG320010setFSRangeEh>:
uint8_t ITG3200::getFSRange() {
  readmem(DLPF_FS, 1, &_buff[0]);
  return ((_buff[0] & DLPFFS_FS_SEL) >> 3);
}

void ITG3200::setFSRange(uint8_t _Range) {
    6c7e:	ff 92       	push	r15
    6c80:	0f 93       	push	r16
    6c82:	1f 93       	push	r17
    6c84:	8c 01       	movw	r16, r24
    6c86:	f6 2e       	mov	r15, r22
  readmem(DLPF_FS, 1, &_buff[0]);   
    6c88:	9c 01       	movw	r18, r24
    6c8a:	2d 5e       	subi	r18, 0xED	; 237
    6c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c8e:	66 e1       	ldi	r22, 0x16	; 22
    6c90:	41 e0       	ldi	r20, 0x01	; 1
    6c92:	77 dc       	rcall	.-1810   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_FS_SEL) | (_Range << 3)) ); 
    6c94:	ff 0c       	add	r15, r15
    6c96:	ff 0c       	add	r15, r15
    6c98:	ff 0c       	add	r15, r15
    6c9a:	f8 01       	movw	r30, r16
    6c9c:	43 89       	ldd	r20, Z+19	; 0x13
    6c9e:	47 7e       	andi	r20, 0xE7	; 231
    6ca0:	4f 29       	or	r20, r15
    6ca2:	c8 01       	movw	r24, r16
    6ca4:	66 e1       	ldi	r22, 0x16	; 22
    6ca6:	3e dc       	rcall	.-1924   	; 0x6524 <_ZN7ITG32008writememEhh>
}
    6ca8:	1f 91       	pop	r17
    6caa:	0f 91       	pop	r16
    6cac:	ff 90       	pop	r15
    6cae:	08 95       	ret

00006cb0 <_ZN7ITG320010getFSRangeEv>:

void ITG3200::setSampleRateDiv(uint8_t _SampleRate) {
  writemem(SMPLRT_DIV, _SampleRate);
}

uint8_t ITG3200::getFSRange() {
    6cb0:	0f 93       	push	r16
    6cb2:	1f 93       	push	r17
    6cb4:	8c 01       	movw	r16, r24
  readmem(DLPF_FS, 1, &_buff[0]);
    6cb6:	9c 01       	movw	r18, r24
    6cb8:	2d 5e       	subi	r18, 0xED	; 237
    6cba:	3f 4f       	sbci	r19, 0xFF	; 255
    6cbc:	66 e1       	ldi	r22, 0x16	; 22
    6cbe:	41 e0       	ldi	r20, 0x01	; 1
    6cc0:	60 dc       	rcall	.-1856   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
    6cc2:	f8 01       	movw	r30, r16
    6cc4:	83 89       	ldd	r24, Z+19	; 0x13
    6cc6:	90 e0       	ldi	r25, 0x00	; 0
    6cc8:	88 71       	andi	r24, 0x18	; 24
    6cca:	90 70       	andi	r25, 0x00	; 0
    6ccc:	63 e0       	ldi	r22, 0x03	; 3
    6cce:	95 95       	asr	r25
    6cd0:	87 95       	ror	r24
    6cd2:	6a 95       	dec	r22
    6cd4:	e1 f7       	brne	.-8      	; 0x6cce <_ZN7ITG320010getFSRangeEv+0x1e>
  return ((_buff[0] & DLPFFS_FS_SEL) >> 3);
}
    6cd6:	1f 91       	pop	r17
    6cd8:	0f 91       	pop	r16
    6cda:	08 95       	ret

00006cdc <_ZN7ITG320016getSampleRateDivEv>:
void ITG3200::setDevAddr(uint8_t _addr) {
  writemem(WHO_AM_I, _addr); 
  _dev_address = _addr;
}

uint8_t ITG3200::getSampleRateDiv() {
    6cdc:	0f 93       	push	r16
    6cde:	1f 93       	push	r17
    6ce0:	8c 01       	movw	r16, r24
  readmem(SMPLRT_DIV, 1, &_buff[0]);
    6ce2:	9c 01       	movw	r18, r24
    6ce4:	2d 5e       	subi	r18, 0xED	; 237
    6ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce8:	65 e1       	ldi	r22, 0x15	; 21
    6cea:	41 e0       	ldi	r20, 0x01	; 1
    6cec:	4a dc       	rcall	.-1900   	; 0x6582 <_ZN7ITG32007readmemEhhPh>
  return _buff[0];
}
    6cee:	f8 01       	movw	r30, r16
    6cf0:	83 89       	ldd	r24, Z+19	; 0x13
    6cf2:	1f 91       	pop	r17
    6cf4:	0f 91       	pop	r16
    6cf6:	08 95       	ret

00006cf8 <_ZN7ITG32005resetEv>:
void ITG3200::readGyro(float *_GyroXYZ){
  readGyro(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
}

void ITG3200::reset() {     
  writemem(PWR_MGM, PWRMGM_HRESET); 
    6cf8:	6e e3       	ldi	r22, 0x3E	; 62
    6cfa:	40 e8       	ldi	r20, 0x80	; 128
    6cfc:	13 dc       	rcall	.-2010   	; 0x6524 <_ZN7ITG32008writememEhh>
  delay(GYROSTART_UP_DELAY); //gyro startup 
    6cfe:	66 e4       	ldi	r22, 0x46	; 70
    6d00:	70 e0       	ldi	r23, 0x00	; 0
    6d02:	80 e0       	ldi	r24, 0x00	; 0
    6d04:	90 e0       	ldi	r25, 0x00	; 0
}
    6d06:	17 c3       	rjmp	.+1582   	; 0x7336 <delay>

00006d08 <_ZN7ITG320013zeroCalibrateEjj>:
  offsets[0] = _Xoffset;
  offsets[1] = _Yoffset;
  offsets[2] = _Zoffset;
}

void ITG3200::zeroCalibrate(uint16_t totSamples, uint16_t sampleDelayMS) {
    6d08:	2f 92       	push	r2
    6d0a:	3f 92       	push	r3
    6d0c:	4f 92       	push	r4
    6d0e:	5f 92       	push	r5
    6d10:	6f 92       	push	r6
    6d12:	7f 92       	push	r7
    6d14:	8f 92       	push	r8
    6d16:	9f 92       	push	r9
    6d18:	af 92       	push	r10
    6d1a:	bf 92       	push	r11
    6d1c:	cf 92       	push	r12
    6d1e:	df 92       	push	r13
    6d20:	ef 92       	push	r14
    6d22:	ff 92       	push	r15
    6d24:	0f 93       	push	r16
    6d26:	1f 93       	push	r17
    6d28:	df 93       	push	r29
    6d2a:	cf 93       	push	r28
    6d2c:	cd b7       	in	r28, 0x3d	; 61
    6d2e:	de b7       	in	r29, 0x3e	; 62
    6d30:	2c 97       	sbiw	r28, 0x0c	; 12
    6d32:	0f b6       	in	r0, 0x3f	; 63
    6d34:	f8 94       	cli
    6d36:	de bf       	out	0x3e, r29	; 62
    6d38:	0f be       	out	0x3f, r0	; 63
    6d3a:	cd bf       	out	0x3d, r28	; 61
    6d3c:	98 87       	std	Y+8, r25	; 0x08
    6d3e:	8f 83       	std	Y+7, r24	; 0x07
    6d40:	7b 01       	movw	r14, r22
    6d42:	00 e0       	ldi	r16, 0x00	; 0
    6d44:	10 e0       	ldi	r17, 0x00	; 0
    6d46:	0f 2e       	mov	r0, r31
    6d48:	f0 e0       	ldi	r31, 0x00	; 0
    6d4a:	2f 2e       	mov	r2, r31
    6d4c:	f0 e0       	ldi	r31, 0x00	; 0
    6d4e:	3f 2e       	mov	r3, r31
    6d50:	f0 e0       	ldi	r31, 0x00	; 0
    6d52:	4f 2e       	mov	r4, r31
    6d54:	f0 e0       	ldi	r31, 0x00	; 0
    6d56:	5f 2e       	mov	r5, r31
    6d58:	f0 2d       	mov	r31, r0
    6d5a:	42 01       	movw	r8, r4
    6d5c:	31 01       	movw	r6, r2
    6d5e:	62 01       	movw	r12, r4
    6d60:	51 01       	movw	r10, r2
  float tmpOffsets[] = {0,0,0};
  int16_t xyz[3];

  for (uint16_t i = 0;i < totSamples;i++){
    delay(sampleDelayMS);
    6d62:	ca 01       	movw	r24, r20
    6d64:	a0 e0       	ldi	r26, 0x00	; 0
    6d66:	b0 e0       	ldi	r27, 0x00	; 0
    6d68:	89 87       	std	Y+9, r24	; 0x09
    6d6a:	9a 87       	std	Y+10, r25	; 0x0a
    6d6c:	ab 87       	std	Y+11, r26	; 0x0b
    6d6e:	bc 87       	std	Y+12, r27	; 0x0c
    6d70:	3d c0       	rjmp	.+122    	; 0x6dec <_ZN7ITG320013zeroCalibrateEjj+0xe4>
    6d72:	69 85       	ldd	r22, Y+9	; 0x09
    6d74:	7a 85       	ldd	r23, Y+10	; 0x0a
    6d76:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d78:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d7a:	dd d2       	rcall	.+1466   	; 0x7336 <delay>
    readGyroRaw(xyz);
    6d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d7e:	98 85       	ldd	r25, Y+8	; 0x08
    6d80:	be 01       	movw	r22, r28
    6d82:	6f 5f       	subi	r22, 0xFF	; 255
    6d84:	7f 4f       	sbci	r23, 0xFF	; 255
    6d86:	ff dd       	rcall	.-1026   	; 0x6986 <_ZN7ITG320011readGyroRawEPi>
    tmpOffsets[0] += xyz[0];
    6d88:	69 81       	ldd	r22, Y+1	; 0x01
    6d8a:	7a 81       	ldd	r23, Y+2	; 0x02
    6d8c:	88 27       	eor	r24, r24
    6d8e:	77 fd       	sbrc	r23, 7
    6d90:	80 95       	com	r24
    6d92:	98 2f       	mov	r25, r24
    6d94:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    6d98:	9b 01       	movw	r18, r22
    6d9a:	ac 01       	movw	r20, r24
    6d9c:	c6 01       	movw	r24, r12
    6d9e:	b5 01       	movw	r22, r10
    6da0:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6da4:	5b 01       	movw	r10, r22
    6da6:	6c 01       	movw	r12, r24
    tmpOffsets[1] += xyz[1];
    6da8:	6b 81       	ldd	r22, Y+3	; 0x03
    6daa:	7c 81       	ldd	r23, Y+4	; 0x04
    6dac:	88 27       	eor	r24, r24
    6dae:	77 fd       	sbrc	r23, 7
    6db0:	80 95       	com	r24
    6db2:	98 2f       	mov	r25, r24
    6db4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    6db8:	9b 01       	movw	r18, r22
    6dba:	ac 01       	movw	r20, r24
    6dbc:	c4 01       	movw	r24, r8
    6dbe:	b3 01       	movw	r22, r6
    6dc0:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6dc4:	3b 01       	movw	r6, r22
    6dc6:	4c 01       	movw	r8, r24
    tmpOffsets[2] += xyz[2];
    6dc8:	6d 81       	ldd	r22, Y+5	; 0x05
    6dca:	7e 81       	ldd	r23, Y+6	; 0x06
    6dcc:	88 27       	eor	r24, r24
    6dce:	77 fd       	sbrc	r23, 7
    6dd0:	80 95       	com	r24
    6dd2:	98 2f       	mov	r25, r24
    6dd4:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <__floatsisf>
    6dd8:	9b 01       	movw	r18, r22
    6dda:	ac 01       	movw	r20, r24
    6ddc:	c2 01       	movw	r24, r4
    6dde:	b1 01       	movw	r22, r2
    6de0:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6de4:	1b 01       	movw	r2, r22
    6de6:	2c 01       	movw	r4, r24

void ITG3200::zeroCalibrate(uint16_t totSamples, uint16_t sampleDelayMS) {
  float tmpOffsets[] = {0,0,0};
  int16_t xyz[3];

  for (uint16_t i = 0;i < totSamples;i++){
    6de8:	0f 5f       	subi	r16, 0xFF	; 255
    6dea:	1f 4f       	sbci	r17, 0xFF	; 255
    6dec:	0e 15       	cp	r16, r14
    6dee:	1f 05       	cpc	r17, r15
    6df0:	08 f4       	brcc	.+2      	; 0x6df4 <_ZN7ITG320013zeroCalibrateEjj+0xec>
    6df2:	bf cf       	rjmp	.-130    	; 0x6d72 <_ZN7ITG320013zeroCalibrateEjj+0x6a>
    readGyroRaw(xyz);
    tmpOffsets[0] += xyz[0];
    tmpOffsets[1] += xyz[1];
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
    6df4:	b7 01       	movw	r22, r14
    6df6:	80 e0       	ldi	r24, 0x00	; 0
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	0e 94 6a 40 	call	0x80d4	; 0x80d4 <__floatunsisf>
    6dfe:	7b 01       	movw	r14, r22
    6e00:	8c 01       	movw	r16, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int16_t _Xoffset, int16_t _Yoffset, int16_t _Zoffset) {
  offsets[0] = _Xoffset;
    6e02:	c6 01       	movw	r24, r12
    6e04:	b5 01       	movw	r22, r10
    6e06:	90 58       	subi	r25, 0x80	; 128
    6e08:	a8 01       	movw	r20, r16
    6e0a:	97 01       	movw	r18, r14
    6e0c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6e10:	20 e0       	ldi	r18, 0x00	; 0
    6e12:	30 e0       	ldi	r19, 0x00	; 0
    6e14:	40 e0       	ldi	r20, 0x00	; 0
    6e16:	5f e3       	ldi	r21, 0x3F	; 63
    6e18:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6e1c:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    6e20:	af 81       	ldd	r26, Y+7	; 0x07
    6e22:	b8 85       	ldd	r27, Y+8	; 0x08
    6e24:	1d 96       	adiw	r26, 0x0d	; 13
    6e26:	7c 93       	st	X, r23
    6e28:	6e 93       	st	-X, r22
    6e2a:	1c 97       	sbiw	r26, 0x0c	; 12
  offsets[1] = _Yoffset;
    6e2c:	c4 01       	movw	r24, r8
    6e2e:	b3 01       	movw	r22, r6
    6e30:	90 58       	subi	r25, 0x80	; 128
    6e32:	a8 01       	movw	r20, r16
    6e34:	97 01       	movw	r18, r14
    6e36:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6e3a:	20 e0       	ldi	r18, 0x00	; 0
    6e3c:	30 e0       	ldi	r19, 0x00	; 0
    6e3e:	40 e0       	ldi	r20, 0x00	; 0
    6e40:	5f e3       	ldi	r21, 0x3F	; 63
    6e42:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6e46:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    6e4a:	ef 81       	ldd	r30, Y+7	; 0x07
    6e4c:	f8 85       	ldd	r31, Y+8	; 0x08
    6e4e:	77 87       	std	Z+15, r23	; 0x0f
    6e50:	66 87       	std	Z+14, r22	; 0x0e
  offsets[2] = _Zoffset;
    6e52:	c2 01       	movw	r24, r4
    6e54:	b1 01       	movw	r22, r2
    6e56:	90 58       	subi	r25, 0x80	; 128
    6e58:	a8 01       	movw	r20, r16
    6e5a:	97 01       	movw	r18, r14
    6e5c:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <__divsf3>
    6e60:	20 e0       	ldi	r18, 0x00	; 0
    6e62:	30 e0       	ldi	r19, 0x00	; 0
    6e64:	40 e0       	ldi	r20, 0x00	; 0
    6e66:	5f e3       	ldi	r21, 0x3F	; 63
    6e68:	0e 94 45 3f 	call	0x7e8a	; 0x7e8a <__addsf3>
    6e6c:	0e 94 39 40 	call	0x8072	; 0x8072 <__fixsfsi>
    6e70:	af 81       	ldd	r26, Y+7	; 0x07
    6e72:	b8 85       	ldd	r27, Y+8	; 0x08
    6e74:	51 96       	adiw	r26, 0x11	; 17
    6e76:	7c 93       	st	X, r23
    6e78:	6e 93       	st	-X, r22
    6e7a:	50 97       	sbiw	r26, 0x10	; 16
    tmpOffsets[0] += xyz[0];
    tmpOffsets[1] += xyz[1];
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
}
    6e7c:	2c 96       	adiw	r28, 0x0c	; 12
    6e7e:	0f b6       	in	r0, 0x3f	; 63
    6e80:	f8 94       	cli
    6e82:	de bf       	out	0x3e, r29	; 62
    6e84:	0f be       	out	0x3f, r0	; 63
    6e86:	cd bf       	out	0x3d, r28	; 61
    6e88:	cf 91       	pop	r28
    6e8a:	df 91       	pop	r29
    6e8c:	1f 91       	pop	r17
    6e8e:	0f 91       	pop	r16
    6e90:	ff 90       	pop	r15
    6e92:	ef 90       	pop	r14
    6e94:	df 90       	pop	r13
    6e96:	cf 90       	pop	r12
    6e98:	bf 90       	pop	r11
    6e9a:	af 90       	pop	r10
    6e9c:	9f 90       	pop	r9
    6e9e:	8f 90       	pop	r8
    6ea0:	7f 90       	pop	r7
    6ea2:	6f 90       	pop	r6
    6ea4:	5f 90       	pop	r5
    6ea6:	4f 90       	pop	r4
    6ea8:	3f 90       	pop	r3
    6eaa:	2f 90       	pop	r2
    6eac:	08 95       	ret

00006eae <_ZN7ITG32004initEhhhhhbb>:
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}

void ITG3200::init(uint8_t address, uint8_t _SRateDiv, uint8_t _Range, uint8_t _filterBW, uint8_t _ClockSrc, bool _ITGReady, bool _INTRawDataReady) {
    6eae:	8f 92       	push	r8
    6eb0:	9f 92       	push	r9
    6eb2:	af 92       	push	r10
    6eb4:	cf 92       	push	r12
    6eb6:	ef 92       	push	r14
    6eb8:	0f 93       	push	r16
    6eba:	1f 93       	push	r17
    6ebc:	4c 01       	movw	r8, r24
    6ebe:	12 2f       	mov	r17, r18
  _dev_address = address;
    6ec0:	fc 01       	movw	r30, r24
    6ec2:	62 8b       	std	Z+18, r22	; 0x12
  setSampleRateDiv(_SRateDiv);
    6ec4:	64 2f       	mov	r22, r20
    6ec6:	4c db       	rcall	.-2408   	; 0x6560 <_ZN7ITG320016setSampleRateDivEh>
  setFSRange(_Range);
    6ec8:	c4 01       	movw	r24, r8
    6eca:	61 2f       	mov	r22, r17
    6ecc:	d8 de       	rcall	.-592    	; 0x6c7e <_ZN7ITG320010setFSRangeEh>
  setFilterBW(_filterBW);
    6ece:	c4 01       	movw	r24, r8
    6ed0:	60 2f       	mov	r22, r16
    6ed2:	b0 de       	rcall	.-672    	; 0x6c34 <_ZN7ITG320011setFilterBWEh>
  setClockSource(_ClockSrc);
    6ed4:	c4 01       	movw	r24, r8
    6ed6:	6e 2d       	mov	r22, r14
    6ed8:	9a db       	rcall	.-2252   	; 0x660e <_ZN7ITG320014setClockSourceEh>
  setITGReady(_ITGReady);
    6eda:	c4 01       	movw	r24, r8
    6edc:	6c 2d       	mov	r22, r12
    6ede:	d1 dd       	rcall	.-1118   	; 0x6a82 <_ZN7ITG320011setITGReadyEb>
  setRawDataReady(_INTRawDataReady);  
    6ee0:	c4 01       	movw	r24, r8
    6ee2:	6a 2d       	mov	r22, r10
    6ee4:	a9 dd       	rcall	.-1198   	; 0x6a38 <_ZN7ITG320015setRawDataReadyEb>
  delay(GYROSTART_UP_DELAY);  // startup 
    6ee6:	66 e4       	ldi	r22, 0x46	; 70
    6ee8:	70 e0       	ldi	r23, 0x00	; 0
    6eea:	80 e0       	ldi	r24, 0x00	; 0
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	23 d2       	rcall	.+1094   	; 0x7336 <delay>
}
    6ef0:	1f 91       	pop	r17
    6ef2:	0f 91       	pop	r16
    6ef4:	ef 90       	pop	r14
    6ef6:	cf 90       	pop	r12
    6ef8:	af 90       	pop	r10
    6efa:	9f 90       	pop	r9
    6efc:	8f 90       	pop	r8
    6efe:	08 95       	ret

00006f00 <_ZN7ITG32004initEh>:
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}

void ITG3200::init(uint8_t address) {
    6f00:	af 92       	push	r10
    6f02:	cf 92       	push	r12
    6f04:	ef 92       	push	r14
    6f06:	0f 93       	push	r16
  // Uncomment or change your default ITG3200 initialization
  
  // fast sample rate - divisor = 0 filter = 0 clocksrc = 0, 1, 2, or 3  (raw values)
  init(address, NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_XGYRO_REF, true, true);
    6f08:	40 e0       	ldi	r20, 0x00	; 0
    6f0a:	23 e0       	ldi	r18, 0x03	; 3
    6f0c:	00 e0       	ldi	r16, 0x00	; 0
    6f0e:	ee 24       	eor	r14, r14
    6f10:	e3 94       	inc	r14
    6f12:	cc 24       	eor	r12, r12
    6f14:	c3 94       	inc	r12
    6f16:	aa 24       	eor	r10, r10
    6f18:	a3 94       	inc	r10
    6f1a:	c9 df       	rcall	.-110    	; 0x6eae <_ZN7ITG32004initEhhhhhbb>
  // fast sample rate 32Khz external clock - divisor = 0  filter = 0  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_EXTERNAL32, true, true);
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}
    6f1c:	0f 91       	pop	r16
    6f1e:	ef 90       	pop	r14
    6f20:	cf 90       	pop	r12
    6f22:	af 90       	pop	r10
    6f24:	08 95       	ret

00006f26 <_ZN5iWRAPC2EP14HardwareSerial>:

#ifdef round
    #undef round
#endif

iWRAP::iWRAP(HardwareSerial *u) {
    6f26:	fc 01       	movw	r30, r24
    keyboard_keys[0] = 0;
    6f28:	11 82       	std	Z+1, r1	; 0x01
    keyboard_keys[1] = 0;
    6f2a:	12 82       	std	Z+2, r1	; 0x02
    keyboard_keys[2] = 0;
    6f2c:	13 82       	std	Z+3, r1	; 0x03
    keyboard_keys[3] = 0;
    6f2e:	14 82       	std	Z+4, r1	; 0x04
    keyboard_keys[4] = 0;
    6f30:	15 82       	std	Z+5, r1	; 0x05
    keyboard_keys[5] = 0;
    6f32:	16 82       	std	Z+6, r1	; 0x06
    keyboard_modifier_keys = 0;
    6f34:	17 82       	std	Z+7, r1	; 0x07
    mouse_buttons = 0;
    6f36:	10 82       	st	Z, r1
    uart = u;
    6f38:	71 87       	std	Z+9, r23	; 0x09
    6f3a:	60 87       	std	Z+8, r22	; 0x08
}
    6f3c:	08 95       	ret

00006f3e <_ZN5iWRAPC1EP14HardwareSerial>:

#ifdef round
    #undef round
#endif

iWRAP::iWRAP(HardwareSerial *u) {
    6f3e:	fc 01       	movw	r30, r24
    keyboard_keys[0] = 0;
    6f40:	11 82       	std	Z+1, r1	; 0x01
    keyboard_keys[1] = 0;
    6f42:	12 82       	std	Z+2, r1	; 0x02
    keyboard_keys[2] = 0;
    6f44:	13 82       	std	Z+3, r1	; 0x03
    keyboard_keys[3] = 0;
    6f46:	14 82       	std	Z+4, r1	; 0x04
    keyboard_keys[4] = 0;
    6f48:	15 82       	std	Z+5, r1	; 0x05
    keyboard_keys[5] = 0;
    6f4a:	16 82       	std	Z+6, r1	; 0x06
    keyboard_modifier_keys = 0;
    6f4c:	17 82       	std	Z+7, r1	; 0x07
    mouse_buttons = 0;
    6f4e:	10 82       	st	Z, r1
    uart = u;
    6f50:	71 87       	std	Z+9, r23	; 0x09
    6f52:	60 87       	std	Z+8, r22	; 0x08
}
    6f54:	08 95       	ret

00006f56 <_ZN5iWRAP12set_modifierEh>:
void iWRAP::parse(uint8_t ch) {
    Serial.print(ch, BYTE);
}

void iWRAP::set_modifier(uint8_t c) {
    keyboard_modifier_keys = c;
    6f56:	fc 01       	movw	r30, r24
    6f58:	67 83       	std	Z+7, r22	; 0x07
}
    6f5a:	08 95       	ret

00006f5c <_ZN5iWRAP8set_key1Eh>:

void iWRAP::set_key1(uint8_t c) {
    keyboard_keys[0] = c;
    6f5c:	fc 01       	movw	r30, r24
    6f5e:	61 83       	std	Z+1, r22	; 0x01
}
    6f60:	08 95       	ret

00006f62 <_ZN5iWRAP8set_key2Eh>:

void iWRAP::set_key2(uint8_t c) {
    keyboard_keys[1] = c;
    6f62:	fc 01       	movw	r30, r24
    6f64:	62 83       	std	Z+2, r22	; 0x02
}
    6f66:	08 95       	ret

00006f68 <_ZN5iWRAP8set_key3Eh>:

void iWRAP::set_key3(uint8_t c) {
    keyboard_keys[2] = c;
    6f68:	fc 01       	movw	r30, r24
    6f6a:	63 83       	std	Z+3, r22	; 0x03
}
    6f6c:	08 95       	ret

00006f6e <_ZN5iWRAP8set_key4Eh>:

void iWRAP::set_key4(uint8_t c) {
    keyboard_keys[3] = c;
    6f6e:	fc 01       	movw	r30, r24
    6f70:	64 83       	std	Z+4, r22	; 0x04
}
    6f72:	08 95       	ret

00006f74 <_ZN5iWRAP8set_key5Eh>:

void iWRAP::set_key5(uint8_t c) {
    keyboard_keys[4] = c;
    6f74:	fc 01       	movw	r30, r24
    6f76:	65 83       	std	Z+5, r22	; 0x05
}
    6f78:	08 95       	ret

00006f7a <_ZN5iWRAP8set_key6Eh>:

void iWRAP::set_key6(uint8_t c) {
    keyboard_keys[5] = c;
    6f7a:	fc 01       	movw	r30, r24
    6f7c:	66 83       	std	Z+6, r22	; 0x06
}
    6f7e:	08 95       	ret

00006f80 <_ZN5iWRAP4moveEhhh>:
    uart -> print(mouse_buttons, BYTE);
    uart -> print(x, BYTE);
    uart -> print(y, BYTE);
}

void iWRAP::move(uint8_t x, uint8_t y, uint8_t z) {
    6f80:	df 92       	push	r13
    6f82:	ef 92       	push	r14
    6f84:	ff 92       	push	r15
    6f86:	0f 93       	push	r16
    6f88:	1f 93       	push	r17
    6f8a:	8c 01       	movw	r16, r24
    6f8c:	f6 2e       	mov	r15, r22
    6f8e:	e4 2e       	mov	r14, r20
    6f90:	d2 2e       	mov	r13, r18
    uart -> print(0x9f, BYTE);
    6f92:	fc 01       	movw	r30, r24
    6f94:	80 85       	ldd	r24, Z+8	; 0x08
    6f96:	91 85       	ldd	r25, Z+9	; 0x09
    6f98:	6f e9       	ldi	r22, 0x9F	; 159
    6f9a:	70 e0       	ldi	r23, 0x00	; 0
    6f9c:	40 e0       	ldi	r20, 0x00	; 0
    6f9e:	50 e0       	ldi	r21, 0x00	; 0
    6fa0:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x06, BYTE);
    6fa4:	f8 01       	movw	r30, r16
    6fa6:	80 85       	ldd	r24, Z+8	; 0x08
    6fa8:	91 85       	ldd	r25, Z+9	; 0x09
    6faa:	66 e0       	ldi	r22, 0x06	; 6
    6fac:	70 e0       	ldi	r23, 0x00	; 0
    6fae:	40 e0       	ldi	r20, 0x00	; 0
    6fb0:	50 e0       	ldi	r21, 0x00	; 0
    6fb2:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0xa1, BYTE);
    6fb6:	f8 01       	movw	r30, r16
    6fb8:	80 85       	ldd	r24, Z+8	; 0x08
    6fba:	91 85       	ldd	r25, Z+9	; 0x09
    6fbc:	61 ea       	ldi	r22, 0xA1	; 161
    6fbe:	70 e0       	ldi	r23, 0x00	; 0
    6fc0:	40 e0       	ldi	r20, 0x00	; 0
    6fc2:	50 e0       	ldi	r21, 0x00	; 0
    6fc4:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x02, BYTE);
    6fc8:	f8 01       	movw	r30, r16
    6fca:	80 85       	ldd	r24, Z+8	; 0x08
    6fcc:	91 85       	ldd	r25, Z+9	; 0x09
    6fce:	62 e0       	ldi	r22, 0x02	; 2
    6fd0:	70 e0       	ldi	r23, 0x00	; 0
    6fd2:	40 e0       	ldi	r20, 0x00	; 0
    6fd4:	50 e0       	ldi	r21, 0x00	; 0
    6fd6:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(mouse_buttons, BYTE);
    6fda:	f8 01       	movw	r30, r16
    6fdc:	80 85       	ldd	r24, Z+8	; 0x08
    6fde:	91 85       	ldd	r25, Z+9	; 0x09
    6fe0:	60 81       	ld	r22, Z
    6fe2:	40 e0       	ldi	r20, 0x00	; 0
    6fe4:	50 e0       	ldi	r21, 0x00	; 0
    6fe6:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(x, BYTE);
    6fea:	f8 01       	movw	r30, r16
    6fec:	80 85       	ldd	r24, Z+8	; 0x08
    6fee:	91 85       	ldd	r25, Z+9	; 0x09
    6ff0:	6f 2d       	mov	r22, r15
    6ff2:	40 e0       	ldi	r20, 0x00	; 0
    6ff4:	50 e0       	ldi	r21, 0x00	; 0
    6ff6:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(y, BYTE);
    6ffa:	f8 01       	movw	r30, r16
    6ffc:	80 85       	ldd	r24, Z+8	; 0x08
    6ffe:	91 85       	ldd	r25, Z+9	; 0x09
    7000:	6e 2d       	mov	r22, r14
    7002:	40 e0       	ldi	r20, 0x00	; 0
    7004:	50 e0       	ldi	r21, 0x00	; 0
    7006:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(z, BYTE);
    700a:	f8 01       	movw	r30, r16
    700c:	80 85       	ldd	r24, Z+8	; 0x08
    700e:	91 85       	ldd	r25, Z+9	; 0x09
    7010:	6d 2d       	mov	r22, r13
    7012:	40 e0       	ldi	r20, 0x00	; 0
    7014:	50 e0       	ldi	r21, 0x00	; 0
    7016:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
}
    701a:	1f 91       	pop	r17
    701c:	0f 91       	pop	r16
    701e:	ff 90       	pop	r15
    7020:	ef 90       	pop	r14
    7022:	df 90       	pop	r13
    7024:	08 95       	ret

00007026 <_ZN5iWRAP6scrollEh>:

void iWRAP::scroll(uint8_t s) {
    7026:	26 2f       	mov	r18, r22
    move(0, 0, s);
    7028:	60 e0       	ldi	r22, 0x00	; 0
    702a:	40 e0       	ldi	r20, 0x00	; 0
}
    702c:	a9 cf       	rjmp	.-174    	; 0x6f80 <_ZN5iWRAP4moveEhhh>

0000702e <_ZN5iWRAP4moveEhh>:
    uart -> print(mouse_buttons, BYTE);
    uart -> print(0x00, BYTE);
    uart -> print(0x00, BYTE);
}

void iWRAP::move(uint8_t x, uint8_t y) {
    702e:	ef 92       	push	r14
    7030:	ff 92       	push	r15
    7032:	0f 93       	push	r16
    7034:	1f 93       	push	r17
    7036:	8c 01       	movw	r16, r24
    7038:	f6 2e       	mov	r15, r22
    703a:	e4 2e       	mov	r14, r20
    uart -> print(0x9f, BYTE);
    703c:	fc 01       	movw	r30, r24
    703e:	80 85       	ldd	r24, Z+8	; 0x08
    7040:	91 85       	ldd	r25, Z+9	; 0x09
    7042:	6f e9       	ldi	r22, 0x9F	; 159
    7044:	70 e0       	ldi	r23, 0x00	; 0
    7046:	40 e0       	ldi	r20, 0x00	; 0
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x05, BYTE);
    704e:	f8 01       	movw	r30, r16
    7050:	80 85       	ldd	r24, Z+8	; 0x08
    7052:	91 85       	ldd	r25, Z+9	; 0x09
    7054:	65 e0       	ldi	r22, 0x05	; 5
    7056:	70 e0       	ldi	r23, 0x00	; 0
    7058:	40 e0       	ldi	r20, 0x00	; 0
    705a:	50 e0       	ldi	r21, 0x00	; 0
    705c:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0xa1, BYTE);
    7060:	f8 01       	movw	r30, r16
    7062:	80 85       	ldd	r24, Z+8	; 0x08
    7064:	91 85       	ldd	r25, Z+9	; 0x09
    7066:	61 ea       	ldi	r22, 0xA1	; 161
    7068:	70 e0       	ldi	r23, 0x00	; 0
    706a:	40 e0       	ldi	r20, 0x00	; 0
    706c:	50 e0       	ldi	r21, 0x00	; 0
    706e:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x02, BYTE);
    7072:	f8 01       	movw	r30, r16
    7074:	80 85       	ldd	r24, Z+8	; 0x08
    7076:	91 85       	ldd	r25, Z+9	; 0x09
    7078:	62 e0       	ldi	r22, 0x02	; 2
    707a:	70 e0       	ldi	r23, 0x00	; 0
    707c:	40 e0       	ldi	r20, 0x00	; 0
    707e:	50 e0       	ldi	r21, 0x00	; 0
    7080:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(mouse_buttons, BYTE);
    7084:	f8 01       	movw	r30, r16
    7086:	80 85       	ldd	r24, Z+8	; 0x08
    7088:	91 85       	ldd	r25, Z+9	; 0x09
    708a:	60 81       	ld	r22, Z
    708c:	40 e0       	ldi	r20, 0x00	; 0
    708e:	50 e0       	ldi	r21, 0x00	; 0
    7090:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(x, BYTE);
    7094:	f8 01       	movw	r30, r16
    7096:	80 85       	ldd	r24, Z+8	; 0x08
    7098:	91 85       	ldd	r25, Z+9	; 0x09
    709a:	6f 2d       	mov	r22, r15
    709c:	40 e0       	ldi	r20, 0x00	; 0
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(y, BYTE);
    70a4:	f8 01       	movw	r30, r16
    70a6:	80 85       	ldd	r24, Z+8	; 0x08
    70a8:	91 85       	ldd	r25, Z+9	; 0x09
    70aa:	6e 2d       	mov	r22, r14
    70ac:	40 e0       	ldi	r20, 0x00	; 0
    70ae:	50 e0       	ldi	r21, 0x00	; 0
    70b0:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
}
    70b4:	1f 91       	pop	r17
    70b6:	0f 91       	pop	r16
    70b8:	ff 90       	pop	r15
    70ba:	ef 90       	pop	r14
    70bc:	08 95       	ret

000070be <_ZN5iWRAP11set_buttonsEhhh>:
    uart -> print(keyboard_keys[3], BYTE);
    uart -> print(keyboard_keys[4], BYTE);
    uart -> print(keyboard_keys[5], BYTE);
}

void iWRAP::set_buttons(uint8_t left, uint8_t middle, uint8_t right) {
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	ec 01       	movw	r28, r24
    70c4:	61 11       	cpse	r22, r1
    70c6:	61 e0       	ldi	r22, 0x01	; 1
    uint8_t mask=0;
    if (left) mask |= 1;
    if (middle) mask |= 4;
    70c8:	41 11       	cpse	r20, r1
    70ca:	64 60       	ori	r22, 0x04	; 4
    if (right) mask |= 2;
    70cc:	21 11       	cpse	r18, r1
    70ce:	62 60       	ori	r22, 0x02	; 2
    mouse_buttons = mask;
    70d0:	68 83       	st	Y, r22
    uart -> print(0x9f, BYTE);
    70d2:	88 85       	ldd	r24, Y+8	; 0x08
    70d4:	99 85       	ldd	r25, Y+9	; 0x09
    70d6:	6f e9       	ldi	r22, 0x9F	; 159
    70d8:	70 e0       	ldi	r23, 0x00	; 0
    70da:	40 e0       	ldi	r20, 0x00	; 0
    70dc:	50 e0       	ldi	r21, 0x00	; 0
    70de:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x05, BYTE);
    70e2:	88 85       	ldd	r24, Y+8	; 0x08
    70e4:	99 85       	ldd	r25, Y+9	; 0x09
    70e6:	65 e0       	ldi	r22, 0x05	; 5
    70e8:	70 e0       	ldi	r23, 0x00	; 0
    70ea:	40 e0       	ldi	r20, 0x00	; 0
    70ec:	50 e0       	ldi	r21, 0x00	; 0
    70ee:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0xa1, BYTE);
    70f2:	88 85       	ldd	r24, Y+8	; 0x08
    70f4:	99 85       	ldd	r25, Y+9	; 0x09
    70f6:	61 ea       	ldi	r22, 0xA1	; 161
    70f8:	70 e0       	ldi	r23, 0x00	; 0
    70fa:	40 e0       	ldi	r20, 0x00	; 0
    70fc:	50 e0       	ldi	r21, 0x00	; 0
    70fe:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x02, BYTE);
    7102:	88 85       	ldd	r24, Y+8	; 0x08
    7104:	99 85       	ldd	r25, Y+9	; 0x09
    7106:	62 e0       	ldi	r22, 0x02	; 2
    7108:	70 e0       	ldi	r23, 0x00	; 0
    710a:	40 e0       	ldi	r20, 0x00	; 0
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(mouse_buttons, BYTE);
    7112:	88 85       	ldd	r24, Y+8	; 0x08
    7114:	99 85       	ldd	r25, Y+9	; 0x09
    7116:	68 81       	ld	r22, Y
    7118:	40 e0       	ldi	r20, 0x00	; 0
    711a:	50 e0       	ldi	r21, 0x00	; 0
    711c:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(0x00, BYTE);
    7120:	88 85       	ldd	r24, Y+8	; 0x08
    7122:	99 85       	ldd	r25, Y+9	; 0x09
    7124:	60 e0       	ldi	r22, 0x00	; 0
    7126:	70 e0       	ldi	r23, 0x00	; 0
    7128:	40 e0       	ldi	r20, 0x00	; 0
    712a:	50 e0       	ldi	r21, 0x00	; 0
    712c:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x00, BYTE);
    7130:	88 85       	ldd	r24, Y+8	; 0x08
    7132:	99 85       	ldd	r25, Y+9	; 0x09
    7134:	60 e0       	ldi	r22, 0x00	; 0
    7136:	70 e0       	ldi	r23, 0x00	; 0
    7138:	40 e0       	ldi	r20, 0x00	; 0
    713a:	50 e0       	ldi	r21, 0x00	; 0
    713c:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
}
    7140:	df 91       	pop	r29
    7142:	cf 91       	pop	r28
    7144:	08 95       	ret

00007146 <_ZN5iWRAP8send_nowEv>:

void iWRAP::set_key6(uint8_t c) {
    keyboard_keys[5] = c;
}

void iWRAP::send_now() {
    7146:	0f 93       	push	r16
    7148:	1f 93       	push	r17
    714a:	8c 01       	movw	r16, r24
    uart -> print(0x9f, BYTE);
    714c:	fc 01       	movw	r30, r24
    714e:	80 85       	ldd	r24, Z+8	; 0x08
    7150:	91 85       	ldd	r25, Z+9	; 0x09
    7152:	6f e9       	ldi	r22, 0x9F	; 159
    7154:	70 e0       	ldi	r23, 0x00	; 0
    7156:	40 e0       	ldi	r20, 0x00	; 0
    7158:	50 e0       	ldi	r21, 0x00	; 0
    715a:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x0a, BYTE);
    715e:	f8 01       	movw	r30, r16
    7160:	80 85       	ldd	r24, Z+8	; 0x08
    7162:	91 85       	ldd	r25, Z+9	; 0x09
    7164:	6a e0       	ldi	r22, 0x0A	; 10
    7166:	70 e0       	ldi	r23, 0x00	; 0
    7168:	40 e0       	ldi	r20, 0x00	; 0
    716a:	50 e0       	ldi	r21, 0x00	; 0
    716c:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0xa1, BYTE);
    7170:	f8 01       	movw	r30, r16
    7172:	80 85       	ldd	r24, Z+8	; 0x08
    7174:	91 85       	ldd	r25, Z+9	; 0x09
    7176:	61 ea       	ldi	r22, 0xA1	; 161
    7178:	70 e0       	ldi	r23, 0x00	; 0
    717a:	40 e0       	ldi	r20, 0x00	; 0
    717c:	50 e0       	ldi	r21, 0x00	; 0
    717e:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(0x01, BYTE);
    7182:	f8 01       	movw	r30, r16
    7184:	80 85       	ldd	r24, Z+8	; 0x08
    7186:	91 85       	ldd	r25, Z+9	; 0x09
    7188:	61 e0       	ldi	r22, 0x01	; 1
    718a:	70 e0       	ldi	r23, 0x00	; 0
    718c:	40 e0       	ldi	r20, 0x00	; 0
    718e:	50 e0       	ldi	r21, 0x00	; 0
    7190:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(keyboard_modifier_keys, BYTE);
    7194:	f8 01       	movw	r30, r16
    7196:	80 85       	ldd	r24, Z+8	; 0x08
    7198:	91 85       	ldd	r25, Z+9	; 0x09
    719a:	67 81       	ldd	r22, Z+7	; 0x07
    719c:	40 e0       	ldi	r20, 0x00	; 0
    719e:	50 e0       	ldi	r21, 0x00	; 0
    71a0:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(0x00, BYTE);
    71a4:	f8 01       	movw	r30, r16
    71a6:	80 85       	ldd	r24, Z+8	; 0x08
    71a8:	91 85       	ldd	r25, Z+9	; 0x09
    71aa:	60 e0       	ldi	r22, 0x00	; 0
    71ac:	70 e0       	ldi	r23, 0x00	; 0
    71ae:	40 e0       	ldi	r20, 0x00	; 0
    71b0:	50 e0       	ldi	r21, 0x00	; 0
    71b2:	0e 94 08 29 	call	0x5210	; 0x5210 <_ZN14HardwareSerial5printEii>
    uart -> print(keyboard_keys[0], BYTE);
    71b6:	f8 01       	movw	r30, r16
    71b8:	80 85       	ldd	r24, Z+8	; 0x08
    71ba:	91 85       	ldd	r25, Z+9	; 0x09
    71bc:	61 81       	ldd	r22, Z+1	; 0x01
    71be:	40 e0       	ldi	r20, 0x00	; 0
    71c0:	50 e0       	ldi	r21, 0x00	; 0
    71c2:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(keyboard_keys[1], BYTE);
    71c6:	f8 01       	movw	r30, r16
    71c8:	80 85       	ldd	r24, Z+8	; 0x08
    71ca:	91 85       	ldd	r25, Z+9	; 0x09
    71cc:	62 81       	ldd	r22, Z+2	; 0x02
    71ce:	40 e0       	ldi	r20, 0x00	; 0
    71d0:	50 e0       	ldi	r21, 0x00	; 0
    71d2:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(keyboard_keys[2], BYTE);
    71d6:	f8 01       	movw	r30, r16
    71d8:	80 85       	ldd	r24, Z+8	; 0x08
    71da:	91 85       	ldd	r25, Z+9	; 0x09
    71dc:	63 81       	ldd	r22, Z+3	; 0x03
    71de:	40 e0       	ldi	r20, 0x00	; 0
    71e0:	50 e0       	ldi	r21, 0x00	; 0
    71e2:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(keyboard_keys[3], BYTE);
    71e6:	f8 01       	movw	r30, r16
    71e8:	80 85       	ldd	r24, Z+8	; 0x08
    71ea:	91 85       	ldd	r25, Z+9	; 0x09
    71ec:	64 81       	ldd	r22, Z+4	; 0x04
    71ee:	40 e0       	ldi	r20, 0x00	; 0
    71f0:	50 e0       	ldi	r21, 0x00	; 0
    71f2:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(keyboard_keys[4], BYTE);
    71f6:	f8 01       	movw	r30, r16
    71f8:	80 85       	ldd	r24, Z+8	; 0x08
    71fa:	91 85       	ldd	r25, Z+9	; 0x09
    71fc:	65 81       	ldd	r22, Z+5	; 0x05
    71fe:	40 e0       	ldi	r20, 0x00	; 0
    7200:	50 e0       	ldi	r21, 0x00	; 0
    7202:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
    uart -> print(keyboard_keys[5], BYTE);
    7206:	f8 01       	movw	r30, r16
    7208:	80 85       	ldd	r24, Z+8	; 0x08
    720a:	91 85       	ldd	r25, Z+9	; 0x09
    720c:	66 81       	ldd	r22, Z+6	; 0x06
    720e:	40 e0       	ldi	r20, 0x00	; 0
    7210:	50 e0       	ldi	r21, 0x00	; 0
    7212:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN14HardwareSerial5printEhi>
}
    7216:	1f 91       	pop	r17
    7218:	0f 91       	pop	r16
    721a:	08 95       	ret

0000721c <_ZN5iWRAP5parseEh>:
    mouse_buttons = 0;
    uart = u;
}

void iWRAP::parse(uint8_t ch) {
    Serial.print(ch, BYTE);
    721c:	88 e8       	ldi	r24, 0x88	; 136
    721e:	98 e0       	ldi	r25, 0x08	; 8
    7220:	40 e0       	ldi	r20, 0x00	; 0
    7222:	0c 94 f9 2b 	jmp	0x57f2	; 0x57f2 <_ZN16USBVirtualSerial5printEhh>

00007226 <__vector_23>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    7226:	1f 92       	push	r1
    7228:	0f 92       	push	r0
    722a:	0f b6       	in	r0, 0x3f	; 63
    722c:	0f 92       	push	r0
    722e:	11 24       	eor	r1, r1
    7230:	2f 93       	push	r18
    7232:	3f 93       	push	r19
    7234:	4f 93       	push	r20
    7236:	5f 93       	push	r21
    7238:	6f 93       	push	r22
    723a:	7f 93       	push	r23
    723c:	8f 93       	push	r24
    723e:	9f 93       	push	r25
    7240:	af 93       	push	r26
    7242:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    7244:	20 91 08 04 	lds	r18, 0x0408
    7248:	30 91 09 04 	lds	r19, 0x0409
    724c:	40 91 0a 04 	lds	r20, 0x040A
    7250:	50 91 0b 04 	lds	r21, 0x040B
	unsigned char f = timer0_fract;
    7254:	70 91 0c 04 	lds	r23, 0x040C

	m += MILLIS_INC;
    7258:	da 01       	movw	r26, r20
    725a:	c9 01       	movw	r24, r18
    725c:	02 96       	adiw	r24, 0x02	; 2
    725e:	a1 1d       	adc	r26, r1
    7260:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    7262:	67 2f       	mov	r22, r23
    7264:	6a 5f       	subi	r22, 0xFA	; 250
	if (f >= FRACT_MAX) {
    7266:	6d 37       	cpi	r22, 0x7D	; 125
    7268:	30 f0       	brcs	.+12     	; 0x7276 <__vector_23+0x50>
		f -= FRACT_MAX;
    726a:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    726c:	da 01       	movw	r26, r20
    726e:	c9 01       	movw	r24, r18
    7270:	03 96       	adiw	r24, 0x03	; 3
    7272:	a1 1d       	adc	r26, r1
    7274:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    7276:	60 93 0c 04 	sts	0x040C, r22
	timer0_millis = m;
    727a:	80 93 08 04 	sts	0x0408, r24
    727e:	90 93 09 04 	sts	0x0409, r25
    7282:	a0 93 0a 04 	sts	0x040A, r26
    7286:	b0 93 0b 04 	sts	0x040B, r27
	timer0_overflow_count++;
    728a:	80 91 04 04 	lds	r24, 0x0404
    728e:	90 91 05 04 	lds	r25, 0x0405
    7292:	a0 91 06 04 	lds	r26, 0x0406
    7296:	b0 91 07 04 	lds	r27, 0x0407
    729a:	01 96       	adiw	r24, 0x01	; 1
    729c:	a1 1d       	adc	r26, r1
    729e:	b1 1d       	adc	r27, r1
    72a0:	80 93 04 04 	sts	0x0404, r24
    72a4:	90 93 05 04 	sts	0x0405, r25
    72a8:	a0 93 06 04 	sts	0x0406, r26
    72ac:	b0 93 07 04 	sts	0x0407, r27
}
    72b0:	bf 91       	pop	r27
    72b2:	af 91       	pop	r26
    72b4:	9f 91       	pop	r25
    72b6:	8f 91       	pop	r24
    72b8:	7f 91       	pop	r23
    72ba:	6f 91       	pop	r22
    72bc:	5f 91       	pop	r21
    72be:	4f 91       	pop	r20
    72c0:	3f 91       	pop	r19
    72c2:	2f 91       	pop	r18
    72c4:	0f 90       	pop	r0
    72c6:	0f be       	out	0x3f, r0	; 63
    72c8:	0f 90       	pop	r0
    72ca:	1f 90       	pop	r1
    72cc:	18 95       	reti

000072ce <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    72ce:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    72d0:	f8 94       	cli
	m = timer0_millis;
    72d2:	20 91 08 04 	lds	r18, 0x0408
    72d6:	30 91 09 04 	lds	r19, 0x0409
    72da:	40 91 0a 04 	lds	r20, 0x040A
    72de:	50 91 0b 04 	lds	r21, 0x040B
	SREG = oldSREG;
    72e2:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    72e4:	b9 01       	movw	r22, r18
    72e6:	ca 01       	movw	r24, r20
    72e8:	08 95       	ret

000072ea <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    72ea:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    72ec:	f8 94       	cli
	m = timer0_overflow_count;
    72ee:	20 91 04 04 	lds	r18, 0x0404
    72f2:	30 91 05 04 	lds	r19, 0x0405
    72f6:	40 91 06 04 	lds	r20, 0x0406
    72fa:	50 91 07 04 	lds	r21, 0x0407
#if defined(TCNT0)
	t = TCNT0;
    72fe:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    7300:	a8 9b       	sbis	0x15, 0	; 21
    7302:	06 c0       	rjmp	.+12     	; 0x7310 <micros+0x26>
    7304:	8f 3f       	cpi	r24, 0xFF	; 255
    7306:	21 f0       	breq	.+8      	; 0x7310 <micros+0x26>
		m++;
    7308:	2f 5f       	subi	r18, 0xFF	; 255
    730a:	3f 4f       	sbci	r19, 0xFF	; 255
    730c:	4f 4f       	sbci	r20, 0xFF	; 255
    730e:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    7310:	9f bf       	out	0x3f, r25	; 63
    7312:	54 2f       	mov	r21, r20
    7314:	43 2f       	mov	r20, r19
    7316:	32 2f       	mov	r19, r18
    7318:	22 27       	eor	r18, r18
    731a:	28 0f       	add	r18, r24
    731c:	31 1d       	adc	r19, r1
    731e:	41 1d       	adc	r20, r1
    7320:	51 1d       	adc	r21, r1
    7322:	83 e0       	ldi	r24, 0x03	; 3
    7324:	22 0f       	add	r18, r18
    7326:	33 1f       	adc	r19, r19
    7328:	44 1f       	adc	r20, r20
    732a:	55 1f       	adc	r21, r21
    732c:	8a 95       	dec	r24
    732e:	d1 f7       	brne	.-12     	; 0x7324 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    7330:	b9 01       	movw	r22, r18
    7332:	ca 01       	movw	r24, r20
    7334:	08 95       	ret

00007336 <delay>:

void delay(unsigned long ms)
{
    7336:	ef 92       	push	r14
    7338:	ff 92       	push	r15
    733a:	0f 93       	push	r16
    733c:	1f 93       	push	r17
    733e:	cf 93       	push	r28
    7340:	df 93       	push	r29
    7342:	7b 01       	movw	r14, r22
    7344:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    7346:	d1 df       	rcall	.-94     	; 0x72ea <micros>
    7348:	eb 01       	movw	r28, r22
    734a:	0d c0       	rjmp	.+26     	; 0x7366 <delay+0x30>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    734c:	ce df       	rcall	.-100    	; 0x72ea <micros>
    734e:	6c 1b       	sub	r22, r28
    7350:	7d 0b       	sbc	r23, r29
    7352:	68 5e       	subi	r22, 0xE8	; 232
    7354:	73 40       	sbci	r23, 0x03	; 3
    7356:	d0 f3       	brcs	.-12     	; 0x734c <delay+0x16>
			ms--;
    7358:	08 94       	sec
    735a:	e1 08       	sbc	r14, r1
    735c:	f1 08       	sbc	r15, r1
    735e:	01 09       	sbc	r16, r1
    7360:	11 09       	sbc	r17, r1
			start += 1000;
    7362:	c8 51       	subi	r28, 0x18	; 24
    7364:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    7366:	e1 14       	cp	r14, r1
    7368:	f1 04       	cpc	r15, r1
    736a:	01 05       	cpc	r16, r1
    736c:	11 05       	cpc	r17, r1
    736e:	71 f7       	brne	.-36     	; 0x734c <delay+0x16>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    7370:	df 91       	pop	r29
    7372:	cf 91       	pop	r28
    7374:	1f 91       	pop	r17
    7376:	0f 91       	pop	r16
    7378:	ff 90       	pop	r15
    737a:	ef 90       	pop	r14
    737c:	08 95       	ret

0000737e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    737e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    7380:	84 b5       	in	r24, 0x24	; 36
    7382:	82 60       	ori	r24, 0x02	; 2
    7384:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    7386:	84 b5       	in	r24, 0x24	; 36
    7388:	81 60       	ori	r24, 0x01	; 1
    738a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    738c:	85 b5       	in	r24, 0x25	; 37
    738e:	82 60       	ori	r24, 0x02	; 2
    7390:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    7392:	85 b5       	in	r24, 0x25	; 37
    7394:	81 60       	ori	r24, 0x01	; 1
    7396:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    7398:	ee e6       	ldi	r30, 0x6E	; 110
    739a:	f0 e0       	ldi	r31, 0x00	; 0
    739c:	80 81       	ld	r24, Z
    739e:	81 60       	ori	r24, 0x01	; 1
    73a0:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    73a2:	e1 e8       	ldi	r30, 0x81	; 129
    73a4:	f0 e0       	ldi	r31, 0x00	; 0
    73a6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    73a8:	80 81       	ld	r24, Z
    73aa:	82 60       	ori	r24, 0x02	; 2
    73ac:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    73ae:	80 81       	ld	r24, Z
    73b0:	81 60       	ori	r24, 0x01	; 1
    73b2:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    73b4:	e0 e8       	ldi	r30, 0x80	; 128
    73b6:	f0 e0       	ldi	r31, 0x00	; 0
    73b8:	80 81       	ld	r24, Z
    73ba:	81 60       	ori	r24, 0x01	; 1
    73bc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    73be:	e1 eb       	ldi	r30, 0xB1	; 177
    73c0:	f0 e0       	ldi	r31, 0x00	; 0
    73c2:	80 81       	ld	r24, Z
    73c4:	84 60       	ori	r24, 0x04	; 4
    73c6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    73c8:	e0 eb       	ldi	r30, 0xB0	; 176
    73ca:	f0 e0       	ldi	r31, 0x00	; 0
    73cc:	80 81       	ld	r24, Z
    73ce:	81 60       	ori	r24, 0x01	; 1
    73d0:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    73d2:	e1 e9       	ldi	r30, 0x91	; 145
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	80 81       	ld	r24, Z
    73d8:	82 60       	ori	r24, 0x02	; 2
    73da:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    73dc:	80 81       	ld	r24, Z
    73de:	81 60       	ori	r24, 0x01	; 1
    73e0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    73e2:	e0 e9       	ldi	r30, 0x90	; 144
    73e4:	f0 e0       	ldi	r31, 0x00	; 0
    73e6:	80 81       	ld	r24, Z
    73e8:	81 60       	ori	r24, 0x01	; 1
    73ea:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    73ec:	ea e7       	ldi	r30, 0x7A	; 122
    73ee:	f0 e0       	ldi	r31, 0x00	; 0
    73f0:	80 81       	ld	r24, Z
    73f2:	84 60       	ori	r24, 0x04	; 4
    73f4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    73f6:	80 81       	ld	r24, Z
    73f8:	82 60       	ori	r24, 0x02	; 2
    73fa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    73fc:	80 81       	ld	r24, Z
    73fe:	81 60       	ori	r24, 0x01	; 1
    7400:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    7402:	80 81       	ld	r24, Z
    7404:	80 68       	ori	r24, 0x80	; 128
    7406:	80 83       	st	Z, r24
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
#endif
    7408:	08 95       	ret

0000740a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    740a:	da 01       	movw	r26, r20
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    740c:	93 30       	cpi	r25, 0x03	; 3
    740e:	c9 f0       	breq	.+50     	; 0x7442 <CALLBACK_USB_GetDescriptor+0x38>
    7410:	94 30       	cpi	r25, 0x04	; 4
    7412:	30 f4       	brcc	.+12     	; 0x7420 <CALLBACK_USB_GetDescriptor+0x16>
    7414:	91 30       	cpi	r25, 0x01	; 1
    7416:	59 f0       	breq	.+22     	; 0x742e <CALLBACK_USB_GetDescriptor+0x24>
    7418:	92 30       	cpi	r25, 0x02	; 2
    741a:	09 f0       	breq	.+2      	; 0x741e <CALLBACK_USB_GetDescriptor+0x14>
    741c:	40 c0       	rjmp	.+128    	; 0x749e <CALLBACK_USB_GetDescriptor+0x94>
    741e:	0c c0       	rjmp	.+24     	; 0x7438 <CALLBACK_USB_GetDescriptor+0x2e>
    7420:	91 32       	cpi	r25, 0x21	; 33
    7422:	09 f4       	brne	.+2      	; 0x7426 <CALLBACK_USB_GetDescriptor+0x1c>
    7424:	32 c0       	rjmp	.+100    	; 0x748a <CALLBACK_USB_GetDescriptor+0x80>
    7426:	92 32       	cpi	r25, 0x22	; 34
    7428:	09 f0       	breq	.+2      	; 0x742c <CALLBACK_USB_GetDescriptor+0x22>
    742a:	39 c0       	rjmp	.+114    	; 0x749e <CALLBACK_USB_GetDescriptor+0x94>
    742c:	33 c0       	rjmp	.+102    	; 0x7494 <CALLBACK_USB_GetDescriptor+0x8a>
    742e:	e2 e5       	ldi	r30, 0x52	; 82
    7430:	f2 e0       	ldi	r31, 0x02	; 2
    7432:	22 e1       	ldi	r18, 0x12	; 18
    7434:	30 e0       	ldi	r19, 0x00	; 0
    7436:	37 c0       	rjmp	.+110    	; 0x74a6 <CALLBACK_USB_GetDescriptor+0x9c>
    7438:	e4 e6       	ldi	r30, 0x64	; 100
    743a:	f2 e0       	ldi	r31, 0x02	; 2
    743c:	26 e6       	ldi	r18, 0x66	; 102
    743e:	30 e0       	ldi	r19, 0x00	; 0
    7440:	32 c0       	rjmp	.+100    	; 0x74a6 <CALLBACK_USB_GetDescriptor+0x9c>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
    7442:	82 30       	cpi	r24, 0x02	; 2
    7444:	b1 f0       	breq	.+44     	; 0x7472 <CALLBACK_USB_GetDescriptor+0x68>
    7446:	83 30       	cpi	r24, 0x03	; 3
    7448:	28 f4       	brcc	.+10     	; 0x7454 <CALLBACK_USB_GetDescriptor+0x4a>
    744a:	88 23       	and	r24, r24
    744c:	41 f0       	breq	.+16     	; 0x745e <CALLBACK_USB_GetDescriptor+0x54>
    744e:	81 30       	cpi	r24, 0x01	; 1
    7450:	31 f5       	brne	.+76     	; 0x749e <CALLBACK_USB_GetDescriptor+0x94>
    7452:	09 c0       	rjmp	.+18     	; 0x7466 <CALLBACK_USB_GetDescriptor+0x5c>
    7454:	83 30       	cpi	r24, 0x03	; 3
    7456:	89 f0       	breq	.+34     	; 0x747a <CALLBACK_USB_GetDescriptor+0x70>
    7458:	84 30       	cpi	r24, 0x04	; 4
    745a:	09 f5       	brne	.+66     	; 0x749e <CALLBACK_USB_GetDescriptor+0x94>
    745c:	12 c0       	rjmp	.+36     	; 0x7482 <CALLBACK_USB_GetDescriptor+0x78>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    745e:	ea ec       	ldi	r30, 0xCA	; 202
    7460:	f2 e0       	ldi	r31, 0x02	; 2
    7462:	84 91       	lpm	r24, Z+
    7464:	03 c0       	rjmp	.+6      	; 0x746c <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    7466:	ee ec       	ldi	r30, 0xCE	; 206
    7468:	f2 e0       	ldi	r31, 0x02	; 2
    746a:	84 91       	lpm	r24, Z+
    746c:	28 2f       	mov	r18, r24
    746e:	30 e0       	ldi	r19, 0x00	; 0
    7470:	1a c0       	rjmp	.+52     	; 0x74a6 <CALLBACK_USB_GetDescriptor+0x9c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    7472:	ea ee       	ldi	r30, 0xEA	; 234
    7474:	f2 e0       	ldi	r31, 0x02	; 2
    7476:	84 91       	lpm	r24, Z+
    7478:	f9 cf       	rjmp	.-14     	; 0x746c <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x03:
                    Address = &ProductStringSerial;
                    Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
    747a:	e8 e1       	ldi	r30, 0x18	; 24
    747c:	f3 e0       	ldi	r31, 0x03	; 3
    747e:	84 91       	lpm	r24, Z+
    7480:	f5 cf       	rjmp	.-22     	; 0x746c <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x04:
                    Address = &ProductStringHID;
                    Size    = pgm_read_byte(&ProductStringHID.Header.Size);
    7482:	e4 e4       	ldi	r30, 0x44	; 68
    7484:	f3 e0       	ldi	r31, 0x03	; 3
    7486:	84 91       	lpm	r24, Z+
    7488:	f1 cf       	rjmp	.-30     	; 0x746c <CALLBACK_USB_GetDescriptor+0x62>
    748a:	e3 eb       	ldi	r30, 0xB3	; 179
    748c:	f2 e0       	ldi	r31, 0x02	; 2
    748e:	29 e0       	ldi	r18, 0x09	; 9
    7490:	30 e0       	ldi	r19, 0x00	; 0
    7492:	09 c0       	rjmp	.+18     	; 0x74a6 <CALLBACK_USB_GetDescriptor+0x9c>

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_GenericHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
    7494:	e1 ea       	ldi	r30, 0xA1	; 161
    7496:	f1 e0       	ldi	r31, 0x01	; 1
    7498:	21 eb       	ldi	r18, 0xB1	; 177
    749a:	30 e0       	ldi	r19, 0x00	; 0
    749c:	04 c0       	rjmp	.+8      	; 0x74a6 <CALLBACK_USB_GetDescriptor+0x9c>
    749e:	e0 e0       	ldi	r30, 0x00	; 0
    74a0:	f0 e0       	ldi	r31, 0x00	; 0
    74a2:	20 e0       	ldi	r18, 0x00	; 0
    74a4:	30 e0       	ldi	r19, 0x00	; 0
            Address = &HIDReport;
            Size    = sizeof(HIDReport);
            break;
    }

    *DescriptorAddress = Address;
    74a6:	ed 93       	st	X+, r30
    74a8:	fc 93       	st	X, r31
    return Size;
}
    74aa:	c9 01       	movw	r24, r18
    74ac:	08 95       	ret

000074ae <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    74ae:	38 2f       	mov	r19, r24
    74b0:	28 2f       	mov	r18, r24
    74b2:	2c c0       	rjmp	.+88     	; 0x750c <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    74b4:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
    74b8:	23 17       	cp	r18, r19
    74ba:	21 f4       	brne	.+8      	; 0x74c4 <Endpoint_ConfigureEndpoint_Prv+0x16>
    74bc:	76 2f       	mov	r23, r22
    74be:	94 2f       	mov	r25, r20
    74c0:	50 e0       	ldi	r21, 0x00	; 0
    74c2:	06 c0       	rjmp	.+12     	; 0x74d0 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    74c4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    74c8:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    74cc:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    74d0:	91 ff       	sbrs	r25, 1
    74d2:	1b c0       	rjmp	.+54     	; 0x750a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    74d4:	80 91 eb 00 	lds	r24, 0x00EB
    74d8:	8e 7f       	andi	r24, 0xFE	; 254
    74da:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
    74de:	80 91 ed 00 	lds	r24, 0x00ED
    74e2:	82 70       	andi	r24, 0x02	; 2
    74e4:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    74e8:	80 91 eb 00 	lds	r24, 0x00EB
    74ec:	81 60       	ori	r24, 0x01	; 1
    74ee:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    74f2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    74f6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    74fa:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    74fe:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
    7502:	87 fd       	sbrc	r24, 7
    7504:	02 c0       	rjmp	.+4      	; 0x750a <Endpoint_ConfigureEndpoint_Prv+0x5c>
    7506:	80 e0       	ldi	r24, 0x00	; 0
    7508:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    750a:	2f 5f       	subi	r18, 0xFF	; 255
    750c:	27 30       	cpi	r18, 0x07	; 7
    750e:	90 f2       	brcs	.-92     	; 0x74b4 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7510:	30 93 e9 00 	sts	0x00E9, r19
    7514:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    7516:	08 95       	ret

00007518 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7518:	80 91 be 08 	lds	r24, 0x08BE
    751c:	88 23       	and	r24, r24
    751e:	9c f4       	brge	.+38     	; 0x7546 <Endpoint_ClearStatusStage+0x2e>
    7520:	04 c0       	rjmp	.+8      	; 0x752a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7522:	80 91 bd 08 	lds	r24, 0x08BD
    7526:	88 23       	and	r24, r24
    7528:	b9 f0       	breq	.+46     	; 0x7558 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    752a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    752e:	82 ff       	sbrs	r24, 2
    7530:	f8 cf       	rjmp	.-16     	; 0x7522 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7532:	80 91 e8 00 	lds	r24, 0x00E8
    7536:	8b 77       	andi	r24, 0x7B	; 123
    7538:	80 93 e8 00 	sts	0x00E8, r24
    753c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    753e:	80 91 bd 08 	lds	r24, 0x08BD
    7542:	88 23       	and	r24, r24
    7544:	49 f0       	breq	.+18     	; 0x7558 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7546:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    754a:	80 ff       	sbrs	r24, 0
    754c:	f8 cf       	rjmp	.-16     	; 0x753e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    754e:	80 91 e8 00 	lds	r24, 0x00E8
    7552:	8e 77       	andi	r24, 0x7E	; 126
    7554:	80 93 e8 00 	sts	0x00E8, r24
    7558:	08 95       	ret

0000755a <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    755a:	40 91 e4 00 	lds	r20, 0x00E4
    755e:	50 91 e5 00 	lds	r21, 0x00E5
    7562:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    7564:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    7568:	80 ff       	sbrs	r24, 0
    756a:	05 c0       	rjmp	.+10     	; 0x7576 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    756c:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    7570:	80 ff       	sbrs	r24, 0
    7572:	05 c0       	rjmp	.+10     	; 0x757e <Endpoint_WaitUntilReady+0x24>
    7574:	22 c0       	rjmp	.+68     	; 0x75ba <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7576:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    757a:	82 fd       	sbrc	r24, 2
    757c:	1e c0       	rjmp	.+60     	; 0x75ba <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    757e:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7582:	88 23       	and	r24, r24
    7584:	11 f4       	brne	.+4      	; 0x758a <Endpoint_WaitUntilReady+0x30>
    7586:	82 e0       	ldi	r24, 0x02	; 2
    7588:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    758a:	85 30       	cpi	r24, 0x05	; 5
    758c:	11 f4       	brne	.+4      	; 0x7592 <Endpoint_WaitUntilReady+0x38>
    758e:	83 e0       	ldi	r24, 0x03	; 3
    7590:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7592:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    7596:	85 ff       	sbrs	r24, 5
    7598:	02 c0       	rjmp	.+4      	; 0x759e <Endpoint_WaitUntilReady+0x44>
    759a:	81 e0       	ldi	r24, 0x01	; 1
    759c:	08 95       	ret
    759e:	80 91 e4 00 	lds	r24, 0x00E4
    75a2:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    75a6:	84 17       	cp	r24, r20
    75a8:	95 07       	cpc	r25, r21
    75aa:	e1 f2       	breq	.-72     	; 0x7564 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    75ac:	22 23       	and	r18, r18
    75ae:	11 f4       	brne	.+4      	; 0x75b4 <Endpoint_WaitUntilReady+0x5a>
    75b0:	84 e0       	ldi	r24, 0x04	; 4
    75b2:	08 95       	ret
    75b4:	21 50       	subi	r18, 0x01	; 1
    75b6:	ac 01       	movw	r20, r24
    75b8:	d5 cf       	rjmp	.-86     	; 0x7564 <Endpoint_WaitUntilReady+0xa>
    75ba:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    75bc:	08 95       	ret

000075be <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    75be:	ef 92       	push	r14
    75c0:	ff 92       	push	r15
    75c2:	0f 93       	push	r16
    75c4:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    75c6:	4d d0       	rcall	.+154    	; 0x7662 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    75c8:	54 d0       	rcall	.+168    	; 0x7672 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    75ca:	08 ed       	ldi	r16, 0xD8	; 216
    75cc:	10 e0       	ldi	r17, 0x00	; 0
    75ce:	f8 01       	movw	r30, r16
    75d0:	80 81       	ld	r24, Z
    75d2:	8f 77       	andi	r24, 0x7F	; 127
    75d4:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    75d6:	80 81       	ld	r24, Z
    75d8:	80 68       	ori	r24, 0x80	; 128
    75da:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    75dc:	80 81       	ld	r24, Z
    75de:	8f 7d       	andi	r24, 0xDF	; 223
    75e0:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    75e2:	e7 ed       	ldi	r30, 0xD7	; 215
    75e4:	f0 e0       	ldi	r31, 0x00	; 0
    75e6:	80 81       	ld	r24, Z
    75e8:	80 68       	ori	r24, 0x80	; 128
    75ea:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    75ec:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    75ee:	10 92 bd 08 	sts	0x08BD, r1
	USB_ConfigurationNumber  = 0;
    75f2:	10 92 bb 08 	sts	0x08BB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
    75f6:	10 92 ba 08 	sts	0x08BA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
    75fa:	10 92 b9 08 	sts	0x08B9, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    75fe:	80 ee       	ldi	r24, 0xE0	; 224
    7600:	e8 2e       	mov	r14, r24
    7602:	f1 2c       	mov	r15, r1
    7604:	f7 01       	movw	r30, r14
    7606:	80 81       	ld	r24, Z
    7608:	8b 7f       	andi	r24, 0xFB	; 251
    760a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    760c:	f8 01       	movw	r30, r16
    760e:	80 81       	ld	r24, Z
    7610:	81 60       	ori	r24, 0x01	; 1
    7612:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    7614:	80 e0       	ldi	r24, 0x00	; 0
    7616:	60 e0       	ldi	r22, 0x00	; 0
    7618:	42 e0       	ldi	r20, 0x02	; 2
    761a:	49 df       	rcall	.-366    	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    761c:	e1 ee       	ldi	r30, 0xE1	; 225
    761e:	f0 e0       	ldi	r31, 0x00	; 0
    7620:	80 81       	ld	r24, Z
    7622:	8e 7f       	andi	r24, 0xFE	; 254
    7624:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7626:	e2 ee       	ldi	r30, 0xE2	; 226
    7628:	f0 e0       	ldi	r31, 0x00	; 0
    762a:	80 81       	ld	r24, Z
    762c:	81 60       	ori	r24, 0x01	; 1
    762e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7630:	80 81       	ld	r24, Z
    7632:	88 60       	ori	r24, 0x08	; 8
    7634:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7636:	f7 01       	movw	r30, r14
    7638:	80 81       	ld	r24, Z
    763a:	8e 7f       	andi	r24, 0xFE	; 254
    763c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    763e:	f8 01       	movw	r30, r16
    7640:	80 81       	ld	r24, Z
    7642:	80 61       	ori	r24, 0x10	; 16
    7644:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7646:	1f 91       	pop	r17
    7648:	0f 91       	pop	r16
    764a:	ff 90       	pop	r15
    764c:	ef 90       	pop	r14
    764e:	08 95       	ret

00007650 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7650:	e7 ed       	ldi	r30, 0xD7	; 215
    7652:	f0 e0       	ldi	r31, 0x00	; 0
    7654:	80 81       	ld	r24, Z
    7656:	81 60       	ori	r24, 0x01	; 1
    7658:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    765a:	81 e0       	ldi	r24, 0x01	; 1
    765c:	80 93 bc 08 	sts	0x08BC, r24

	USB_ResetInterface();
}
    7660:	ae cf       	rjmp	.-164    	; 0x75be <USB_ResetInterface>

00007662 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    7662:	e8 ed       	ldi	r30, 0xD8	; 216
    7664:	f0 e0       	ldi	r31, 0x00	; 0
    7666:	80 81       	ld	r24, Z
    7668:	8c 7f       	andi	r24, 0xFC	; 252
    766a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    766c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    7670:	08 95       	ret

00007672 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7672:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7676:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    767a:	08 95       	ret

0000767c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    767c:	1f 92       	push	r1
    767e:	0f 92       	push	r0
    7680:	0f b6       	in	r0, 0x3f	; 63
    7682:	0f 92       	push	r0
    7684:	0b b6       	in	r0, 0x3b	; 59
    7686:	0f 92       	push	r0
    7688:	11 24       	eor	r1, r1
    768a:	2f 93       	push	r18
    768c:	3f 93       	push	r19
    768e:	4f 93       	push	r20
    7690:	5f 93       	push	r21
    7692:	6f 93       	push	r22
    7694:	7f 93       	push	r23
    7696:	8f 93       	push	r24
    7698:	9f 93       	push	r25
    769a:	af 93       	push	r26
    769c:	bf 93       	push	r27
    769e:	ef 93       	push	r30
    76a0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    76a2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    76a6:	82 ff       	sbrs	r24, 2
    76a8:	0a c0       	rjmp	.+20     	; 0x76be <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    76aa:	80 91 e2 00 	lds	r24, 0x00E2
    76ae:	82 ff       	sbrs	r24, 2
    76b0:	06 c0       	rjmp	.+12     	; 0x76be <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    76b2:	80 91 e1 00 	lds	r24, 0x00E1
    76b6:	8b 7f       	andi	r24, 0xFB	; 251
    76b8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    76bc:	d1 d3       	rcall	.+1954   	; 0x7e60 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    76be:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    76c2:	80 ff       	sbrs	r24, 0
    76c4:	1f c0       	rjmp	.+62     	; 0x7704 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    76c6:	80 91 d8 00 	lds	r24, 0x00D8
    76ca:	80 ff       	sbrs	r24, 0
    76cc:	1b c0       	rjmp	.+54     	; 0x7704 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    76ce:	80 91 da 00 	lds	r24, 0x00DA
    76d2:	8e 7f       	andi	r24, 0xFE	; 254
    76d4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    76d8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    76dc:	80 ff       	sbrs	r24, 0
    76de:	0d c0       	rjmp	.+26     	; 0x76fa <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    76e0:	84 e1       	ldi	r24, 0x14	; 20
    76e2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    76e4:	86 e1       	ldi	r24, 0x16	; 22
    76e6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    76e8:	09 b4       	in	r0, 0x29	; 41
    76ea:	00 fe       	sbrs	r0, 0
    76ec:	fd cf       	rjmp	.-6      	; 0x76e8 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    76ee:	81 e0       	ldi	r24, 0x01	; 1
    76f0:	80 93 bd 08 	sts	0x08BD, r24
			EVENT_USB_Device_Connect();
    76f4:	0e 94 23 02 	call	0x446	; 0x446 <EVENT_USB_Device_Connect>
    76f8:	05 c0       	rjmp	.+10     	; 0x7704 <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    76fa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    76fc:	10 92 bd 08 	sts	0x08BD, r1
			EVENT_USB_Device_Disconnect();
    7700:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7704:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7708:	80 ff       	sbrs	r24, 0
    770a:	18 c0       	rjmp	.+48     	; 0x773c <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    770c:	80 91 e2 00 	lds	r24, 0x00E2
    7710:	80 ff       	sbrs	r24, 0
    7712:	14 c0       	rjmp	.+40     	; 0x773c <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7714:	80 91 e2 00 	lds	r24, 0x00E2
    7718:	8e 7f       	andi	r24, 0xFE	; 254
    771a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    771e:	80 91 e2 00 	lds	r24, 0x00E2
    7722:	80 61       	ori	r24, 0x10	; 16
    7724:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7728:	80 91 d8 00 	lds	r24, 0x00D8
    772c:	80 62       	ori	r24, 0x20	; 32
    772e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7732:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7734:	85 e0       	ldi	r24, 0x05	; 5
    7736:	80 93 bd 08 	sts	0x08BD, r24
		EVENT_USB_Device_Suspend();
    773a:	92 d3       	rcall	.+1828   	; 0x7e60 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    773c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7740:	84 ff       	sbrs	r24, 4
    7742:	2d c0       	rjmp	.+90     	; 0x779e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7744:	80 91 e2 00 	lds	r24, 0x00E2
    7748:	84 ff       	sbrs	r24, 4
    774a:	29 c0       	rjmp	.+82     	; 0x779e <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    774c:	84 e1       	ldi	r24, 0x14	; 20
    774e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7750:	86 e1       	ldi	r24, 0x16	; 22
    7752:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7754:	09 b4       	in	r0, 0x29	; 41
    7756:	00 fe       	sbrs	r0, 0
    7758:	fd cf       	rjmp	.-6      	; 0x7754 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    775a:	80 91 d8 00 	lds	r24, 0x00D8
    775e:	8f 7d       	andi	r24, 0xDF	; 223
    7760:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7764:	80 91 e1 00 	lds	r24, 0x00E1
    7768:	8f 7e       	andi	r24, 0xEF	; 239
    776a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    776e:	80 91 e2 00 	lds	r24, 0x00E2
    7772:	8f 7e       	andi	r24, 0xEF	; 239
    7774:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7778:	80 91 e2 00 	lds	r24, 0x00E2
    777c:	81 60       	ori	r24, 0x01	; 1
    777e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
    7782:	80 91 bb 08 	lds	r24, 0x08BB
    7786:	88 23       	and	r24, r24
    7788:	31 f4       	brne	.+12     	; 0x7796 <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    778a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    778e:	87 fd       	sbrc	r24, 7
    7790:	02 c0       	rjmp	.+4      	; 0x7796 <__vector_10+0x11a>
    7792:	81 e0       	ldi	r24, 0x01	; 1
    7794:	01 c0       	rjmp	.+2      	; 0x7798 <__vector_10+0x11c>
    7796:	84 e0       	ldi	r24, 0x04	; 4
    7798:	80 93 bd 08 	sts	0x08BD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    779c:	61 d3       	rcall	.+1730   	; 0x7e60 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    779e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    77a2:	83 ff       	sbrs	r24, 3
    77a4:	22 c0       	rjmp	.+68     	; 0x77ea <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    77a6:	80 91 e2 00 	lds	r24, 0x00E2
    77aa:	83 ff       	sbrs	r24, 3
    77ac:	1e c0       	rjmp	.+60     	; 0x77ea <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    77ae:	80 91 e1 00 	lds	r24, 0x00E1
    77b2:	87 7f       	andi	r24, 0xF7	; 247
    77b4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
    77b8:	82 e0       	ldi	r24, 0x02	; 2
    77ba:	80 93 bd 08 	sts	0x08BD, r24
		USB_ConfigurationNumber = 0;
    77be:	10 92 bb 08 	sts	0x08BB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    77c2:	80 91 e1 00 	lds	r24, 0x00E1
    77c6:	8e 7f       	andi	r24, 0xFE	; 254
    77c8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    77cc:	80 91 e2 00 	lds	r24, 0x00E2
    77d0:	8e 7f       	andi	r24, 0xFE	; 254
    77d2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    77d6:	80 91 e2 00 	lds	r24, 0x00E2
    77da:	80 61       	ori	r24, 0x10	; 16
    77dc:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    77e0:	80 e0       	ldi	r24, 0x00	; 0
    77e2:	60 e0       	ldi	r22, 0x00	; 0
    77e4:	42 e0       	ldi	r20, 0x02	; 2
    77e6:	63 de       	rcall	.-826    	; 0x74ae <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    77e8:	3b d3       	rcall	.+1654   	; 0x7e60 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    77ea:	ff 91       	pop	r31
    77ec:	ef 91       	pop	r30
    77ee:	bf 91       	pop	r27
    77f0:	af 91       	pop	r26
    77f2:	9f 91       	pop	r25
    77f4:	8f 91       	pop	r24
    77f6:	7f 91       	pop	r23
    77f8:	6f 91       	pop	r22
    77fa:	5f 91       	pop	r21
    77fc:	4f 91       	pop	r20
    77fe:	3f 91       	pop	r19
    7800:	2f 91       	pop	r18
    7802:	0f 90       	pop	r0
    7804:	0b be       	out	0x3b, r0	; 59
    7806:	0f 90       	pop	r0
    7808:	0f be       	out	0x3f, r0	; 63
    780a:	0f 90       	pop	r0
    780c:	1f 90       	pop	r1
    780e:	18 95       	reti

00007810 <Endpoint_Write_Control_Stream_LE>:
    7810:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7812:	40 91 c4 08 	lds	r20, 0x08C4
    7816:	50 91 c5 08 	lds	r21, 0x08C5
    781a:	46 17       	cp	r20, r22
    781c:	57 07       	cpc	r21, r23
    781e:	18 f4       	brcc	.+6      	; 0x7826 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7820:	f9 01       	movw	r30, r18
    7822:	90 e0       	ldi	r25, 0x00	; 0
    7824:	3d c0       	rjmp	.+122    	; 0x78a0 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7826:	61 15       	cp	r22, r1
    7828:	71 05       	cpc	r23, r1
    782a:	11 f0       	breq	.+4      	; 0x7830 <Endpoint_Write_Control_Stream_LE+0x20>
    782c:	ab 01       	movw	r20, r22
    782e:	f8 cf       	rjmp	.-16     	; 0x7820 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7830:	80 91 e8 00 	lds	r24, 0x00E8
    7834:	8e 77       	andi	r24, 0x7E	; 126
    7836:	80 93 e8 00 	sts	0x00E8, r24
    783a:	40 e0       	ldi	r20, 0x00	; 0
    783c:	50 e0       	ldi	r21, 0x00	; 0
    783e:	f0 cf       	rjmp	.-32     	; 0x7820 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7840:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7844:	88 23       	and	r24, r24
    7846:	f1 f1       	breq	.+124    	; 0x78c4 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7848:	85 30       	cpi	r24, 0x05	; 5
    784a:	f1 f1       	breq	.+124    	; 0x78c8 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    784c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7850:	83 ff       	sbrs	r24, 3
    7852:	02 c0       	rjmp	.+4      	; 0x7858 <Endpoint_Write_Control_Stream_LE+0x48>
    7854:	81 e0       	ldi	r24, 0x01	; 1
    7856:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7858:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    785c:	82 fd       	sbrc	r24, 2
    785e:	2c c0       	rjmp	.+88     	; 0x78b8 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7860:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7864:	80 ff       	sbrs	r24, 0
    7866:	1c c0       	rjmp	.+56     	; 0x78a0 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    7868:	20 91 f2 00 	lds	r18, 0x00F2
    786c:	30 91 f3 00 	lds	r19, 0x00F3
    7870:	07 c0       	rjmp	.+14     	; 0x7880 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7872:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7874:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7878:	41 50       	subi	r20, 0x01	; 1
    787a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    787c:	2f 5f       	subi	r18, 0xFF	; 255
    787e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7880:	41 15       	cp	r20, r1
    7882:	51 05       	cpc	r21, r1
    7884:	19 f0       	breq	.+6      	; 0x788c <Endpoint_Write_Control_Stream_LE+0x7c>
    7886:	28 30       	cpi	r18, 0x08	; 8
    7888:	31 05       	cpc	r19, r1
    788a:	98 f3       	brcs	.-26     	; 0x7872 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    788c:	90 e0       	ldi	r25, 0x00	; 0
    788e:	28 30       	cpi	r18, 0x08	; 8
    7890:	31 05       	cpc	r19, r1
    7892:	09 f4       	brne	.+2      	; 0x7896 <Endpoint_Write_Control_Stream_LE+0x86>
    7894:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7896:	80 91 e8 00 	lds	r24, 0x00E8
    789a:	8e 77       	andi	r24, 0x7E	; 126
    789c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    78a0:	41 15       	cp	r20, r1
    78a2:	51 05       	cpc	r21, r1
    78a4:	69 f6       	brne	.-102    	; 0x7840 <Endpoint_Write_Control_Stream_LE+0x30>
    78a6:	99 23       	and	r25, r25
    78a8:	59 f6       	brne	.-106    	; 0x7840 <Endpoint_Write_Control_Stream_LE+0x30>
    78aa:	06 c0       	rjmp	.+12     	; 0x78b8 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    78ac:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    78b0:	88 23       	and	r24, r24
    78b2:	41 f0       	breq	.+16     	; 0x78c4 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    78b4:	85 30       	cpi	r24, 0x05	; 5
    78b6:	41 f0       	breq	.+16     	; 0x78c8 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78b8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    78bc:	82 ff       	sbrs	r24, 2
    78be:	f6 cf       	rjmp	.-20     	; 0x78ac <Endpoint_Write_Control_Stream_LE+0x9c>
    78c0:	80 e0       	ldi	r24, 0x00	; 0
    78c2:	08 95       	ret
    78c4:	82 e0       	ldi	r24, 0x02	; 2
    78c6:	08 95       	ret
    78c8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    78ca:	08 95       	ret

000078cc <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    78cc:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    78ce:	61 15       	cp	r22, r1
    78d0:	71 05       	cpc	r23, r1
    78d2:	29 f4       	brne	.+10     	; 0x78de <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78d4:	80 91 e8 00 	lds	r24, 0x00E8
    78d8:	8b 77       	andi	r24, 0x7B	; 123
    78da:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    78de:	f9 01       	movw	r30, r18
    78e0:	22 c0       	rjmp	.+68     	; 0x7926 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    78e2:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    78e6:	88 23       	and	r24, r24
    78e8:	71 f1       	breq	.+92     	; 0x7946 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    78ea:	85 30       	cpi	r24, 0x05	; 5
    78ec:	71 f1       	breq	.+92     	; 0x794a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    78ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    78f2:	83 ff       	sbrs	r24, 3
    78f4:	02 c0       	rjmp	.+4      	; 0x78fa <Endpoint_Read_Control_Stream_LE+0x2e>
    78f6:	81 e0       	ldi	r24, 0x01	; 1
    78f8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78fa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    78fe:	82 ff       	sbrs	r24, 2
    7900:	f0 cf       	rjmp	.-32     	; 0x78e2 <Endpoint_Read_Control_Stream_LE+0x16>
    7902:	06 c0       	rjmp	.+12     	; 0x7910 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7904:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7908:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    790a:	61 50       	subi	r22, 0x01	; 1
    790c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    790e:	31 f0       	breq	.+12     	; 0x791c <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    7910:	80 91 f2 00 	lds	r24, 0x00F2
    7914:	90 91 f3 00 	lds	r25, 0x00F3
    7918:	89 2b       	or	r24, r25
    791a:	a1 f7       	brne	.-24     	; 0x7904 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    791c:	80 91 e8 00 	lds	r24, 0x00E8
    7920:	8b 77       	andi	r24, 0x7B	; 123
    7922:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7926:	61 15       	cp	r22, r1
    7928:	71 05       	cpc	r23, r1
    792a:	d9 f6       	brne	.-74     	; 0x78e2 <Endpoint_Read_Control_Stream_LE+0x16>
    792c:	06 c0       	rjmp	.+12     	; 0x793a <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    792e:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7932:	88 23       	and	r24, r24
    7934:	41 f0       	breq	.+16     	; 0x7946 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7936:	85 30       	cpi	r24, 0x05	; 5
    7938:	41 f0       	breq	.+16     	; 0x794a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    793a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    793e:	80 ff       	sbrs	r24, 0
    7940:	f6 cf       	rjmp	.-20     	; 0x792e <Endpoint_Read_Control_Stream_LE+0x62>
    7942:	80 e0       	ldi	r24, 0x00	; 0
    7944:	08 95       	ret
    7946:	82 e0       	ldi	r24, 0x02	; 2
    7948:	08 95       	ret
    794a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    794c:	08 95       	ret

0000794e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    794e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7950:	40 91 c4 08 	lds	r20, 0x08C4
    7954:	50 91 c5 08 	lds	r21, 0x08C5
    7958:	46 17       	cp	r20, r22
    795a:	57 07       	cpc	r21, r23
    795c:	18 f4       	brcc	.+6      	; 0x7964 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    795e:	f9 01       	movw	r30, r18
    7960:	90 e0       	ldi	r25, 0x00	; 0
    7962:	40 c0       	rjmp	.+128    	; 0x79e4 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7964:	61 15       	cp	r22, r1
    7966:	71 05       	cpc	r23, r1
    7968:	11 f0       	breq	.+4      	; 0x796e <Endpoint_Write_Control_PStream_LE+0x20>
    796a:	ab 01       	movw	r20, r22
    796c:	f8 cf       	rjmp	.-16     	; 0x795e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    796e:	80 91 e8 00 	lds	r24, 0x00E8
    7972:	8e 77       	andi	r24, 0x7E	; 126
    7974:	80 93 e8 00 	sts	0x00E8, r24
    7978:	40 e0       	ldi	r20, 0x00	; 0
    797a:	50 e0       	ldi	r21, 0x00	; 0
    797c:	f0 cf       	rjmp	.-32     	; 0x795e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    797e:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7982:	88 23       	and	r24, r24
    7984:	09 f4       	brne	.+2      	; 0x7988 <Endpoint_Write_Control_PStream_LE+0x3a>
    7986:	40 c0       	rjmp	.+128    	; 0x7a08 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7988:	85 30       	cpi	r24, 0x05	; 5
    798a:	09 f4       	brne	.+2      	; 0x798e <Endpoint_Write_Control_PStream_LE+0x40>
    798c:	3f c0       	rjmp	.+126    	; 0x7a0c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    798e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7992:	83 ff       	sbrs	r24, 3
    7994:	02 c0       	rjmp	.+4      	; 0x799a <Endpoint_Write_Control_PStream_LE+0x4c>
    7996:	81 e0       	ldi	r24, 0x01	; 1
    7998:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    799a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    799e:	82 fd       	sbrc	r24, 2
    79a0:	2d c0       	rjmp	.+90     	; 0x79fc <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79a2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    79a6:	80 ff       	sbrs	r24, 0
    79a8:	1d c0       	rjmp	.+58     	; 0x79e4 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    79aa:	20 91 f2 00 	lds	r18, 0x00F2
    79ae:	30 91 f3 00 	lds	r19, 0x00F3
    79b2:	08 c0       	rjmp	.+16     	; 0x79c4 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    79b4:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    79b6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    79ba:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    79bc:	41 50       	subi	r20, 0x01	; 1
    79be:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    79c0:	2f 5f       	subi	r18, 0xFF	; 255
    79c2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    79c4:	41 15       	cp	r20, r1
    79c6:	51 05       	cpc	r21, r1
    79c8:	19 f0       	breq	.+6      	; 0x79d0 <Endpoint_Write_Control_PStream_LE+0x82>
    79ca:	28 30       	cpi	r18, 0x08	; 8
    79cc:	31 05       	cpc	r19, r1
    79ce:	90 f3       	brcs	.-28     	; 0x79b4 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    79d0:	90 e0       	ldi	r25, 0x00	; 0
    79d2:	28 30       	cpi	r18, 0x08	; 8
    79d4:	31 05       	cpc	r19, r1
    79d6:	09 f4       	brne	.+2      	; 0x79da <Endpoint_Write_Control_PStream_LE+0x8c>
    79d8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    79da:	80 91 e8 00 	lds	r24, 0x00E8
    79de:	8e 77       	andi	r24, 0x7E	; 126
    79e0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    79e4:	41 15       	cp	r20, r1
    79e6:	51 05       	cpc	r21, r1
    79e8:	51 f6       	brne	.-108    	; 0x797e <Endpoint_Write_Control_PStream_LE+0x30>
    79ea:	99 23       	and	r25, r25
    79ec:	41 f6       	brne	.-112    	; 0x797e <Endpoint_Write_Control_PStream_LE+0x30>
    79ee:	06 c0       	rjmp	.+12     	; 0x79fc <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    79f0:	80 91 bd 08 	lds	r24, 0x08BD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    79f4:	88 23       	and	r24, r24
    79f6:	41 f0       	breq	.+16     	; 0x7a08 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    79f8:	85 30       	cpi	r24, 0x05	; 5
    79fa:	41 f0       	breq	.+16     	; 0x7a0c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79fc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7a00:	82 ff       	sbrs	r24, 2
    7a02:	f6 cf       	rjmp	.-20     	; 0x79f0 <Endpoint_Write_Control_PStream_LE+0xa2>
    7a04:	80 e0       	ldi	r24, 0x00	; 0
    7a06:	08 95       	ret
    7a08:	82 e0       	ldi	r24, 0x02	; 2
    7a0a:	08 95       	ret
    7a0c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7a0e:	08 95       	ret

00007a10 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    7a10:	bf 92       	push	r11
    7a12:	cf 92       	push	r12
    7a14:	df 92       	push	r13
    7a16:	ef 92       	push	r14
    7a18:	ff 92       	push	r15
    7a1a:	0f 93       	push	r16
    7a1c:	1f 93       	push	r17
    7a1e:	cf 93       	push	r28
    7a20:	df 93       	push	r29
    7a22:	18 2f       	mov	r17, r24
    7a24:	09 2f       	mov	r16, r25
    7a26:	7b 01       	movw	r14, r22
    7a28:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    7a2a:	97 dd       	rcall	.-1234   	; 0x755a <Endpoint_WaitUntilReady>
    7a2c:	b8 2e       	mov	r11, r24
    7a2e:	88 23       	and	r24, r24
    7a30:	b1 f5       	brne	.+108    	; 0x7a9e <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7a32:	81 2f       	mov	r24, r17
    7a34:	90 2f       	mov	r25, r16
    7a36:	9c 01       	movw	r18, r24
    7a38:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    7a3a:	c1 14       	cp	r12, r1
    7a3c:	d1 04       	cpc	r13, r1
    7a3e:	39 f0       	breq	.+14     	; 0x7a4e <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    7a40:	f6 01       	movw	r30, r12
    7a42:	80 81       	ld	r24, Z
    7a44:	91 81       	ldd	r25, Z+1	; 0x01
    7a46:	e8 1a       	sub	r14, r24
    7a48:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    7a4a:	c8 0f       	add	r28, r24
    7a4c:	d9 1f       	adc	r29, r25
    7a4e:	00 e0       	ldi	r16, 0x00	; 0
    7a50:	10 e0       	ldi	r17, 0x00	; 0
    7a52:	22 c0       	rjmp	.+68     	; 0x7a98 <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7a54:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    7a58:	85 fd       	sbrc	r24, 5
    7a5a:	16 c0       	rjmp	.+44     	; 0x7a88 <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7a5c:	80 91 e8 00 	lds	r24, 0x00E8
    7a60:	8b 77       	andi	r24, 0x7B	; 123
    7a62:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    7a66:	c1 14       	cp	r12, r1
    7a68:	d1 04       	cpc	r13, r1
    7a6a:	49 f0       	breq	.+18     	; 0x7a7e <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    7a6c:	f6 01       	movw	r30, r12
    7a6e:	80 81       	ld	r24, Z
    7a70:	91 81       	ldd	r25, Z+1	; 0x01
    7a72:	80 0f       	add	r24, r16
    7a74:	91 1f       	adc	r25, r17
    7a76:	91 83       	std	Z+1, r25	; 0x01
    7a78:	80 83       	st	Z, r24
    7a7a:	85 e0       	ldi	r24, 0x05	; 5
    7a7c:	11 c0       	rjmp	.+34     	; 0x7aa0 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    7a7e:	f1 d1       	rcall	.+994    	; 0x7e62 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7a80:	6c dd       	rcall	.-1320   	; 0x755a <Endpoint_WaitUntilReady>
    7a82:	88 23       	and	r24, r24
    7a84:	49 f0       	breq	.+18     	; 0x7a98 <Endpoint_Read_Stream_LE+0x88>
    7a86:	0c c0       	rjmp	.+24     	; 0x7aa0 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7a88:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    7a8c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    7a8e:	08 94       	sec
    7a90:	e1 08       	sbc	r14, r1
    7a92:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    7a94:	0f 5f       	subi	r16, 0xFF	; 255
    7a96:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    7a98:	e1 14       	cp	r14, r1
    7a9a:	f1 04       	cpc	r15, r1
    7a9c:	d9 f6       	brne	.-74     	; 0x7a54 <Endpoint_Read_Stream_LE+0x44>
    7a9e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    7aa0:	df 91       	pop	r29
    7aa2:	cf 91       	pop	r28
    7aa4:	1f 91       	pop	r17
    7aa6:	0f 91       	pop	r16
    7aa8:	ff 90       	pop	r15
    7aaa:	ef 90       	pop	r14
    7aac:	df 90       	pop	r13
    7aae:	cf 90       	pop	r12
    7ab0:	bf 90       	pop	r11
    7ab2:	08 95       	ret

00007ab4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    7ab4:	bf 92       	push	r11
    7ab6:	cf 92       	push	r12
    7ab8:	df 92       	push	r13
    7aba:	ef 92       	push	r14
    7abc:	ff 92       	push	r15
    7abe:	0f 93       	push	r16
    7ac0:	1f 93       	push	r17
    7ac2:	cf 93       	push	r28
    7ac4:	df 93       	push	r29
    7ac6:	18 2f       	mov	r17, r24
    7ac8:	09 2f       	mov	r16, r25
    7aca:	7b 01       	movw	r14, r22
    7acc:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    7ace:	45 dd       	rcall	.-1398   	; 0x755a <Endpoint_WaitUntilReady>
    7ad0:	b8 2e       	mov	r11, r24
    7ad2:	88 23       	and	r24, r24
    7ad4:	b1 f5       	brne	.+108    	; 0x7b42 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7ad6:	81 2f       	mov	r24, r17
    7ad8:	90 2f       	mov	r25, r16
    7ada:	9c 01       	movw	r18, r24
    7adc:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    7ade:	c1 14       	cp	r12, r1
    7ae0:	d1 04       	cpc	r13, r1
    7ae2:	39 f0       	breq	.+14     	; 0x7af2 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    7ae4:	f6 01       	movw	r30, r12
    7ae6:	80 81       	ld	r24, Z
    7ae8:	91 81       	ldd	r25, Z+1	; 0x01
    7aea:	e8 1a       	sub	r14, r24
    7aec:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    7aee:	c8 0f       	add	r28, r24
    7af0:	d9 1f       	adc	r29, r25
    7af2:	00 e0       	ldi	r16, 0x00	; 0
    7af4:	10 e0       	ldi	r17, 0x00	; 0
    7af6:	22 c0       	rjmp	.+68     	; 0x7b3c <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7af8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    7afc:	85 fd       	sbrc	r24, 5
    7afe:	16 c0       	rjmp	.+44     	; 0x7b2c <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b00:	80 91 e8 00 	lds	r24, 0x00E8
    7b04:	8e 77       	andi	r24, 0x7E	; 126
    7b06:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    7b0a:	c1 14       	cp	r12, r1
    7b0c:	d1 04       	cpc	r13, r1
    7b0e:	49 f0       	breq	.+18     	; 0x7b22 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    7b10:	f6 01       	movw	r30, r12
    7b12:	80 81       	ld	r24, Z
    7b14:	91 81       	ldd	r25, Z+1	; 0x01
    7b16:	80 0f       	add	r24, r16
    7b18:	91 1f       	adc	r25, r17
    7b1a:	91 83       	std	Z+1, r25	; 0x01
    7b1c:	80 83       	st	Z, r24
    7b1e:	85 e0       	ldi	r24, 0x05	; 5
    7b20:	11 c0       	rjmp	.+34     	; 0x7b44 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    7b22:	9f d1       	rcall	.+830    	; 0x7e62 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7b24:	1a dd       	rcall	.-1484   	; 0x755a <Endpoint_WaitUntilReady>
    7b26:	88 23       	and	r24, r24
    7b28:	49 f0       	breq	.+18     	; 0x7b3c <Endpoint_Write_Stream_LE+0x88>
    7b2a:	0c c0       	rjmp	.+24     	; 0x7b44 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    7b2c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b2e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    7b32:	08 94       	sec
    7b34:	e1 08       	sbc	r14, r1
    7b36:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    7b38:	0f 5f       	subi	r16, 0xFF	; 255
    7b3a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    7b3c:	e1 14       	cp	r14, r1
    7b3e:	f1 04       	cpc	r15, r1
    7b40:	d9 f6       	brne	.-74     	; 0x7af8 <Endpoint_Write_Stream_LE+0x44>
    7b42:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    7b44:	df 91       	pop	r29
    7b46:	cf 91       	pop	r28
    7b48:	1f 91       	pop	r17
    7b4a:	0f 91       	pop	r16
    7b4c:	ff 90       	pop	r15
    7b4e:	ef 90       	pop	r14
    7b50:	df 90       	pop	r13
    7b52:	cf 90       	pop	r12
    7b54:	bf 90       	pop	r11
    7b56:	08 95       	ret

00007b58 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7b58:	0f 93       	push	r16
    7b5a:	1f 93       	push	r17
    7b5c:	df 93       	push	r29
    7b5e:	cf 93       	push	r28
    7b60:	cd b7       	in	r28, 0x3d	; 61
    7b62:	de b7       	in	r29, 0x3e	; 62
    7b64:	ac 97       	sbiw	r28, 0x2c	; 44
    7b66:	0f b6       	in	r0, 0x3f	; 63
    7b68:	f8 94       	cli
    7b6a:	de bf       	out	0x3e, r29	; 62
    7b6c:	0f be       	out	0x3f, r0	; 63
    7b6e:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7b70:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    7b74:	80 93 be 08 	sts	0x08BE, r24
    7b78:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    7b7c:	80 93 bf 08 	sts	0x08BF, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7b80:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    7b84:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    7b88:	e0 ec       	ldi	r30, 0xC0	; 192
    7b8a:	f8 e0       	ldi	r31, 0x08	; 8
    7b8c:	80 93 c0 08 	sts	0x08C0, r24
    7b90:	90 93 c1 08 	sts	0x08C1, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7b94:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    7b98:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    7b9c:	80 93 c2 08 	sts	0x08C2, r24
    7ba0:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7ba2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    7ba6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    7baa:	80 93 c4 08 	sts	0x08C4, r24
    7bae:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    7bb0:	0e 94 17 03 	call	0x62e	; 0x62e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bb4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    7bb8:	83 ff       	sbrs	r24, 3
    7bba:	39 c1       	rjmp	.+626    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7bbc:	80 91 be 08 	lds	r24, 0x08BE

		switch (USB_ControlRequest.bRequest)
    7bc0:	30 91 bf 08 	lds	r19, 0x08BF
    7bc4:	35 30       	cpi	r19, 0x05	; 5
    7bc6:	09 f4       	brne	.+2      	; 0x7bca <USB_Device_ProcessControlRequest+0x72>
    7bc8:	87 c0       	rjmp	.+270    	; 0x7cd8 <USB_Device_ProcessControlRequest+0x180>
    7bca:	36 30       	cpi	r19, 0x06	; 6
    7bcc:	40 f4       	brcc	.+16     	; 0x7bde <USB_Device_ProcessControlRequest+0x86>
    7bce:	31 30       	cpi	r19, 0x01	; 1
    7bd0:	c9 f1       	breq	.+114    	; 0x7c44 <USB_Device_ProcessControlRequest+0xec>
    7bd2:	31 30       	cpi	r19, 0x01	; 1
    7bd4:	70 f0       	brcs	.+28     	; 0x7bf2 <USB_Device_ProcessControlRequest+0x9a>
    7bd6:	33 30       	cpi	r19, 0x03	; 3
    7bd8:	09 f0       	breq	.+2      	; 0x7bdc <USB_Device_ProcessControlRequest+0x84>
    7bda:	29 c1       	rjmp	.+594    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
    7bdc:	33 c0       	rjmp	.+102    	; 0x7c44 <USB_Device_ProcessControlRequest+0xec>
    7bde:	38 30       	cpi	r19, 0x08	; 8
    7be0:	09 f4       	brne	.+2      	; 0x7be4 <USB_Device_ProcessControlRequest+0x8c>
    7be2:	f6 c0       	rjmp	.+492    	; 0x7dd0 <USB_Device_ProcessControlRequest+0x278>
    7be4:	39 30       	cpi	r19, 0x09	; 9
    7be6:	09 f4       	brne	.+2      	; 0x7bea <USB_Device_ProcessControlRequest+0x92>
    7be8:	05 c1       	rjmp	.+522    	; 0x7df4 <USB_Device_ProcessControlRequest+0x29c>
    7bea:	36 30       	cpi	r19, 0x06	; 6
    7bec:	09 f0       	breq	.+2      	; 0x7bf0 <USB_Device_ProcessControlRequest+0x98>
    7bee:	1f c1       	rjmp	.+574    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
    7bf0:	97 c0       	rjmp	.+302    	; 0x7d20 <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7bf2:	80 38       	cpi	r24, 0x80	; 128
    7bf4:	21 f0       	breq	.+8      	; 0x7bfe <USB_Device_ProcessControlRequest+0xa6>
    7bf6:	82 38       	cpi	r24, 0x82	; 130
    7bf8:	09 f0       	breq	.+2      	; 0x7bfc <USB_Device_ProcessControlRequest+0xa4>
    7bfa:	19 c1       	rjmp	.+562    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
    7bfc:	08 c0       	rjmp	.+16     	; 0x7c0e <USB_Device_ProcessControlRequest+0xb6>
    7bfe:	90 91 b9 08 	lds	r25, 0x08B9
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    7c02:	80 91 ba 08 	lds	r24, 0x08BA
    7c06:	88 23       	and	r24, r24
    7c08:	99 f0       	breq	.+38     	; 0x7c30 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    7c0a:	92 60       	ori	r25, 0x02	; 2
    7c0c:	11 c0       	rjmp	.+34     	; 0x7c30 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c0e:	80 91 c2 08 	lds	r24, 0x08C2
    7c12:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c14:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c18:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    7c1c:	90 e0       	ldi	r25, 0x00	; 0
    7c1e:	25 e0       	ldi	r18, 0x05	; 5
    7c20:	96 95       	lsr	r25
    7c22:	87 95       	ror	r24
    7c24:	2a 95       	dec	r18
    7c26:	e1 f7       	brne	.-8      	; 0x7c20 <USB_Device_ProcessControlRequest+0xc8>
    7c28:	98 2f       	mov	r25, r24
    7c2a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c2c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c30:	80 91 e8 00 	lds	r24, 0x00E8
    7c34:	87 7f       	andi	r24, 0xF7	; 247
    7c36:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c3a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    7c3e:	10 92 f1 00 	sts	0x00F1, r1
    7c42:	d1 c0       	rjmp	.+418    	; 0x7de6 <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c44:	88 23       	and	r24, r24
    7c46:	19 f0       	breq	.+6      	; 0x7c4e <USB_Device_ProcessControlRequest+0xf6>
    7c48:	82 30       	cpi	r24, 0x02	; 2
    7c4a:	09 f0       	breq	.+2      	; 0x7c4e <USB_Device_ProcessControlRequest+0xf6>
    7c4c:	f0 c0       	rjmp	.+480    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
    7c50:	8f 71       	andi	r24, 0x1F	; 31
    7c52:	90 70       	andi	r25, 0x00	; 0
    7c54:	00 97       	sbiw	r24, 0x00	; 0
    7c56:	21 f0       	breq	.+8      	; 0x7c60 <USB_Device_ProcessControlRequest+0x108>
    7c58:	02 97       	sbiw	r24, 0x02	; 2
    7c5a:	09 f0       	breq	.+2      	; 0x7c5e <USB_Device_ProcessControlRequest+0x106>
    7c5c:	e8 c0       	rjmp	.+464    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
    7c5e:	0c c0       	rjmp	.+24     	; 0x7c78 <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    7c60:	80 91 c0 08 	lds	r24, 0x08C0
    7c64:	81 30       	cpi	r24, 0x01	; 1
    7c66:	09 f0       	breq	.+2      	; 0x7c6a <USB_Device_ProcessControlRequest+0x112>
    7c68:	e2 c0       	rjmp	.+452    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    7c6a:	10 92 ba 08 	sts	0x08BA, r1
    7c6e:	33 30       	cpi	r19, 0x03	; 3
    7c70:	69 f5       	brne	.+90     	; 0x7ccc <USB_Device_ProcessControlRequest+0x174>
    7c72:	80 93 ba 08 	sts	0x08BA, r24
    7c76:	2a c0       	rjmp	.+84     	; 0x7ccc <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7c78:	80 91 c0 08 	lds	r24, 0x08C0
    7c7c:	88 23       	and	r24, r24
    7c7e:	31 f5       	brne	.+76     	; 0x7ccc <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c80:	20 91 c2 08 	lds	r18, 0x08C2
    7c84:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7c86:	09 f4       	brne	.+2      	; 0x7c8a <USB_Device_ProcessControlRequest+0x132>
    7c88:	d2 c0       	rjmp	.+420    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c8a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7c8e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7c92:	80 ff       	sbrs	r24, 0
    7c94:	1b c0       	rjmp	.+54     	; 0x7ccc <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7c96:	33 30       	cpi	r19, 0x03	; 3
    7c98:	21 f4       	brne	.+8      	; 0x7ca2 <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c9a:	80 91 eb 00 	lds	r24, 0x00EB
    7c9e:	80 62       	ori	r24, 0x20	; 32
    7ca0:	13 c0       	rjmp	.+38     	; 0x7cc8 <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7ca2:	80 91 eb 00 	lds	r24, 0x00EB
    7ca6:	80 61       	ori	r24, 0x10	; 16
    7ca8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7cac:	81 e0       	ldi	r24, 0x01	; 1
    7cae:	90 e0       	ldi	r25, 0x00	; 0
    7cb0:	02 c0       	rjmp	.+4      	; 0x7cb6 <USB_Device_ProcessControlRequest+0x15e>
    7cb2:	88 0f       	add	r24, r24
    7cb4:	99 1f       	adc	r25, r25
    7cb6:	2a 95       	dec	r18
    7cb8:	e2 f7       	brpl	.-8      	; 0x7cb2 <USB_Device_ProcessControlRequest+0x15a>
    7cba:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7cbe:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7cc2:	80 91 eb 00 	lds	r24, 0x00EB
    7cc6:	88 60       	ori	r24, 0x08	; 8
    7cc8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ccc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cd0:	80 91 e8 00 	lds	r24, 0x00E8
    7cd4:	87 7f       	andi	r24, 0xF7	; 247
    7cd6:	8a c0       	rjmp	.+276    	; 0x7dec <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7cd8:	88 23       	and	r24, r24
    7cda:	09 f0       	breq	.+2      	; 0x7cde <USB_Device_ProcessControlRequest+0x186>
    7cdc:	a8 c0       	rjmp	.+336    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7cde:	10 91 c0 08 	lds	r17, 0x08C0
    7ce2:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7ce4:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7ce6:	f8 94       	cli
    7ce8:	80 91 e8 00 	lds	r24, 0x00E8
    7cec:	87 7f       	andi	r24, 0xF7	; 247
    7cee:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7cf2:	12 dc       	rcall	.-2012   	; 0x7518 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7cf4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    7cf8:	80 ff       	sbrs	r24, 0
    7cfa:	fc cf       	rjmp	.-8      	; 0x7cf4 <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7cfc:	80 91 e3 00 	lds	r24, 0x00E3
    7d00:	80 78       	andi	r24, 0x80	; 128
    7d02:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7d04:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    7d08:	80 68       	ori	r24, 0x80	; 128
    7d0a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d0e:	11 23       	and	r17, r17
    7d10:	11 f4       	brne	.+4      	; 0x7d16 <USB_Device_ProcessControlRequest+0x1be>
    7d12:	82 e0       	ldi	r24, 0x02	; 2
    7d14:	01 c0       	rjmp	.+2      	; 0x7d18 <USB_Device_ProcessControlRequest+0x1c0>
    7d16:	83 e0       	ldi	r24, 0x03	; 3
    7d18:	80 93 bd 08 	sts	0x08BD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d1c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    7d1e:	87 c0       	rjmp	.+270    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d20:	80 58       	subi	r24, 0x80	; 128
    7d22:	82 30       	cpi	r24, 0x02	; 2
    7d24:	08 f0       	brcs	.+2      	; 0x7d28 <USB_Device_ProcessControlRequest+0x1d0>
    7d26:	83 c0       	rjmp	.+262    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    7d28:	80 91 c0 08 	lds	r24, 0x08C0
    7d2c:	90 91 c1 08 	lds	r25, 0x08C1
    7d30:	23 e0       	ldi	r18, 0x03	; 3
    7d32:	8c 3d       	cpi	r24, 0xDC	; 220
    7d34:	92 07       	cpc	r25, r18
    7d36:	09 f0       	breq	.+2      	; 0x7d3a <USB_Device_ProcessControlRequest+0x1e2>
    7d38:	33 c0       	rjmp	.+102    	; 0x7da0 <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    7d3a:	83 e0       	ldi	r24, 0x03	; 3
    7d3c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    7d3e:	8a e2       	ldi	r24, 0x2A	; 42
    7d40:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d42:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d44:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
    7d46:	de 01       	movw	r26, r28
    7d48:	15 96       	adiw	r26, 0x05	; 5
    7d4a:	6e e0       	ldi	r22, 0x0E	; 14
    7d4c:	40 e0       	ldi	r20, 0x00	; 0
    7d4e:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    7d50:	11 e2       	ldi	r17, 0x21	; 33
    7d52:	e6 2f       	mov	r30, r22
    7d54:	f0 e0       	ldi	r31, 0x00	; 0
    7d56:	10 93 57 00 	sts	0x0057, r17
    7d5a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    7d5c:	40 ff       	sbrs	r20, 0
    7d5e:	03 c0       	rjmp	.+6      	; 0x7d66 <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    7d60:	82 95       	swap	r24
    7d62:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    7d64:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    7d66:	8f 70       	andi	r24, 0x0F	; 15
    7d68:	28 2f       	mov	r18, r24
    7d6a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    7d6c:	8a 30       	cpi	r24, 0x0A	; 10
    7d6e:	18 f0       	brcs	.+6      	; 0x7d76 <USB_Device_ProcessControlRequest+0x21e>
    7d70:	c9 01       	movw	r24, r18
    7d72:	c7 96       	adiw	r24, 0x37	; 55
    7d74:	02 c0       	rjmp	.+4      	; 0x7d7a <USB_Device_ProcessControlRequest+0x222>
    7d76:	c9 01       	movw	r24, r18
    7d78:	c0 96       	adiw	r24, 0x30	; 48
    7d7a:	8d 93       	st	X+, r24
    7d7c:	9d 93       	st	X+, r25
    7d7e:	4f 5f       	subi	r20, 0xFF	; 255
    7d80:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    7d82:	44 31       	cpi	r20, 0x14	; 20
    7d84:	51 05       	cpc	r21, r1
    7d86:	29 f7       	brne	.-54     	; 0x7d52 <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d88:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d8a:	80 91 e8 00 	lds	r24, 0x00E8
    7d8e:	87 7f       	andi	r24, 0xF7	; 247
    7d90:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    7d94:	ce 01       	movw	r24, r28
    7d96:	03 96       	adiw	r24, 0x03	; 3
    7d98:	6a e2       	ldi	r22, 0x2A	; 42
    7d9a:	70 e0       	ldi	r23, 0x00	; 0
    7d9c:	39 dd       	rcall	.-1422   	; 0x7810 <Endpoint_Write_Control_Stream_LE>
    7d9e:	12 c0       	rjmp	.+36     	; 0x7dc4 <USB_Device_ProcessControlRequest+0x26c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7da0:	60 91 c2 08 	lds	r22, 0x08C2
    7da4:	ae 01       	movw	r20, r28
    7da6:	4f 5f       	subi	r20, 0xFF	; 255
    7da8:	5f 4f       	sbci	r21, 0xFF	; 255
    7daa:	2f db       	rcall	.-2466   	; 0x740a <CALLBACK_USB_GetDescriptor>
    7dac:	bc 01       	movw	r22, r24
    7dae:	00 97       	sbiw	r24, 0x00	; 0
    7db0:	09 f4       	brne	.+2      	; 0x7db4 <USB_Device_ProcessControlRequest+0x25c>
    7db2:	3d c0       	rjmp	.+122    	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
    7db4:	80 91 e8 00 	lds	r24, 0x00E8
    7db8:	87 7f       	andi	r24, 0xF7	; 247
    7dba:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    7dbe:	89 81       	ldd	r24, Y+1	; 0x01
    7dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    7dc2:	c5 dd       	rcall	.-1142   	; 0x794e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7dc4:	80 91 e8 00 	lds	r24, 0x00E8
    7dc8:	8b 77       	andi	r24, 0x7B	; 123
    7dca:	80 93 e8 00 	sts	0x00E8, r24
    7dce:	2f c0       	rjmp	.+94     	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dd0:	80 38       	cpi	r24, 0x80	; 128
    7dd2:	69 f5       	brne	.+90     	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dd4:	80 91 e8 00 	lds	r24, 0x00E8
    7dd8:	87 7f       	andi	r24, 0xF7	; 247
    7dda:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    7dde:	80 91 bb 08 	lds	r24, 0x08BB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7de2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7de6:	80 91 e8 00 	lds	r24, 0x00E8
    7dea:	8e 77       	andi	r24, 0x7E	; 126
    7dec:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7df0:	93 db       	rcall	.-2266   	; 0x7518 <Endpoint_ClearStatusStage>
    7df2:	1d c0       	rjmp	.+58     	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7df4:	88 23       	and	r24, r24
    7df6:	d9 f4       	brne	.+54     	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7df8:	90 91 c0 08 	lds	r25, 0x08C0
    7dfc:	92 30       	cpi	r25, 0x02	; 2
    7dfe:	b8 f4       	brcc	.+46     	; 0x7e2e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e00:	80 91 e8 00 	lds	r24, 0x00E8
    7e04:	87 7f       	andi	r24, 0xF7	; 247
    7e06:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e0a:	90 93 bb 08 	sts	0x08BB, r25

	Endpoint_ClearStatusStage();
    7e0e:	84 db       	rcall	.-2296   	; 0x7518 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    7e10:	80 91 bb 08 	lds	r24, 0x08BB
    7e14:	88 23       	and	r24, r24
    7e16:	31 f4       	brne	.+12     	; 0x7e24 <USB_Device_ProcessControlRequest+0x2cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e18:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e1c:	87 fd       	sbrc	r24, 7
    7e1e:	02 c0       	rjmp	.+4      	; 0x7e24 <USB_Device_ProcessControlRequest+0x2cc>
    7e20:	81 e0       	ldi	r24, 0x01	; 1
    7e22:	01 c0       	rjmp	.+2      	; 0x7e26 <USB_Device_ProcessControlRequest+0x2ce>
    7e24:	84 e0       	ldi	r24, 0x04	; 4
    7e26:	80 93 bd 08 	sts	0x08BD, r24

	EVENT_USB_Device_ConfigurationChanged();
    7e2a:	0e 94 87 03 	call	0x70e	; 0x70e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e2e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e32:	83 ff       	sbrs	r24, 3
    7e34:	0a c0       	rjmp	.+20     	; 0x7e4a <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e36:	80 91 eb 00 	lds	r24, 0x00EB
    7e3a:	80 62       	ori	r24, 0x20	; 32
    7e3c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e40:	80 91 e8 00 	lds	r24, 0x00E8
    7e44:	87 7f       	andi	r24, 0xF7	; 247
    7e46:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7e4a:	ac 96       	adiw	r28, 0x2c	; 44
    7e4c:	0f b6       	in	r0, 0x3f	; 63
    7e4e:	f8 94       	cli
    7e50:	de bf       	out	0x3e, r29	; 62
    7e52:	0f be       	out	0x3f, r0	; 63
    7e54:	cd bf       	out	0x3d, r28	; 61
    7e56:	cf 91       	pop	r28
    7e58:	df 91       	pop	r29
    7e5a:	1f 91       	pop	r17
    7e5c:	0f 91       	pop	r16
    7e5e:	08 95       	ret

00007e60 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7e60:	08 95       	ret

00007e62 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e62:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e64:	80 91 bd 08 	lds	r24, 0x08BD
    7e68:	88 23       	and	r24, r24
    7e6a:	61 f0       	breq	.+24     	; 0x7e84 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e6c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e74:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7e78:	83 ff       	sbrs	r24, 3
    7e7a:	01 c0       	rjmp	.+2      	; 0x7e7e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    7e7c:	6d de       	rcall	.-806    	; 0x7b58 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e7e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e80:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7e84:	1f 91       	pop	r17
    7e86:	08 95       	ret

00007e88 <__subsf3>:
    7e88:	50 58       	subi	r21, 0x80	; 128

00007e8a <__addsf3>:
    7e8a:	bb 27       	eor	r27, r27
    7e8c:	aa 27       	eor	r26, r26
    7e8e:	0e d0       	rcall	.+28     	; 0x7eac <__addsf3x>
    7e90:	9a c1       	rjmp	.+820    	; 0x81c6 <__fp_round>
    7e92:	8b d1       	rcall	.+790    	; 0x81aa <__fp_pscA>
    7e94:	30 f0       	brcs	.+12     	; 0x7ea2 <__addsf3+0x18>
    7e96:	90 d1       	rcall	.+800    	; 0x81b8 <__fp_pscB>
    7e98:	20 f0       	brcs	.+8      	; 0x7ea2 <__addsf3+0x18>
    7e9a:	31 f4       	brne	.+12     	; 0x7ea8 <__addsf3+0x1e>
    7e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    7e9e:	11 f4       	brne	.+4      	; 0x7ea4 <__addsf3+0x1a>
    7ea0:	1e f4       	brtc	.+6      	; 0x7ea8 <__addsf3+0x1e>
    7ea2:	5b c1       	rjmp	.+694    	; 0x815a <__fp_nan>
    7ea4:	0e f4       	brtc	.+2      	; 0x7ea8 <__addsf3+0x1e>
    7ea6:	e0 95       	com	r30
    7ea8:	e7 fb       	bst	r30, 7
    7eaa:	51 c1       	rjmp	.+674    	; 0x814e <__fp_inf>

00007eac <__addsf3x>:
    7eac:	e9 2f       	mov	r30, r25
    7eae:	9c d1       	rcall	.+824    	; 0x81e8 <__fp_split3>
    7eb0:	80 f3       	brcs	.-32     	; 0x7e92 <__addsf3+0x8>
    7eb2:	ba 17       	cp	r27, r26
    7eb4:	62 07       	cpc	r22, r18
    7eb6:	73 07       	cpc	r23, r19
    7eb8:	84 07       	cpc	r24, r20
    7eba:	95 07       	cpc	r25, r21
    7ebc:	18 f0       	brcs	.+6      	; 0x7ec4 <__addsf3x+0x18>
    7ebe:	71 f4       	brne	.+28     	; 0x7edc <__addsf3x+0x30>
    7ec0:	9e f5       	brtc	.+102    	; 0x7f28 <__addsf3x+0x7c>
    7ec2:	b4 c1       	rjmp	.+872    	; 0x822c <__fp_zero>
    7ec4:	0e f4       	brtc	.+2      	; 0x7ec8 <__addsf3x+0x1c>
    7ec6:	e0 95       	com	r30
    7ec8:	0b 2e       	mov	r0, r27
    7eca:	ba 2f       	mov	r27, r26
    7ecc:	a0 2d       	mov	r26, r0
    7ece:	0b 01       	movw	r0, r22
    7ed0:	b9 01       	movw	r22, r18
    7ed2:	90 01       	movw	r18, r0
    7ed4:	0c 01       	movw	r0, r24
    7ed6:	ca 01       	movw	r24, r20
    7ed8:	a0 01       	movw	r20, r0
    7eda:	11 24       	eor	r1, r1
    7edc:	ff 27       	eor	r31, r31
    7ede:	59 1b       	sub	r21, r25
    7ee0:	99 f0       	breq	.+38     	; 0x7f08 <__addsf3x+0x5c>
    7ee2:	59 3f       	cpi	r21, 0xF9	; 249
    7ee4:	50 f4       	brcc	.+20     	; 0x7efa <__addsf3x+0x4e>
    7ee6:	50 3e       	cpi	r21, 0xE0	; 224
    7ee8:	68 f1       	brcs	.+90     	; 0x7f44 <__addsf3x+0x98>
    7eea:	1a 16       	cp	r1, r26
    7eec:	f0 40       	sbci	r31, 0x00	; 0
    7eee:	a2 2f       	mov	r26, r18
    7ef0:	23 2f       	mov	r18, r19
    7ef2:	34 2f       	mov	r19, r20
    7ef4:	44 27       	eor	r20, r20
    7ef6:	58 5f       	subi	r21, 0xF8	; 248
    7ef8:	f3 cf       	rjmp	.-26     	; 0x7ee0 <__addsf3x+0x34>
    7efa:	46 95       	lsr	r20
    7efc:	37 95       	ror	r19
    7efe:	27 95       	ror	r18
    7f00:	a7 95       	ror	r26
    7f02:	f0 40       	sbci	r31, 0x00	; 0
    7f04:	53 95       	inc	r21
    7f06:	c9 f7       	brne	.-14     	; 0x7efa <__addsf3x+0x4e>
    7f08:	7e f4       	brtc	.+30     	; 0x7f28 <__addsf3x+0x7c>
    7f0a:	1f 16       	cp	r1, r31
    7f0c:	ba 0b       	sbc	r27, r26
    7f0e:	62 0b       	sbc	r22, r18
    7f10:	73 0b       	sbc	r23, r19
    7f12:	84 0b       	sbc	r24, r20
    7f14:	ba f0       	brmi	.+46     	; 0x7f44 <__addsf3x+0x98>
    7f16:	91 50       	subi	r25, 0x01	; 1
    7f18:	a1 f0       	breq	.+40     	; 0x7f42 <__addsf3x+0x96>
    7f1a:	ff 0f       	add	r31, r31
    7f1c:	bb 1f       	adc	r27, r27
    7f1e:	66 1f       	adc	r22, r22
    7f20:	77 1f       	adc	r23, r23
    7f22:	88 1f       	adc	r24, r24
    7f24:	c2 f7       	brpl	.-16     	; 0x7f16 <__addsf3x+0x6a>
    7f26:	0e c0       	rjmp	.+28     	; 0x7f44 <__addsf3x+0x98>
    7f28:	ba 0f       	add	r27, r26
    7f2a:	62 1f       	adc	r22, r18
    7f2c:	73 1f       	adc	r23, r19
    7f2e:	84 1f       	adc	r24, r20
    7f30:	48 f4       	brcc	.+18     	; 0x7f44 <__addsf3x+0x98>
    7f32:	87 95       	ror	r24
    7f34:	77 95       	ror	r23
    7f36:	67 95       	ror	r22
    7f38:	b7 95       	ror	r27
    7f3a:	f7 95       	ror	r31
    7f3c:	9e 3f       	cpi	r25, 0xFE	; 254
    7f3e:	08 f0       	brcs	.+2      	; 0x7f42 <__addsf3x+0x96>
    7f40:	b3 cf       	rjmp	.-154    	; 0x7ea8 <__addsf3+0x1e>
    7f42:	93 95       	inc	r25
    7f44:	88 0f       	add	r24, r24
    7f46:	08 f0       	brcs	.+2      	; 0x7f4a <__addsf3x+0x9e>
    7f48:	99 27       	eor	r25, r25
    7f4a:	ee 0f       	add	r30, r30
    7f4c:	97 95       	ror	r25
    7f4e:	87 95       	ror	r24
    7f50:	08 95       	ret

00007f52 <atan>:
    7f52:	df 93       	push	r29
    7f54:	dd 27       	eor	r29, r29
    7f56:	b9 2f       	mov	r27, r25
    7f58:	bf 77       	andi	r27, 0x7F	; 127
    7f5a:	40 e8       	ldi	r20, 0x80	; 128
    7f5c:	5f e3       	ldi	r21, 0x3F	; 63
    7f5e:	16 16       	cp	r1, r22
    7f60:	17 06       	cpc	r1, r23
    7f62:	48 07       	cpc	r20, r24
    7f64:	5b 07       	cpc	r21, r27
    7f66:	10 f4       	brcc	.+4      	; 0x7f6c <atan+0x1a>
    7f68:	d9 2f       	mov	r29, r25
    7f6a:	67 d1       	rcall	.+718    	; 0x823a <inverse>
    7f6c:	9f 93       	push	r25
    7f6e:	8f 93       	push	r24
    7f70:	7f 93       	push	r23
    7f72:	6f 93       	push	r22
    7f74:	5a d2       	rcall	.+1204   	; 0x842a <square>
    7f76:	e8 e9       	ldi	r30, 0x98	; 152
    7f78:	f0 e0       	ldi	r31, 0x00	; 0
    7f7a:	f2 d0       	rcall	.+484    	; 0x8160 <__fp_powser>
    7f7c:	24 d1       	rcall	.+584    	; 0x81c6 <__fp_round>
    7f7e:	2f 91       	pop	r18
    7f80:	3f 91       	pop	r19
    7f82:	4f 91       	pop	r20
    7f84:	5f 91       	pop	r21
    7f86:	6c d1       	rcall	.+728    	; 0x8260 <__mulsf3x>
    7f88:	dd 23       	and	r29, r29
    7f8a:	49 f0       	breq	.+18     	; 0x7f9e <atan+0x4c>
    7f8c:	90 58       	subi	r25, 0x80	; 128
    7f8e:	a2 ea       	ldi	r26, 0xA2	; 162
    7f90:	2a ed       	ldi	r18, 0xDA	; 218
    7f92:	3f e0       	ldi	r19, 0x0F	; 15
    7f94:	49 ec       	ldi	r20, 0xC9	; 201
    7f96:	5f e3       	ldi	r21, 0x3F	; 63
    7f98:	d0 78       	andi	r29, 0x80	; 128
    7f9a:	5d 27       	eor	r21, r29
    7f9c:	87 df       	rcall	.-242    	; 0x7eac <__addsf3x>
    7f9e:	df 91       	pop	r29
    7fa0:	12 c1       	rjmp	.+548    	; 0x81c6 <__fp_round>

00007fa2 <__divsf3>:
    7fa2:	0c d0       	rcall	.+24     	; 0x7fbc <__divsf3x>
    7fa4:	10 c1       	rjmp	.+544    	; 0x81c6 <__fp_round>
    7fa6:	08 d1       	rcall	.+528    	; 0x81b8 <__fp_pscB>
    7fa8:	40 f0       	brcs	.+16     	; 0x7fba <__divsf3+0x18>
    7faa:	ff d0       	rcall	.+510    	; 0x81aa <__fp_pscA>
    7fac:	30 f0       	brcs	.+12     	; 0x7fba <__divsf3+0x18>
    7fae:	21 f4       	brne	.+8      	; 0x7fb8 <__divsf3+0x16>
    7fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    7fb2:	19 f0       	breq	.+6      	; 0x7fba <__divsf3+0x18>
    7fb4:	cc c0       	rjmp	.+408    	; 0x814e <__fp_inf>
    7fb6:	51 11       	cpse	r21, r1
    7fb8:	3a c1       	rjmp	.+628    	; 0x822e <__fp_szero>
    7fba:	cf c0       	rjmp	.+414    	; 0x815a <__fp_nan>

00007fbc <__divsf3x>:
    7fbc:	15 d1       	rcall	.+554    	; 0x81e8 <__fp_split3>
    7fbe:	98 f3       	brcs	.-26     	; 0x7fa6 <__divsf3+0x4>

00007fc0 <__divsf3_pse>:
    7fc0:	99 23       	and	r25, r25
    7fc2:	c9 f3       	breq	.-14     	; 0x7fb6 <__divsf3+0x14>
    7fc4:	55 23       	and	r21, r21
    7fc6:	b1 f3       	breq	.-20     	; 0x7fb4 <__divsf3+0x12>
    7fc8:	95 1b       	sub	r25, r21
    7fca:	55 0b       	sbc	r21, r21
    7fcc:	bb 27       	eor	r27, r27
    7fce:	aa 27       	eor	r26, r26
    7fd0:	62 17       	cp	r22, r18
    7fd2:	73 07       	cpc	r23, r19
    7fd4:	84 07       	cpc	r24, r20
    7fd6:	38 f0       	brcs	.+14     	; 0x7fe6 <__divsf3_pse+0x26>
    7fd8:	9f 5f       	subi	r25, 0xFF	; 255
    7fda:	5f 4f       	sbci	r21, 0xFF	; 255
    7fdc:	22 0f       	add	r18, r18
    7fde:	33 1f       	adc	r19, r19
    7fe0:	44 1f       	adc	r20, r20
    7fe2:	aa 1f       	adc	r26, r26
    7fe4:	a9 f3       	breq	.-22     	; 0x7fd0 <__divsf3_pse+0x10>
    7fe6:	33 d0       	rcall	.+102    	; 0x804e <__divsf3_pse+0x8e>
    7fe8:	0e 2e       	mov	r0, r30
    7fea:	3a f0       	brmi	.+14     	; 0x7ffa <__divsf3_pse+0x3a>
    7fec:	e0 e8       	ldi	r30, 0x80	; 128
    7fee:	30 d0       	rcall	.+96     	; 0x8050 <__divsf3_pse+0x90>
    7ff0:	91 50       	subi	r25, 0x01	; 1
    7ff2:	50 40       	sbci	r21, 0x00	; 0
    7ff4:	e6 95       	lsr	r30
    7ff6:	00 1c       	adc	r0, r0
    7ff8:	ca f7       	brpl	.-14     	; 0x7fec <__divsf3_pse+0x2c>
    7ffa:	29 d0       	rcall	.+82     	; 0x804e <__divsf3_pse+0x8e>
    7ffc:	fe 2f       	mov	r31, r30
    7ffe:	27 d0       	rcall	.+78     	; 0x804e <__divsf3_pse+0x8e>
    8000:	66 0f       	add	r22, r22
    8002:	77 1f       	adc	r23, r23
    8004:	88 1f       	adc	r24, r24
    8006:	bb 1f       	adc	r27, r27
    8008:	26 17       	cp	r18, r22
    800a:	37 07       	cpc	r19, r23
    800c:	48 07       	cpc	r20, r24
    800e:	ab 07       	cpc	r26, r27
    8010:	b0 e8       	ldi	r27, 0x80	; 128
    8012:	09 f0       	breq	.+2      	; 0x8016 <__divsf3_pse+0x56>
    8014:	bb 0b       	sbc	r27, r27
    8016:	80 2d       	mov	r24, r0
    8018:	bf 01       	movw	r22, r30
    801a:	ff 27       	eor	r31, r31
    801c:	93 58       	subi	r25, 0x83	; 131
    801e:	5f 4f       	sbci	r21, 0xFF	; 255
    8020:	2a f0       	brmi	.+10     	; 0x802c <__divsf3_pse+0x6c>
    8022:	9e 3f       	cpi	r25, 0xFE	; 254
    8024:	51 05       	cpc	r21, r1
    8026:	68 f0       	brcs	.+26     	; 0x8042 <__divsf3_pse+0x82>
    8028:	92 c0       	rjmp	.+292    	; 0x814e <__fp_inf>
    802a:	01 c1       	rjmp	.+514    	; 0x822e <__fp_szero>
    802c:	5f 3f       	cpi	r21, 0xFF	; 255
    802e:	ec f3       	brlt	.-6      	; 0x802a <__divsf3_pse+0x6a>
    8030:	98 3e       	cpi	r25, 0xE8	; 232
    8032:	dc f3       	brlt	.-10     	; 0x802a <__divsf3_pse+0x6a>
    8034:	86 95       	lsr	r24
    8036:	77 95       	ror	r23
    8038:	67 95       	ror	r22
    803a:	b7 95       	ror	r27
    803c:	f7 95       	ror	r31
    803e:	9f 5f       	subi	r25, 0xFF	; 255
    8040:	c9 f7       	brne	.-14     	; 0x8034 <__divsf3_pse+0x74>
    8042:	88 0f       	add	r24, r24
    8044:	91 1d       	adc	r25, r1
    8046:	96 95       	lsr	r25
    8048:	87 95       	ror	r24
    804a:	97 f9       	bld	r25, 7
    804c:	08 95       	ret
    804e:	e1 e0       	ldi	r30, 0x01	; 1
    8050:	66 0f       	add	r22, r22
    8052:	77 1f       	adc	r23, r23
    8054:	88 1f       	adc	r24, r24
    8056:	bb 1f       	adc	r27, r27
    8058:	62 17       	cp	r22, r18
    805a:	73 07       	cpc	r23, r19
    805c:	84 07       	cpc	r24, r20
    805e:	ba 07       	cpc	r27, r26
    8060:	20 f0       	brcs	.+8      	; 0x806a <__divsf3_pse+0xaa>
    8062:	62 1b       	sub	r22, r18
    8064:	73 0b       	sbc	r23, r19
    8066:	84 0b       	sbc	r24, r20
    8068:	ba 0b       	sbc	r27, r26
    806a:	ee 1f       	adc	r30, r30
    806c:	88 f7       	brcc	.-30     	; 0x8050 <__divsf3_pse+0x90>
    806e:	e0 95       	com	r30
    8070:	08 95       	ret

00008072 <__fixsfsi>:
    8072:	04 d0       	rcall	.+8      	; 0x807c <__fixunssfsi>
    8074:	68 94       	set
    8076:	b1 11       	cpse	r27, r1
    8078:	da c0       	rjmp	.+436    	; 0x822e <__fp_szero>
    807a:	08 95       	ret

0000807c <__fixunssfsi>:
    807c:	bd d0       	rcall	.+378    	; 0x81f8 <__fp_splitA>
    807e:	88 f0       	brcs	.+34     	; 0x80a2 <__fixunssfsi+0x26>
    8080:	9f 57       	subi	r25, 0x7F	; 127
    8082:	90 f0       	brcs	.+36     	; 0x80a8 <__fixunssfsi+0x2c>
    8084:	b9 2f       	mov	r27, r25
    8086:	99 27       	eor	r25, r25
    8088:	b7 51       	subi	r27, 0x17	; 23
    808a:	a0 f0       	brcs	.+40     	; 0x80b4 <__fixunssfsi+0x38>
    808c:	d1 f0       	breq	.+52     	; 0x80c2 <__fixunssfsi+0x46>
    808e:	66 0f       	add	r22, r22
    8090:	77 1f       	adc	r23, r23
    8092:	88 1f       	adc	r24, r24
    8094:	99 1f       	adc	r25, r25
    8096:	1a f0       	brmi	.+6      	; 0x809e <__fixunssfsi+0x22>
    8098:	ba 95       	dec	r27
    809a:	c9 f7       	brne	.-14     	; 0x808e <__fixunssfsi+0x12>
    809c:	12 c0       	rjmp	.+36     	; 0x80c2 <__fixunssfsi+0x46>
    809e:	b1 30       	cpi	r27, 0x01	; 1
    80a0:	81 f0       	breq	.+32     	; 0x80c2 <__fixunssfsi+0x46>
    80a2:	c4 d0       	rcall	.+392    	; 0x822c <__fp_zero>
    80a4:	b1 e0       	ldi	r27, 0x01	; 1
    80a6:	08 95       	ret
    80a8:	c1 c0       	rjmp	.+386    	; 0x822c <__fp_zero>
    80aa:	67 2f       	mov	r22, r23
    80ac:	78 2f       	mov	r23, r24
    80ae:	88 27       	eor	r24, r24
    80b0:	b8 5f       	subi	r27, 0xF8	; 248
    80b2:	39 f0       	breq	.+14     	; 0x80c2 <__fixunssfsi+0x46>
    80b4:	b9 3f       	cpi	r27, 0xF9	; 249
    80b6:	cc f3       	brlt	.-14     	; 0x80aa <__fixunssfsi+0x2e>
    80b8:	86 95       	lsr	r24
    80ba:	77 95       	ror	r23
    80bc:	67 95       	ror	r22
    80be:	b3 95       	inc	r27
    80c0:	d9 f7       	brne	.-10     	; 0x80b8 <__fixunssfsi+0x3c>
    80c2:	3e f4       	brtc	.+14     	; 0x80d2 <__fixunssfsi+0x56>
    80c4:	90 95       	com	r25
    80c6:	80 95       	com	r24
    80c8:	70 95       	com	r23
    80ca:	61 95       	neg	r22
    80cc:	7f 4f       	sbci	r23, 0xFF	; 255
    80ce:	8f 4f       	sbci	r24, 0xFF	; 255
    80d0:	9f 4f       	sbci	r25, 0xFF	; 255
    80d2:	08 95       	ret

000080d4 <__floatunsisf>:
    80d4:	e8 94       	clt
    80d6:	09 c0       	rjmp	.+18     	; 0x80ea <__floatsisf+0x12>

000080d8 <__floatsisf>:
    80d8:	97 fb       	bst	r25, 7
    80da:	3e f4       	brtc	.+14     	; 0x80ea <__floatsisf+0x12>
    80dc:	90 95       	com	r25
    80de:	80 95       	com	r24
    80e0:	70 95       	com	r23
    80e2:	61 95       	neg	r22
    80e4:	7f 4f       	sbci	r23, 0xFF	; 255
    80e6:	8f 4f       	sbci	r24, 0xFF	; 255
    80e8:	9f 4f       	sbci	r25, 0xFF	; 255
    80ea:	99 23       	and	r25, r25
    80ec:	a9 f0       	breq	.+42     	; 0x8118 <__floatsisf+0x40>
    80ee:	f9 2f       	mov	r31, r25
    80f0:	96 e9       	ldi	r25, 0x96	; 150
    80f2:	bb 27       	eor	r27, r27
    80f4:	93 95       	inc	r25
    80f6:	f6 95       	lsr	r31
    80f8:	87 95       	ror	r24
    80fa:	77 95       	ror	r23
    80fc:	67 95       	ror	r22
    80fe:	b7 95       	ror	r27
    8100:	f1 11       	cpse	r31, r1
    8102:	f8 cf       	rjmp	.-16     	; 0x80f4 <__floatsisf+0x1c>
    8104:	fa f4       	brpl	.+62     	; 0x8144 <__floatsisf+0x6c>
    8106:	bb 0f       	add	r27, r27
    8108:	11 f4       	brne	.+4      	; 0x810e <__floatsisf+0x36>
    810a:	60 ff       	sbrs	r22, 0
    810c:	1b c0       	rjmp	.+54     	; 0x8144 <__floatsisf+0x6c>
    810e:	6f 5f       	subi	r22, 0xFF	; 255
    8110:	7f 4f       	sbci	r23, 0xFF	; 255
    8112:	8f 4f       	sbci	r24, 0xFF	; 255
    8114:	9f 4f       	sbci	r25, 0xFF	; 255
    8116:	16 c0       	rjmp	.+44     	; 0x8144 <__floatsisf+0x6c>
    8118:	88 23       	and	r24, r24
    811a:	11 f0       	breq	.+4      	; 0x8120 <__floatsisf+0x48>
    811c:	96 e9       	ldi	r25, 0x96	; 150
    811e:	11 c0       	rjmp	.+34     	; 0x8142 <__floatsisf+0x6a>
    8120:	77 23       	and	r23, r23
    8122:	21 f0       	breq	.+8      	; 0x812c <__floatsisf+0x54>
    8124:	9e e8       	ldi	r25, 0x8E	; 142
    8126:	87 2f       	mov	r24, r23
    8128:	76 2f       	mov	r23, r22
    812a:	05 c0       	rjmp	.+10     	; 0x8136 <__floatsisf+0x5e>
    812c:	66 23       	and	r22, r22
    812e:	71 f0       	breq	.+28     	; 0x814c <__floatsisf+0x74>
    8130:	96 e8       	ldi	r25, 0x86	; 134
    8132:	86 2f       	mov	r24, r22
    8134:	70 e0       	ldi	r23, 0x00	; 0
    8136:	60 e0       	ldi	r22, 0x00	; 0
    8138:	2a f0       	brmi	.+10     	; 0x8144 <__floatsisf+0x6c>
    813a:	9a 95       	dec	r25
    813c:	66 0f       	add	r22, r22
    813e:	77 1f       	adc	r23, r23
    8140:	88 1f       	adc	r24, r24
    8142:	da f7       	brpl	.-10     	; 0x813a <__floatsisf+0x62>
    8144:	88 0f       	add	r24, r24
    8146:	96 95       	lsr	r25
    8148:	87 95       	ror	r24
    814a:	97 f9       	bld	r25, 7
    814c:	08 95       	ret

0000814e <__fp_inf>:
    814e:	97 f9       	bld	r25, 7
    8150:	9f 67       	ori	r25, 0x7F	; 127
    8152:	80 e8       	ldi	r24, 0x80	; 128
    8154:	70 e0       	ldi	r23, 0x00	; 0
    8156:	60 e0       	ldi	r22, 0x00	; 0
    8158:	08 95       	ret

0000815a <__fp_nan>:
    815a:	9f ef       	ldi	r25, 0xFF	; 255
    815c:	80 ec       	ldi	r24, 0xC0	; 192
    815e:	08 95       	ret

00008160 <__fp_powser>:
    8160:	df 93       	push	r29
    8162:	cf 93       	push	r28
    8164:	1f 93       	push	r17
    8166:	0f 93       	push	r16
    8168:	ff 92       	push	r15
    816a:	ef 92       	push	r14
    816c:	df 92       	push	r13
    816e:	7b 01       	movw	r14, r22
    8170:	8c 01       	movw	r16, r24
    8172:	68 94       	set
    8174:	05 c0       	rjmp	.+10     	; 0x8180 <__fp_powser+0x20>
    8176:	da 2e       	mov	r13, r26
    8178:	ef 01       	movw	r28, r30
    817a:	72 d0       	rcall	.+228    	; 0x8260 <__mulsf3x>
    817c:	fe 01       	movw	r30, r28
    817e:	e8 94       	clt
    8180:	a5 91       	lpm	r26, Z+
    8182:	25 91       	lpm	r18, Z+
    8184:	35 91       	lpm	r19, Z+
    8186:	45 91       	lpm	r20, Z+
    8188:	55 91       	lpm	r21, Z+
    818a:	ae f3       	brts	.-22     	; 0x8176 <__fp_powser+0x16>
    818c:	ef 01       	movw	r28, r30
    818e:	8e de       	rcall	.-740    	; 0x7eac <__addsf3x>
    8190:	fe 01       	movw	r30, r28
    8192:	97 01       	movw	r18, r14
    8194:	a8 01       	movw	r20, r16
    8196:	da 94       	dec	r13
    8198:	79 f7       	brne	.-34     	; 0x8178 <__fp_powser+0x18>
    819a:	df 90       	pop	r13
    819c:	ef 90       	pop	r14
    819e:	ff 90       	pop	r15
    81a0:	0f 91       	pop	r16
    81a2:	1f 91       	pop	r17
    81a4:	cf 91       	pop	r28
    81a6:	df 91       	pop	r29
    81a8:	08 95       	ret

000081aa <__fp_pscA>:
    81aa:	00 24       	eor	r0, r0
    81ac:	0a 94       	dec	r0
    81ae:	16 16       	cp	r1, r22
    81b0:	17 06       	cpc	r1, r23
    81b2:	18 06       	cpc	r1, r24
    81b4:	09 06       	cpc	r0, r25
    81b6:	08 95       	ret

000081b8 <__fp_pscB>:
    81b8:	00 24       	eor	r0, r0
    81ba:	0a 94       	dec	r0
    81bc:	12 16       	cp	r1, r18
    81be:	13 06       	cpc	r1, r19
    81c0:	14 06       	cpc	r1, r20
    81c2:	05 06       	cpc	r0, r21
    81c4:	08 95       	ret

000081c6 <__fp_round>:
    81c6:	09 2e       	mov	r0, r25
    81c8:	03 94       	inc	r0
    81ca:	00 0c       	add	r0, r0
    81cc:	11 f4       	brne	.+4      	; 0x81d2 <__fp_round+0xc>
    81ce:	88 23       	and	r24, r24
    81d0:	52 f0       	brmi	.+20     	; 0x81e6 <__fp_round+0x20>
    81d2:	bb 0f       	add	r27, r27
    81d4:	40 f4       	brcc	.+16     	; 0x81e6 <__fp_round+0x20>
    81d6:	bf 2b       	or	r27, r31
    81d8:	11 f4       	brne	.+4      	; 0x81de <__fp_round+0x18>
    81da:	60 ff       	sbrs	r22, 0
    81dc:	04 c0       	rjmp	.+8      	; 0x81e6 <__fp_round+0x20>
    81de:	6f 5f       	subi	r22, 0xFF	; 255
    81e0:	7f 4f       	sbci	r23, 0xFF	; 255
    81e2:	8f 4f       	sbci	r24, 0xFF	; 255
    81e4:	9f 4f       	sbci	r25, 0xFF	; 255
    81e6:	08 95       	ret

000081e8 <__fp_split3>:
    81e8:	57 fd       	sbrc	r21, 7
    81ea:	90 58       	subi	r25, 0x80	; 128
    81ec:	44 0f       	add	r20, r20
    81ee:	55 1f       	adc	r21, r21
    81f0:	59 f0       	breq	.+22     	; 0x8208 <__fp_splitA+0x10>
    81f2:	5f 3f       	cpi	r21, 0xFF	; 255
    81f4:	71 f0       	breq	.+28     	; 0x8212 <__fp_splitA+0x1a>
    81f6:	47 95       	ror	r20

000081f8 <__fp_splitA>:
    81f8:	88 0f       	add	r24, r24
    81fa:	97 fb       	bst	r25, 7
    81fc:	99 1f       	adc	r25, r25
    81fe:	61 f0       	breq	.+24     	; 0x8218 <__fp_splitA+0x20>
    8200:	9f 3f       	cpi	r25, 0xFF	; 255
    8202:	79 f0       	breq	.+30     	; 0x8222 <__fp_splitA+0x2a>
    8204:	87 95       	ror	r24
    8206:	08 95       	ret
    8208:	12 16       	cp	r1, r18
    820a:	13 06       	cpc	r1, r19
    820c:	14 06       	cpc	r1, r20
    820e:	55 1f       	adc	r21, r21
    8210:	f2 cf       	rjmp	.-28     	; 0x81f6 <__fp_split3+0xe>
    8212:	46 95       	lsr	r20
    8214:	f1 df       	rcall	.-30     	; 0x81f8 <__fp_splitA>
    8216:	08 c0       	rjmp	.+16     	; 0x8228 <__fp_splitA+0x30>
    8218:	16 16       	cp	r1, r22
    821a:	17 06       	cpc	r1, r23
    821c:	18 06       	cpc	r1, r24
    821e:	99 1f       	adc	r25, r25
    8220:	f1 cf       	rjmp	.-30     	; 0x8204 <__fp_splitA+0xc>
    8222:	86 95       	lsr	r24
    8224:	71 05       	cpc	r23, r1
    8226:	61 05       	cpc	r22, r1
    8228:	08 94       	sec
    822a:	08 95       	ret

0000822c <__fp_zero>:
    822c:	e8 94       	clt

0000822e <__fp_szero>:
    822e:	bb 27       	eor	r27, r27
    8230:	66 27       	eor	r22, r22
    8232:	77 27       	eor	r23, r23
    8234:	cb 01       	movw	r24, r22
    8236:	97 f9       	bld	r25, 7
    8238:	08 95       	ret

0000823a <inverse>:
    823a:	9b 01       	movw	r18, r22
    823c:	ac 01       	movw	r20, r24
    823e:	60 e0       	ldi	r22, 0x00	; 0
    8240:	70 e0       	ldi	r23, 0x00	; 0
    8242:	80 e8       	ldi	r24, 0x80	; 128
    8244:	9f e3       	ldi	r25, 0x3F	; 63
    8246:	ad ce       	rjmp	.-678    	; 0x7fa2 <__divsf3>

00008248 <__mulsf3>:
    8248:	0b d0       	rcall	.+22     	; 0x8260 <__mulsf3x>
    824a:	bd cf       	rjmp	.-134    	; 0x81c6 <__fp_round>
    824c:	ae df       	rcall	.-164    	; 0x81aa <__fp_pscA>
    824e:	28 f0       	brcs	.+10     	; 0x825a <__mulsf3+0x12>
    8250:	b3 df       	rcall	.-154    	; 0x81b8 <__fp_pscB>
    8252:	18 f0       	brcs	.+6      	; 0x825a <__mulsf3+0x12>
    8254:	95 23       	and	r25, r21
    8256:	09 f0       	breq	.+2      	; 0x825a <__mulsf3+0x12>
    8258:	7a cf       	rjmp	.-268    	; 0x814e <__fp_inf>
    825a:	7f cf       	rjmp	.-258    	; 0x815a <__fp_nan>
    825c:	11 24       	eor	r1, r1
    825e:	e7 cf       	rjmp	.-50     	; 0x822e <__fp_szero>

00008260 <__mulsf3x>:
    8260:	c3 df       	rcall	.-122    	; 0x81e8 <__fp_split3>
    8262:	a0 f3       	brcs	.-24     	; 0x824c <__mulsf3+0x4>

00008264 <__mulsf3_pse>:
    8264:	95 9f       	mul	r25, r21
    8266:	d1 f3       	breq	.-12     	; 0x825c <__mulsf3+0x14>
    8268:	95 0f       	add	r25, r21
    826a:	50 e0       	ldi	r21, 0x00	; 0
    826c:	55 1f       	adc	r21, r21
    826e:	62 9f       	mul	r22, r18
    8270:	f0 01       	movw	r30, r0
    8272:	72 9f       	mul	r23, r18
    8274:	bb 27       	eor	r27, r27
    8276:	f0 0d       	add	r31, r0
    8278:	b1 1d       	adc	r27, r1
    827a:	63 9f       	mul	r22, r19
    827c:	aa 27       	eor	r26, r26
    827e:	f0 0d       	add	r31, r0
    8280:	b1 1d       	adc	r27, r1
    8282:	aa 1f       	adc	r26, r26
    8284:	64 9f       	mul	r22, r20
    8286:	66 27       	eor	r22, r22
    8288:	b0 0d       	add	r27, r0
    828a:	a1 1d       	adc	r26, r1
    828c:	66 1f       	adc	r22, r22
    828e:	82 9f       	mul	r24, r18
    8290:	22 27       	eor	r18, r18
    8292:	b0 0d       	add	r27, r0
    8294:	a1 1d       	adc	r26, r1
    8296:	62 1f       	adc	r22, r18
    8298:	73 9f       	mul	r23, r19
    829a:	b0 0d       	add	r27, r0
    829c:	a1 1d       	adc	r26, r1
    829e:	62 1f       	adc	r22, r18
    82a0:	83 9f       	mul	r24, r19
    82a2:	a0 0d       	add	r26, r0
    82a4:	61 1d       	adc	r22, r1
    82a6:	22 1f       	adc	r18, r18
    82a8:	74 9f       	mul	r23, r20
    82aa:	33 27       	eor	r19, r19
    82ac:	a0 0d       	add	r26, r0
    82ae:	61 1d       	adc	r22, r1
    82b0:	23 1f       	adc	r18, r19
    82b2:	84 9f       	mul	r24, r20
    82b4:	60 0d       	add	r22, r0
    82b6:	21 1d       	adc	r18, r1
    82b8:	82 2f       	mov	r24, r18
    82ba:	76 2f       	mov	r23, r22
    82bc:	6a 2f       	mov	r22, r26
    82be:	11 24       	eor	r1, r1
    82c0:	9f 57       	subi	r25, 0x7F	; 127
    82c2:	50 40       	sbci	r21, 0x00	; 0
    82c4:	8a f0       	brmi	.+34     	; 0x82e8 <__mulsf3_pse+0x84>
    82c6:	e1 f0       	breq	.+56     	; 0x8300 <__mulsf3_pse+0x9c>
    82c8:	88 23       	and	r24, r24
    82ca:	4a f0       	brmi	.+18     	; 0x82de <__mulsf3_pse+0x7a>
    82cc:	ee 0f       	add	r30, r30
    82ce:	ff 1f       	adc	r31, r31
    82d0:	bb 1f       	adc	r27, r27
    82d2:	66 1f       	adc	r22, r22
    82d4:	77 1f       	adc	r23, r23
    82d6:	88 1f       	adc	r24, r24
    82d8:	91 50       	subi	r25, 0x01	; 1
    82da:	50 40       	sbci	r21, 0x00	; 0
    82dc:	a9 f7       	brne	.-22     	; 0x82c8 <__mulsf3_pse+0x64>
    82de:	9e 3f       	cpi	r25, 0xFE	; 254
    82e0:	51 05       	cpc	r21, r1
    82e2:	70 f0       	brcs	.+28     	; 0x8300 <__mulsf3_pse+0x9c>
    82e4:	34 cf       	rjmp	.-408    	; 0x814e <__fp_inf>
    82e6:	a3 cf       	rjmp	.-186    	; 0x822e <__fp_szero>
    82e8:	5f 3f       	cpi	r21, 0xFF	; 255
    82ea:	ec f3       	brlt	.-6      	; 0x82e6 <__mulsf3_pse+0x82>
    82ec:	98 3e       	cpi	r25, 0xE8	; 232
    82ee:	dc f3       	brlt	.-10     	; 0x82e6 <__mulsf3_pse+0x82>
    82f0:	86 95       	lsr	r24
    82f2:	77 95       	ror	r23
    82f4:	67 95       	ror	r22
    82f6:	b7 95       	ror	r27
    82f8:	f7 95       	ror	r31
    82fa:	e7 95       	ror	r30
    82fc:	9f 5f       	subi	r25, 0xFF	; 255
    82fe:	c1 f7       	brne	.-16     	; 0x82f0 <__mulsf3_pse+0x8c>
    8300:	fe 2b       	or	r31, r30
    8302:	88 0f       	add	r24, r24
    8304:	91 1d       	adc	r25, r1
    8306:	96 95       	lsr	r25
    8308:	87 95       	ror	r24
    830a:	97 f9       	bld	r25, 7
    830c:	08 95       	ret

0000830e <pow>:
    830e:	fa 01       	movw	r30, r20
    8310:	ee 0f       	add	r30, r30
    8312:	ff 1f       	adc	r31, r31
    8314:	30 96       	adiw	r30, 0x00	; 0
    8316:	21 05       	cpc	r18, r1
    8318:	31 05       	cpc	r19, r1
    831a:	99 f1       	breq	.+102    	; 0x8382 <pow+0x74>
    831c:	61 15       	cp	r22, r1
    831e:	71 05       	cpc	r23, r1
    8320:	61 f4       	brne	.+24     	; 0x833a <pow+0x2c>
    8322:	80 38       	cpi	r24, 0x80	; 128
    8324:	bf e3       	ldi	r27, 0x3F	; 63
    8326:	9b 07       	cpc	r25, r27
    8328:	49 f1       	breq	.+82     	; 0x837c <pow+0x6e>
    832a:	68 94       	set
    832c:	90 38       	cpi	r25, 0x80	; 128
    832e:	81 05       	cpc	r24, r1
    8330:	61 f0       	breq	.+24     	; 0x834a <pow+0x3c>
    8332:	80 38       	cpi	r24, 0x80	; 128
    8334:	bf ef       	ldi	r27, 0xFF	; 255
    8336:	9b 07       	cpc	r25, r27
    8338:	41 f0       	breq	.+16     	; 0x834a <pow+0x3c>
    833a:	99 23       	and	r25, r25
    833c:	42 f5       	brpl	.+80     	; 0x838e <pow+0x80>
    833e:	ff 3f       	cpi	r31, 0xFF	; 255
    8340:	e1 05       	cpc	r30, r1
    8342:	31 05       	cpc	r19, r1
    8344:	21 05       	cpc	r18, r1
    8346:	11 f1       	breq	.+68     	; 0x838c <pow+0x7e>
    8348:	e8 94       	clt
    834a:	08 94       	sec
    834c:	e7 95       	ror	r30
    834e:	d9 01       	movw	r26, r18
    8350:	aa 23       	and	r26, r26
    8352:	29 f4       	brne	.+10     	; 0x835e <pow+0x50>
    8354:	ab 2f       	mov	r26, r27
    8356:	be 2f       	mov	r27, r30
    8358:	f8 5f       	subi	r31, 0xF8	; 248
    835a:	d0 f3       	brcs	.-12     	; 0x8350 <pow+0x42>
    835c:	10 c0       	rjmp	.+32     	; 0x837e <pow+0x70>
    835e:	ff 5f       	subi	r31, 0xFF	; 255
    8360:	70 f4       	brcc	.+28     	; 0x837e <pow+0x70>
    8362:	a6 95       	lsr	r26
    8364:	e0 f7       	brcc	.-8      	; 0x835e <pow+0x50>
    8366:	f7 39       	cpi	r31, 0x97	; 151
    8368:	50 f0       	brcs	.+20     	; 0x837e <pow+0x70>
    836a:	19 f0       	breq	.+6      	; 0x8372 <pow+0x64>
    836c:	ff 3a       	cpi	r31, 0xAF	; 175
    836e:	38 f4       	brcc	.+14     	; 0x837e <pow+0x70>
    8370:	9f 77       	andi	r25, 0x7F	; 127
    8372:	9f 93       	push	r25
    8374:	0c d0       	rcall	.+24     	; 0x838e <pow+0x80>
    8376:	0f 90       	pop	r0
    8378:	07 fc       	sbrc	r0, 7
    837a:	90 58       	subi	r25, 0x80	; 128
    837c:	08 95       	ret
    837e:	3e f0       	brts	.+14     	; 0x838e <pow+0x80>
    8380:	ec ce       	rjmp	.-552    	; 0x815a <__fp_nan>
    8382:	60 e0       	ldi	r22, 0x00	; 0
    8384:	70 e0       	ldi	r23, 0x00	; 0
    8386:	80 e8       	ldi	r24, 0x80	; 128
    8388:	9f e3       	ldi	r25, 0x3F	; 63
    838a:	08 95       	ret
    838c:	4f e7       	ldi	r20, 0x7F	; 127
    838e:	9f 77       	andi	r25, 0x7F	; 127
    8390:	5f 93       	push	r21
    8392:	4f 93       	push	r20
    8394:	3f 93       	push	r19
    8396:	2f 93       	push	r18
    8398:	cc d0       	rcall	.+408    	; 0x8532 <log>
    839a:	2f 91       	pop	r18
    839c:	3f 91       	pop	r19
    839e:	4f 91       	pop	r20
    83a0:	5f 91       	pop	r21
    83a2:	52 df       	rcall	.-348    	; 0x8248 <__mulsf3>
    83a4:	4a c0       	rjmp	.+148    	; 0x843a <exp>
    83a6:	11 f4       	brne	.+4      	; 0x83ac <pow+0x9e>
    83a8:	0e f4       	brtc	.+2      	; 0x83ac <pow+0x9e>
    83aa:	d7 ce       	rjmp	.-594    	; 0x815a <__fp_nan>
    83ac:	72 c0       	rjmp	.+228    	; 0x8492 <__fp_mpack>

000083ae <sqrt>:
    83ae:	24 df       	rcall	.-440    	; 0x81f8 <__fp_splitA>
    83b0:	d0 f3       	brcs	.-12     	; 0x83a6 <pow+0x98>
    83b2:	99 23       	and	r25, r25
    83b4:	d9 f3       	breq	.-10     	; 0x83ac <pow+0x9e>
    83b6:	ce f3       	brts	.-14     	; 0x83aa <pow+0x9c>
    83b8:	9f 57       	subi	r25, 0x7F	; 127
    83ba:	55 0b       	sbc	r21, r21
    83bc:	87 ff       	sbrs	r24, 7
    83be:	77 d0       	rcall	.+238    	; 0x84ae <__fp_norm2>
    83c0:	00 24       	eor	r0, r0
    83c2:	a0 e6       	ldi	r26, 0x60	; 96
    83c4:	40 ea       	ldi	r20, 0xA0	; 160
    83c6:	90 01       	movw	r18, r0
    83c8:	80 58       	subi	r24, 0x80	; 128
    83ca:	56 95       	lsr	r21
    83cc:	97 95       	ror	r25
    83ce:	28 f4       	brcc	.+10     	; 0x83da <sqrt+0x2c>
    83d0:	80 5c       	subi	r24, 0xC0	; 192
    83d2:	66 0f       	add	r22, r22
    83d4:	77 1f       	adc	r23, r23
    83d6:	88 1f       	adc	r24, r24
    83d8:	20 f0       	brcs	.+8      	; 0x83e2 <sqrt+0x34>
    83da:	26 17       	cp	r18, r22
    83dc:	37 07       	cpc	r19, r23
    83de:	48 07       	cpc	r20, r24
    83e0:	30 f4       	brcc	.+12     	; 0x83ee <sqrt+0x40>
    83e2:	62 1b       	sub	r22, r18
    83e4:	73 0b       	sbc	r23, r19
    83e6:	84 0b       	sbc	r24, r20
    83e8:	20 29       	or	r18, r0
    83ea:	31 29       	or	r19, r1
    83ec:	4a 2b       	or	r20, r26
    83ee:	a6 95       	lsr	r26
    83f0:	17 94       	ror	r1
    83f2:	07 94       	ror	r0
    83f4:	20 25       	eor	r18, r0
    83f6:	31 25       	eor	r19, r1
    83f8:	4a 27       	eor	r20, r26
    83fa:	58 f7       	brcc	.-42     	; 0x83d2 <sqrt+0x24>
    83fc:	66 0f       	add	r22, r22
    83fe:	77 1f       	adc	r23, r23
    8400:	88 1f       	adc	r24, r24
    8402:	20 f0       	brcs	.+8      	; 0x840c <sqrt+0x5e>
    8404:	26 17       	cp	r18, r22
    8406:	37 07       	cpc	r19, r23
    8408:	48 07       	cpc	r20, r24
    840a:	30 f4       	brcc	.+12     	; 0x8418 <sqrt+0x6a>
    840c:	62 0b       	sbc	r22, r18
    840e:	73 0b       	sbc	r23, r19
    8410:	84 0b       	sbc	r24, r20
    8412:	20 0d       	add	r18, r0
    8414:	31 1d       	adc	r19, r1
    8416:	41 1d       	adc	r20, r1
    8418:	a0 95       	com	r26
    841a:	81 f7       	brne	.-32     	; 0x83fc <sqrt+0x4e>
    841c:	b9 01       	movw	r22, r18
    841e:	84 2f       	mov	r24, r20
    8420:	91 58       	subi	r25, 0x81	; 129
    8422:	88 0f       	add	r24, r24
    8424:	96 95       	lsr	r25
    8426:	87 95       	ror	r24
    8428:	08 95       	ret

0000842a <square>:
    842a:	9b 01       	movw	r18, r22
    842c:	ac 01       	movw	r20, r24
    842e:	0c cf       	rjmp	.-488    	; 0x8248 <__mulsf3>
    8430:	19 f4       	brne	.+6      	; 0x8438 <square+0xe>
    8432:	0e f0       	brts	.+2      	; 0x8436 <square+0xc>
    8434:	8c ce       	rjmp	.-744    	; 0x814e <__fp_inf>
    8436:	fa ce       	rjmp	.-524    	; 0x822c <__fp_zero>
    8438:	90 ce       	rjmp	.-736    	; 0x815a <__fp_nan>

0000843a <exp>:
    843a:	de de       	rcall	.-580    	; 0x81f8 <__fp_splitA>
    843c:	c8 f3       	brcs	.-14     	; 0x8430 <square+0x6>
    843e:	96 38       	cpi	r25, 0x86	; 134
    8440:	c0 f7       	brcc	.-16     	; 0x8432 <square+0x8>
    8442:	07 f8       	bld	r0, 7
    8444:	0f 92       	push	r0
    8446:	e8 94       	clt
    8448:	2b e3       	ldi	r18, 0x3B	; 59
    844a:	3a ea       	ldi	r19, 0xAA	; 170
    844c:	48 eb       	ldi	r20, 0xB8	; 184
    844e:	5f e7       	ldi	r21, 0x7F	; 127
    8450:	09 df       	rcall	.-494    	; 0x8264 <__mulsf3_pse>
    8452:	0f 92       	push	r0
    8454:	0f 92       	push	r0
    8456:	0f 92       	push	r0
    8458:	4d b7       	in	r20, 0x3d	; 61
    845a:	5e b7       	in	r21, 0x3e	; 62
    845c:	0f 92       	push	r0
    845e:	a9 d0       	rcall	.+338    	; 0x85b2 <modf>
    8460:	e5 ec       	ldi	r30, 0xC5	; 197
    8462:	f0 e0       	ldi	r31, 0x00	; 0
    8464:	7d de       	rcall	.-774    	; 0x8160 <__fp_powser>
    8466:	4f 91       	pop	r20
    8468:	5f 91       	pop	r21
    846a:	ef 91       	pop	r30
    846c:	ff 91       	pop	r31
    846e:	e5 95       	asr	r30
    8470:	ee 1f       	adc	r30, r30
    8472:	ff 1f       	adc	r31, r31
    8474:	49 f0       	breq	.+18     	; 0x8488 <exp+0x4e>
    8476:	fe 57       	subi	r31, 0x7E	; 126
    8478:	e0 68       	ori	r30, 0x80	; 128
    847a:	44 27       	eor	r20, r20
    847c:	ee 0f       	add	r30, r30
    847e:	44 1f       	adc	r20, r20
    8480:	fa 95       	dec	r31
    8482:	e1 f7       	brne	.-8      	; 0x847c <exp+0x42>
    8484:	41 95       	neg	r20
    8486:	55 0b       	sbc	r21, r21
    8488:	1b d0       	rcall	.+54     	; 0x84c0 <ldexp>
    848a:	0f 90       	pop	r0
    848c:	07 fe       	sbrs	r0, 7
    848e:	d5 ce       	rjmp	.-598    	; 0x823a <inverse>
    8490:	08 95       	ret

00008492 <__fp_mpack>:
    8492:	9f 3f       	cpi	r25, 0xFF	; 255
    8494:	31 f0       	breq	.+12     	; 0x84a2 <__fp_mpack_finite+0xc>

00008496 <__fp_mpack_finite>:
    8496:	91 50       	subi	r25, 0x01	; 1
    8498:	20 f4       	brcc	.+8      	; 0x84a2 <__fp_mpack_finite+0xc>
    849a:	87 95       	ror	r24
    849c:	77 95       	ror	r23
    849e:	67 95       	ror	r22
    84a0:	b7 95       	ror	r27
    84a2:	88 0f       	add	r24, r24
    84a4:	91 1d       	adc	r25, r1
    84a6:	96 95       	lsr	r25
    84a8:	87 95       	ror	r24
    84aa:	97 f9       	bld	r25, 7
    84ac:	08 95       	ret

000084ae <__fp_norm2>:
    84ae:	91 50       	subi	r25, 0x01	; 1
    84b0:	50 40       	sbci	r21, 0x00	; 0
    84b2:	66 0f       	add	r22, r22
    84b4:	77 1f       	adc	r23, r23
    84b6:	88 1f       	adc	r24, r24
    84b8:	d2 f7       	brpl	.-12     	; 0x84ae <__fp_norm2>
    84ba:	08 95       	ret
    84bc:	48 ce       	rjmp	.-880    	; 0x814e <__fp_inf>
    84be:	e9 cf       	rjmp	.-46     	; 0x8492 <__fp_mpack>

000084c0 <ldexp>:
    84c0:	9b de       	rcall	.-714    	; 0x81f8 <__fp_splitA>
    84c2:	e8 f3       	brcs	.-6      	; 0x84be <__fp_norm2+0x10>
    84c4:	99 23       	and	r25, r25
    84c6:	d9 f3       	breq	.-10     	; 0x84be <__fp_norm2+0x10>
    84c8:	94 0f       	add	r25, r20
    84ca:	51 1d       	adc	r21, r1
    84cc:	bb f3       	brvs	.-18     	; 0x84bc <__fp_norm2+0xe>
    84ce:	91 50       	subi	r25, 0x01	; 1
    84d0:	50 40       	sbci	r21, 0x00	; 0
    84d2:	94 f0       	brlt	.+36     	; 0x84f8 <ldexp+0x38>
    84d4:	59 f0       	breq	.+22     	; 0x84ec <ldexp+0x2c>
    84d6:	88 23       	and	r24, r24
    84d8:	32 f0       	brmi	.+12     	; 0x84e6 <ldexp+0x26>
    84da:	66 0f       	add	r22, r22
    84dc:	77 1f       	adc	r23, r23
    84de:	88 1f       	adc	r24, r24
    84e0:	91 50       	subi	r25, 0x01	; 1
    84e2:	50 40       	sbci	r21, 0x00	; 0
    84e4:	c1 f7       	brne	.-16     	; 0x84d6 <ldexp+0x16>
    84e6:	9e 3f       	cpi	r25, 0xFE	; 254
    84e8:	51 05       	cpc	r21, r1
    84ea:	44 f7       	brge	.-48     	; 0x84bc <__fp_norm2+0xe>
    84ec:	88 0f       	add	r24, r24
    84ee:	91 1d       	adc	r25, r1
    84f0:	96 95       	lsr	r25
    84f2:	87 95       	ror	r24
    84f4:	97 f9       	bld	r25, 7
    84f6:	08 95       	ret
    84f8:	5f 3f       	cpi	r21, 0xFF	; 255
    84fa:	ac f0       	brlt	.+42     	; 0x8526 <ldexp+0x66>
    84fc:	98 3e       	cpi	r25, 0xE8	; 232
    84fe:	9c f0       	brlt	.+38     	; 0x8526 <ldexp+0x66>
    8500:	bb 27       	eor	r27, r27
    8502:	86 95       	lsr	r24
    8504:	77 95       	ror	r23
    8506:	67 95       	ror	r22
    8508:	b7 95       	ror	r27
    850a:	08 f4       	brcc	.+2      	; 0x850e <ldexp+0x4e>
    850c:	b1 60       	ori	r27, 0x01	; 1
    850e:	93 95       	inc	r25
    8510:	c1 f7       	brne	.-16     	; 0x8502 <ldexp+0x42>
    8512:	bb 0f       	add	r27, r27
    8514:	58 f7       	brcc	.-42     	; 0x84ec <ldexp+0x2c>
    8516:	11 f4       	brne	.+4      	; 0x851c <ldexp+0x5c>
    8518:	60 ff       	sbrs	r22, 0
    851a:	e8 cf       	rjmp	.-48     	; 0x84ec <ldexp+0x2c>
    851c:	6f 5f       	subi	r22, 0xFF	; 255
    851e:	7f 4f       	sbci	r23, 0xFF	; 255
    8520:	8f 4f       	sbci	r24, 0xFF	; 255
    8522:	9f 4f       	sbci	r25, 0xFF	; 255
    8524:	e3 cf       	rjmp	.-58     	; 0x84ec <ldexp+0x2c>
    8526:	83 ce       	rjmp	.-762    	; 0x822e <__fp_szero>
    8528:	0e f0       	brts	.+2      	; 0x852c <ldexp+0x6c>
    852a:	b3 cf       	rjmp	.-154    	; 0x8492 <__fp_mpack>
    852c:	16 ce       	rjmp	.-980    	; 0x815a <__fp_nan>
    852e:	68 94       	set
    8530:	0e ce       	rjmp	.-996    	; 0x814e <__fp_inf>

00008532 <log>:
    8532:	62 de       	rcall	.-828    	; 0x81f8 <__fp_splitA>
    8534:	c8 f3       	brcs	.-14     	; 0x8528 <ldexp+0x68>
    8536:	99 23       	and	r25, r25
    8538:	d1 f3       	breq	.-12     	; 0x852e <ldexp+0x6e>
    853a:	c6 f3       	brts	.-16     	; 0x852c <ldexp+0x6c>
    853c:	df 93       	push	r29
    853e:	cf 93       	push	r28
    8540:	1f 93       	push	r17
    8542:	0f 93       	push	r16
    8544:	ff 92       	push	r15
    8546:	c9 2f       	mov	r28, r25
    8548:	dd 27       	eor	r29, r29
    854a:	88 23       	and	r24, r24
    854c:	2a f0       	brmi	.+10     	; 0x8558 <log+0x26>
    854e:	21 97       	sbiw	r28, 0x01	; 1
    8550:	66 0f       	add	r22, r22
    8552:	77 1f       	adc	r23, r23
    8554:	88 1f       	adc	r24, r24
    8556:	da f7       	brpl	.-10     	; 0x854e <log+0x1c>
    8558:	20 e0       	ldi	r18, 0x00	; 0
    855a:	30 e0       	ldi	r19, 0x00	; 0
    855c:	40 e8       	ldi	r20, 0x80	; 128
    855e:	5f eb       	ldi	r21, 0xBF	; 191
    8560:	9f e3       	ldi	r25, 0x3F	; 63
    8562:	88 39       	cpi	r24, 0x98	; 152
    8564:	20 f0       	brcs	.+8      	; 0x856e <log+0x3c>
    8566:	80 3e       	cpi	r24, 0xE0	; 224
    8568:	30 f0       	brcs	.+12     	; 0x8576 <log+0x44>
    856a:	21 96       	adiw	r28, 0x01	; 1
    856c:	8f 77       	andi	r24, 0x7F	; 127
    856e:	8d dc       	rcall	.-1766   	; 0x7e8a <__addsf3>
    8570:	ed ee       	ldi	r30, 0xED	; 237
    8572:	f0 e0       	ldi	r31, 0x00	; 0
    8574:	03 c0       	rjmp	.+6      	; 0x857c <log+0x4a>
    8576:	89 dc       	rcall	.-1774   	; 0x7e8a <__addsf3>
    8578:	ea e1       	ldi	r30, 0x1A	; 26
    857a:	f1 e0       	ldi	r31, 0x01	; 1
    857c:	f1 dd       	rcall	.-1054   	; 0x8160 <__fp_powser>
    857e:	8b 01       	movw	r16, r22
    8580:	be 01       	movw	r22, r28
    8582:	ec 01       	movw	r28, r24
    8584:	fb 2e       	mov	r15, r27
    8586:	6f 57       	subi	r22, 0x7F	; 127
    8588:	71 09       	sbc	r23, r1
    858a:	75 95       	asr	r23
    858c:	77 1f       	adc	r23, r23
    858e:	88 0b       	sbc	r24, r24
    8590:	99 0b       	sbc	r25, r25
    8592:	a2 dd       	rcall	.-1212   	; 0x80d8 <__floatsisf>
    8594:	28 e1       	ldi	r18, 0x18	; 24
    8596:	32 e7       	ldi	r19, 0x72	; 114
    8598:	41 e3       	ldi	r20, 0x31	; 49
    859a:	5f e3       	ldi	r21, 0x3F	; 63
    859c:	61 de       	rcall	.-830    	; 0x8260 <__mulsf3x>
    859e:	af 2d       	mov	r26, r15
    85a0:	98 01       	movw	r18, r16
    85a2:	ae 01       	movw	r20, r28
    85a4:	ff 90       	pop	r15
    85a6:	0f 91       	pop	r16
    85a8:	1f 91       	pop	r17
    85aa:	cf 91       	pop	r28
    85ac:	df 91       	pop	r29
    85ae:	7e dc       	rcall	.-1796   	; 0x7eac <__addsf3x>
    85b0:	0a ce       	rjmp	.-1004   	; 0x81c6 <__fp_round>

000085b2 <modf>:
    85b2:	fa 01       	movw	r30, r20
    85b4:	dc 01       	movw	r26, r24
    85b6:	aa 0f       	add	r26, r26
    85b8:	bb 1f       	adc	r27, r27
    85ba:	9b 01       	movw	r18, r22
    85bc:	ac 01       	movw	r20, r24
    85be:	bf 57       	subi	r27, 0x7F	; 127
    85c0:	28 f4       	brcc	.+10     	; 0x85cc <modf+0x1a>
    85c2:	22 27       	eor	r18, r18
    85c4:	33 27       	eor	r19, r19
    85c6:	44 27       	eor	r20, r20
    85c8:	50 78       	andi	r21, 0x80	; 128
    85ca:	1f c0       	rjmp	.+62     	; 0x860a <modf+0x58>
    85cc:	b7 51       	subi	r27, 0x17	; 23
    85ce:	88 f4       	brcc	.+34     	; 0x85f2 <modf+0x40>
    85d0:	ab 2f       	mov	r26, r27
    85d2:	00 24       	eor	r0, r0
    85d4:	46 95       	lsr	r20
    85d6:	37 95       	ror	r19
    85d8:	27 95       	ror	r18
    85da:	01 1c       	adc	r0, r1
    85dc:	a3 95       	inc	r26
    85de:	d2 f3       	brmi	.-12     	; 0x85d4 <modf+0x22>
    85e0:	00 20       	and	r0, r0
    85e2:	69 f0       	breq	.+26     	; 0x85fe <modf+0x4c>
    85e4:	22 0f       	add	r18, r18
    85e6:	33 1f       	adc	r19, r19
    85e8:	44 1f       	adc	r20, r20
    85ea:	b3 95       	inc	r27
    85ec:	da f3       	brmi	.-10     	; 0x85e4 <modf+0x32>
    85ee:	0d d0       	rcall	.+26     	; 0x860a <modf+0x58>
    85f0:	4b cc       	rjmp	.-1898   	; 0x7e88 <__subsf3>
    85f2:	61 30       	cpi	r22, 0x01	; 1
    85f4:	71 05       	cpc	r23, r1
    85f6:	a0 e8       	ldi	r26, 0x80	; 128
    85f8:	8a 07       	cpc	r24, r26
    85fa:	b9 46       	sbci	r27, 0x69	; 105
    85fc:	30 f4       	brcc	.+12     	; 0x860a <modf+0x58>
    85fe:	9b 01       	movw	r18, r22
    8600:	ac 01       	movw	r20, r24
    8602:	66 27       	eor	r22, r22
    8604:	77 27       	eor	r23, r23
    8606:	88 27       	eor	r24, r24
    8608:	90 78       	andi	r25, 0x80	; 128
    860a:	30 96       	adiw	r30, 0x00	; 0
    860c:	21 f0       	breq	.+8      	; 0x8616 <modf+0x64>
    860e:	20 83       	st	Z, r18
    8610:	31 83       	std	Z+1, r19	; 0x01
    8612:	42 83       	std	Z+2, r20	; 0x02
    8614:	53 83       	std	Z+3, r21	; 0x03
    8616:	08 95       	ret

00008618 <__mulsi3>:
    8618:	62 9f       	mul	r22, r18
    861a:	d0 01       	movw	r26, r0
    861c:	73 9f       	mul	r23, r19
    861e:	f0 01       	movw	r30, r0
    8620:	82 9f       	mul	r24, r18
    8622:	e0 0d       	add	r30, r0
    8624:	f1 1d       	adc	r31, r1
    8626:	64 9f       	mul	r22, r20
    8628:	e0 0d       	add	r30, r0
    862a:	f1 1d       	adc	r31, r1
    862c:	92 9f       	mul	r25, r18
    862e:	f0 0d       	add	r31, r0
    8630:	83 9f       	mul	r24, r19
    8632:	f0 0d       	add	r31, r0
    8634:	74 9f       	mul	r23, r20
    8636:	f0 0d       	add	r31, r0
    8638:	65 9f       	mul	r22, r21
    863a:	f0 0d       	add	r31, r0
    863c:	99 27       	eor	r25, r25
    863e:	72 9f       	mul	r23, r18
    8640:	b0 0d       	add	r27, r0
    8642:	e1 1d       	adc	r30, r1
    8644:	f9 1f       	adc	r31, r25
    8646:	63 9f       	mul	r22, r19
    8648:	b0 0d       	add	r27, r0
    864a:	e1 1d       	adc	r30, r1
    864c:	f9 1f       	adc	r31, r25
    864e:	bd 01       	movw	r22, r26
    8650:	cf 01       	movw	r24, r30
    8652:	11 24       	eor	r1, r1
    8654:	08 95       	ret

00008656 <__udivmodhi4>:
    8656:	aa 1b       	sub	r26, r26
    8658:	bb 1b       	sub	r27, r27
    865a:	51 e1       	ldi	r21, 0x11	; 17
    865c:	07 c0       	rjmp	.+14     	; 0x866c <__udivmodhi4_ep>

0000865e <__udivmodhi4_loop>:
    865e:	aa 1f       	adc	r26, r26
    8660:	bb 1f       	adc	r27, r27
    8662:	a6 17       	cp	r26, r22
    8664:	b7 07       	cpc	r27, r23
    8666:	10 f0       	brcs	.+4      	; 0x866c <__udivmodhi4_ep>
    8668:	a6 1b       	sub	r26, r22
    866a:	b7 0b       	sbc	r27, r23

0000866c <__udivmodhi4_ep>:
    866c:	88 1f       	adc	r24, r24
    866e:	99 1f       	adc	r25, r25
    8670:	5a 95       	dec	r21
    8672:	a9 f7       	brne	.-22     	; 0x865e <__udivmodhi4_loop>
    8674:	80 95       	com	r24
    8676:	90 95       	com	r25
    8678:	bc 01       	movw	r22, r24
    867a:	cd 01       	movw	r24, r26
    867c:	08 95       	ret

0000867e <__divmodhi4>:
    867e:	97 fb       	bst	r25, 7
    8680:	09 2e       	mov	r0, r25
    8682:	07 26       	eor	r0, r23
    8684:	0a d0       	rcall	.+20     	; 0x869a <__divmodhi4_neg1>
    8686:	77 fd       	sbrc	r23, 7
    8688:	04 d0       	rcall	.+8      	; 0x8692 <__divmodhi4_neg2>
    868a:	e5 df       	rcall	.-54     	; 0x8656 <__udivmodhi4>
    868c:	06 d0       	rcall	.+12     	; 0x869a <__divmodhi4_neg1>
    868e:	00 20       	and	r0, r0
    8690:	1a f4       	brpl	.+6      	; 0x8698 <__divmodhi4_exit>

00008692 <__divmodhi4_neg2>:
    8692:	70 95       	com	r23
    8694:	61 95       	neg	r22
    8696:	7f 4f       	sbci	r23, 0xFF	; 255

00008698 <__divmodhi4_exit>:
    8698:	08 95       	ret

0000869a <__divmodhi4_neg1>:
    869a:	f6 f7       	brtc	.-4      	; 0x8698 <__divmodhi4_exit>
    869c:	90 95       	com	r25
    869e:	81 95       	neg	r24
    86a0:	9f 4f       	sbci	r25, 0xFF	; 255
    86a2:	08 95       	ret

000086a4 <__udivmodsi4>:
    86a4:	a1 e2       	ldi	r26, 0x21	; 33
    86a6:	1a 2e       	mov	r1, r26
    86a8:	aa 1b       	sub	r26, r26
    86aa:	bb 1b       	sub	r27, r27
    86ac:	fd 01       	movw	r30, r26
    86ae:	0d c0       	rjmp	.+26     	; 0x86ca <__udivmodsi4_ep>

000086b0 <__udivmodsi4_loop>:
    86b0:	aa 1f       	adc	r26, r26
    86b2:	bb 1f       	adc	r27, r27
    86b4:	ee 1f       	adc	r30, r30
    86b6:	ff 1f       	adc	r31, r31
    86b8:	a2 17       	cp	r26, r18
    86ba:	b3 07       	cpc	r27, r19
    86bc:	e4 07       	cpc	r30, r20
    86be:	f5 07       	cpc	r31, r21
    86c0:	20 f0       	brcs	.+8      	; 0x86ca <__udivmodsi4_ep>
    86c2:	a2 1b       	sub	r26, r18
    86c4:	b3 0b       	sbc	r27, r19
    86c6:	e4 0b       	sbc	r30, r20
    86c8:	f5 0b       	sbc	r31, r21

000086ca <__udivmodsi4_ep>:
    86ca:	66 1f       	adc	r22, r22
    86cc:	77 1f       	adc	r23, r23
    86ce:	88 1f       	adc	r24, r24
    86d0:	99 1f       	adc	r25, r25
    86d2:	1a 94       	dec	r1
    86d4:	69 f7       	brne	.-38     	; 0x86b0 <__udivmodsi4_loop>
    86d6:	60 95       	com	r22
    86d8:	70 95       	com	r23
    86da:	80 95       	com	r24
    86dc:	90 95       	com	r25
    86de:	9b 01       	movw	r18, r22
    86e0:	ac 01       	movw	r20, r24
    86e2:	bd 01       	movw	r22, r26
    86e4:	cf 01       	movw	r24, r30
    86e6:	08 95       	ret

000086e8 <__tablejump2__>:
    86e8:	ee 0f       	add	r30, r30
    86ea:	ff 1f       	adc	r31, r31

000086ec <__tablejump__>:
    86ec:	05 90       	lpm	r0, Z+
    86ee:	f4 91       	lpm	r31, Z+
    86f0:	e0 2d       	mov	r30, r0
    86f2:	09 94       	ijmp

000086f4 <itoa>:
    86f4:	fb 01       	movw	r30, r22
    86f6:	9f 01       	movw	r18, r30
    86f8:	e8 94       	clt
    86fa:	42 30       	cpi	r20, 0x02	; 2
    86fc:	bc f0       	brlt	.+46     	; 0x872c <itoa+0x38>
    86fe:	45 32       	cpi	r20, 0x25	; 37
    8700:	ac f4       	brge	.+42     	; 0x872c <itoa+0x38>
    8702:	4a 30       	cpi	r20, 0x0A	; 10
    8704:	29 f4       	brne	.+10     	; 0x8710 <itoa+0x1c>
    8706:	97 fb       	bst	r25, 7
    8708:	1e f4       	brtc	.+6      	; 0x8710 <itoa+0x1c>
    870a:	90 95       	com	r25
    870c:	81 95       	neg	r24
    870e:	9f 4f       	sbci	r25, 0xFF	; 255
    8710:	64 2f       	mov	r22, r20
    8712:	77 27       	eor	r23, r23
    8714:	a0 df       	rcall	.-192    	; 0x8656 <__udivmodhi4>
    8716:	80 5d       	subi	r24, 0xD0	; 208
    8718:	8a 33       	cpi	r24, 0x3A	; 58
    871a:	0c f0       	brlt	.+2      	; 0x871e <itoa+0x2a>
    871c:	89 5d       	subi	r24, 0xD9	; 217
    871e:	81 93       	st	Z+, r24
    8720:	cb 01       	movw	r24, r22
    8722:	00 97       	sbiw	r24, 0x00	; 0
    8724:	a9 f7       	brne	.-22     	; 0x8710 <itoa+0x1c>
    8726:	16 f4       	brtc	.+4      	; 0x872c <itoa+0x38>
    8728:	5d e2       	ldi	r21, 0x2D	; 45
    872a:	51 93       	st	Z+, r21
    872c:	10 82       	st	Z, r1
    872e:	c9 01       	movw	r24, r18
    8730:	55 c0       	rjmp	.+170    	; 0x87dc <strrev>

00008732 <ltoa>:
    8732:	fa 01       	movw	r30, r20
    8734:	cf 93       	push	r28
    8736:	ff 93       	push	r31
    8738:	ef 93       	push	r30
    873a:	22 30       	cpi	r18, 0x02	; 2
    873c:	3c f1       	brlt	.+78     	; 0x878c <ltoa+0x5a>
    873e:	25 32       	cpi	r18, 0x25	; 37
    8740:	2c f5       	brge	.+74     	; 0x878c <ltoa+0x5a>
    8742:	c2 2f       	mov	r28, r18
    8744:	e8 94       	clt
    8746:	ca 30       	cpi	r28, 0x0A	; 10
    8748:	49 f4       	brne	.+18     	; 0x875c <ltoa+0x2a>
    874a:	97 fb       	bst	r25, 7
    874c:	3e f4       	brtc	.+14     	; 0x875c <ltoa+0x2a>
    874e:	90 95       	com	r25
    8750:	80 95       	com	r24
    8752:	70 95       	com	r23
    8754:	61 95       	neg	r22
    8756:	7f 4f       	sbci	r23, 0xFF	; 255
    8758:	8f 4f       	sbci	r24, 0xFF	; 255
    875a:	9f 4f       	sbci	r25, 0xFF	; 255
    875c:	2c 2f       	mov	r18, r28
    875e:	33 27       	eor	r19, r19
    8760:	44 27       	eor	r20, r20
    8762:	55 27       	eor	r21, r21
    8764:	ff 93       	push	r31
    8766:	ef 93       	push	r30
    8768:	9d df       	rcall	.-198    	; 0x86a4 <__udivmodsi4>
    876a:	ef 91       	pop	r30
    876c:	ff 91       	pop	r31
    876e:	60 5d       	subi	r22, 0xD0	; 208
    8770:	6a 33       	cpi	r22, 0x3A	; 58
    8772:	0c f0       	brlt	.+2      	; 0x8776 <ltoa+0x44>
    8774:	69 5d       	subi	r22, 0xD9	; 217
    8776:	61 93       	st	Z+, r22
    8778:	b9 01       	movw	r22, r18
    877a:	ca 01       	movw	r24, r20
    877c:	60 50       	subi	r22, 0x00	; 0
    877e:	70 40       	sbci	r23, 0x00	; 0
    8780:	80 40       	sbci	r24, 0x00	; 0
    8782:	90 40       	sbci	r25, 0x00	; 0
    8784:	59 f7       	brne	.-42     	; 0x875c <ltoa+0x2a>
    8786:	16 f4       	brtc	.+4      	; 0x878c <ltoa+0x5a>
    8788:	cd e2       	ldi	r28, 0x2D	; 45
    878a:	c1 93       	st	Z+, r28
    878c:	10 82       	st	Z, r1
    878e:	8f 91       	pop	r24
    8790:	9f 91       	pop	r25
    8792:	cf 91       	pop	r28
    8794:	23 c0       	rjmp	.+70     	; 0x87dc <strrev>

00008796 <ultoa>:
    8796:	fa 01       	movw	r30, r20
    8798:	cf 93       	push	r28
    879a:	ff 93       	push	r31
    879c:	ef 93       	push	r30
    879e:	22 30       	cpi	r18, 0x02	; 2
    87a0:	c4 f0       	brlt	.+48     	; 0x87d2 <ultoa+0x3c>
    87a2:	25 32       	cpi	r18, 0x25	; 37
    87a4:	b4 f4       	brge	.+44     	; 0x87d2 <ultoa+0x3c>
    87a6:	c2 2f       	mov	r28, r18
    87a8:	2c 2f       	mov	r18, r28
    87aa:	33 27       	eor	r19, r19
    87ac:	44 27       	eor	r20, r20
    87ae:	55 27       	eor	r21, r21
    87b0:	ff 93       	push	r31
    87b2:	ef 93       	push	r30
    87b4:	77 df       	rcall	.-274    	; 0x86a4 <__udivmodsi4>
    87b6:	ef 91       	pop	r30
    87b8:	ff 91       	pop	r31
    87ba:	60 5d       	subi	r22, 0xD0	; 208
    87bc:	6a 33       	cpi	r22, 0x3A	; 58
    87be:	0c f0       	brlt	.+2      	; 0x87c2 <ultoa+0x2c>
    87c0:	69 5d       	subi	r22, 0xD9	; 217
    87c2:	61 93       	st	Z+, r22
    87c4:	b9 01       	movw	r22, r18
    87c6:	ca 01       	movw	r24, r20
    87c8:	60 50       	subi	r22, 0x00	; 0
    87ca:	70 40       	sbci	r23, 0x00	; 0
    87cc:	80 40       	sbci	r24, 0x00	; 0
    87ce:	90 40       	sbci	r25, 0x00	; 0
    87d0:	59 f7       	brne	.-42     	; 0x87a8 <ultoa+0x12>
    87d2:	10 82       	st	Z, r1
    87d4:	8f 91       	pop	r24
    87d6:	9f 91       	pop	r25
    87d8:	cf 91       	pop	r28
    87da:	00 c0       	rjmp	.+0      	; 0x87dc <strrev>

000087dc <strrev>:
    87dc:	dc 01       	movw	r26, r24
    87de:	fc 01       	movw	r30, r24
    87e0:	67 2f       	mov	r22, r23
    87e2:	71 91       	ld	r23, Z+
    87e4:	77 23       	and	r23, r23
    87e6:	e1 f7       	brne	.-8      	; 0x87e0 <strrev+0x4>
    87e8:	32 97       	sbiw	r30, 0x02	; 2
    87ea:	04 c0       	rjmp	.+8      	; 0x87f4 <strrev+0x18>
    87ec:	7c 91       	ld	r23, X
    87ee:	6d 93       	st	X+, r22
    87f0:	70 83       	st	Z, r23
    87f2:	62 91       	ld	r22, -Z
    87f4:	ae 17       	cp	r26, r30
    87f6:	bf 07       	cpc	r27, r31
    87f8:	c8 f3       	brcs	.-14     	; 0x87ec <strrev+0x10>
    87fa:	08 95       	ret

000087fc <_exit>:
    87fc:	f8 94       	cli

000087fe <__stop_program>:
    87fe:	ff cf       	rjmp	.-2      	; 0x87fe <__stop_program>
