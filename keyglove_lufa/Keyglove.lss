
Keyglove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036c  00800100  00007e94  00007f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000387  0080046c  0080046c  00008294  2**0
                  ALLOC
  3 .debug_aranges 00000450  00000000  00000000  00008294  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000032c3  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00010948  00000000  00000000  0000b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000029ba  00000000  00000000  0001c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a59a  00000000  00000000  0001eca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001900  00000000  00000000  00029244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005b01  00000000  00000000  0002ab44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000073d5  00000000  00000000  00030645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000430  00000000  00000000  00037a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	}
}

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
       0:	8c c1       	rjmp	.+792    	; 0x31a <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	b4 c1       	rjmp	.+872    	; 0x36e <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	b2 c1       	rjmp	.+868    	; 0x36e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c1       	rjmp	.+864    	; 0x36e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c1       	rjmp	.+860    	; 0x36e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c1       	rjmp	.+856    	; 0x36e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c1       	rjmp	.+852    	; 0x36e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c1       	rjmp	.+848    	; 0x36e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c1       	rjmp	.+844    	; 0x36e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c1       	rjmp	.+840    	; 0x36e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__vector_10>
      2c:	a0 c1       	rjmp	.+832    	; 0x36e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c1       	rjmp	.+828    	; 0x36e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c1       	rjmp	.+824    	; 0x36e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c1       	rjmp	.+820    	; 0x36e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c1       	rjmp	.+816    	; 0x36e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c1       	rjmp	.+812    	; 0x36e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c1       	rjmp	.+808    	; 0x36e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c1       	rjmp	.+804    	; 0x36e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c1       	rjmp	.+800    	; 0x36e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c1       	rjmp	.+796    	; 0x36e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c1       	rjmp	.+792    	; 0x36e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c1       	rjmp	.+788    	; 0x36e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e5 34 	jmp	0x69ca	; 0x69ca <__vector_23>
      60:	86 c1       	rjmp	.+780    	; 0x36e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c1       	rjmp	.+776    	; 0x36e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c1       	rjmp	.+772    	; 0x36e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c1       	rjmp	.+768    	; 0x36e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c1       	rjmp	.+764    	; 0x36e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c1       	rjmp	.+760    	; 0x36e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c1       	rjmp	.+756    	; 0x36e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c1       	rjmp	.+752    	; 0x36e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c1       	rjmp	.+748    	; 0x36e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c1       	rjmp	.+744    	; 0x36e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c1       	rjmp	.+740    	; 0x36e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c1       	rjmp	.+736    	; 0x36e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c1       	rjmp	.+732    	; 0x36e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c1       	rjmp	.+728    	; 0x36e <__bad_interrupt>
      96:	00 00       	nop
      98:	08 4a       	sbci	r16, 0xA8	; 168
      9a:	d7 3b       	cpi	r29, 0xB7	; 183
      9c:	3b ce       	rjmp	.-906    	; 0xfffffd14 <__eeprom_end+0xff7efd14>
      9e:	01 6e       	ori	r16, 0xE1	; 225
      a0:	84 bc       	out	0x24, r8	; 36
      a2:	bf fd       	.word	0xfdbf	; ????
      a4:	c1 2f       	mov	r28, r17
      a6:	3d 6c       	ori	r19, 0xCD	; 205
      a8:	74 31       	cpi	r23, 0x14	; 20
      aa:	9a bd       	out	0x2a, r25	; 42
      ac:	56 83       	std	Z+6, r21	; 0x06
      ae:	3d da       	rcall	.-2950   	; 0xfffff52a <__eeprom_end+0xff7ef52a>
      b0:	3d 00       	.word	0x003d	; ????
      b2:	c7 7f       	andi	r28, 0xF7	; 247
      b4:	11 be       	out	0x31, r1	; 49
      b6:	d9 e4       	ldi	r29, 0x49	; 73
      b8:	bb 4c       	sbci	r27, 0xCB	; 203
      ba:	3e 91       	ld	r19, -X
      bc:	6b aa       	std	Y+51, r6	; 0x33
      be:	aa be       	out	0x3a, r10	; 58
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	3f 07       	cpc	r19, r31
      c6:	63 42       	sbci	r22, 0x23	; 35
      c8:	36 b7       	in	r19, 0x36	; 54
      ca:	9b d8       	rcall	.-3786   	; 0xfffff202 <__eeprom_end+0xff7ef202>
      cc:	a7 1a       	sub	r10, r23
      ce:	39 68       	ori	r19, 0x89	; 137
      d0:	56 18       	sub	r5, r6
      d2:	ae ba       	out	0x1e, r10	; 30
      d4:	ab 55       	subi	r26, 0x5B	; 91
      d6:	8c 1d       	adc	r24, r12
      d8:	3c b7       	in	r19, 0x3c	; 60
      da:	cc 57       	subi	r28, 0x7C	; 124
      dc:	63 bd       	out	0x23, r22	; 35
      de:	6d ed       	ldi	r22, 0xDD	; 221
      e0:	fd 75       	andi	r31, 0x5D	; 93
      e2:	3e f6       	brtc	.-114    	; 0x72 <__SREG__+0x33>
      e4:	17 72       	andi	r17, 0x27	; 39
      e6:	31 bf       	out	0x31, r19	; 49
      e8:	00 00       	nop
      ea:	00 80       	ld	r0, Z
      ec:	3f 08       	sbc	r3, r15
      ee:	00 00       	nop
      f0:	00 be       	out	0x30, r0	; 48
      f2:	92 24       	eor	r9, r2
      f4:	49 12       	cpse	r4, r25
      f6:	3e ab       	std	Y+54, r19	; 0x36
      f8:	aa aa       	std	Y+50, r10	; 0x32
      fa:	2a be       	out	0x3a, r2	; 58
      fc:	cd cc       	rjmp	.-1638   	; 0xfffffa98 <__eeprom_end+0xff7efa98>
      fe:	cc 4c       	sbci	r28, 0xCC	; 204
     100:	3e 00       	.word	0x003e	; ????
     102:	00 00       	nop
     104:	80 be       	out	0x30, r8	; 48
     106:	ab aa       	std	Y+51, r10	; 0x33
     108:	aa aa       	std	Y+50, r10	; 0x32
     10a:	3e 00       	.word	0x003e	; ????
     10c:	00 00       	nop
     10e:	00 bf       	out	0x30, r16	; 48
     110:	00 00       	nop
     112:	00 80       	ld	r0, Z
     114:	3f 00       	.word	0x003f	; ????
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	08 41       	sbci	r16, 0x18	; 24
     11c:	78 d3       	rcall	.+1776   	; 0x80e <_Z7vibrateii+0x26>
     11e:	bb 43       	sbci	r27, 0x3B	; 59
     120:	87 d1       	rcall	.+782    	; 0x430 <HID_Task+0x4e>
     122:	13 3d       	cpi	r17, 0xD3	; 211
     124:	19 0e       	add	r1, r25
     126:	3c c3       	rjmp	.+1656   	; 0x7a0 <_Z8mouseoffi+0x24>
     128:	bd 42       	sbci	r27, 0x2D	; 45
     12a:	82 ad       	ldd	r24, Z+58	; 0x3a
     12c:	2b 3e       	cpi	r18, 0xEB	; 235
     12e:	68 ec       	ldi	r22, 0xC8	; 200
     130:	82 76       	andi	r24, 0x62	; 98
     132:	be d9       	rcall	.-3204   	; 0xfffff4b0 <__eeprom_end+0xff7ef4b0>
     134:	8f e1       	ldi	r24, 0x1F	; 31
     136:	a9 3e       	cpi	r26, 0xE9	; 233
     138:	4c 80       	ldd	r4, Y+4	; 0x04
     13a:	ef ff       	.word	0xffef	; ????
     13c:	be 01       	movw	r22, r28
     13e:	c4 ff       	sbrs	r28, 4
     140:	7f 3f       	cpi	r23, 0xFF	; 255
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 05       	cpc	r16, r0

00000147 <HIDReport>:
     147:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
     157:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     167:	81 01 05 01 09 30 09 31 09 38 15 f6 25 0a 35 f6     .....0.1.8..%.5.
     177:	45 0a 95 03 75 08 81 06 c0 c0 05 01 09 06 a1 01     E...u...........
     187:	85 02 05 07 19 e0 29 e7 15 00 25 01 75 01 95 08     ......)...%.u...
     197:	81 02 95 01 75 08 81 01 05 08 19 01 29 05 95 05     ....u.......)...
     1a7:	75 01 91 02 95 01 75 03 91 01 15 00 25 65 05 07     u.....u.....%e..
     1b7:	19 00 29 65 95 06 75 08 81 00 c0 05 01 09 04 a1     ..)e..u.........
     1c7:	01 85 03 09 01 a1 00 09 30 09 31 15 9c 25 64 35     ........0.1..%d5
     1d7:	ff 45 01 95 02 75 08 81 02 c0 05 09 19 01 29 02     .E...u........).
     1e7:	15 00 25 01 75 01 95 02 81 02 75 06 95 01 81 01     ..%.u.....u.....
     1f7:	c0                                                  .

000001f8 <DeviceDescriptor>:
     1f8:	12 01 10 01 00 00 00 08 eb 03 4e 20 01 00 01 02     ..........N ....
     208:	dc 01                                               ..

0000020a <ConfigurationDescriptor>:
     20a:	09 02 66 00 03 01 02 c0 fa 08 0b 00 02 02 02 01     ..f.............
     21a:	02 09 04 00 00 01 02 02 01 03 05 24 00 10 01 04     ...........$....
     22a:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     23a:	04 01 00 02 0a 00 00 03 07 05 03 02 10 00 01 07     ................
     24a:	05 82 02 10 00 01 09 04 02 00 02 03 01 01 04 09     ................
     25a:	21 11 01 00 01 22 b1 00 07 05 84 03 09 00 01 07     !...."..........
     26a:	05 05 03 09 00 01                                   ......

00000270 <LanguageString>:
     270:	04 03 09 04                                         ....

00000274 <ManufacturerString>:
     274:	1a 03 4a 00 65 00 66 00 66 00 20 00 52 00 6f 00     ..J.e.f.f. .R.o.
     284:	77 00 62 00 65 00 72 00 67 00 00 00                 w.b.e.r.g...

00000290 <ProductString>:
     290:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     2a0:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     2b0:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

000002be <ProductStringSerial>:
     2be:	2a 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     *.K.e.y.g.l.o.v.
     2ce:	65 00 20 00 53 00 65 00 72 00 69 00 61 00 6c 00     e. .S.e.r.i.a.l.
     2de:	20 00 50 00 6f 00 72 00 74 00 00 00                  .P.o.r.t...

000002ea <ProductStringHID>:
     2ea:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     2fa:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     30a:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

00000318 <__ctors_start>:
     318:	e9 01       	movw	r28, r18

0000031a <__ctors_end>:
     31a:	11 24       	eor	r1, r1
     31c:	1f be       	out	0x3f, r1	; 63
     31e:	cf ef       	ldi	r28, 0xFF	; 255
     320:	d0 e2       	ldi	r29, 0x20	; 32
     322:	de bf       	out	0x3e, r29	; 62
     324:	cd bf       	out	0x3d, r28	; 61

00000326 <__do_copy_data>:
     326:	14 e0       	ldi	r17, 0x04	; 4
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b1 e0       	ldi	r27, 0x01	; 1
     32c:	e4 e9       	ldi	r30, 0x94	; 148
     32e:	fe e7       	ldi	r31, 0x7E	; 126
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	0b bf       	out	0x3b, r16	; 59
     334:	02 c0       	rjmp	.+4      	; 0x33a <__do_copy_data+0x14>
     336:	07 90       	elpm	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	ac 36       	cpi	r26, 0x6C	; 108
     33c:	b1 07       	cpc	r27, r17
     33e:	d9 f7       	brne	.-10     	; 0x336 <__do_copy_data+0x10>

00000340 <__do_clear_bss>:
     340:	17 e0       	ldi	r17, 0x07	; 7
     342:	ac e6       	ldi	r26, 0x6C	; 108
     344:	b4 e0       	ldi	r27, 0x04	; 4
     346:	01 c0       	rjmp	.+2      	; 0x34a <.do_clear_bss_start>

00000348 <.do_clear_bss_loop>:
     348:	1d 92       	st	X+, r1

0000034a <.do_clear_bss_start>:
     34a:	a3 3f       	cpi	r26, 0xF3	; 243
     34c:	b1 07       	cpc	r27, r17
     34e:	e1 f7       	brne	.-8      	; 0x348 <.do_clear_bss_loop>

00000350 <__do_global_ctors>:
     350:	13 e0       	ldi	r17, 0x03	; 3
     352:	ca e1       	ldi	r28, 0x1A	; 26
     354:	d3 e0       	ldi	r29, 0x03	; 3
     356:	04 c0       	rjmp	.+8      	; 0x360 <.do_global_ctors_start>

00000358 <.do_global_ctors_loop>:
     358:	22 97       	sbiw	r28, 0x02	; 2
     35a:	fe 01       	movw	r30, r28
     35c:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <__tablejump__>

00000360 <.do_global_ctors_start>:
     360:	c8 31       	cpi	r28, 0x18	; 24
     362:	d1 07       	cpc	r29, r17
     364:	c9 f7       	brne	.-14     	; 0x358 <.do_global_ctors_loop>
     366:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <main>
     36a:	0c 94 48 3f 	jmp	0x7e90	; 0x7e90 <_exit>

0000036e <__bad_interrupt>:
     36e:	48 ce       	rjmp	.-880    	; 0x0 <__vectors>

00000370 <_Z9modeCheckii>:

    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
     370:	ac 01       	movw	r20, r24
        if (modeStackPos < pos) {
     372:	e0 91 9b 06 	lds	r30, 0x069B
     376:	f0 91 9c 06 	lds	r31, 0x069C
     37a:	e6 17       	cp	r30, r22
     37c:	f7 07       	cpc	r31, r23
     37e:	14 f4       	brge	.+4      	; 0x384 <_Z9modeCheckii+0x14>
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	0d c0       	rjmp	.+26     	; 0x39e <_Z9modeCheckii+0x2e>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	e6 1b       	sub	r30, r22
     388:	f7 0b       	sbc	r31, r23
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	e9 57       	subi	r30, 0x79	; 121
     390:	f9 4f       	sbci	r31, 0xF9	; 249
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	84 17       	cp	r24, r20
     398:	95 07       	cpc	r25, r21
     39a:	09 f4       	brne	.+2      	; 0x39e <_Z9modeCheckii+0x2e>
     39c:	21 e0       	ldi	r18, 0x01	; 1
    }
     39e:	82 2f       	mov	r24, r18
     3a0:	08 95       	ret

000003a2 <EVENT_USB_Device_Connect>:
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     3a2:	81 b3       	in	r24, 0x11	; 17
     3a4:	8f 71       	andi	r24, 0x1F	; 31
     3a6:	80 6c       	ori	r24, 0xC0	; 192
     3a8:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Connect(void)
{
    /* Indicate USB enumerating */
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3aa:	08 95       	ret

000003ac <EVENT_USB_Device_Disconnect>:
     3ac:	81 b3       	in	r24, 0x11	; 17
     3ae:	8f 71       	andi	r24, 0x1F	; 31
     3b0:	80 66       	ori	r24, 0x60	; 96
     3b2:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Disconnect(void)
{
    /* Indicate USB not ready */
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3b4:	08 95       	ret

000003b6 <ProcessHIDReport>:
        This is where you need to process the reports being sent from the host to the device.
        DataArray is an array holding the last report from the host. This function is called
        each time the host has sent a report to the device.
    */

}
     3b6:	08 95       	ret

000003b8 <_Z25Keyboard_ProcessLEDReporth>:
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
    uint8_t LEDMask = LEDS_LED2;

    if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
     3b8:	28 2f       	mov	r18, r24
      LEDMask |= LEDS_LED2;

    if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
     3ba:	81 fd       	sbrc	r24, 1
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <_Z25Keyboard_ProcessLEDReporth+0xa>
     3be:	90 e4       	ldi	r25, 0x40	; 64
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <_Z25Keyboard_ProcessLEDReporth+0xc>
     3c2:	90 ec       	ldi	r25, 0xC0	; 192
      LEDMask |= LEDS_LED3;

    if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
     3c4:	22 fd       	sbrc	r18, 2
      LEDMask |= LEDS_LED4;
     3c6:	90 64       	ori	r25, 0x40	; 64
     3c8:	81 b3       	in	r24, 0x11	; 17
     3ca:	8f 71       	andi	r24, 0x1F	; 31
     3cc:	98 2b       	or	r25, r24
     3ce:	91 bb       	out	0x11, r25	; 17

    /* Set the status LEDs to the current Keyboard LED status */
    LEDs_SetAllLEDs(LEDMask);
     3d0:	08 95       	ret

000003d2 <_GLOBAL__I_HIDReportInData>:
    #ifndef USE_LUFA
        #include <Wire.h>
    #endif
    #include "Adxl345.h"

    Accelerometer accel;
     3d2:	8b eb       	ldi	r24, 0xBB	; 187
     3d4:	94 e0       	ldi	r25, 0x04	; 4
     3d6:	0e 94 46 2a 	call	0x548c	; 0x548c <_ZN13AccelerometerC1Ev>
    #ifndef USE_LUFA
        #include <Wire.h>
    #endif
    #include "ITG3200.h"

    ITG3200 gyro = ITG3200();
     3da:	8b e9       	ldi	r24, 0x9B	; 155
     3dc:	95 e0       	ldi	r25, 0x05	; 5
     3de:	0c 94 aa 2f 	jmp	0x5f54	; 0x5f54 <_ZN7ITG3200C1Ev>

000003e2 <HID_Task>:
        Endpoint_ClearOUT();
    }

}

void HID_Task(void)
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     3e6:	80 91 ea 07 	lds	r24, 0x07EA
     3ea:	84 30       	cpi	r24, 0x04	; 4
     3ec:	91 f5       	brne	.+100    	; 0x452 <HID_Task+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3ee:	85 e0       	ldi	r24, 0x05	; 5
     3f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3f4:	80 91 e8 00 	lds	r24, 0x00E8
      return;

    Endpoint_SelectEndpoint(GENERIC_OUT_EPNUM);

    /* Check to see if a packet has been sent from the host */
    if (Endpoint_IsOUTReceived())
     3f8:	82 ff       	sbrs	r24, 2
     3fa:	11 c0       	rjmp	.+34     	; 0x41e <HID_Task+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3fc:	80 91 e8 00 	lds	r24, 0x00E8
    {
        /* Check to see if the packet contains data */
        if (Endpoint_IsReadWriteAllowed())
     400:	85 ff       	sbrs	r24, 5
     402:	08 c0       	rjmp	.+16     	; 0x414 <HID_Task+0x32>
        {
            /* Read Generic Report Data */
            Endpoint_Read_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData), NULL);
     404:	8e e7       	ldi	r24, 0x7E	; 126
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	69 e0       	ldi	r22, 0x09	; 9
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	0e 94 da 38 	call	0x71b4	; 0x71b4 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     414:	80 91 e8 00 	lds	r24, 0x00E8
     418:	8b 77       	andi	r24, 0x7B	; 123
     41a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     424:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_SelectEndpoint(GENERIC_IN_EPNUM);

    /* Check to see if the host is ready to accept another packet */
    if (Endpoint_IsINReady())
     428:	80 ff       	sbrs	r24, 0
     42a:	13 c0       	rjmp	.+38     	; 0x452 <HID_Task+0x70>
    {
        /* Write Generic Report Data */
        Endpoint_Write_Stream_LE(&HIDReportInData, sizeof(HIDReportInData), NULL);
     42c:	05 e7       	ldi	r16, 0x75	; 117
     42e:	14 e0       	ldi	r17, 0x04	; 4
     430:	c8 01       	movw	r24, r16
     432:	69 e0       	ldi	r22, 0x09	; 9
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	0e 94 2c 39 	call	0x7258	; 0x7258 <Endpoint_Write_Stream_LE>
        
        /* Clean out report data after sending */
        memset(&HIDReportInData, 0, sizeof(HIDReportInData));
     43e:	89 e0       	ldi	r24, 0x09	; 9
     440:	f8 01       	movw	r30, r16
     442:	11 92       	st	Z+, r1
     444:	8a 95       	dec	r24
     446:	e9 f7       	brne	.-6      	; 0x442 <HID_Task+0x60>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     448:	80 91 e8 00 	lds	r24, 0x00E8
     44c:	8e 77       	andi	r24, 0x7E	; 126
     44e:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();
    }
}
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <CDC_Task>:
            break;
    }
}

/** Function to manage CDC data transmission and reception to and from the host. */
void CDC_Task(void)
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     45c:	80 91 ea 07 	lds	r24, 0x07EA
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	09 f0       	breq	.+2      	; 0x466 <CDC_Task+0xe>
     464:	89 c0       	rjmp	.+274    	; 0x578 <CDC_Task+0x120>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     466:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     468:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     46a:	20 91 c5 06 	lds	r18, 0x06C5
     46e:	30 91 c6 06 	lds	r19, 0x06C6
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     472:	8f bf       	out	0x3f, r24	; 63

    uint16_t BufferCount;

    /* Send data packet if anything is waiting */
    BufferCount = RingBuffer_GetCount(&HostTXSerial_Buffer);
    if (BufferCount && LineEncodingData.BaudRateBPS)
     474:	21 15       	cp	r18, r1
     476:	31 05       	cpc	r19, r1
     478:	09 f4       	brne	.+2      	; 0x47c <CDC_Task+0x24>
     47a:	48 c0       	rjmp	.+144    	; 0x50c <CDC_Task+0xb4>
     47c:	80 91 54 04 	lds	r24, 0x0454
     480:	90 91 55 04 	lds	r25, 0x0455
     484:	a0 91 56 04 	lds	r26, 0x0456
     488:	b0 91 57 04 	lds	r27, 0x0457
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	a1 05       	cpc	r26, r1
     490:	b1 05       	cpc	r27, r1
     492:	09 f4       	brne	.+2      	; 0x496 <CDC_Task+0x3e>
     494:	3b c0       	rjmp	.+118    	; 0x50c <CDC_Task+0xb4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	80 93 e9 00 	sts	0x00E9, r24
     49c:	a9 01       	movw	r20, r18
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     49e:	ac eb       	ldi	r26, 0xBC	; 188
    {
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     4a0:	b6 e0       	ldi	r27, 0x06	; 6
     4a2:	b9 01       	movw	r22, r18
     4a4:	6f 50       	subi	r22, 0x0F	; 15
     4a6:	70 40       	sbci	r23, 0x00	; 0
     4a8:	ed 01       	movw	r28, r26
		
			uint8_t Data = *Buffer->Out;
     4aa:	ea 81       	ldd	r30, Y+2	; 0x02
     4ac:	fb 81       	ldd	r31, Y+3	; 0x03
     4ae:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     4b0:	fb 83       	std	Y+3, r31	; 0x03
     4b2:	ea 83       	std	Y+2, r30	; 0x02
     4b4:	8e 81       	ldd	r24, Y+6	; 0x06
     4b6:	9f 81       	ldd	r25, Y+7	; 0x07
     4b8:	e8 17       	cp	r30, r24
     4ba:	f9 07       	cpc	r31, r25
     4bc:	21 f4       	brne	.+8      	; 0x4c6 <CDC_Task+0x6e>
			  Buffer->Out = Buffer->Start;
     4be:	8c 81       	ldd	r24, Y+4	; 0x04
     4c0:	9d 81       	ldd	r25, Y+5	; 0x05
     4c2:	9b 83       	std	Y+3, r25	; 0x03
     4c4:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4c6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4c8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     4ca:	89 85       	ldd	r24, Y+9	; 0x09
     4cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	9a 87       	std	Y+10, r25	; 0x0a
     4d2:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4d4:	2f bf       	out	0x3f, r18	; 63
        {
            UEDATX = RingBuffer_Remove(&HostTXSerial_Buffer); // write one byte
     4d6:	30 93 f1 00 	sts	0x00F1, r19
    {
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     4da:	46 17       	cp	r20, r22
     4dc:	57 07       	cpc	r21, r23
     4de:	19 f0       	breq	.+6      	; 0x4e6 <CDC_Task+0x8e>
     4e0:	41 50       	subi	r20, 0x01	; 1
     4e2:	50 40       	sbci	r21, 0x00	; 0
     4e4:	09 f7       	brne	.-62     	; 0x4a8 <CDC_Task+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     4e6:	20 91 f2 00 	lds	r18, 0x00F2
     4ea:	30 91 f3 00 	lds	r19, 0x00F3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4ee:	80 91 e8 00 	lds	r24, 0x00E8
     4f2:	8e 77       	andi	r24, 0x7E	; 126
     4f4:	80 93 e8 00 	sts	0x00E8, r24
        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();

        /* If the last packet filled the endpoint, send an empty packet to release the buffer on
         * the receiver (otherwise all data will be cached until a non-full packet is received) */
        if (IsFull)
     4f8:	20 31       	cpi	r18, 0x10	; 16
     4fa:	31 05       	cpc	r19, r1
     4fc:	39 f4       	brne	.+14     	; 0x50c <CDC_Task+0xb4>
        {
            /* Wait until the endpoint is ready for another packet */
            Endpoint_WaitUntilReady();
     4fe:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <Endpoint_WaitUntilReady>
     502:	80 91 e8 00 	lds	r24, 0x00E8
     506:	8e 77       	andi	r24, 0x7E	; 126
     508:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     512:	80 91 e8 00 	lds	r24, 0x00E8

    /* Select the Serial RX Endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
     516:	82 ff       	sbrs	r24, 2
     518:	2f c0       	rjmp	.+94     	; 0x578 <CDC_Task+0x120>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     51a:	60 91 f2 00 	lds	r22, 0x00F2
     51e:	70 91 f3 00 	lds	r23, 0x00F3
     522:	40 e0       	ldi	r20, 0x00	; 0
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     524:	a7 ec       	ldi	r26, 0xC7	; 199
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (uint8_t i = 0; i < BufferCount; i++)
        {
            uint8_t b = UEDATX;
     526:	b6 e0       	ldi	r27, 0x06	; 6
     528:	1d c0       	rjmp	.+58     	; 0x564 <CDC_Task+0x10c>
     52a:	80 91 f1 00 	lds	r24, 0x00F1
     52e:	ed 01       	movw	r28, r26

			*Buffer->In = Data;
     530:	e8 81       	ld	r30, Y
     532:	f9 81       	ldd	r31, Y+1	; 0x01
     534:	80 83       	st	Z, r24

			if (++Buffer->In == Buffer->End)
     536:	88 81       	ld	r24, Y
     538:	99 81       	ldd	r25, Y+1	; 0x01
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	99 83       	std	Y+1, r25	; 0x01
     53e:	88 83       	st	Y, r24
     540:	2e 81       	ldd	r18, Y+6	; 0x06
     542:	3f 81       	ldd	r19, Y+7	; 0x07
     544:	82 17       	cp	r24, r18
     546:	93 07       	cpc	r25, r19
     548:	21 f4       	brne	.+8      	; 0x552 <CDC_Task+0xfa>
			  Buffer->In = Buffer->Start;
     54a:	8c 81       	ldd	r24, Y+4	; 0x04
     54c:	9d 81       	ldd	r25, Y+5	; 0x05
     54e:	99 83       	std	Y+1, r25	; 0x01
     550:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     552:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     554:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     556:	89 85       	ldd	r24, Y+9	; 0x09
     558:	9a 85       	ldd	r25, Y+10	; 0x0a
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	9a 87       	std	Y+10, r25	; 0x0a
     55e:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     560:	2f bf       	out	0x3f, r18	; 63

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (uint8_t i = 0; i < BufferCount; i++)
     562:	4f 5f       	subi	r20, 0xFF	; 255
     564:	84 2f       	mov	r24, r20
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	86 17       	cp	r24, r22
     56a:	97 07       	cpc	r25, r23
     56c:	f0 f2       	brcs	.-68     	; 0x52a <CDC_Task+0xd2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     56e:	80 91 e8 00 	lds	r24, 0x00E8
     572:	8b 77       	andi	r24, 0x7B	; 123
     574:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to receive the last packet */
        Endpoint_ClearOUT();
    }

}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
{
    switch (USB_ControlRequest.bRequest)
     582:	80 91 ec 07 	lds	r24, 0x07EC
     586:	80 32       	cpi	r24, 0x20	; 32
     588:	09 f4       	brne	.+2      	; 0x58c <EVENT_USB_Device_ControlRequest+0xe>
     58a:	4d c0       	rjmp	.+154    	; 0x626 <EVENT_USB_Device_ControlRequest+0xa8>
     58c:	81 32       	cpi	r24, 0x21	; 33
     58e:	30 f4       	brcc	.+12     	; 0x59c <EVENT_USB_Device_ControlRequest+0x1e>
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	51 f0       	breq	.+20     	; 0x5a8 <EVENT_USB_Device_ControlRequest+0x2a>
     594:	89 30       	cpi	r24, 0x09	; 9
     596:	09 f0       	breq	.+2      	; 0x59a <EVENT_USB_Device_ControlRequest+0x1c>
     598:	5f c0       	rjmp	.+190    	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
     59a:	1d c0       	rjmp	.+58     	; 0x5d6 <EVENT_USB_Device_ControlRequest+0x58>
     59c:	81 32       	cpi	r24, 0x21	; 33
     59e:	81 f1       	breq	.+96     	; 0x600 <EVENT_USB_Device_ControlRequest+0x82>
     5a0:	82 32       	cpi	r24, 0x22	; 34
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <EVENT_USB_Device_ControlRequest+0x28>
     5a4:	59 c0       	rjmp	.+178    	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
     5a6:	4d c0       	rjmp	.+154    	; 0x642 <EVENT_USB_Device_ControlRequest+0xc4>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     5a8:	80 91 eb 07 	lds	r24, 0x07EB
     5ac:	81 3a       	cpi	r24, 0xA1	; 161
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <EVENT_USB_Device_ControlRequest+0x34>
     5b0:	53 c0       	rjmp	.+166    	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5b2:	80 91 e8 00 	lds	r24, 0x00E8
     5b6:	87 7f       	andi	r24, 0xF7	; 247
     5b8:	80 93 e8 00 	sts	0x00E8, r24
                //CreateHIDReport(HIDReportInData);

                Endpoint_ClearSETUP();

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&HIDReportInData, sizeof(HIDReportInData));
     5bc:	05 e7       	ldi	r16, 0x75	; 117
     5be:	14 e0       	ldi	r17, 0x04	; 4
     5c0:	c8 01       	movw	r24, r16
     5c2:	69 e0       	ldi	r22, 0x09	; 9
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <Endpoint_Write_Control_Stream_LE>

                /* Clean out report data after sending */
                memset(&HIDReportInData, 0, sizeof(HIDReportInData));
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	f8 01       	movw	r30, r16
     5ce:	11 92       	st	Z+, r1
     5d0:	8a 95       	dec	r24
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <EVENT_USB_Device_ControlRequest+0x50>
     5d4:	24 c0       	rjmp	.+72     	; 0x61e <EVENT_USB_Device_ControlRequest+0xa0>
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     5d6:	80 91 eb 07 	lds	r24, 0x07EB
     5da:	81 32       	cpi	r24, 0x21	; 33
     5dc:	e9 f5       	brne	.+122    	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
     5de:	80 91 e8 00 	lds	r24, 0x00E8
     5e2:	87 7f       	andi	r24, 0xF7	; 247
     5e4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the report data from the control endpoint */
                Endpoint_Read_Control_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData));
     5e8:	8e e7       	ldi	r24, 0x7E	; 126
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	69 e0       	ldi	r22, 0x09	; 9
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	0e 94 38 38 	call	0x7070	; 0x7070 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5f4:	80 91 e8 00 	lds	r24, 0x00E8
     5f8:	8e 77       	andi	r24, 0x7E	; 126
     5fa:	80 93 e8 00 	sts	0x00E8, r24
     5fe:	2c c0       	rjmp	.+88     	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
                ProcessHIDReport(HIDReportOutData);
            }

            break;
        case CDC_REQ_GetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     600:	80 91 eb 07 	lds	r24, 0x07EB
     604:	81 3a       	cpi	r24, 0xA1	; 161
     606:	41 f5       	brne	.+80     	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     608:	80 91 e8 00 	lds	r24, 0x00E8
     60c:	87 7f       	andi	r24, 0xF7	; 247
     60e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Write the line coding data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     612:	84 e5       	ldi	r24, 0x54	; 84
     614:	94 e0       	ldi	r25, 0x04	; 4
     616:	67 e0       	ldi	r22, 0x07	; 7
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     61e:	80 91 e8 00 	lds	r24, 0x00E8
     622:	8b 77       	andi	r24, 0x7B	; 123
     624:	ea cf       	rjmp	.-44     	; 0x5fa <EVENT_USB_Device_ControlRequest+0x7c>
                Endpoint_ClearOUT();
            }

            break;
        case CDC_REQ_SetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     626:	80 91 eb 07 	lds	r24, 0x07EB
     62a:	81 32       	cpi	r24, 0x21	; 33
     62c:	a9 f4       	brne	.+42     	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     62e:	80 91 e8 00 	lds	r24, 0x00E8
     632:	87 7f       	andi	r24, 0xF7	; 247
     634:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the line coding data in from the host into the global struct */
                Endpoint_Read_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     638:	84 e5       	ldi	r24, 0x54	; 84
     63a:	94 e0       	ldi	r25, 0x04	; 4
     63c:	67 e0       	ldi	r22, 0x07	; 7
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	d7 cf       	rjmp	.-82     	; 0x5f0 <EVENT_USB_Device_ControlRequest+0x72>
                Endpoint_ClearIN();
            }

            break;
        case CDC_REQ_SetControlLineState:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     642:	80 91 eb 07 	lds	r24, 0x07EB
     646:	81 32       	cpi	r24, 0x21	; 33
     648:	39 f4       	brne	.+14     	; 0x658 <EVENT_USB_Device_ControlRequest+0xda>
     64a:	80 91 e8 00 	lds	r24, 0x00E8
     64e:	87 7f       	andi	r24, 0xF7	; 247
     650:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     654:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <Endpoint_ClearStatusStage>
                */
            }

            break;
    }
}
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
     65e:	bf 92       	push	r11
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size)));
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	61 ec       	ldi	r22, 0xC1	; 193
     670:	42 e0       	ldi	r20, 0x02	; 2
     672:	0e 94 29 36 	call	0x6c52	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
     676:	08 2f       	mov	r16, r24
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	61 e8       	ldi	r22, 0x81	; 129
     67c:	42 e1       	ldi	r20, 0x12	; 18
     67e:	0e 94 29 36 	call	0x6c52	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
     682:	c8 2e       	mov	r12, r24
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	60 e8       	ldi	r22, 0x80	; 128
     688:	42 e1       	ldi	r20, 0x12	; 18
     68a:	0e 94 29 36 	call	0x6c52	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
     68e:	e8 2e       	mov	r14, r24
     690:	10 92 54 04 	sts	0x0454, r1
     694:	10 92 55 04 	sts	0x0455, r1
     698:	10 92 56 04 	sts	0x0456, r1
     69c:	10 92 57 04 	sts	0x0457, r1
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	61 ec       	ldi	r22, 0xC1	; 193
     6a4:	42 e1       	ldi	r20, 0x12	; 18
     6a6:	0e 94 29 36 	call	0x6c52	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
     6aa:	b8 2e       	mov	r11, r24
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                                CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
     6ac:	85 e0       	ldi	r24, 0x05	; 5
     6ae:	60 ec       	ldi	r22, 0xC0	; 192
     6b0:	42 e1       	ldi	r20, 0x12	; 18
     6b2:	0e 94 29 36 	call	0x6c52	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
     6b6:	68 2f       	mov	r22, r24
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	dd 24       	eor	r13, r13
     6bc:	0c 21       	and	r16, r12
     6be:	1d 21       	and	r17, r13
     6c0:	01 70       	andi	r16, 0x01	; 1
     6c2:	10 70       	andi	r17, 0x00	; 0
     6c4:	ff 24       	eor	r15, r15
     6c6:	0e 21       	and	r16, r14
     6c8:	1f 21       	and	r17, r15
    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;

    /* Setup HID Report Endpoints */
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	01 2b       	or	r16, r17
     6d0:	11 f0       	breq	.+4      	; 0x6d6 <EVENT_USB_Device_ConfigurationChanged+0x78>
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	8b 2d       	mov	r24, r11
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	48 23       	and	r20, r24
     6dc:	59 23       	and	r21, r25
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Indicate endpoint configuration success or failure */
    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	45 2b       	or	r20, r21
     6e4:	11 f0       	breq	.+4      	; 0x6ea <EVENT_USB_Device_ConfigurationChanged+0x8c>
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	86 2f       	mov	r24, r22
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	28 23       	and	r18, r24
     6f0:	39 23       	and	r19, r25
     6f2:	23 2b       	or	r18, r19
     6f4:	11 f4       	brne	.+4      	; 0x6fa <EVENT_USB_Device_ConfigurationChanged+0x9c>
     6f6:	90 e2       	ldi	r25, 0x20	; 32
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <EVENT_USB_Device_ConfigurationChanged+0x9e>
     6fa:	90 e4       	ldi	r25, 0x40	; 64
     6fc:	81 b3       	in	r24, 0x11	; 17
     6fe:	8f 71       	andi	r24, 0x1F	; 31
     700:	98 2b       	or	r25, r24
     702:	91 bb       	out	0x11, r25	; 17
}
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	08 95       	ret

00000714 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     714:	84 b7       	in	r24, 0x34	; 52
     716:	87 7f       	andi	r24, 0xF7	; 247
     718:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     71a:	88 e1       	ldi	r24, 0x18	; 24
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	80 93 60 00 	sts	0x0060, r24
     724:	10 92 60 00 	sts	0x0060, r1
     728:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    //clock_prescale_set(clock_div_1);
        CPU_PRESCALE(CPU_4MHz); // 3.3v AVR shouldn't run faster than 8MHz
     72a:	e1 e6       	ldi	r30, 0x61	; 97
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 e8       	ldi	r24, 0x80	; 128
     730:	80 83       	st	Z, r24
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS_D;
     736:	56 9a       	sbi	0x0a, 6	; 10
				DDRF  |=  LEDS_ALL_LEDS_F;
     738:	80 b3       	in	r24, 0x10	; 16
     73a:	80 6e       	ori	r24, 0xE0	; 224
     73c:	80 bb       	out	0x10, r24	; 16
				PORTF &= ~LEDS_ALL_LEDS_F;
     73e:	81 b3       	in	r24, 0x11	; 17
     740:	8f 71       	andi	r24, 0x1F	; 31
     742:	81 bb       	out	0x11, r24	; 17

    /* Hardware Initialization */
    LEDs_Init();
    USB_Init();
     744:	0c 94 fa 36 	jmp	0x6df4	; 0x6df4 <USB_Init>

00000748 <_Z8tricolorhhh>:
=============================================== */
#ifdef ENABLE_TRICOLOR
    int tricolorBlinkRed;
    int tricolorBlinkGreen;
    int tricolorBlinkBlue;
    void tricolor(byte r, byte g, byte b) {
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	98 2f       	mov	r25, r24
     74e:	16 2f       	mov	r17, r22
     750:	04 2f       	mov	r16, r20
        if (r != 255) digitalWrite(TRICOLOR_RED_PIN, r);
     752:	8f 3f       	cpi	r24, 0xFF	; 255
     754:	21 f0       	breq	.+8      	; 0x75e <_Z8tricolorhhh+0x16>
     756:	8b e2       	ldi	r24, 0x2B	; 43
     758:	69 2f       	mov	r22, r25
     75a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
        if (g != 255) digitalWrite(TRICOLOR_GREEN_PIN, g);
     75e:	1f 3f       	cpi	r17, 0xFF	; 255
     760:	21 f0       	breq	.+8      	; 0x76a <_Z8tricolorhhh+0x22>
     762:	8c e2       	ldi	r24, 0x2C	; 44
     764:	61 2f       	mov	r22, r17
     766:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
        if (b != 255) digitalWrite(TRICOLOR_BLUE_PIN, b);
     76a:	0f 3f       	cpi	r16, 0xFF	; 255
     76c:	21 f0       	breq	.+8      	; 0x776 <_Z8tricolorhhh+0x2e>
     76e:	8d e2       	ldi	r24, 0x2D	; 45
     770:	60 2f       	mov	r22, r16
     772:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
    }
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <_Z8mouseoffi>:
        } else if (mode == KMOUSE_SCROLL) {
            opt_scroll_mode = SCROLL_MODE_TILT_POSITION;
        }
    }
    
    void mouseoff(int mode) {
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset mouseoff ");
     782:	84 ed       	ldi	r24, 0xD4	; 212
     784:	97 e0       	ldi	r25, 0x07	; 7
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(mode);
     78e:	84 ed       	ldi	r24, 0xD4	; 212
     790:	97 e0       	ldi	r25, 0x07	; 7
     792:	be 01       	movw	r22, r28
     794:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if (mode == KMOUSE_MOVE) {
     798:	20 97       	sbiw	r28, 0x00	; 0
     79a:	19 f4       	brne	.+6      	; 0x7a2 <_Z8mouseoffi+0x26>
            opt_mouse_mode = 0;
     79c:	10 92 b9 04 	sts	0x04B9, r1
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <_Z8mouseoffi+0x2e>
        } else if (mode == KMOUSE_SCROLL) {
     7a2:	21 97       	sbiw	r28, 0x01	; 1
     7a4:	11 f4       	brne	.+4      	; 0x7aa <_Z8mouseoffi+0x2e>
            opt_scroll_mode = 0;
     7a6:	10 92 ba 04 	sts	0x04BA, r1
        }
    }
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <_Z7mouseoni>:
            // not enabled, so turn it on
            pushmode(mode);
        }
    }
    
    void mouseon(int mode) {
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset mouseon ");
     7b6:	84 ed       	ldi	r24, 0xD4	; 212
     7b8:	97 e0       	ldi	r25, 0x07	; 7
     7ba:	63 e1       	ldi	r22, 0x13	; 19
     7bc:	71 e0       	ldi	r23, 0x01	; 1
     7be:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(mode);
     7c2:	84 ed       	ldi	r24, 0xD4	; 212
     7c4:	97 e0       	ldi	r25, 0x07	; 7
     7c6:	be 01       	movw	r22, r28
     7c8:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if (mode == KMOUSE_MOVE) {
     7cc:	20 97       	sbiw	r28, 0x00	; 0
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <_Z7mouseoni+0x28>
            opt_mouse_mode = MOUSE_MODE_TILT_POSITION;
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	80 93 b9 04 	sts	0x04B9, r24
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <_Z7mouseoni+0x32>
        } else if (mode == KMOUSE_SCROLL) {
     7d8:	21 97       	sbiw	r28, 0x01	; 1
     7da:	19 f4       	brne	.+6      	; 0x7e2 <_Z7mouseoni+0x32>
            opt_scroll_mode = SCROLL_MODE_TILT_POSITION;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	80 93 ba 04 	sts	0x04BA, r24
        }
    }
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <_Z7vibrateii>:
                tone(SOUND_PIN, pitch, duration_ms);
            }
        #endif /* ENABLE_BEEP */
    }
    
    void vibrate(int mode, int duration) {
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	8c 01       	movw	r16, r24
     7f6:	6b 01       	movw	r12, r22
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset vibrate ");
     7f8:	94 ed       	ldi	r25, 0xD4	; 212
     7fa:	e9 2e       	mov	r14, r25
     7fc:	97 e0       	ldi	r25, 0x07	; 7
     7fe:	f9 2e       	mov	r15, r25
     800:	c7 01       	movw	r24, r14
     802:	65 e2       	ldi	r22, 0x25	; 37
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(mode);
     80a:	c7 01       	movw	r24, r14
     80c:	b8 01       	movw	r22, r16
     80e:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     812:	c7 01       	movw	r24, r14
     814:	67 e3       	ldi	r22, 0x37	; 55
     816:	71 e0       	ldi	r23, 0x01	; 1
     818:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(duration);
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
    }
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	08 95       	ret

00000832 <_Z7blueledii>:
                case KLED_SOLID: tricolorBlinkGreen = 0; tricolor(-1, 1, -1); break;
            }
        #endif /* ENABLE_TRICOLOR */
    }
    
    void blueled(int mode, int duration) {
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	8b 01       	movw	r16, r22
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset blueled ");
     83e:	84 ed       	ldi	r24, 0xD4	; 212
     840:	97 e0       	ldi	r25, 0x07	; 7
     842:	69 e3       	ldi	r22, 0x39	; 57
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(mode);
     84a:	84 ed       	ldi	r24, 0xD4	; 212
     84c:	97 e0       	ldi	r25, 0x07	; 7
     84e:	be 01       	movw	r22, r28
     850:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     854:	84 ed       	ldi	r24, 0xD4	; 212
     856:	97 e0       	ldi	r25, 0x07	; 7
     858:	67 e3       	ldi	r22, 0x37	; 55
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(duration);
     860:	84 ed       	ldi	r24, 0xD4	; 212
     862:	97 e0       	ldi	r25, 0x07	; 7
     864:	b8 01       	movw	r22, r16
     866:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        #ifdef ENABLE_TRICOLOR
            switch (mode) {
     86a:	c2 30       	cpi	r28, 0x02	; 2
     86c:	d1 05       	cpc	r29, r1
     86e:	09 f1       	breq	.+66     	; 0x8b2 <_Z7blueledii+0x80>
     870:	c3 30       	cpi	r28, 0x03	; 3
     872:	d1 05       	cpc	r29, r1
     874:	34 f4       	brge	.+12     	; 0x882 <_Z7blueledii+0x50>
     876:	20 97       	sbiw	r28, 0x00	; 0
     878:	69 f0       	breq	.+26     	; 0x894 <_Z7blueledii+0x62>
     87a:	c1 30       	cpi	r28, 0x01	; 1
     87c:	d1 05       	cpc	r29, r1
     87e:	31 f5       	brne	.+76     	; 0x8cc <_Z7blueledii+0x9a>
     880:	18 c0       	rjmp	.+48     	; 0x8b2 <_Z7blueledii+0x80>
     882:	c4 30       	cpi	r28, 0x04	; 4
     884:	d1 05       	cpc	r29, r1
     886:	a9 f0       	breq	.+42     	; 0x8b2 <_Z7blueledii+0x80>
     888:	c4 30       	cpi	r28, 0x04	; 4
     88a:	d1 05       	cpc	r29, r1
     88c:	5c f0       	brlt	.+22     	; 0x8a4 <_Z7blueledii+0x72>
     88e:	25 97       	sbiw	r28, 0x05	; 5
     890:	e9 f4       	brne	.+58     	; 0x8cc <_Z7blueledii+0x9a>
     892:	14 c0       	rjmp	.+40     	; 0x8bc <_Z7blueledii+0x8a>
                case KLED_OFF: tricolorBlinkBlue = 0; tricolor(-1, -1, 0); break;
     894:	10 92 75 06 	sts	0x0675, r1
     898:	10 92 74 06 	sts	0x0674, r1
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	6f ef       	ldi	r22, 0xFF	; 255
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	13 c0       	rjmp	.+38     	; 0x8ca <_Z7blueledii+0x98>
                case KLED_LONGBLINK: tricolorBlinkBlue = 1; tricolor(-1, -1, 1); break;
                case KLED_LONGPULSE: tricolorBlinkBlue = 2; tricolor(-1, -1, 1); break;
                case KLED_SHORTBLINK: tricolorBlinkBlue = 3; tricolor(-1, -1, 1); break;
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	90 93 75 06 	sts	0x0675, r25
     8ac:	80 93 74 06 	sts	0x0674, r24
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <_Z7blueledii+0x92>
                case KLED_SHORTPULSE: tricolorBlinkBlue = 4; tricolor(-1, -1, 1); break;
     8b2:	d0 93 75 06 	sts	0x0675, r29
     8b6:	c0 93 74 06 	sts	0x0674, r28
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <_Z7blueledii+0x92>
                case KLED_SOLID: tricolorBlinkBlue = 0; tricolor(-1, -1, 1); break;
     8bc:	10 92 75 06 	sts	0x0675, r1
     8c0:	10 92 74 06 	sts	0x0674, r1
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	6f ef       	ldi	r22, 0xFF	; 255
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	3e df       	rcall	.-388    	; 0x748 <_Z8tricolorhhh>
            }
        #endif /* ENABLE_TRICOLOR */
    }
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	08 95       	ret

000008d6 <_Z8greenledii>:
                case KLED_SOLID: tricolorBlinkRed = 0; tricolor(1, -1, -1); break;
            }
        #endif /* ENABLE_TRICOLOR */
    }
    
    void greenled(int mode, int duration) {
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	8b 01       	movw	r16, r22
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset greenled ");
     8e2:	84 ed       	ldi	r24, 0xD4	; 212
     8e4:	97 e0       	ldi	r25, 0x07	; 7
     8e6:	6b e4       	ldi	r22, 0x4B	; 75
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(mode);
     8ee:	84 ed       	ldi	r24, 0xD4	; 212
     8f0:	97 e0       	ldi	r25, 0x07	; 7
     8f2:	be 01       	movw	r22, r28
     8f4:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     8f8:	84 ed       	ldi	r24, 0xD4	; 212
     8fa:	97 e0       	ldi	r25, 0x07	; 7
     8fc:	67 e3       	ldi	r22, 0x37	; 55
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(duration);
     904:	84 ed       	ldi	r24, 0xD4	; 212
     906:	97 e0       	ldi	r25, 0x07	; 7
     908:	b8 01       	movw	r22, r16
     90a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        #ifdef ENABLE_TRICOLOR
            switch (mode) {
     90e:	c2 30       	cpi	r28, 0x02	; 2
     910:	d1 05       	cpc	r29, r1
     912:	01 f1       	breq	.+64     	; 0x954 <_Z8greenledii+0x7e>
     914:	c3 30       	cpi	r28, 0x03	; 3
     916:	d1 05       	cpc	r29, r1
     918:	34 f4       	brge	.+12     	; 0x926 <_Z8greenledii+0x50>
     91a:	20 97       	sbiw	r28, 0x00	; 0
     91c:	69 f0       	breq	.+26     	; 0x938 <_Z8greenledii+0x62>
     91e:	c1 30       	cpi	r28, 0x01	; 1
     920:	d1 05       	cpc	r29, r1
     922:	29 f5       	brne	.+74     	; 0x96e <_Z8greenledii+0x98>
     924:	17 c0       	rjmp	.+46     	; 0x954 <_Z8greenledii+0x7e>
     926:	c4 30       	cpi	r28, 0x04	; 4
     928:	d1 05       	cpc	r29, r1
     92a:	a1 f0       	breq	.+40     	; 0x954 <_Z8greenledii+0x7e>
     92c:	c4 30       	cpi	r28, 0x04	; 4
     92e:	d1 05       	cpc	r29, r1
     930:	54 f0       	brlt	.+20     	; 0x946 <_Z8greenledii+0x70>
     932:	25 97       	sbiw	r28, 0x05	; 5
     934:	e1 f4       	brne	.+56     	; 0x96e <_Z8greenledii+0x98>
     936:	13 c0       	rjmp	.+38     	; 0x95e <_Z8greenledii+0x88>
                case KLED_OFF: tricolorBlinkGreen = 0; tricolor(-1, 0, -1); break;
     938:	10 92 73 06 	sts	0x0673, r1
     93c:	10 92 72 06 	sts	0x0672, r1
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	12 c0       	rjmp	.+36     	; 0x96a <_Z8greenledii+0x94>
                case KLED_LONGBLINK: tricolorBlinkGreen = 1; tricolor(-1, 1, -1); break;
                case KLED_LONGPULSE: tricolorBlinkGreen = 2; tricolor(-1, 1, -1); break;
                case KLED_SHORTBLINK: tricolorBlinkGreen = 3; tricolor(-1, 1, -1); break;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 73 06 	sts	0x0673, r25
     94e:	80 93 72 06 	sts	0x0672, r24
     952:	09 c0       	rjmp	.+18     	; 0x966 <_Z8greenledii+0x90>
                case KLED_SHORTPULSE: tricolorBlinkGreen = 4; tricolor(-1, 1, -1); break;
     954:	d0 93 73 06 	sts	0x0673, r29
     958:	c0 93 72 06 	sts	0x0672, r28
     95c:	04 c0       	rjmp	.+8      	; 0x966 <_Z8greenledii+0x90>
                case KLED_SOLID: tricolorBlinkGreen = 0; tricolor(-1, 1, -1); break;
     95e:	10 92 73 06 	sts	0x0673, r1
     962:	10 92 72 06 	sts	0x0672, r1
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	4f ef       	ldi	r20, 0xFF	; 255
     96c:	ed de       	rcall	.-550    	; 0x748 <_Z8tricolorhhh>
            }
        #endif /* ENABLE_TRICOLOR */
    }
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <_Z6redledii>:
        modifierdown(code);
        delay(5);
        modifierup(code);
    }
    
    void redled(int mode, int duration) {
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	ec 01       	movw	r28, r24
     982:	8b 01       	movw	r16, r22
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset redled ");
     984:	84 ed       	ldi	r24, 0xD4	; 212
     986:	97 e0       	ldi	r25, 0x07	; 7
     988:	6e e5       	ldi	r22, 0x5E	; 94
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(mode);
     990:	84 ed       	ldi	r24, 0xD4	; 212
     992:	97 e0       	ldi	r25, 0x07	; 7
     994:	be 01       	movw	r22, r28
     996:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     99a:	84 ed       	ldi	r24, 0xD4	; 212
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	67 e3       	ldi	r22, 0x37	; 55
     9a0:	71 e0       	ldi	r23, 0x01	; 1
     9a2:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(duration);
     9a6:	84 ed       	ldi	r24, 0xD4	; 212
     9a8:	97 e0       	ldi	r25, 0x07	; 7
     9aa:	b8 01       	movw	r22, r16
     9ac:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        #ifdef ENABLE_TRICOLOR
            switch (mode) {
     9b0:	c2 30       	cpi	r28, 0x02	; 2
     9b2:	d1 05       	cpc	r29, r1
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <_Z6redledii+0x7c>
     9b6:	c3 30       	cpi	r28, 0x03	; 3
     9b8:	d1 05       	cpc	r29, r1
     9ba:	34 f4       	brge	.+12     	; 0x9c8 <_Z6redledii+0x50>
     9bc:	20 97       	sbiw	r28, 0x00	; 0
     9be:	69 f0       	breq	.+26     	; 0x9da <_Z6redledii+0x62>
     9c0:	c1 30       	cpi	r28, 0x01	; 1
     9c2:	d1 05       	cpc	r29, r1
     9c4:	21 f5       	brne	.+72     	; 0xa0e <_Z6redledii+0x96>
     9c6:	16 c0       	rjmp	.+44     	; 0x9f4 <_Z6redledii+0x7c>
     9c8:	c4 30       	cpi	r28, 0x04	; 4
     9ca:	d1 05       	cpc	r29, r1
     9cc:	99 f0       	breq	.+38     	; 0x9f4 <_Z6redledii+0x7c>
     9ce:	c4 30       	cpi	r28, 0x04	; 4
     9d0:	d1 05       	cpc	r29, r1
     9d2:	4c f0       	brlt	.+18     	; 0x9e6 <_Z6redledii+0x6e>
     9d4:	25 97       	sbiw	r28, 0x05	; 5
     9d6:	d9 f4       	brne	.+54     	; 0xa0e <_Z6redledii+0x96>
     9d8:	12 c0       	rjmp	.+36     	; 0x9fe <_Z6redledii+0x86>
                case KLED_OFF: tricolorBlinkRed = 0; tricolor(0, -1, -1); break;
     9da:	10 92 71 06 	sts	0x0671, r1
     9de:	10 92 70 06 	sts	0x0670, r1
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	11 c0       	rjmp	.+34     	; 0xa08 <_Z6redledii+0x90>
                case KLED_LONGBLINK: tricolorBlinkRed = 1; tricolor(1, -1, -1); break;
                case KLED_LONGPULSE: tricolorBlinkRed = 2; tricolor(1, -1, -1); break;
                case KLED_SHORTBLINK: tricolorBlinkRed = 3; tricolor(1, -1, -1); break;
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 71 06 	sts	0x0671, r25
     9ee:	80 93 70 06 	sts	0x0670, r24
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <_Z6redledii+0x8e>
                case KLED_SHORTPULSE: tricolorBlinkRed = 4; tricolor(1, -1, -1); break;
     9f4:	d0 93 71 06 	sts	0x0671, r29
     9f8:	c0 93 70 06 	sts	0x0670, r28
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <_Z6redledii+0x8e>
                case KLED_SOLID: tricolorBlinkRed = 0; tricolor(1, -1, -1); break;
     9fe:	10 92 71 06 	sts	0x0671, r1
     a02:	10 92 70 06 	sts	0x0670, r1
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	6f ef       	ldi	r22, 0xFF	; 255
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	9d de       	rcall	.-710    	; 0x748 <_Z8tricolorhhh>
            }
        #endif /* ENABLE_TRICOLOR */
    }
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <_Z4beepiii>:
                case KLED_SOLID: tricolorBlinkBlue = 0; tricolor(-1, -1, 1); break;
            }
        #endif /* ENABLE_TRICOLOR */
    }
    
    void beep(int pitch, int mode, int duration) {
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	6c 01       	movw	r12, r24
     a2a:	eb 01       	movw	r28, r22
     a2c:	7a 01       	movw	r14, r20
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset beep ");
     a2e:	84 ed       	ldi	r24, 0xD4	; 212
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	6f e6       	ldi	r22, 0x6F	; 111
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(pitch);
     a3a:	84 ed       	ldi	r24, 0xD4	; 212
     a3c:	97 e0       	ldi	r25, 0x07	; 7
     a3e:	b6 01       	movw	r22, r12
     a40:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     a44:	84 ed       	ldi	r24, 0xD4	; 212
     a46:	97 e0       	ldi	r25, 0x07	; 7
     a48:	67 e3       	ldi	r22, 0x37	; 55
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(mode);
     a50:	84 ed       	ldi	r24, 0xD4	; 212
     a52:	97 e0       	ldi	r25, 0x07	; 7
     a54:	be 01       	movw	r22, r28
     a56:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZN16USBVirtualSerial5printEi>
            Serial.print(" ");
     a5a:	84 ed       	ldi	r24, 0xD4	; 212
     a5c:	97 e0       	ldi	r25, 0x07	; 7
     a5e:	67 e3       	ldi	r22, 0x37	; 55
     a60:	71 e0       	ldi	r23, 0x01	; 1
     a62:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(duration);
     a66:	84 ed       	ldi	r24, 0xD4	; 212
     a68:	97 e0       	ldi	r25, 0x07	; 7
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        #ifdef ENABLE_BEEP
            if (mode == KBEEP_OFF) {
     a70:	20 97       	sbiw	r28, 0x00	; 0
     a72:	21 f4       	brne	.+8      	; 0xa7c <_Z4beepiii+0x64>
                noTone(SOUND_PIN);
     a74:	8a e2       	ldi	r24, 0x2A	; 42
     a76:	0e 94 02 2a 	call	0x5404	; 0x5404 <_Z6noToneh>
     a7a:	22 c0       	rjmp	.+68     	; 0xac0 <_Z4beepiii+0xa8>
                return;
            } 
            
            int duration_ms = 1000;
            if (mode == KBEEP_SHORTPULSE) {
     a7c:	c4 30       	cpi	r28, 0x04	; 4
     a7e:	d1 05       	cpc	r29, r1
     a80:	19 f4       	brne	.+6      	; 0xa88 <_Z4beepiii+0x70>
     a82:	04 e6       	ldi	r16, 0x64	; 100
     a84:	10 e0       	ldi	r17, 0x00	; 0
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <_Z4beepiii+0x7e>
                duration_ms = 100;
            } else if (mode == KBEEP_SHORTBEEP) {
     a88:	23 97       	sbiw	r28, 0x03	; 3
     a8a:	19 f4       	brne	.+6      	; 0xa92 <_Z4beepiii+0x7a>
     a8c:	09 e1       	ldi	r16, 0x19	; 25
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <_Z4beepiii+0x7e>
     a92:	08 ee       	ldi	r16, 0xE8	; 232
     a94:	13 e0       	ldi	r17, 0x03	; 3
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	d0 e0       	ldi	r29, 0x00	; 0
     a9a:	0f c0       	rjmp	.+30     	; 0xaba <_Z4beepiii+0xa2>
                duration_ms = 25;
            }
            
            for (int i = 0; i < duration; i++) {
                if (i > 0) {
     a9c:	1c 16       	cp	r1, r28
     a9e:	1d 06       	cpc	r1, r29
     aa0:	34 f4       	brge	.+12     	; 0xaae <_Z4beepiii+0x96>
                    delay(80);
     aa2:	60 e5       	ldi	r22, 0x50	; 80
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
                }
                tone(SOUND_PIN, pitch, duration_ms);
     aae:	8a e2       	ldi	r24, 0x2A	; 42
     ab0:	b6 01       	movw	r22, r12
     ab2:	a8 01       	movw	r20, r16
     ab4:	0e 94 01 2a 	call	0x5402	; 0x5402 <_Z4tonehjj>
                duration_ms = 100;
            } else if (mode == KBEEP_SHORTBEEP) {
                duration_ms = 25;
            }
            
            for (int i = 0; i < duration; i++) {
     ab8:	21 96       	adiw	r28, 0x01	; 1
     aba:	ce 15       	cp	r28, r14
     abc:	df 05       	cpc	r29, r15
     abe:	74 f3       	brlt	.-36     	; 0xa9c <_Z4beepiii+0x84>
                    delay(80);
                }
                tone(SOUND_PIN, pitch, duration_ms);
            }
        #endif /* ENABLE_BEEP */
    }
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	08 95       	ret

00000ad2 <_Z10modifierupi>:
            RX400.set_modifier(modifiersDown);
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
    
    void modifierup(int code) {
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset modifierup ");
     ad8:	84 ed       	ldi	r24, 0xD4	; 212
     ada:	97 e0       	ldi	r25, 0x07	; 7
     adc:	6e e7       	ldi	r22, 0x7E	; 126
     ade:	71 e0       	ldi	r23, 0x01	; 1
     ae0:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
     ae4:	84 ed       	ldi	r24, 0xD4	; 212
     ae6:	97 e0       	ldi	r25, 0x07	; 7
     ae8:	be 01       	movw	r22, r28
     aea:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if ((modifiersDown & code) > 0) {
     aee:	60 91 77 06 	lds	r22, 0x0677
     af2:	70 91 78 06 	lds	r23, 0x0678
     af6:	ce 01       	movw	r24, r28
     af8:	86 23       	and	r24, r22
     afa:	97 23       	and	r25, r23
     afc:	18 16       	cp	r1, r24
     afe:	19 06       	cpc	r1, r25
     b00:	74 f4       	brge	.+28     	; 0xb1e <_Z10modifierupi+0x4c>
            modifiersDown -= code;
     b02:	6c 1b       	sub	r22, r28
     b04:	7d 0b       	sbc	r23, r29
     b06:	70 93 78 06 	sts	0x0678, r23
     b0a:	60 93 77 06 	sts	0x0677, r22
            #ifdef ENABLE_USB
                Keyboard.set_modifier(modifiersDown);
     b0e:	8d ed       	ldi	r24, 0xDD	; 221
     b10:	97 e0       	ldi	r25, 0x07	; 7
     b12:	0e 94 76 27 	call	0x4eec	; 0x4eec <_ZN11USBKeyboard12set_modifierEh>
                Keyboard.send_now();
     b16:	8d ed       	ldi	r24, 0xDD	; 221
     b18:	97 e0       	ldi	r25, 0x07	; 7
     b1a:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN11USBKeyboard8send_nowEv>
            #ifdef ENABLE_RX400
                RX400.set_modifier(modifiersDown);
                RX400.send_now();
            #endif /* ENABLE_RX400 */
        }
    }
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <_Z15deactivate_modei>:
            break;
    }
}
 
void deactivate_mode(int mode) {
    switch (mode) {
     b24:	04 97       	sbiw	r24, 0x04	; 4
     b26:	19 f4       	brne	.+6      	; 0xb2e <_Z15deactivate_modei+0xa>
        case KMODE_GUI:
            modifierup(MODIFIERKEY_GUI);
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	d2 cf       	rjmp	.-92     	; 0xad2 <_Z10modifierupi>
     b2e:	08 95       	ret

00000b30 <_Z12modifierdowni>:
        keydown(code);
        delay(5);
        keyup(code);
    }
    
    void modifierdown(int code) {
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	7c 01       	movw	r14, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset modifierdown ");
     b3a:	04 ed       	ldi	r16, 0xD4	; 212
     b3c:	17 e0       	ldi	r17, 0x07	; 7
     b3e:	c8 01       	movw	r24, r16
     b40:	63 e9       	ldi	r22, 0x93	; 147
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
     b48:	c8 01       	movw	r24, r16
     b4a:	b7 01       	movw	r22, r14
     b4c:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        modifiersDown = modifiersDown | code;
     b50:	60 91 77 06 	lds	r22, 0x0677
     b54:	70 91 78 06 	lds	r23, 0x0678
     b58:	6e 29       	or	r22, r14
     b5a:	7f 29       	or	r23, r15
     b5c:	70 93 78 06 	sts	0x0678, r23
     b60:	60 93 77 06 	sts	0x0677, r22
        #ifdef ENABLE_USB
            Keyboard.set_modifier(modifiersDown);
     b64:	0d ed       	ldi	r16, 0xDD	; 221
     b66:	17 e0       	ldi	r17, 0x07	; 7
     b68:	c8 01       	movw	r24, r16
     b6a:	0e 94 76 27 	call	0x4eec	; 0x4eec <_ZN11USBKeyboard12set_modifierEh>
            Keyboard.send_now();
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN11USBKeyboard8send_nowEv>
        #endif /* ENABLE_USB */
        #ifdef ENABLE_RX400       
            RX400.set_modifier(modifiersDown);
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <_Z13activate_modei>:
#define KMODE_SYMBOLS 2
#define KMODE_FUNCTIONS 3
#define KMODE_GUI 4
 
void activate_mode(int mode) {
    switch (mode) {
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	91 05       	cpc	r25, r1
     b82:	71 f1       	breq	.+92     	; 0xbe0 <_Z13activate_modei+0x62>
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	34 f4       	brge	.+12     	; 0xb96 <_Z13activate_modei+0x18>
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	59 f0       	breq	.+22     	; 0xba4 <_Z13activate_modei+0x26>
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	09 f0       	breq	.+2      	; 0xb94 <_Z13activate_modei+0x16>
     b92:	5f c0       	rjmp	.+190    	; 0xc52 <_Z13activate_modei+0xd4>
     b94:	16 c0       	rjmp	.+44     	; 0xbc2 <_Z13activate_modei+0x44>
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	91 05       	cpc	r25, r1
     b9a:	b1 f1       	breq	.+108    	; 0xc08 <_Z13activate_modei+0x8a>
     b9c:	04 97       	sbiw	r24, 0x04	; 4
     b9e:	09 f0       	breq	.+2      	; 0xba2 <_Z13activate_modei+0x24>
     ba0:	58 c0       	rjmp	.+176    	; 0xc52 <_Z13activate_modei+0xd4>
     ba2:	48 c0       	rjmp	.+144    	; 0xc34 <_Z13activate_modei+0xb6>
        case KMODE_DEFAULT:
            beep(2000, KBEEP_SHORTBEEP, 1);
     ba4:	80 ed       	ldi	r24, 0xD0	; 208
     ba6:	97 e0       	ldi	r25, 0x07	; 7
     ba8:	63 e0       	ldi	r22, 0x03	; 3
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	33 df       	rcall	.-410    	; 0xa18 <_Z4beepiii>
            redled(KLED_OFF, 0);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	de de       	rcall	.-580    	; 0x978 <_Z6redledii>
            greenled(KLED_SOLID, 0);
     bbc:	85 e0       	ldi	r24, 0x05	; 5
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	31 c0       	rjmp	.+98     	; 0xc24 <_Z13activate_modei+0xa6>
            blueled(KLED_OFF, 0);
            return;
            break;
        case KMODE_NUMBERS:
            beep(2000, KBEEP_SHORTBEEP, 2);
     bc2:	80 ed       	ldi	r24, 0xD0	; 208
     bc4:	97 e0       	ldi	r25, 0x07	; 7
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	42 e0       	ldi	r20, 0x02	; 2
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	24 df       	rcall	.-440    	; 0xa18 <_Z4beepiii>
            redled(KLED_OFF, 0);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	cf de       	rcall	.-610    	; 0x978 <_Z6redledii>
            greenled(KLED_OFF, 0);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <_Z13activate_modei+0x7e>
            blueled(KLED_SOLID, 0);
            return;
            break;
        case KMODE_SYMBOLS:
            beep(2000, KBEEP_SHORTBEEP, 3);
     be0:	80 ed       	ldi	r24, 0xD0	; 208
     be2:	97 e0       	ldi	r25, 0x07	; 7
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	43 e0       	ldi	r20, 0x03	; 3
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	15 df       	rcall	.-470    	; 0xa18 <_Z4beepiii>
            redled(KLED_OFF, 0);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	c0 de       	rcall	.-640    	; 0x978 <_Z6redledii>
            greenled(KLED_SOLID, 0);
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	6a de       	rcall	.-812    	; 0x8d6 <_Z8greenledii>
            blueled(KLED_SOLID, 0);
     c02:	85 e0       	ldi	r24, 0x05	; 5
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	13 c0       	rjmp	.+38     	; 0xc2e <_Z13activate_modei+0xb0>
            return;
            break;
        case KMODE_FUNCTIONS:
            beep(2000, KBEEP_SHORTBEEP, 4);
     c08:	80 ed       	ldi	r24, 0xD0	; 208
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	44 e0       	ldi	r20, 0x04	; 4
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	01 df       	rcall	.-510    	; 0xa18 <_Z4beepiii>
            redled(KLED_SOLID, 0);
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	ac de       	rcall	.-680    	; 0x978 <_Z6redledii>
            greenled(KLED_OFF, 0);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	56 de       	rcall	.-852    	; 0x8d6 <_Z8greenledii>
            blueled(KLED_OFF, 0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	ff cd       	rjmp	.-1026   	; 0x832 <_Z7blueledii>
            return;
            break;
        case KMODE_GUI:
            beep(1600, KBEEP_SHORTPULSE, 1);
     c34:	80 e4       	ldi	r24, 0x40	; 64
     c36:	96 e0       	ldi	r25, 0x06	; 6
     c38:	64 e0       	ldi	r22, 0x04	; 4
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	eb de       	rcall	.-554    	; 0xa18 <_Z4beepiii>
            greenled(KLED_SHORTBLINK, 0);
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	45 de       	rcall	.-886    	; 0x8d6 <_Z8greenledii>
            modifierdown(MODIFIERKEY_GUI);
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	6f cf       	rjmp	.-290    	; 0xb30 <_Z12modifierdowni>
     c52:	08 95       	ret

00000c54 <_Z7popmodev>:
        }
    }
    
    void popmode() {
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.println("touchset popmode");
     c54:	84 ed       	ldi	r24, 0xD4	; 212
     c56:	97 e0       	ldi	r25, 0x07	; 7
     c58:	6a ea       	ldi	r22, 0xAA	; 170
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	0e 94 57 27 	call	0x4eae	; 0x4eae <_ZN16USBVirtualSerial7printlnEPKc>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if (modeStackPos > 0) deactivate_mode(modeStack[--modeStackPos]);
     c60:	e0 91 9b 06 	lds	r30, 0x069B
     c64:	f0 91 9c 06 	lds	r31, 0x069C
     c68:	1e 16       	cp	r1, r30
     c6a:	1f 06       	cpc	r1, r31
     c6c:	64 f4       	brge	.+24     	; 0xc86 <_Z7popmodev+0x32>
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	f0 93 9c 06 	sts	0x069C, r31
     c74:	e0 93 9b 06 	sts	0x069B, r30
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e9 57       	subi	r30, 0x79	; 121
     c7e:	f9 4f       	sbci	r31, 0xF9	; 249
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	4f df       	rcall	.-354    	; 0xb24 <_Z15deactivate_modei>
        if (modeStackPos == 0) modeStack[modeStackPos++] = 0;
     c86:	80 91 9b 06 	lds	r24, 0x069B
     c8a:	90 91 9c 06 	lds	r25, 0x069C
     c8e:	89 2b       	or	r24, r25
     c90:	51 f4       	brne	.+20     	; 0xca6 <_Z7popmodev+0x52>
     c92:	10 92 88 06 	sts	0x0688, r1
     c96:	10 92 87 06 	sts	0x0687, r1
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 9c 06 	sts	0x069C, r25
     ca2:	80 93 9b 06 	sts	0x069B, r24
        activate_mode(modeStack[modeStackPos - 1]);
     ca6:	e0 91 9b 06 	lds	r30, 0x069B
     caa:	f0 91 9c 06 	lds	r31, 0x069C
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	eb 57       	subi	r30, 0x7B	; 123
     cb4:	f9 4f       	sbci	r31, 0xF9	; 249
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
    }
     cba:	61 cf       	rjmp	.-318    	; 0xb7e <_Z13activate_modei>

00000cbc <_Z8pushmodei>:
        modeStackPos = 1;
        modeStack[0] = mode;
        activate_mode(mode);
    }
    
    void pushmode(int mode) {
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset pushmode ");
     cc2:	84 ed       	ldi	r24, 0xD4	; 212
     cc4:	97 e0       	ldi	r25, 0x07	; 7
     cc6:	6b eb       	ldi	r22, 0xBB	; 187
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(mode);
     cce:	84 ed       	ldi	r24, 0xD4	; 212
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	be 01       	movw	r22, r28
     cd4:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if (modeStackPos < 10) {
     cd8:	80 91 9b 06 	lds	r24, 0x069B
     cdc:	90 91 9c 06 	lds	r25, 0x069C
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	91 05       	cpc	r25, r1
     ce4:	74 f4       	brge	.+28     	; 0xd02 <_Z8pushmodei+0x46>
            modeStack[modeStackPos] = mode;
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e9 57       	subi	r30, 0x79	; 121
     cee:	f9 4f       	sbci	r31, 0xF9	; 249
     cf0:	d1 83       	std	Z+1, r29	; 0x01
     cf2:	c0 83       	st	Z, r28
            modeStackPos++;
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 9c 06 	sts	0x069C, r25
     cfa:	80 93 9b 06 	sts	0x069B, r24
            activate_mode(mode);
     cfe:	ce 01       	movw	r24, r28
     d00:	3e df       	rcall	.-388    	; 0xb7e <_Z13activate_modei>
        }
    }
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <_Z10togglemodei>:
        if (modeStackPos > 0) deactivate_mode(modeStack[--modeStackPos]);
        if (modeStackPos == 0) modeStack[modeStackPos++] = 0;
        activate_mode(modeStack[modeStackPos - 1]);
    }
    
    void togglemode(int mode) {
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	8c 01       	movw	r16, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset togglemode ");
     d12:	84 ed       	ldi	r24, 0xD4	; 212
     d14:	97 e0       	ldi	r25, 0x07	; 7
     d16:	6e ec       	ldi	r22, 0xCE	; 206
     d18:	71 e0       	ldi	r23, 0x01	; 1
     d1a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(mode);
     d1e:	84 ed       	ldi	r24, 0xD4	; 212
     d20:	97 e0       	ldi	r25, 0x07	; 7
     d22:	b8 01       	movw	r22, r16
     d24:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        // find the mode and disable it if it's in the stack
        int i = 0;
        for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
     d28:	20 91 9b 06 	lds	r18, 0x069B
     d2c:	30 91 9c 06 	lds	r19, 0x069C
     d30:	e7 e8       	ldi	r30, 0x87	; 135
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	c0 e0       	ldi	r28, 0x00	; 0
     d36:	d0 e0       	ldi	r29, 0x00	; 0
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <_Z10togglemodei+0x34>
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	c2 17       	cp	r28, r18
     d3e:	d3 07       	cpc	r29, r19
     d40:	34 f4       	brge	.+12     	; 0xd4e <_Z10togglemodei+0x46>
     d42:	81 91       	ld	r24, Z+
     d44:	91 91       	ld	r25, Z+
     d46:	80 17       	cp	r24, r16
     d48:	91 07       	cpc	r25, r17
     d4a:	b9 f7       	brne	.-18     	; 0xd3a <_Z10togglemodei+0x32>
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <_Z10togglemodei+0x6c>
            deactivate_mode(mode);
            for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
            modeStackPos--;
        } else {
            // not enabled, so turn it on
            pushmode(mode);
     d4e:	c8 01       	movw	r24, r16
     d50:	b5 df       	rcall	.-150    	; 0xcbc <_Z8pushmodei>
     d52:	1d c0       	rjmp	.+58     	; 0xd8e <_Z10togglemodei+0x86>
        int i = 0;
        for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
        if (i < modeStackPos) {
            // enabled, so turn it off
            deactivate_mode(mode);
            for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	81 93       	st	Z+, r24
     d5a:	91 93       	st	Z+, r25
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	24 17       	cp	r18, r20
     d62:	35 07       	cpc	r19, r21
     d64:	bc f3       	brlt	.-18     	; 0xd54 <_Z10togglemodei+0x4c>
            modeStackPos--;
     d66:	41 50       	subi	r20, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	50 93 9c 06 	sts	0x069C, r21
     d6e:	40 93 9b 06 	sts	0x069B, r20
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <_Z10togglemodei+0x86>
        // find the mode and disable it if it's in the stack
        int i = 0;
        for (i = 0; i < modeStackPos && modeStack[i] != mode; i++);
        if (i < modeStackPos) {
            // enabled, so turn it off
            deactivate_mode(mode);
     d74:	c8 01       	movw	r24, r16
     d76:	d6 de       	rcall	.-596    	; 0xb24 <_Z15deactivate_modei>
            for (i++; i < modeStackPos; i++) modeStack[i - 1] = modeStack[i];
     d78:	40 91 9b 06 	lds	r20, 0x069B
     d7c:	50 91 9c 06 	lds	r21, 0x069C
     d80:	9e 01       	movw	r18, r28
     d82:	fe 01       	movw	r30, r28
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	e9 57       	subi	r30, 0x79	; 121
     d8a:	f9 4f       	sbci	r31, 0xF9	; 249
     d8c:	e7 cf       	rjmp	.-50     	; 0xd5c <_Z10togglemodei+0x54>
            modeStackPos--;
        } else {
            // not enabled, so turn it on
            pushmode(mode);
        }
    }
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <_Z7setmodei>:
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    }
    
    void setmode(int mode) {
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset setmode ");
     d9e:	84 ed       	ldi	r24, 0xD4	; 212
     da0:	97 e0       	ldi	r25, 0x07	; 7
     da2:	63 ee       	ldi	r22, 0xE3	; 227
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(mode);
     daa:	84 ed       	ldi	r24, 0xD4	; 212
     dac:	97 e0       	ldi	r25, 0x07	; 7
     dae:	be 01       	movw	r22, r28
     db0:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <_Z7setmodei+0x3e>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        for (; modeStackPos > 0; modeStackPos--) deactivate_mode(modeStack[modeStackPos - 1]);
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	eb 57       	subi	r30, 0x7B	; 123
     dbc:	f9 4f       	sbci	r31, 0xF9	; 249
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	b0 de       	rcall	.-672    	; 0xb24 <_Z15deactivate_modei>
     dc4:	80 91 9b 06 	lds	r24, 0x069B
     dc8:	90 91 9c 06 	lds	r25, 0x069C
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	90 93 9c 06 	sts	0x069C, r25
     dd2:	80 93 9b 06 	sts	0x069B, r24
     dd6:	e0 91 9b 06 	lds	r30, 0x069B
     dda:	f0 91 9c 06 	lds	r31, 0x069C
     dde:	1e 16       	cp	r1, r30
     de0:	1f 06       	cpc	r1, r31
     de2:	4c f3       	brlt	.-46     	; 0xdb6 <_Z7setmodei+0x1e>
        modeStackPos = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	90 93 9c 06 	sts	0x069C, r25
     dec:	80 93 9b 06 	sts	0x069B, r24
        modeStack[0] = mode;
     df0:	d0 93 88 06 	sts	0x0688, r29
     df4:	c0 93 87 06 	sts	0x0687, r28
        activate_mode(mode);
     df8:	ce 01       	movw	r24, r28
     dfa:	c1 de       	rcall	.-638    	; 0xb7e <_Z13activate_modei>
    }
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <setup>:
void setup() {
    /* ===============================================
     * INITIALIZE SERIAL DEBUGGING
    =============================================== */
    #ifdef SERIAL_DEBUG
        Serial.begin(38400);
     e02:	84 ed       	ldi	r24, 0xD4	; 212
     e04:	97 e0       	ldi	r25, 0x07	; 7
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	56 e9       	ldi	r21, 0x96	; 150
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <_ZN16USBVirtualSerial5beginEm>
        Serial.println("info Keyglove device activated");
     e12:	84 ed       	ldi	r24, 0xD4	; 212
     e14:	97 e0       	ldi	r25, 0x07	; 7
     e16:	65 ef       	ldi	r22, 0xF5	; 245
     e18:	71 e0       	ldi	r23, 0x01	; 1
     e1a:	0e 94 57 27 	call	0x4eae	; 0x4eae <_ZN16USBVirtualSerial7printlnEPKc>

    /* ===============================================
     * INITIALIZE TRICOLOR STATUS LED CONTROL
    =============================================== */
    #ifdef ENABLE_TRICOLOR
        pinMode(TRICOLOR_RED_PIN, OUTPUT);
     e1e:	8b e2       	ldi	r24, 0x2B	; 43
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
        pinMode(TRICOLOR_GREEN_PIN, OUTPUT);
     e26:	8c e2       	ldi	r24, 0x2C	; 44
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
        pinMode(TRICOLOR_BLUE_PIN, OUTPUT);
     e2e:	8d e2       	ldi	r24, 0x2D	; 45
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
        tricolor(1, 1, 1); // turn everything on and wait 1/10 sec
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	85 dc       	rcall	.-1782   	; 0x748 <_Z8tricolorhhh>
        delay(100);
     e3e:	64 e6       	ldi	r22, 0x64	; 100
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        tricolor(0, 0, 0); // turn everything off again
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	7b dc       	rcall	.-1802   	; 0x748 <_Z8tricolorhhh>

    /* ===============================================
     * INITIALIZE BLINK LED STATE
    =============================================== */
    #ifdef ENABLE_BLINK
        pinMode(BLINK_LED_PIN, OUTPUT);
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
        digitalWrite(BLINK_LED_PIN, LOW);
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
        blink_led = false;
     e62:	10 92 76 06 	sts	0x0676, r1
    /* ===============================================
     * INITIALIZE TOUCH SENSOR DIGITAL I/O PINS
    =============================================== */
    #ifdef ENABLE_TOUCH
        // make sure we enable internal pullup resistors
        for (i = 0; i < KG_TOTAL_SENSORS; i++) {
     e66:	10 92 90 04 	sts	0x0490, r1
     e6a:	10 92 91 04 	sts	0x0491, r1
     e6e:	10 92 92 04 	sts	0x0492, r1
     e72:	10 92 93 04 	sts	0x0493, r1
     e76:	28 c0       	rjmp	.+80     	; 0xec8 <setup+0xc6>
            pinMode(pins[i], INPUT);
     e78:	fc 01       	movw	r30, r24
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e2 53       	subi	r30, 0x32	; 50
     e80:	fd 4f       	sbci	r31, 0xFD	; 253
     e82:	80 81       	ld	r24, Z
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
            digitalWrite(pins[i], HIGH);
     e8a:	e0 91 90 04 	lds	r30, 0x0490
     e8e:	f0 91 91 04 	lds	r31, 0x0491
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	e2 53       	subi	r30, 0x32	; 50
     e98:	fd 4f       	sbci	r31, 0xFD	; 253
     e9a:	80 81       	ld	r24, Z
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
    /* ===============================================
     * INITIALIZE TOUCH SENSOR DIGITAL I/O PINS
    =============================================== */
    #ifdef ENABLE_TOUCH
        // make sure we enable internal pullup resistors
        for (i = 0; i < KG_TOTAL_SENSORS; i++) {
     ea2:	80 91 90 04 	lds	r24, 0x0490
     ea6:	90 91 91 04 	lds	r25, 0x0491
     eaa:	a0 91 92 04 	lds	r26, 0x0492
     eae:	b0 91 93 04 	lds	r27, 0x0493
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	a1 1d       	adc	r26, r1
     eb6:	b1 1d       	adc	r27, r1
     eb8:	80 93 90 04 	sts	0x0490, r24
     ebc:	90 93 91 04 	sts	0x0491, r25
     ec0:	a0 93 92 04 	sts	0x0492, r26
     ec4:	b0 93 93 04 	sts	0x0493, r27
     ec8:	80 91 90 04 	lds	r24, 0x0490
     ecc:	90 91 91 04 	lds	r25, 0x0491
     ed0:	a0 91 92 04 	lds	r26, 0x0492
     ed4:	b0 91 93 04 	lds	r27, 0x0493
     ed8:	82 32       	cpi	r24, 0x22	; 34
     eda:	91 05       	cpc	r25, r1
     edc:	a1 05       	cpc	r26, r1
     ede:	b1 05       	cpc	r27, r1
     ee0:	5c f2       	brlt	.-106    	; 0xe78 <setup+0x76>
            pinMode(pins[i], INPUT);
            digitalWrite(pins[i], HIGH);
        }
        mode = 0; // set to base mode, no alt/shift/mouse/prog
     ee2:	10 92 bb 06 	sts	0x06BB, r1
    /* ===============================================
     * INITIALIZE ACCELEROMETER INTERFACE
    =============================================== */
    #ifdef ENABLE_ACCEL
        // initialize accelerometer
        accel.powerOn();
     ee6:	8b eb       	ldi	r24, 0xBB	; 187
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <_ZN13Accelerometer7powerOnEv>
        accel.setRate(100);
     eee:	8b eb       	ldi	r24, 0xBB	; 187
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	68 ec       	ldi	r22, 0xC8	; 200
     ef8:	72 e4       	ldi	r23, 0x42	; 66
     efa:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <_ZN13Accelerometer7setRateEf>
        x = y = z = 0;
     efe:	10 92 d6 04 	sts	0x04D6, r1
     f02:	10 92 d5 04 	sts	0x04D5, r1
     f06:	10 92 d4 04 	sts	0x04D4, r1
     f0a:	10 92 d3 04 	sts	0x04D3, r1
     f0e:	10 92 d2 04 	sts	0x04D2, r1
     f12:	10 92 d1 04 	sts	0x04D1, r1
        cx = cy = cz = 0;
     f16:	10 92 f1 04 	sts	0x04F1, r1
     f1a:	10 92 f2 04 	sts	0x04F2, r1
     f1e:	10 92 f3 04 	sts	0x04F3, r1
     f22:	10 92 f4 04 	sts	0x04F4, r1
     f26:	10 92 ed 04 	sts	0x04ED, r1
     f2a:	10 92 ee 04 	sts	0x04EE, r1
     f2e:	10 92 ef 04 	sts	0x04EF, r1
     f32:	10 92 f0 04 	sts	0x04F0, r1
     f36:	10 92 e9 04 	sts	0x04E9, r1
     f3a:	10 92 ea 04 	sts	0x04EA, r1
     f3e:	10 92 eb 04 	sts	0x04EB, r1
     f42:	10 92 ec 04 	sts	0x04EC, r1
        ax = ay = az = 0;
     f46:	10 92 84 05 	sts	0x0584, r1
     f4a:	10 92 83 05 	sts	0x0583, r1
     f4e:	10 92 82 05 	sts	0x0582, r1
     f52:	10 92 81 05 	sts	0x0581, r1
     f56:	10 92 80 05 	sts	0x0580, r1
     f5a:	10 92 7f 05 	sts	0x057F, r1
        accelMicros = 0;
     f5e:	10 92 c1 04 	sts	0x04C1, r1
     f62:	10 92 c2 04 	sts	0x04C2, r1
     f66:	10 92 c3 04 	sts	0x04C3, r1
     f6a:	10 92 c4 04 	sts	0x04C4, r1
        accelTick = 0;
     f6e:	10 92 ca 04 	sts	0x04CA, r1
     f72:	10 92 c9 04 	sts	0x04C9, r1
        accelCalibrated = false;
     f76:	10 92 9a 05 	sts	0x059A, r1
        xMin = yMin = zMin = 0;
     f7a:	10 92 78 05 	sts	0x0578, r1
     f7e:	10 92 77 05 	sts	0x0577, r1
     f82:	10 92 76 05 	sts	0x0576, r1
     f86:	10 92 75 05 	sts	0x0575, r1
     f8a:	10 92 74 05 	sts	0x0574, r1
     f8e:	10 92 73 05 	sts	0x0573, r1
        xMax = yMax = zMax = 0;
     f92:	10 92 7e 05 	sts	0x057E, r1
     f96:	10 92 7d 05 	sts	0x057D, r1
     f9a:	10 92 7c 05 	sts	0x057C, r1
     f9e:	10 92 7b 05 	sts	0x057B, r1
     fa2:	10 92 7a 05 	sts	0x057A, r1
     fa6:	10 92 79 05 	sts	0x0579, r1
    /* ===============================================
     * INITIALIZE GYROSCOPE INTERFACE
    =============================================== */
    #ifdef ENABLE_GYRO
        // initialize gyroscope
        gyro.init(ITG3200_ADDR_AD0_LOW); 
     faa:	8b e9       	ldi	r24, 0x9B	; 155
     fac:	95 e0       	ldi	r25, 0x05	; 5
     fae:	68 e6       	ldi	r22, 0x68	; 104
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <_ZN7ITG32004initEj>
        gx = gy = gz = 0;
     fb6:	10 92 c9 05 	sts	0x05C9, r1
     fba:	10 92 c8 05 	sts	0x05C8, r1
     fbe:	10 92 c7 05 	sts	0x05C7, r1
     fc2:	10 92 c6 05 	sts	0x05C6, r1
     fc6:	10 92 c5 05 	sts	0x05C5, r1
     fca:	10 92 c4 05 	sts	0x05C4, r1
        gyroMicros = 0;
     fce:	10 92 b4 05 	sts	0x05B4, r1
     fd2:	10 92 b5 05 	sts	0x05B5, r1
     fd6:	10 92 b6 05 	sts	0x05B6, r1
     fda:	10 92 b7 05 	sts	0x05B7, r1
        gyroTick = 0;
     fde:	10 92 bd 05 	sts	0x05BD, r1
     fe2:	10 92 bc 05 	sts	0x05BC, r1
        gyroCalibrated = false;
     fe6:	10 92 6f 06 	sts	0x066F, r1
        gxMin = gyMin = gzMin = 0;
     fea:	10 92 65 06 	sts	0x0665, r1
     fee:	10 92 64 06 	sts	0x0664, r1
     ff2:	10 92 63 06 	sts	0x0663, r1
     ff6:	10 92 62 06 	sts	0x0662, r1
     ffa:	10 92 61 06 	sts	0x0661, r1
     ffe:	10 92 60 06 	sts	0x0660, r1
        gxMax = gyMax = gzMax = 0;
    1002:	10 92 6b 06 	sts	0x066B, r1
    1006:	10 92 6a 06 	sts	0x066A, r1
    100a:	10 92 69 06 	sts	0x0669, r1
    100e:	10 92 68 06 	sts	0x0668, r1
    1012:	10 92 67 06 	sts	0x0667, r1
    1016:	10 92 66 06 	sts	0x0666, r1
    #endif /* ENABLE_GYRO */

    mx = my = mz = mx0 = my0 = mz0 = 0;
    101a:	10 92 a3 04 	sts	0x04A3, r1
    101e:	10 92 a2 04 	sts	0x04A2, r1
    1022:	10 92 a1 04 	sts	0x04A1, r1
    1026:	10 92 a0 04 	sts	0x04A0, r1
    102a:	10 92 9f 04 	sts	0x049F, r1
    102e:	10 92 9e 04 	sts	0x049E, r1
    1032:	10 92 9b 04 	sts	0x049B, r1
    1036:	10 92 9a 04 	sts	0x049A, r1
    103a:	10 92 99 04 	sts	0x0499, r1
    103e:	10 92 98 04 	sts	0x0498, r1
    1042:	10 92 97 04 	sts	0x0497, r1
    1046:	10 92 96 04 	sts	0x0496, r1
    sy = sy0 = 0;
    104a:	10 92 a5 04 	sts	0x04A5, r1
    104e:	10 92 a4 04 	sts	0x04A4, r1
    1052:	10 92 9d 04 	sts	0x049D, r1
    1056:	10 92 9c 04 	sts	0x049C, r1

    /* ===============================================
     * INITIALIZE VIBRATION FEEDBACK
    =============================================== */
    #ifdef ENABLE_VIBRATE
        pinMode(VIBRATE_PIN, OUTPUT);
    105a:	89 e2       	ldi	r24, 0x29	; 41
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <pinMode>
        digitalWrite(VIBRATE_PIN, LOW);
    1062:	89 e2       	ldi	r24, 0x29	; 41
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
        delay(100);
    106a:	64 e6       	ldi	r22, 0x64	; 100
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        digitalWrite(VIBRATE_PIN, HIGH);
    1076:	89 e2       	ldi	r24, 0x29	; 41
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <digitalWrite>
    
    /* ===============================================
     * INITIALIZE AUDIO FEEDBACK
    =============================================== */
    #ifdef ENABLE_BEEP
        tone(SOUND_PIN, 1760, 25);
    107e:	8a e2       	ldi	r24, 0x2A	; 42
    1080:	60 ee       	ldi	r22, 0xE0	; 224
    1082:	76 e0       	ldi	r23, 0x06	; 6
    1084:	49 e1       	ldi	r20, 0x19	; 25
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	0e 94 01 2a 	call	0x5402	; 0x5402 <_Z4tonehjj>
        delay(100);
    108c:	64 e6       	ldi	r22, 0x64	; 100
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        tone(SOUND_PIN, 1760, 25);
    1098:	8a e2       	ldi	r24, 0x2A	; 42
    109a:	60 ee       	ldi	r22, 0xE0	; 224
    109c:	76 e0       	ldi	r23, 0x06	; 6
    109e:	49 e1       	ldi	r20, 0x19	; 25
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 01 2a 	call	0x5402	; 0x5402 <_Z4tonehjj>
    #endif /* ENABLE_BEEP */
    
    #ifdef ENABLE_TOUCH
        setmode(0); // default touchset mode is always 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	76 de       	rcall	.-788    	; 0xd98 <_Z7setmodei>
    #endif /* ENABLE_TOUCH */

    // initialize benchmark
    t = millis();
    10ac:	0e 94 39 35 	call	0x6a72	; 0x6a72 <millis>
    10b0:	60 93 8c 04 	sts	0x048C, r22
    10b4:	70 93 8d 04 	sts	0x048D, r23
    10b8:	80 93 8e 04 	sts	0x048E, r24
    10bc:	90 93 8f 04 	sts	0x048F, r25
}
    10c0:	08 95       	ret

000010c2 <_Z13modifierpressi>:
        } else {
            modifierdown(code);
        }
    }
    
    void modifierpress(int code) {
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	7c 01       	movw	r14, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset modifierpress ");
    10cc:	04 ed       	ldi	r16, 0xD4	; 212
    10ce:	17 e0       	ldi	r17, 0x07	; 7
    10d0:	c8 01       	movw	r24, r16
    10d2:	64 e1       	ldi	r22, 0x14	; 20
    10d4:	72 e0       	ldi	r23, 0x02	; 2
    10d6:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
    10da:	c8 01       	movw	r24, r16
    10dc:	b7 01       	movw	r22, r14
    10de:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        modifierdown(code);
    10e2:	c7 01       	movw	r24, r14
    10e4:	25 dd       	rcall	.-1462   	; 0xb30 <_Z12modifierdowni>
        delay(5);
    10e6:	65 e0       	ldi	r22, 0x05	; 5
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        modifierup(code);
    10f2:	c7 01       	movw	r24, r14
    10f4:	ee dc       	rcall	.-1572   	; 0xad2 <_Z10modifierupi>
    }
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <_Z14togglemodifieri>:
                RX400.send_now();
            #endif /* ENABLE_RX400 */
        }
    }
    
    void togglemodifier(int code) {
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset modifiertoggle ");
    1106:	84 ed       	ldi	r24, 0xD4	; 212
    1108:	97 e0       	ldi	r25, 0x07	; 7
    110a:	6c e2       	ldi	r22, 0x2C	; 44
    110c:	72 e0       	ldi	r23, 0x02	; 2
    110e:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
    1112:	84 ed       	ldi	r24, 0xD4	; 212
    1114:	97 e0       	ldi	r25, 0x07	; 7
    1116:	be 01       	movw	r22, r28
    1118:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if ((modifiersDown & code) > 0) {
    111c:	80 91 77 06 	lds	r24, 0x0677
    1120:	90 91 78 06 	lds	r25, 0x0678
    1124:	8c 23       	and	r24, r28
    1126:	9d 23       	and	r25, r29
    1128:	18 16       	cp	r1, r24
    112a:	19 06       	cpc	r1, r25
    112c:	1c f4       	brge	.+6      	; 0x1134 <_Z14togglemodifieri+0x34>
            modifierup(code);
    112e:	ce 01       	movw	r24, r28
    1130:	d0 dc       	rcall	.-1632   	; 0xad2 <_Z10modifierupi>
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <_Z14togglemodifieri+0x38>
        } else {
            modifierdown(code);
    1134:	ce 01       	movw	r24, r28
    1136:	fc dc       	rcall	.-1544   	; 0xb30 <_Z12modifierdowni>
        }
    }
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <_Z5keyupi>:
        #ifdef ENABLE_RX400
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
    
    void keyup(int code) {
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset keyup ");
    1144:	84 ed       	ldi	r24, 0xD4	; 212
    1146:	97 e0       	ldi	r25, 0x07	; 7
    1148:	65 e4       	ldi	r22, 0x45	; 69
    114a:	72 e0       	ldi	r23, 0x02	; 2
    114c:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
    1150:	84 ed       	ldi	r24, 0xD4	; 212
    1152:	97 e0       	ldi	r25, 0x07	; 7
    1154:	be 01       	movw	r22, r28
    1156:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
    115a:	e9 e7       	ldi	r30, 0x79	; 121
    115c:	f6 e0       	ldi	r31, 0x06	; 6
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <_Z5keyupi+0x34>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        int usePos = 0;
        for (usePos = 0; usePos < 6 && keysDown[usePos] != code; usePos++);
    1164:	2f 5f       	subi	r18, 0xFF	; 255
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	32 96       	adiw	r30, 0x02	; 2
    116a:	26 30       	cpi	r18, 0x06	; 6
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <_Z5keyupi+0x34>
    1170:	4a c0       	rjmp	.+148    	; 0x1206 <_Z5keyupi+0xc8>
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	8c 17       	cp	r24, r28
    1178:	9d 07       	cpc	r25, r29
    117a:	a1 f7       	brne	.-24     	; 0x1164 <_Z5keyupi+0x26>
        if (usePos == 6) return; // key not currently down...oops.
        keysDown[usePos] = 0;
    117c:	f9 01       	movw	r30, r18
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e7 58       	subi	r30, 0x87	; 135
    1184:	f9 4f       	sbci	r31, 0xF9	; 249
    1186:	11 82       	std	Z+1, r1	; 0x01
    1188:	10 82       	st	Z, r1
        switch (usePos) {
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	01 f1       	breq	.+64     	; 0x11d0 <_Z5keyupi+0x92>
    1190:	23 30       	cpi	r18, 0x03	; 3
    1192:	31 05       	cpc	r19, r1
    1194:	3c f4       	brge	.+14     	; 0x11a4 <_Z5keyupi+0x66>
    1196:	21 15       	cp	r18, r1
    1198:	31 05       	cpc	r19, r1
    119a:	71 f0       	breq	.+28     	; 0x11b8 <_Z5keyupi+0x7a>
    119c:	21 30       	cpi	r18, 0x01	; 1
    119e:	31 05       	cpc	r19, r1
    11a0:	71 f5       	brne	.+92     	; 0x11fe <_Z5keyupi+0xc0>
    11a2:	10 c0       	rjmp	.+32     	; 0x11c4 <_Z5keyupi+0x86>
    11a4:	24 30       	cpi	r18, 0x04	; 4
    11a6:	31 05       	cpc	r19, r1
    11a8:	f9 f0       	breq	.+62     	; 0x11e8 <_Z5keyupi+0xaa>
    11aa:	24 30       	cpi	r18, 0x04	; 4
    11ac:	31 05       	cpc	r19, r1
    11ae:	b4 f0       	brlt	.+44     	; 0x11dc <_Z5keyupi+0x9e>
    11b0:	25 30       	cpi	r18, 0x05	; 5
    11b2:	31 05       	cpc	r19, r1
    11b4:	21 f5       	brne	.+72     	; 0x11fe <_Z5keyupi+0xc0>
    11b6:	1e c0       	rjmp	.+60     	; 0x11f4 <_Z5keyupi+0xb6>
            case 0:
                #ifdef ENABLE_USB
                    Keyboard.set_key1(0);
    11b8:	8d ed       	ldi	r24, 0xDD	; 221
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN11USBKeyboard8set_key1Eh>
    11c2:	1d c0       	rjmp	.+58     	; 0x11fe <_Z5keyupi+0xc0>
                    RX400.set_key1(0);
                #endif /* ENABLE_RX400 */
                break;
            case 1:
                #ifdef ENABLE_USB
                    Keyboard.set_key2(0);
    11c4:	8d ed       	ldi	r24, 0xDD	; 221
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN11USBKeyboard8set_key2Eh>
    11ce:	17 c0       	rjmp	.+46     	; 0x11fe <_Z5keyupi+0xc0>
                    RX400.set_key2(0);
                #endif /* ENABLE_RX400 */
                break;
            case 2:
                #ifdef ENABLE_USB
                    Keyboard.set_key3(0);
    11d0:	8d ed       	ldi	r24, 0xDD	; 221
    11d2:	97 e0       	ldi	r25, 0x07	; 7
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN11USBKeyboard8set_key3Eh>
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <_Z5keyupi+0xc0>
                    RX400.set_key3(0);
                #endif /* ENABLE_RX400 */
                break;
            case 3:
                #ifdef ENABLE_USB
                    Keyboard.set_key4(0);
    11dc:	8d ed       	ldi	r24, 0xDD	; 221
    11de:	97 e0       	ldi	r25, 0x07	; 7
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_ZN11USBKeyboard8set_key4Eh>
    11e6:	0b c0       	rjmp	.+22     	; 0x11fe <_Z5keyupi+0xc0>
                    RX400.set_key4(0);
                #endif /* ENABLE_RX400 */
                break;
            case 4:
                #ifdef ENABLE_USB
                    Keyboard.set_key5(0);
    11e8:	8d ed       	ldi	r24, 0xDD	; 221
    11ea:	97 e0       	ldi	r25, 0x07	; 7
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <_ZN11USBKeyboard8set_key5Eh>
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <_Z5keyupi+0xc0>
                    RX400.set_key5(0);
                #endif /* ENABLE_RX400 */
                break;
            case 5:
                #ifdef ENABLE_USB
                    Keyboard.set_key6(0);
    11f4:	8d ed       	ldi	r24, 0xDD	; 221
    11f6:	97 e0       	ldi	r25, 0x07	; 7
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	0e 94 88 27 	call	0x4f10	; 0x4f10 <_ZN11USBKeyboard8set_key6Eh>
                    RX400.set_key6(0);
                #endif /* ENABLE_RX400 */
                break;
        }
        #ifdef ENABLE_USB
            Keyboard.send_now();
    11fe:	8d ed       	ldi	r24, 0xDD	; 221
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN11USBKeyboard8send_nowEv>
            bluetooth.send_now();
        #endif /* ENABLE_BLUETOOTH */
        #ifdef ENABLE_RX400
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <_Z7keydowni>:
        mousedown(button);
        delay(5);
        mouseup(button);
    }
    
    void keydown(int code) {
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	18 2f       	mov	r17, r24
    1212:	09 2f       	mov	r16, r25
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset keydown ");
    1214:	84 ed       	ldi	r24, 0xD4	; 212
    1216:	97 e0       	ldi	r25, 0x07	; 7
    1218:	65 e5       	ldi	r22, 0x55	; 85
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
    1220:	84 ed       	ldi	r24, 0xD4	; 212
    1222:	97 e0       	ldi	r25, 0x07	; 7
    1224:	61 2f       	mov	r22, r17
    1226:	70 2f       	mov	r23, r16
    1228:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
    122c:	e9 e7       	ldi	r30, 0x79	; 121
    122e:	f6 e0       	ldi	r31, 0x06	; 6
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <_Z7keydowni+0x38>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        int usePos = 0;
        for (usePos = 0; usePos < 6 && keysDown[usePos] != 0; usePos++);
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	32 96       	adiw	r30, 0x02	; 2
    123c:	26 30       	cpi	r18, 0x06	; 6
    123e:	31 05       	cpc	r19, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <_Z7keydowni+0x38>
    1242:	49 c0       	rjmp	.+146    	; 0x12d6 <_Z7keydowni+0xca>
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	89 2b       	or	r24, r25
    124a:	a9 f7       	brne	.-22     	; 0x1236 <_Z7keydowni+0x2a>
        if (usePos == 6) return; // out of HID keyboard buffer space, REALLY weird for the Keyglove!
        keysDown[usePos] = code;
    124c:	f9 01       	movw	r30, r18
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	e7 58       	subi	r30, 0x87	; 135
    1254:	f9 4f       	sbci	r31, 0xF9	; 249
    1256:	10 83       	st	Z, r17
    1258:	01 83       	std	Z+1, r16	; 0x01
        switch (usePos) {
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	01 f1       	breq	.+64     	; 0x12a0 <_Z7keydowni+0x94>
    1260:	23 30       	cpi	r18, 0x03	; 3
    1262:	31 05       	cpc	r19, r1
    1264:	3c f4       	brge	.+14     	; 0x1274 <_Z7keydowni+0x68>
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	71 f0       	breq	.+28     	; 0x1288 <_Z7keydowni+0x7c>
    126c:	21 30       	cpi	r18, 0x01	; 1
    126e:	31 05       	cpc	r19, r1
    1270:	71 f5       	brne	.+92     	; 0x12ce <_Z7keydowni+0xc2>
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <_Z7keydowni+0x88>
    1274:	24 30       	cpi	r18, 0x04	; 4
    1276:	31 05       	cpc	r19, r1
    1278:	f9 f0       	breq	.+62     	; 0x12b8 <_Z7keydowni+0xac>
    127a:	24 30       	cpi	r18, 0x04	; 4
    127c:	31 05       	cpc	r19, r1
    127e:	b4 f0       	brlt	.+44     	; 0x12ac <_Z7keydowni+0xa0>
    1280:	25 30       	cpi	r18, 0x05	; 5
    1282:	31 05       	cpc	r19, r1
    1284:	21 f5       	brne	.+72     	; 0x12ce <_Z7keydowni+0xc2>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <_Z7keydowni+0xb8>
            case 0:
                #ifdef ENABLE_USB
                    Keyboard.set_key1(code);
    1288:	8d ed       	ldi	r24, 0xDD	; 221
    128a:	97 e0       	ldi	r25, 0x07	; 7
    128c:	61 2f       	mov	r22, r17
    128e:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN11USBKeyboard8set_key1Eh>
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <_Z7keydowni+0xc2>
                    RX400.set_key1(code);
                #endif /* ENABLE_RX400 */
                break;
            case 1:
                #ifdef ENABLE_USB
                    Keyboard.set_key2(code);
    1294:	8d ed       	ldi	r24, 0xDD	; 221
    1296:	97 e0       	ldi	r25, 0x07	; 7
    1298:	61 2f       	mov	r22, r17
    129a:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <_ZN11USBKeyboard8set_key2Eh>
    129e:	17 c0       	rjmp	.+46     	; 0x12ce <_Z7keydowni+0xc2>
                    RX400.set_key2(code);
                #endif /* ENABLE_RX400 */
                break;
            case 2:
                #ifdef ENABLE_USB
                    Keyboard.set_key3(code);
    12a0:	8d ed       	ldi	r24, 0xDD	; 221
    12a2:	97 e0       	ldi	r25, 0x07	; 7
    12a4:	61 2f       	mov	r22, r17
    12a6:	0e 94 7f 27 	call	0x4efe	; 0x4efe <_ZN11USBKeyboard8set_key3Eh>
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <_Z7keydowni+0xc2>
                    RX400.set_key3(code);
                #endif /* ENABLE_RX400 */
                break;
            case 3:
                #ifdef ENABLE_USB
                    Keyboard.set_key4(code);
    12ac:	8d ed       	ldi	r24, 0xDD	; 221
    12ae:	97 e0       	ldi	r25, 0x07	; 7
    12b0:	61 2f       	mov	r22, r17
    12b2:	0e 94 82 27 	call	0x4f04	; 0x4f04 <_ZN11USBKeyboard8set_key4Eh>
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <_Z7keydowni+0xc2>
                    RX400.set_key4(code);
                #endif /* ENABLE_RX400 */
                break;
            case 4:
                #ifdef ENABLE_USB
                    Keyboard.set_key5(code);
    12b8:	8d ed       	ldi	r24, 0xDD	; 221
    12ba:	97 e0       	ldi	r25, 0x07	; 7
    12bc:	61 2f       	mov	r22, r17
    12be:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <_ZN11USBKeyboard8set_key5Eh>
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <_Z7keydowni+0xc2>
                    RX400.set_key5(code);
                #endif /* ENABLE_RX400 */
                break;
            case 5:
                #ifdef ENABLE_USB
                    Keyboard.set_key6(code);
    12c4:	8d ed       	ldi	r24, 0xDD	; 221
    12c6:	97 e0       	ldi	r25, 0x07	; 7
    12c8:	61 2f       	mov	r22, r17
    12ca:	0e 94 88 27 	call	0x4f10	; 0x4f10 <_ZN11USBKeyboard8set_key6Eh>
                    RX400.set_key6(code);
                #endif /* ENABLE_RX400 */
                break;
        }
        #ifdef ENABLE_USB
            Keyboard.send_now();
    12ce:	8d ed       	ldi	r24, 0xDD	; 221
    12d0:	97 e0       	ldi	r25, 0x07	; 7
    12d2:	0e 94 03 2a 	call	0x5406	; 0x5406 <_ZN11USBKeyboard8send_nowEv>
            bluetooth.send_now();
        #endif /* ENABLE_BLUETOOTH */
        #ifdef ENABLE_RX400
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <_Z8keypressi>:
        #ifdef ENABLE_RX400
            RX400.send_now();
        #endif /* ENABLE_RX400 */
    }
    
    void keypress(int code) {
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	7c 01       	movw	r14, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset keypress ");
    12e6:	04 ed       	ldi	r16, 0xD4	; 212
    12e8:	17 e0       	ldi	r17, 0x07	; 7
    12ea:	c8 01       	movw	r24, r16
    12ec:	67 e6       	ldi	r22, 0x67	; 103
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(code);
    12f4:	c8 01       	movw	r24, r16
    12f6:	b7 01       	movw	r22, r14
    12f8:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        keydown(code);
    12fc:	c7 01       	movw	r24, r14
    12fe:	86 df       	rcall	.-244    	; 0x120c <_Z7keydowni>
        delay(5);
    1300:	65 e0       	ldi	r22, 0x05	; 5
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        keyup(code);
    130c:	c7 01       	movw	r24, r14
    130e:	17 df       	rcall	.-466    	; 0x113e <_Z5keyupi>
    }
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <_Z7mouseupi>:
        #ifdef ENABLE_RX400
            RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
        #endif /* ENABLE_RX400 */
    }
    
    void mouseup(int button) {
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset mouseup ");
    1320:	84 ed       	ldi	r24, 0xD4	; 212
    1322:	97 e0       	ldi	r25, 0x07	; 7
    1324:	6a e7       	ldi	r22, 0x7A	; 122
    1326:	72 e0       	ldi	r23, 0x02	; 2
    1328:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(button);
    132c:	84 ed       	ldi	r24, 0xD4	; 212
    132e:	97 e0       	ldi	r25, 0x07	; 7
    1330:	be 01       	movw	r22, r28
    1332:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        if ((mouseDown & button) > 0) {
    1336:	20 91 85 06 	lds	r18, 0x0685
    133a:	30 91 86 06 	lds	r19, 0x0686
    133e:	ce 01       	movw	r24, r28
    1340:	82 23       	and	r24, r18
    1342:	93 23       	and	r25, r19
    1344:	18 16       	cp	r1, r24
    1346:	19 06       	cpc	r1, r25
    1348:	a4 f4       	brge	.+40     	; 0x1372 <_Z7mouseupi+0x58>
            mouseDown -= button;
    134a:	2c 1b       	sub	r18, r28
    134c:	3d 0b       	sbc	r19, r29
    134e:	30 93 86 06 	sts	0x0686, r19
    1352:	20 93 85 06 	sts	0x0685, r18
            #ifdef ENABLE_USB
                Mouse.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	20 fd       	sbrc	r18, 0
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	36 95       	lsr	r19
    135e:	27 95       	ror	r18
    1360:	42 2f       	mov	r20, r18
    1362:	41 70       	andi	r20, 0x01	; 1
    1364:	36 95       	lsr	r19
    1366:	27 95       	ror	r18
    1368:	21 70       	andi	r18, 0x01	; 1
    136a:	85 ed       	ldi	r24, 0xD5	; 213
    136c:	97 e0       	ldi	r25, 0x07	; 7
    136e:	0e 94 20 2a 	call	0x5440	; 0x5440 <_ZN8USBMouse11set_buttonsEhhh>
            #endif /* ENABLE_USB */
            #ifdef ENABLE_RX400
                RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
            #endif /* ENABLE_RX400 */
        }
    }
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <_Z21check_sensors_releasemmi>:
        check_sensors_touch(sensors1, sensors2, pos + 1);
        return;
    }
}
 
void check_sensors_release(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    1378:	4f 92       	push	r4
    137a:	5f 92       	push	r5
    137c:	6f 92       	push	r6
    137e:	7f 92       	push	r7
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	cc 54       	subi	r28, 0x4C	; 76
    139e:	d0 40       	sbci	r29, 0x00	; 0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
    13ae:	49 01       	movw	r8, r18
    13b0:	5a 01       	movw	r10, r20
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    13b2:	60 91 9b 06 	lds	r22, 0x069B
    13b6:	70 91 9c 06 	lds	r23, 0x069C
    13ba:	98 01       	movw	r18, r16
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    if ((sensors1 & KS1_Y7) == KS1_Y7 && (sensors2 & KS2_Y7) == KS2_Y7) {
    13c0:	d7 01       	movw	r26, r14
    13c2:	c6 01       	movw	r24, r12
    13c4:	82 70       	andi	r24, 0x02	; 2
    13c6:	90 70       	andi	r25, 0x00	; 0
    13c8:	a0 70       	andi	r26, 0x00	; 0
    13ca:	b0 70       	andi	r27, 0x00	; 0
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	ab 83       	std	Y+3, r26	; 0x03
    13d2:	bc 83       	std	Y+4, r27	; 0x04
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_JY) == KS1_JY && (sensors2 & KS2_JY) == KS2_JY) {
    13d4:	d7 01       	movw	r26, r14
    13d6:	c6 01       	movw	r24, r12
    13d8:	88 70       	andi	r24, 0x08	; 8
    13da:	90 70       	andi	r25, 0x00	; 0
    13dc:	a0 70       	andi	r26, 0x00	; 0
    13de:	b0 70       	andi	r27, 0x00	; 0
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	af 83       	std	Y+7, r26	; 0x07
    13e6:	b8 87       	std	Y+8, r27	; 0x08
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_KY) == KS1_KY && (sensors2 & KS2_KY) == KS2_KY) {
    13e8:	d7 01       	movw	r26, r14
    13ea:	c6 01       	movw	r24, r12
    13ec:	80 71       	andi	r24, 0x10	; 16
    13ee:	90 70       	andi	r25, 0x00	; 0
    13f0:	a0 70       	andi	r26, 0x00	; 0
    13f2:	b0 70       	andi	r27, 0x00	; 0
    13f4:	89 87       	std	Y+9, r24	; 0x09
    13f6:	9a 87       	std	Y+10, r25	; 0x0a
    13f8:	ab 87       	std	Y+11, r26	; 0x0b
    13fa:	bc 87       	std	Y+12, r27	; 0x0c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    13fc:	d7 01       	movw	r26, r14
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    13fe:	c6 01       	movw	r24, r12
    1400:	80 72       	andi	r24, 0x20	; 32
    1402:	90 70       	andi	r25, 0x00	; 0
    1404:	a0 70       	andi	r26, 0x00	; 0
    1406:	b0 70       	andi	r27, 0x00	; 0
    1408:	8d 87       	std	Y+13, r24	; 0x0d
    140a:	9e 87       	std	Y+14, r25	; 0x0e
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    140c:	af 87       	std	Y+15, r26	; 0x0f
    140e:	b8 8b       	std	Y+16, r27	; 0x10
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    1410:	d7 01       	movw	r26, r14
    1412:	c6 01       	movw	r24, r12
    1414:	80 74       	andi	r24, 0x40	; 64
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	a0 70       	andi	r26, 0x00	; 0
    141a:	b0 70       	andi	r27, 0x00	; 0
    141c:	89 8b       	std	Y+17, r24	; 0x11
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	ab 8b       	std	Y+19, r26	; 0x13
    1422:	bc 8b       	std	Y+20, r27	; 0x14
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_WY) == KS1_WY && (sensors2 & KS2_WY) == KS2_WY) {
    1424:	d7 01       	movw	r26, r14
    1426:	c6 01       	movw	r24, r12
    1428:	80 70       	andi	r24, 0x00	; 0
    142a:	91 70       	andi	r25, 0x01	; 1
    142c:	a0 70       	andi	r26, 0x00	; 0
    142e:	b0 70       	andi	r27, 0x00	; 0
    1430:	8d 8b       	std	Y+21, r24	; 0x15
    1432:	9e 8b       	std	Y+22, r25	; 0x16
    1434:	af 8b       	std	Y+23, r26	; 0x17
    1436:	b8 8f       	std	Y+24, r27	; 0x18
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_XY) == KS1_XY && (sensors2 & KS2_XY) == KS2_XY) {
    1438:	d7 01       	movw	r26, r14
    143a:	c6 01       	movw	r24, r12
    143c:	80 70       	andi	r24, 0x00	; 0
    143e:	92 70       	andi	r25, 0x02	; 2
    1440:	a0 70       	andi	r26, 0x00	; 0
    1442:	b0 70       	andi	r27, 0x00	; 0
    1444:	89 8f       	std	Y+25, r24	; 0x19
    1446:	9a 8f       	std	Y+26, r25	; 0x1a
    1448:	ab 8f       	std	Y+27, r26	; 0x1b
    144a:	bc 8f       	std	Y+28, r27	; 0x1c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_Y6) == KS1_Y6 && (sensors2 & KS2_Y6) == KS2_Y6) {
    144c:	d7 01       	movw	r26, r14
    144e:	c6 01       	movw	r24, r12
    1450:	80 70       	andi	r24, 0x00	; 0
    1452:	98 70       	andi	r25, 0x08	; 8
    1454:	a0 70       	andi	r26, 0x00	; 0
    1456:	b0 70       	andi	r27, 0x00	; 0
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
    145a:	9e 8f       	std	Y+30, r25	; 0x1e
    145c:	af 8f       	std	Y+31, r26	; 0x1f
    145e:	b8 a3       	std	Y+32, r27	; 0x20
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_GY) == KS1_GY && (sensors2 & KS2_GY) == KS2_GY) {
    1460:	d7 01       	movw	r26, r14
    1462:	c6 01       	movw	r24, r12
    1464:	80 70       	andi	r24, 0x00	; 0
    1466:	90 72       	andi	r25, 0x20	; 32
    1468:	a0 70       	andi	r26, 0x00	; 0
    146a:	b0 70       	andi	r27, 0x00	; 0
    146c:	89 a3       	std	Y+33, r24	; 0x21
    146e:	9a a3       	std	Y+34, r25	; 0x22
    1470:	ab a3       	std	Y+35, r26	; 0x23
    1472:	bc a3       	std	Y+36, r27	; 0x24
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_IY) == KS1_IY && (sensors2 & KS2_IY) == KS2_IY) {
    1474:	d7 01       	movw	r26, r14
    1476:	c6 01       	movw	r24, r12
    1478:	80 70       	andi	r24, 0x00	; 0
    147a:	90 74       	andi	r25, 0x40	; 64
    147c:	a0 70       	andi	r26, 0x00	; 0
    147e:	b0 70       	andi	r27, 0x00	; 0
    1480:	8d a3       	std	Y+37, r24	; 0x25
    1482:	9e a3       	std	Y+38, r25	; 0x26
    1484:	af a3       	std	Y+39, r26	; 0x27
    1486:	b8 a7       	std	Y+40, r27	; 0x28
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_TY) == KS1_TY && (sensors2 & KS2_TY) == KS2_TY) {
    1488:	d7 01       	movw	r26, r14
    148a:	c6 01       	movw	r24, r12
    148c:	80 70       	andi	r24, 0x00	; 0
    148e:	90 70       	andi	r25, 0x00	; 0
    1490:	a1 70       	andi	r26, 0x01	; 1
    1492:	b0 70       	andi	r27, 0x00	; 0
    1494:	89 a7       	std	Y+41, r24	; 0x29
    1496:	9a a7       	std	Y+42, r25	; 0x2a
    1498:	ab a7       	std	Y+43, r26	; 0x2b
    149a:	bc a7       	std	Y+44, r27	; 0x2c
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_UY) == KS1_UY && (sensors2 & KS2_UY) == KS2_UY) {
    149c:	d7 01       	movw	r26, r14
    149e:	c6 01       	movw	r24, r12
    14a0:	80 70       	andi	r24, 0x00	; 0
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	a2 70       	andi	r26, 0x02	; 2
    14a6:	b0 70       	andi	r27, 0x00	; 0
    14a8:	8d a7       	std	Y+45, r24	; 0x2d
    14aa:	9e a7       	std	Y+46, r25	; 0x2e
    14ac:	af a7       	std	Y+47, r26	; 0x2f
    14ae:	b8 ab       	std	Y+48, r27	; 0x30
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_Y5) == KS1_Y5 && (sensors2 & KS2_Y5) == KS2_Y5 && modeCheck(KMODE_DEFAULT, pos)) {
    14b0:	d7 01       	movw	r26, r14
    14b2:	c6 01       	movw	r24, r12
    14b4:	80 70       	andi	r24, 0x00	; 0
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	a0 71       	andi	r26, 0x10	; 16
    14ba:	b0 70       	andi	r27, 0x00	; 0
    14bc:	89 ab       	std	Y+49, r24	; 0x31
    14be:	9a ab       	std	Y+50, r25	; 0x32
    14c0:	ab ab       	std	Y+51, r26	; 0x33
    14c2:	bc ab       	std	Y+52, r27	; 0x34
        keypress(KEY_V);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    14c4:	d7 01       	movw	r26, r14
    14c6:	c6 01       	movw	r24, r12
    14c8:	80 70       	andi	r24, 0x00	; 0
    14ca:	90 70       	andi	r25, 0x00	; 0
    14cc:	a0 72       	andi	r26, 0x20	; 32
    14ce:	b0 70       	andi	r27, 0x00	; 0
    14d0:	8d ab       	std	Y+53, r24	; 0x35
    14d2:	9e ab       	std	Y+54, r25	; 0x36
    14d4:	af ab       	std	Y+55, r26	; 0x37
    14d6:	b8 af       	std	Y+56, r27	; 0x38
        mouseoff(KMOUSE_SCROLL);
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
    14d8:	d7 01       	movw	r26, r14
    14da:	c6 01       	movw	r24, r12
    14dc:	80 70       	andi	r24, 0x00	; 0
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	a0 74       	andi	r26, 0x40	; 64
    14e2:	b0 70       	andi	r27, 0x00	; 0
    14e4:	89 af       	std	Y+57, r24	; 0x39
    14e6:	9a af       	std	Y+58, r25	; 0x3a
    14e8:	ab af       	std	Y+59, r26	; 0x3b
    14ea:	bc af       	std	Y+60, r27	; 0x3c
                modifierup(MODIFIERKEY_CTRL);
                modifierup(MODIFIERKEY_ALT);
                return;
             }
        }
    } else if ((sensors1 & KS1_EY) == KS1_EY && (sensors2 & KS2_EY) == KS2_EY) {
    14ec:	d7 01       	movw	r26, r14
    14ee:	c6 01       	movw	r24, r12
    14f0:	80 70       	andi	r24, 0x00	; 0
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	a0 78       	andi	r26, 0x80	; 128
    14f6:	b0 70       	andi	r27, 0x00	; 0
    14f8:	21 96       	adiw	r28, 0x01	; 1
    14fa:	8c af       	std	Y+60, r24	; 0x3c
    14fc:	9d af       	std	Y+61, r25	; 0x3d
    14fe:	ae af       	std	Y+62, r26	; 0x3e
    1500:	bf af       	std	Y+63, r27	; 0x3f
    1502:	21 97       	sbiw	r28, 0x01	; 1
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_FY) == KS1_FY && (sensors2 & KS2_FY) == KS2_FY) {
    1504:	d7 01       	movw	r26, r14
    1506:	c6 01       	movw	r24, r12
    1508:	80 70       	andi	r24, 0x00	; 0
    150a:	90 70       	andi	r25, 0x00	; 0
    150c:	a0 70       	andi	r26, 0x00	; 0
    150e:	b1 70       	andi	r27, 0x01	; 1
    1510:	25 96       	adiw	r28, 0x05	; 5
    1512:	8c af       	std	Y+60, r24	; 0x3c
    1514:	9d af       	std	Y+61, r25	; 0x3d
    1516:	ae af       	std	Y+62, r26	; 0x3e
    1518:	bf af       	std	Y+63, r27	; 0x3f
    151a:	25 97       	sbiw	r28, 0x05	; 5
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_PY) == KS1_PY && (sensors2 & KS2_PY) == KS2_PY) {
    151c:	d7 01       	movw	r26, r14
    151e:	c6 01       	movw	r24, r12
    1520:	80 70       	andi	r24, 0x00	; 0
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	a0 70       	andi	r26, 0x00	; 0
    1526:	b4 70       	andi	r27, 0x04	; 4
    1528:	29 96       	adiw	r28, 0x09	; 9
    152a:	8c af       	std	Y+60, r24	; 0x3c
    152c:	9d af       	std	Y+61, r25	; 0x3d
    152e:	ae af       	std	Y+62, r26	; 0x3e
    1530:	bf af       	std	Y+63, r27	; 0x3f
    1532:	29 97       	sbiw	r28, 0x09	; 9
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_QY) == KS1_QY && (sensors2 & KS2_QY) == KS2_QY) {
    1534:	d7 01       	movw	r26, r14
    1536:	c6 01       	movw	r24, r12
    1538:	80 70       	andi	r24, 0x00	; 0
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	a0 70       	andi	r26, 0x00	; 0
    153e:	b0 71       	andi	r27, 0x10	; 16
    1540:	2d 96       	adiw	r28, 0x0d	; 13
    1542:	8c af       	std	Y+60, r24	; 0x3c
    1544:	9d af       	std	Y+61, r25	; 0x3d
    1546:	ae af       	std	Y+62, r26	; 0x3e
    1548:	bf af       	std	Y+63, r27	; 0x3f
    154a:	2d 97       	sbiw	r28, 0x0d	; 13
            modifierup(MODIFIERKEY_SHIFT);
            modifierup(MODIFIERKEY_CTRL);
            modifierup(MODIFIERKEY_ALT);
            return;
         }
    } else if ((sensors1 & KS1_RY) == KS1_RY && (sensors2 & KS2_RY) == KS2_RY) {
    154c:	41 2c       	mov	r4, r1
    154e:	51 2c       	mov	r5, r1
    1550:	61 2c       	mov	r6, r1
    1552:	f0 e4       	ldi	r31, 0x40	; 64
    1554:	7f 2e       	mov	r7, r31
    1556:	4c 20       	and	r4, r12
    1558:	5d 20       	and	r5, r13
    155a:	6e 20       	and	r6, r14
    155c:	7f 20       	and	r7, r15
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	9f e7       	ldi	r25, 0x7F	; 127
    1562:	28 9f       	mul	r18, r24
    1564:	80 01       	movw	r16, r0
    1566:	29 9f       	mul	r18, r25
    1568:	10 0d       	add	r17, r0
    156a:	38 9f       	mul	r19, r24
    156c:	10 0d       	add	r17, r0
    156e:	11 24       	eor	r1, r1
    1570:	06 0f       	add	r16, r22
    1572:	17 1f       	adc	r17, r23
    1574:	00 0f       	add	r16, r16
    1576:	11 1f       	adc	r17, r17
    1578:	09 57       	subi	r16, 0x79	; 121
    157a:	19 4f       	sbci	r17, 0xF9	; 249
        return;
    }
}
 
void check_sensors_release(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    if ((sensors1 & KS1_Y7) == KS1_Y7 && (sensors2 & KS2_Y7) == KS2_Y7) {
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	ab 81       	ldd	r26, Y+3	; 0x03
    1582:	bc 81       	ldd	r27, Y+4	; 0x04
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	a1 05       	cpc	r26, r1
    1588:	b1 05       	cpc	r27, r1
    158a:	99 f1       	breq	.+102    	; 0x15f2 <_Z21check_sensors_releasemmi+0x27a>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    158c:	62 17       	cp	r22, r18
    158e:	73 07       	cpc	r23, r19
    1590:	14 f4       	brge	.+4      	; 0x1596 <_Z21check_sensors_releasemmi+0x21e>
    1592:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1596:	f8 01       	movw	r30, r16
    1598:	e4 0f       	add	r30, r20
    159a:	f5 1f       	adc	r31, r21
    159c:	01 90       	ld	r0, Z+
    159e:	f0 81       	ld	r31, Z
    15a0:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	71 f4       	brne	.+28     	; 0x15c2 <_Z21check_sensors_releasemmi+0x24a>
            keypress(KEY_PERIOD);
    15a6:	87 e3       	ldi	r24, 0x37	; 55
    15a8:	90 e0       	ldi	r25, 0x00	; 0
            modifierup(MODIFIERKEY_SHIFT);
    15aa:	98 de       	rcall	.-720    	; 0x12dc <_Z8keypressi>
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	90 da       	rcall	.-2784   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	8d da       	rcall	.-2790   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	8a da       	rcall	.-2796   	; 0xad2 <_Z10modifierupi>
    15be:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    15c2:	e1 30       	cpi	r30, 0x01	; 1
    15c4:	f1 05       	cpc	r31, r1
    15c6:	39 f0       	breq	.+14     	; 0x15d6 <_Z21check_sensors_releasemmi+0x25e>
    15c8:	e2 30       	cpi	r30, 0x02	; 2
    15ca:	f1 05       	cpc	r31, r1
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <_Z21check_sensors_releasemmi+0x25e>
    15ce:	33 97       	sbiw	r30, 0x03	; 3
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <_Z21check_sensors_releasemmi+0x25e>
    15d2:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_ESC);
    15d6:	89 e2       	ldi	r24, 0x29	; 41
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 de       	rcall	.-768    	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	78 da       	rcall	.-2832   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	75 da       	rcall	.-2838   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	72 da       	rcall	.-2844   	; 0xad2 <_Z10modifierupi>
    15ee:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_JY) == KS1_JY && (sensors2 & KS2_JY) == KS2_JY) {
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	af 81       	ldd	r26, Y+7	; 0x07
    15f8:	b8 85       	ldd	r27, Y+8	; 0x08
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	a1 05       	cpc	r26, r1
    15fe:	b1 05       	cpc	r27, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <_Z21check_sensors_releasemmi+0x28c>
    1602:	b2 c0       	rjmp	.+356    	; 0x1768 <_Z21check_sensors_releasemmi+0x3f0>
        if ((sensors1 & KS1_GJY) == KS1_GJY && (sensors2 & KS2_GJY) == KS2_GJY) {
    1604:	d7 01       	movw	r26, r14
    1606:	c6 01       	movw	r24, r12
    1608:	88 70       	andi	r24, 0x08	; 8
    160a:	90 72       	andi	r25, 0x20	; 32
    160c:	a0 70       	andi	r26, 0x00	; 0
    160e:	b0 70       	andi	r27, 0x00	; 0
    1610:	88 50       	subi	r24, 0x08	; 8
    1612:	90 42       	sbci	r25, 0x20	; 32
    1614:	a0 40       	sbci	r26, 0x00	; 0
    1616:	b0 40       	sbci	r27, 0x00	; 0
    1618:	99 f5       	brne	.+102    	; 0x1680 <_Z21check_sensors_releasemmi+0x308>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    161a:	62 17       	cp	r22, r18
    161c:	73 07       	cpc	r23, r19
    161e:	14 f4       	brge	.+4      	; 0x1624 <_Z21check_sensors_releasemmi+0x2ac>
    1620:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1624:	f8 01       	movw	r30, r16
    1626:	e4 0f       	add	r30, r20
    1628:	f5 1f       	adc	r31, r21
    162a:	01 90       	ld	r0, Z+
    162c:	f0 81       	ld	r31, Z
    162e:	e0 2d       	mov	r30, r0
            if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1630:	30 97       	sbiw	r30, 0x00	; 0
    1632:	31 f0       	breq	.+12     	; 0x1640 <_Z21check_sensors_releasemmi+0x2c8>
    1634:	e2 30       	cpi	r30, 0x02	; 2
    1636:	f1 05       	cpc	r31, r1
    1638:	19 f0       	breq	.+6      	; 0x1640 <_Z21check_sensors_releasemmi+0x2c8>
    163a:	e3 30       	cpi	r30, 0x03	; 3
    163c:	f1 05       	cpc	r31, r1
    163e:	71 f4       	brne	.+28     	; 0x165c <_Z21check_sensors_releasemmi+0x2e4>
                keypress(KEY_ENTER);
    1640:	88 e2       	ldi	r24, 0x28	; 40
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	4b de       	rcall	.-874    	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	43 da       	rcall	.-2938   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    164c:	84 e0       	ldi	r24, 0x04	; 4
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	40 da       	rcall	.-2944   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	3d da       	rcall	.-2950   	; 0xad2 <_Z10modifierupi>
    1658:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	11 f0       	breq	.+4      	; 0x1664 <_Z21check_sensors_releasemmi+0x2ec>
    1660:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
                keypress(KEYPAD_ENTER);
    1664:	88 e5       	ldi	r24, 0x58	; 88
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	39 de       	rcall	.-910    	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	31 da       	rcall	.-2974   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	2e da       	rcall	.-2980   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	2b da       	rcall	.-2986   	; 0xad2 <_Z10modifierupi>
    167c:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             }
        } else if ((sensors1 & KS1_AJY) == KS1_AJY && (sensors2 & KS2_AJY) == KS2_AJY && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    1680:	87 fc       	sbrc	r8, 7
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <_Z21check_sensors_releasemmi+0x310>
    1684:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0xa43>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1688:	62 17       	cp	r22, r18
    168a:	73 07       	cpc	r23, r19
    168c:	14 f4       	brge	.+4      	; 0x1692 <_Z21check_sensors_releasemmi+0x31a>
    168e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1692:	f8 01       	movw	r30, r16
    1694:	e4 0f       	add	r30, r20
    1696:	f5 1f       	adc	r31, r21
    1698:	01 90       	ld	r0, Z+
    169a:	f0 81       	ld	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	30 97       	sbiw	r30, 0x00	; 0
    16a0:	41 f0       	breq	.+16     	; 0x16b2 <_Z21check_sensors_releasemmi+0x33a>
    16a2:	e1 30       	cpi	r30, 0x01	; 1
    16a4:	f1 05       	cpc	r31, r1
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <_Z21check_sensors_releasemmi+0x33a>
    16a8:	e2 30       	cpi	r30, 0x02	; 2
    16aa:	f1 05       	cpc	r31, r1
    16ac:	11 f0       	breq	.+4      	; 0x16b2 <_Z21check_sensors_releasemmi+0x33a>
    16ae:	33 97       	sbiw	r30, 0x03	; 3
    16b0:	71 f4       	brne	.+28     	; 0x16ce <_Z21check_sensors_releasemmi+0x356>
            keypress(KEY_TAB);
    16b2:	8b e2       	ldi	r24, 0x2B	; 43
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	12 de       	rcall	.-988    	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0a da       	rcall	.-3052   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	07 da       	rcall	.-3058   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	04 da       	rcall	.-3064   	; 0xad2 <_Z10modifierupi>
    16ca:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
    16ce:	f8 01       	movw	r30, r16
    16d0:	e4 0f       	add	r30, r20
    16d2:	f5 1f       	adc	r31, r21
    16d4:	01 90       	ld	r0, Z+
    16d6:	f0 81       	ld	r31, Z
    16d8:	e0 2d       	mov	r30, r0
            return;
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	71 f4       	brne	.+28     	; 0x16fa <_Z21check_sensors_releasemmi+0x382>
                keypress(KEY_S);
    16de:	86 e1       	ldi	r24, 0x16	; 22
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	fc dd       	rcall	.-1032   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	f4 d9       	rcall	.-3096   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    16ea:	84 e0       	ldi	r24, 0x04	; 4
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	f1 d9       	rcall	.-3102   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	ee d9       	rcall	.-3108   	; 0xad2 <_Z10modifierupi>
    16f6:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    16fa:	e1 30       	cpi	r30, 0x01	; 1
    16fc:	f1 05       	cpc	r31, r1
    16fe:	89 f4       	brne	.+34     	; 0x1722 <_Z21check_sensors_releasemmi+0x3aa>
                modifierdown(MODIFIERKEY_SHIFT);
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	15 da       	rcall	.-3030   	; 0xb30 <_Z12modifierdowni>
                keypress(KEY_3);
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	e8 dd       	rcall	.-1072   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	e0 d9       	rcall	.-3136   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	dd d9       	rcall	.-3142   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	da d9       	rcall	.-3148   	; 0xad2 <_Z10modifierupi>
    171e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1722:	e2 30       	cpi	r30, 0x02	; 2
    1724:	f1 05       	cpc	r31, r1
    1726:	71 f4       	brne	.+28     	; 0x1744 <_Z21check_sensors_releasemmi+0x3cc>
                keypress(KEY_SEMICOLON);
    1728:	83 e3       	ldi	r24, 0x33	; 51
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	d7 dd       	rcall	.-1106   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	cf d9       	rcall	.-3170   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	cc d9       	rcall	.-3176   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	c9 d9       	rcall	.-3182   	; 0xad2 <_Z10modifierupi>
    1740:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1744:	33 97       	sbiw	r30, 0x03	; 3
    1746:	11 f0       	breq	.+4      	; 0x174c <_Z21check_sensors_releasemmi+0x3d4>
    1748:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
                keypress(KEY_F10);
    174c:	83 e4       	ldi	r24, 0x43	; 67
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	c5 dd       	rcall	.-1142   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	bd d9       	rcall	.-3206   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1758:	84 e0       	ldi	r24, 0x04	; 4
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	ba d9       	rcall	.-3212   	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	b7 d9       	rcall	.-3218   	; 0xad2 <_Z10modifierupi>
    1764:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
                return;
             }
        }
    } else if ((sensors1 & KS1_KY) == KS1_KY && (sensors2 & KS2_KY) == KS2_KY) {
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	ab 85       	ldd	r26, Y+11	; 0x0b
    176e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	a1 05       	cpc	r26, r1
    1774:	b1 05       	cpc	r27, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <_Z21check_sensors_releasemmi+0x402>
    1778:	52 c0       	rjmp	.+164    	; 0x181e <_Z21check_sensors_releasemmi+0x4a6>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    177a:	62 17       	cp	r22, r18
    177c:	73 07       	cpc	r23, r19
    177e:	14 f4       	brge	.+4      	; 0x1784 <_Z21check_sensors_releasemmi+0x40c>
    1780:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1784:	f8 01       	movw	r30, r16
    1786:	e4 0f       	add	r30, r20
    1788:	f5 1f       	adc	r31, r21
    178a:	01 90       	ld	r0, Z+
    178c:	f0 81       	ld	r31, Z
    178e:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1790:	30 97       	sbiw	r30, 0x00	; 0
    1792:	71 f4       	brne	.+28     	; 0x17b0 <_Z21check_sensors_releasemmi+0x438>
            keypress(KEY_C);
    1794:	86 e0       	ldi	r24, 0x06	; 6
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a1 dd       	rcall	.-1214   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	99 d9       	rcall	.-3278   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	96 d9       	rcall	.-3284   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	93 d9       	rcall	.-3290   	; 0xad2 <_Z10modifierupi>
    17ac:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    17b0:	e1 30       	cpi	r30, 0x01	; 1
    17b2:	f1 05       	cpc	r31, r1
    17b4:	71 f4       	brne	.+28     	; 0x17d2 <_Z21check_sensors_releasemmi+0x45a>
            keypress(KEY_0);
    17b6:	87 e2       	ldi	r24, 0x27	; 39
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	90 dd       	rcall	.-1248   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	88 d9       	rcall	.-3312   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    17c2:	84 e0       	ldi	r24, 0x04	; 4
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	85 d9       	rcall	.-3318   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	82 d9       	rcall	.-3324   	; 0xad2 <_Z10modifierupi>
    17ce:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    17d2:	e2 30       	cpi	r30, 0x02	; 2
    17d4:	f1 05       	cpc	r31, r1
    17d6:	89 f4       	brne	.+34     	; 0x17fa <_Z21check_sensors_releasemmi+0x482>
            modifierdown(MODIFIERKEY_SHIFT);
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 d9       	rcall	.-3246   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_SEMICOLON);
    17de:	83 e3       	ldi	r24, 0x33	; 51
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	7c dd       	rcall	.-1288   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	74 d9       	rcall	.-3352   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	71 d9       	rcall	.-3358   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	6e d9       	rcall	.-3364   	; 0xad2 <_Z10modifierupi>
    17f6:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    17fa:	33 97       	sbiw	r30, 0x03	; 3
    17fc:	11 f0       	breq	.+4      	; 0x1802 <_Z21check_sensors_releasemmi+0x48a>
    17fe:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F11);
    1802:	84 e4       	ldi	r24, 0x44	; 68
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	6a dd       	rcall	.-1324   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	62 d9       	rcall	.-3388   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    180e:	84 e0       	ldi	r24, 0x04	; 4
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	5f d9       	rcall	.-3394   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	5c d9       	rcall	.-3400   	; 0xad2 <_Z10modifierupi>
    181a:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_LY) == KS1_LY && (sensors2 & KS2_LY) == KS2_LY) {
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	af 85       	ldd	r26, Y+15	; 0x0f
    1824:	b8 89       	ldd	r27, Y+16	; 0x10
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	a1 05       	cpc	r26, r1
    182a:	b1 05       	cpc	r27, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <_Z21check_sensors_releasemmi+0x4b8>
    182e:	55 c0       	rjmp	.+170    	; 0x18da <_Z21check_sensors_releasemmi+0x562>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1830:	62 17       	cp	r22, r18
    1832:	73 07       	cpc	r23, r19
    1834:	14 f4       	brge	.+4      	; 0x183a <_Z21check_sensors_releasemmi+0x4c2>
    1836:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    183a:	f8 01       	movw	r30, r16
    183c:	e4 0f       	add	r30, r20
    183e:	f5 1f       	adc	r31, r21
    1840:	01 90       	ld	r0, Z+
    1842:	f0 81       	ld	r31, Z
    1844:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1846:	30 97       	sbiw	r30, 0x00	; 0
    1848:	71 f4       	brne	.+28     	; 0x1866 <_Z21check_sensors_releasemmi+0x4ee>
            keypress(KEY_P);
    184a:	83 e1       	ldi	r24, 0x13	; 19
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	46 dd       	rcall	.-1396   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	3e d9       	rcall	.-3460   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	3b d9       	rcall	.-3466   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	38 d9       	rcall	.-3472   	; 0xad2 <_Z10modifierupi>
    1862:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1866:	e1 30       	cpi	r30, 0x01	; 1
    1868:	f1 05       	cpc	r31, r1
    186a:	89 f4       	brne	.+34     	; 0x188e <_Z21check_sensors_releasemmi+0x516>
            modifierdown(MODIFIERKEY_SHIFT);
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	5f d9       	rcall	.-3394   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_8);
    1872:	85 e2       	ldi	r24, 0x25	; 37
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	32 dd       	rcall	.-1436   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	2a d9       	rcall	.-3500   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	27 d9       	rcall	.-3506   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	24 d9       	rcall	.-3512   	; 0xad2 <_Z10modifierupi>
    188a:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    188e:	e2 30       	cpi	r30, 0x02	; 2
    1890:	f1 05       	cpc	r31, r1
    1892:	89 f4       	brne	.+34     	; 0x18b6 <_Z21check_sensors_releasemmi+0x53e>
            modifierdown(MODIFIERKEY_SHIFT);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	4b d9       	rcall	.-3434   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_TILDE);
    189a:	85 e3       	ldi	r24, 0x35	; 53
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	1e dd       	rcall	.-1476   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	16 d9       	rcall	.-3540   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	13 d9       	rcall	.-3546   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	10 d9       	rcall	.-3552   	; 0xad2 <_Z10modifierupi>
    18b2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    18b6:	33 97       	sbiw	r30, 0x03	; 3
    18b8:	11 f0       	breq	.+4      	; 0x18be <_Z21check_sensors_releasemmi+0x546>
    18ba:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F12);
    18be:	85 e4       	ldi	r24, 0x45	; 69
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0c dd       	rcall	.-1512   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	04 d9       	rcall	.-3576   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	01 d9       	rcall	.-3582   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	fe d8       	rcall	.-3588   	; 0xad2 <_Z10modifierupi>
    18d6:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_HY) == KS1_HY && (sensors2 & KS2_HY) == KS2_HY) {
    18da:	89 89       	ldd	r24, Y+17	; 0x11
    18dc:	9a 89       	ldd	r25, Y+18	; 0x12
    18de:	ab 89       	ldd	r26, Y+19	; 0x13
    18e0:	bc 89       	ldd	r27, Y+20	; 0x14
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	a1 05       	cpc	r26, r1
    18e6:	b1 05       	cpc	r27, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <_Z21check_sensors_releasemmi+0x574>
    18ea:	52 c0       	rjmp	.+164    	; 0x1990 <_Z21check_sensors_releasemmi+0x618>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    18ec:	62 17       	cp	r22, r18
    18ee:	73 07       	cpc	r23, r19
    18f0:	14 f4       	brge	.+4      	; 0x18f6 <_Z21check_sensors_releasemmi+0x57e>
    18f2:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    18f6:	f8 01       	movw	r30, r16
    18f8:	e4 0f       	add	r30, r20
    18fa:	f5 1f       	adc	r31, r21
    18fc:	01 90       	ld	r0, Z+
    18fe:	f0 81       	ld	r31, Z
    1900:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	71 f4       	brne	.+28     	; 0x1922 <_Z21check_sensors_releasemmi+0x5aa>
            keypress(KEY_L);
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	e8 dc       	rcall	.-1584   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	e0 d8       	rcall	.-3648   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1912:	84 e0       	ldi	r24, 0x04	; 4
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	dd d8       	rcall	.-3654   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	da d8       	rcall	.-3660   	; 0xad2 <_Z10modifierupi>
    191e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1922:	e1 30       	cpi	r30, 0x01	; 1
    1924:	f1 05       	cpc	r31, r1
    1926:	71 f4       	brne	.+28     	; 0x1944 <_Z21check_sensors_releasemmi+0x5cc>
            keypress(KEY_8);
    1928:	85 e2       	ldi	r24, 0x25	; 37
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	d7 dc       	rcall	.-1618   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	cf d8       	rcall	.-3682   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	cc d8       	rcall	.-3688   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	c9 d8       	rcall	.-3694   	; 0xad2 <_Z10modifierupi>
    1940:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1944:	e2 30       	cpi	r30, 0x02	; 2
    1946:	f1 05       	cpc	r31, r1
    1948:	89 f4       	brne	.+34     	; 0x196c <_Z21check_sensors_releasemmi+0x5f4>
            modifierdown(MODIFIERKEY_SHIFT);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	f0 d8       	rcall	.-3616   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_PERIOD);
    1950:	87 e3       	ldi	r24, 0x37	; 55
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	c3 dc       	rcall	.-1658   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	bb d8       	rcall	.-3722   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	b8 d8       	rcall	.-3728   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	b5 d8       	rcall	.-3734   	; 0xad2 <_Z10modifierupi>
    1968:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    196c:	33 97       	sbiw	r30, 0x03	; 3
    196e:	11 f0       	breq	.+4      	; 0x1974 <_Z21check_sensors_releasemmi+0x5fc>
    1970:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F8);
    1974:	81 e4       	ldi	r24, 0x41	; 65
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	b1 dc       	rcall	.-1694   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 d8       	rcall	.-3758   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a6 d8       	rcall	.-3764   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a3 d8       	rcall	.-3770   	; 0xad2 <_Z10modifierupi>
    198c:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_VY) == KS1_VY && (sensors2 & KS2_VY) == KS2_VY) {
    1990:	c7 fe       	sbrs	r12, 7
    1992:	3e c0       	rjmp	.+124    	; 0x1a10 <_Z21check_sensors_releasemmi+0x698>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1994:	62 17       	cp	r22, r18
    1996:	73 07       	cpc	r23, r19
    1998:	14 f4       	brge	.+4      	; 0x199e <_Z21check_sensors_releasemmi+0x626>
    199a:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    199e:	f8 01       	movw	r30, r16
    19a0:	e4 0f       	add	r30, r20
    19a2:	f5 1f       	adc	r31, r21
    19a4:	01 90       	ld	r0, Z+
    19a6:	f0 81       	ld	r31, Z
    19a8:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    19aa:	30 97       	sbiw	r30, 0x00	; 0
    19ac:	71 f4       	brne	.+28     	; 0x19ca <_Z21check_sensors_releasemmi+0x652>
            keypress(KEY_Q);
    19ae:	84 e1       	ldi	r24, 0x14	; 20
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	94 dc       	rcall	.-1752   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	8c d8       	rcall	.-3816   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	89 d8       	rcall	.-3822   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	86 d8       	rcall	.-3828   	; 0xad2 <_Z10modifierupi>
    19c6:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    19ca:	e1 30       	cpi	r30, 0x01	; 1
    19cc:	f1 05       	cpc	r31, r1
    19ce:	71 f4       	brne	.+28     	; 0x19ec <_Z21check_sensors_releasemmi+0x674>
            keypress(KEYPAD_PERIOD);
    19d0:	83 e6       	ldi	r24, 0x63	; 99
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	83 dc       	rcall	.-1786   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	7b d8       	rcall	.-3850   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    19dc:	84 e0       	ldi	r24, 0x04	; 4
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	78 d8       	rcall	.-3856   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	75 d8       	rcall	.-3862   	; 0xad2 <_Z10modifierupi>
    19e8:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    19ec:	32 97       	sbiw	r30, 0x02	; 2
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <_Z21check_sensors_releasemmi+0x67c>
    19f0:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_TILDE);
    19f4:	85 e3       	ldi	r24, 0x35	; 53
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	71 dc       	rcall	.-1822   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	69 d8       	rcall	.-3886   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	66 d8       	rcall	.-3892   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	63 d8       	rcall	.-3898   	; 0xad2 <_Z10modifierupi>
    1a0c:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_WY) == KS1_WY && (sensors2 & KS2_WY) == KS2_WY) {
    1a10:	8d 89       	ldd	r24, Y+21	; 0x15
    1a12:	9e 89       	ldd	r25, Y+22	; 0x16
    1a14:	af 89       	ldd	r26, Y+23	; 0x17
    1a16:	b8 8d       	ldd	r27, Y+24	; 0x18
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	a1 05       	cpc	r26, r1
    1a1c:	b1 05       	cpc	r27, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <_Z21check_sensors_releasemmi+0x6aa>
    1a20:	41 c0       	rjmp	.+130    	; 0x1aa4 <_Z21check_sensors_releasemmi+0x72c>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1a22:	62 17       	cp	r22, r18
    1a24:	73 07       	cpc	r23, r19
    1a26:	14 f4       	brge	.+4      	; 0x1a2c <_Z21check_sensors_releasemmi+0x6b4>
    1a28:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	e4 0f       	add	r30, r20
    1a30:	f5 1f       	adc	r31, r21
    1a32:	01 90       	ld	r0, Z+
    1a34:	f0 81       	ld	r31, Z
    1a36:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1a38:	30 97       	sbiw	r30, 0x00	; 0
    1a3a:	71 f4       	brne	.+28     	; 0x1a58 <_Z21check_sensors_releasemmi+0x6e0>
            keypress(KEY_Y);
    1a3c:	8c e1       	ldi	r24, 0x1C	; 28
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	4d dc       	rcall	.-1894   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	45 d8       	rcall	.-3958   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1a48:	84 e0       	ldi	r24, 0x04	; 4
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	42 d8       	rcall	.-3964   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	3f d8       	rcall	.-3970   	; 0xad2 <_Z10modifierupi>
    1a54:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1a58:	e2 30       	cpi	r30, 0x02	; 2
    1a5a:	f1 05       	cpc	r31, r1
    1a5c:	89 f4       	brne	.+34     	; 0x1a80 <_Z21check_sensors_releasemmi+0x708>
            modifierdown(MODIFIERKEY_SHIFT);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	66 d8       	rcall	.-3892   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_MINUS);
    1a64:	8d e2       	ldi	r24, 0x2D	; 45
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	39 dc       	rcall	.-1934   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	31 d8       	rcall	.-3998   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	2e d8       	rcall	.-4004   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	2b d8       	rcall	.-4010   	; 0xad2 <_Z10modifierupi>
    1a7c:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1a80:	33 97       	sbiw	r30, 0x03	; 3
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <_Z21check_sensors_releasemmi+0x710>
    1a84:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__stack+0xa17>
            keypress(KEY_INSERT);
    1a88:	89 e4       	ldi	r24, 0x49	; 73
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	27 dc       	rcall	.-1970   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	1f d8       	rcall	.-4034   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1a94:	84 e0       	ldi	r24, 0x04	; 4
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	1c d8       	rcall	.-4040   	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	19 d8       	rcall	.-4046   	; 0xad2 <_Z10modifierupi>
    1aa0:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_XY) == KS1_XY && (sensors2 & KS2_XY) == KS2_XY) {
    1aa4:	89 8d       	ldd	r24, Y+25	; 0x19
    1aa6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aa8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1aaa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	a1 05       	cpc	r26, r1
    1ab0:	b1 05       	cpc	r27, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <_Z21check_sensors_releasemmi+0x73e>
    1ab4:	49 c0       	rjmp	.+146    	; 0x1b48 <_Z21check_sensors_releasemmi+0x7d0>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1ab6:	62 17       	cp	r22, r18
    1ab8:	73 07       	cpc	r23, r19
    1aba:	14 f4       	brge	.+4      	; 0x1ac0 <_Z21check_sensors_releasemmi+0x748>
    1abc:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	e4 0f       	add	r30, r20
    1ac4:	f5 1f       	adc	r31, r21
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	f0 81       	ld	r31, Z
    1aca:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1acc:	30 97       	sbiw	r30, 0x00	; 0
    1ace:	89 f4       	brne	.+34     	; 0x1af2 <_Z21check_sensors_releasemmi+0x77a>
            keypress(KEY_X);
    1ad0:	8b e1       	ldi	r24, 0x1B	; 27
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	03 dc       	rcall	.-2042   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1ade:	84 e0       	ldi	r24, 0x04	; 4
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1aee:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1af2:	e2 30       	cpi	r30, 0x02	; 2
    1af4:	f1 05       	cpc	r31, r1
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <_Z21check_sensors_releasemmi+0x7a8>
            modifierdown(MODIFIERKEY_SHIFT);
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	19 d8       	rcall	.-4046   	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_BACKSLASH);
    1afe:	81 e3       	ldi	r24, 0x31	; 49
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	ec db       	rcall	.-2088   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1b1c:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1b20:	33 97       	sbiw	r30, 0x03	; 3
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <_Z21check_sensors_releasemmi+0x7ae>
    1b24:	f8 c7       	rjmp	.+4080   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_PRINTSCREEN);
    1b26:	86 e4       	ldi	r24, 0x46	; 70
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	d8 db       	rcall	.-2128   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1b44:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_Y6) == KS1_Y6 && (sensors2 & KS2_Y6) == KS2_Y6) {
    1b48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b4c:	af 8d       	ldd	r26, Y+31	; 0x1f
    1b4e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	a1 05       	cpc	r26, r1
    1b54:	b1 05       	cpc	r27, r1
    1b56:	b9 f1       	breq	.+110    	; 0x1bc6 <_Z21check_sensors_releasemmi+0x84e>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1b58:	62 17       	cp	r22, r18
    1b5a:	73 07       	cpc	r23, r19
    1b5c:	14 f4       	brge	.+4      	; 0x1b62 <_Z21check_sensors_releasemmi+0x7ea>
    1b5e:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1b62:	f8 01       	movw	r30, r16
    1b64:	e4 0f       	add	r30, r20
    1b66:	f5 1f       	adc	r31, r21
    1b68:	01 90       	ld	r0, Z+
    1b6a:	f0 81       	ld	r31, Z
    1b6c:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1b6e:	30 97       	sbiw	r30, 0x00	; 0
    1b70:	89 f4       	brne	.+34     	; 0x1b94 <_Z21check_sensors_releasemmi+0x81c>
            keypress(KEY_COMMA);
    1b72:	86 e3       	ldi	r24, 0x36	; 54
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	b2 db       	rcall	.-2204   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1b90:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1b94:	e1 30       	cpi	r30, 0x01	; 1
    1b96:	f1 05       	cpc	r31, r1
    1b98:	31 f0       	breq	.+12     	; 0x1ba6 <_Z21check_sensors_releasemmi+0x82e>
    1b9a:	e2 30       	cpi	r30, 0x02	; 2
    1b9c:	f1 05       	cpc	r31, r1
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <_Z21check_sensors_releasemmi+0x82e>
    1ba0:	33 97       	sbiw	r30, 0x03	; 3
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <_Z21check_sensors_releasemmi+0x82e>
    1ba4:	b8 c7       	rjmp	.+3952   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_DELETE);
    1ba6:	8c e4       	ldi	r24, 0x4C	; 76
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	98 db       	rcall	.-2256   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1bb4:	84 e0       	ldi	r24, 0x04	; 4
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1bc4:	e7 c7       	rjmp	.+4046   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_GY) == KS1_GY && (sensors2 & KS2_GY) == KS2_GY) {
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	ab a1       	ldd	r26, Y+35	; 0x23
    1bcc:	bc a1       	ldd	r27, Y+36	; 0x24
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	a1 05       	cpc	r26, r1
    1bd2:	b1 05       	cpc	r27, r1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <_Z21check_sensors_releasemmi+0x860>
    1bd6:	99 c0       	rjmp	.+306    	; 0x1d0a <_Z21check_sensors_releasemmi+0x992>
        if ((sensors1 & KS1_DGY) == KS1_DGY && (sensors2 & KS2_DGY) == KS2_DGY) {
    1bd8:	d7 01       	movw	r26, r14
    1bda:	c6 01       	movw	r24, r12
    1bdc:	80 70       	andi	r24, 0x00	; 0
    1bde:	90 72       	andi	r25, 0x20	; 32
    1be0:	a0 74       	andi	r26, 0x40	; 64
    1be2:	b0 70       	andi	r27, 0x00	; 0
    1be4:	80 50       	subi	r24, 0x00	; 0
    1be6:	90 42       	sbci	r25, 0x20	; 32
    1be8:	a0 44       	sbci	r26, 0x40	; 64
    1bea:	b0 40       	sbci	r27, 0x00	; 0
    1bec:	a9 f5       	brne	.+106    	; 0x1c58 <_Z21check_sensors_releasemmi+0x8e0>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1bee:	62 17       	cp	r22, r18
    1bf0:	73 07       	cpc	r23, r19
    1bf2:	0c f4       	brge	.+2      	; 0x1bf6 <_Z21check_sensors_releasemmi+0x87e>
    1bf4:	cf c7       	rjmp	.+3998   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	e4 0f       	add	r30, r20
    1bfa:	f5 1f       	adc	r31, r21
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	f0 81       	ld	r31, Z
    1c00:	e0 2d       	mov	r30, r0
            if (modeCheck(KMODE_DEFAULT, pos)) {
    1c02:	30 97       	sbiw	r30, 0x00	; 0
    1c04:	81 f4       	brne	.+32     	; 0x1c26 <_Z21check_sensors_releasemmi+0x8ae>
                keypress(KEY_BACKSPACE);
    1c06:	8a e2       	ldi	r24, 0x2A	; 42
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	68 db       	rcall	.-2352   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1c24:	b7 c7       	rjmp	.+3950   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    1c26:	e1 30       	cpi	r30, 0x01	; 1
    1c28:	f1 05       	cpc	r31, r1
    1c2a:	31 f0       	breq	.+12     	; 0x1c38 <_Z21check_sensors_releasemmi+0x8c0>
    1c2c:	e2 30       	cpi	r30, 0x02	; 2
    1c2e:	f1 05       	cpc	r31, r1
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <_Z21check_sensors_releasemmi+0x8c0>
    1c32:	33 97       	sbiw	r30, 0x03	; 3
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <_Z21check_sensors_releasemmi+0x8c0>
    1c36:	6f c7       	rjmp	.+3806   	; 0x2b16 <__stack+0xa17>
                keypress(KEY_SPACE);
    1c38:	8c e2       	ldi	r24, 0x2C	; 44
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	4f db       	rcall	.-2402   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1c46:	84 e0       	ldi	r24, 0x04	; 4
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1c56:	9e c7       	rjmp	.+3900   	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1c58:	62 17       	cp	r22, r18
    1c5a:	73 07       	cpc	r23, r19
    1c5c:	0c f4       	brge	.+2      	; 0x1c60 <_Z21check_sensors_releasemmi+0x8e8>
    1c5e:	9a c7       	rjmp	.+3892   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1c60:	f8 01       	movw	r30, r16
    1c62:	e4 0f       	add	r30, r20
    1c64:	f5 1f       	adc	r31, r21
    1c66:	01 90       	ld	r0, Z+
    1c68:	f0 81       	ld	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
                return;
             }
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    1c6c:	30 97       	sbiw	r30, 0x00	; 0
    1c6e:	81 f4       	brne	.+32     	; 0x1c90 <_Z21check_sensors_releasemmi+0x918>
                keypress(KEY_T);
    1c70:	87 e1       	ldi	r24, 0x17	; 23
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	33 db       	rcall	.-2458   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1c7e:	84 e0       	ldi	r24, 0x04	; 4
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1c8e:	82 c7       	rjmp	.+3844   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1c90:	e1 30       	cpi	r30, 0x01	; 1
    1c92:	f1 05       	cpc	r31, r1
    1c94:	81 f4       	brne	.+32     	; 0x1cb6 <_Z21check_sensors_releasemmi+0x93e>
                keypress(KEY_7);
    1c96:	84 e2       	ldi	r24, 0x24	; 36
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	20 db       	rcall	.-2496   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1cb4:	6f c7       	rjmp	.+3806   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1cb6:	e2 30       	cpi	r30, 0x02	; 2
    1cb8:	f1 05       	cpc	r31, r1
    1cba:	a1 f4       	brne	.+40     	; 0x1ce4 <_Z21check_sensors_releasemmi+0x96c>
                modifierdown(MODIFIERKEY_SHIFT);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
                keypress(KEY_COMMA);
    1cc4:	86 e3       	ldi	r24, 0x36	; 54
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	09 db       	rcall	.-2542   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1ce2:	58 c7       	rjmp	.+3760   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1ce4:	33 97       	sbiw	r30, 0x03	; 3
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <_Z21check_sensors_releasemmi+0x972>
    1ce8:	16 c7       	rjmp	.+3628   	; 0x2b16 <__stack+0xa17>
                keypress(KEY_F7);
    1cea:	80 e4       	ldi	r24, 0x40	; 64
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	f6 da       	rcall	.-2580   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    1cf8:	84 e0       	ldi	r24, 0x04	; 4
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1d08:	45 c7       	rjmp	.+3722   	; 0x2b94 <__stack+0xa95>
                return;
             }
        }
    } else if ((sensors1 & KS1_IY) == KS1_IY && (sensors2 & KS2_IY) == KS2_IY) {
    1d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0e:	af a1       	ldd	r26, Y+39	; 0x27
    1d10:	b8 a5       	ldd	r27, Y+40	; 0x28
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a1 05       	cpc	r26, r1
    1d16:	b1 05       	cpc	r27, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <_Z21check_sensors_releasemmi+0x9a4>
    1d1a:	55 c0       	rjmp	.+170    	; 0x1dc6 <_Z21check_sensors_releasemmi+0xa4e>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1d1c:	62 17       	cp	r22, r18
    1d1e:	73 07       	cpc	r23, r19
    1d20:	0c f4       	brge	.+2      	; 0x1d24 <_Z21check_sensors_releasemmi+0x9ac>
    1d22:	38 c7       	rjmp	.+3696   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1d24:	f8 01       	movw	r30, r16
    1d26:	e4 0f       	add	r30, r20
    1d28:	f5 1f       	adc	r31, r21
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	f0 81       	ld	r31, Z
    1d2e:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1d30:	30 97       	sbiw	r30, 0x00	; 0
    1d32:	81 f4       	brne	.+32     	; 0x1d54 <_Z21check_sensors_releasemmi+0x9dc>
            keypress(KEY_G);
    1d34:	8a e0       	ldi	r24, 0x0A	; 10
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	d1 da       	rcall	.-2654   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1d52:	20 c7       	rjmp	.+3648   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1d54:	e1 30       	cpi	r30, 0x01	; 1
    1d56:	f1 05       	cpc	r31, r1
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <_Z21check_sensors_releasemmi+0xa02>
            keypress(KEY_9);
    1d5a:	86 e2       	ldi	r24, 0x26	; 38
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	be da       	rcall	.-2692   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1d78:	0d c7       	rjmp	.+3610   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1d7a:	e2 30       	cpi	r30, 0x02	; 2
    1d7c:	f1 05       	cpc	r31, r1
    1d7e:	81 f4       	brne	.+32     	; 0x1da0 <_Z21check_sensors_releasemmi+0xa28>
            keypress(KEY_SLASH);
    1d80:	88 e3       	ldi	r24, 0x38	; 56
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	ab da       	rcall	.-2730   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1d9e:	fa c6       	rjmp	.+3572   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    1da0:	33 97       	sbiw	r30, 0x03	; 3
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <_Z21check_sensors_releasemmi+0xa2e>
    1da4:	b8 c6       	rjmp	.+3440   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F9);
    1da6:	82 e4       	ldi	r24, 0x42	; 66
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	98 da       	rcall	.-2768   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1dc4:	e7 c6       	rjmp	.+3534   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_SY) == KS1_SY && (sensors2 & KS2_SY) == KS2_SY) {
    1dc6:	c6 01       	movw	r24, r12
    1dc8:	80 70       	andi	r24, 0x00	; 0
    1dca:	90 78       	andi	r25, 0x80	; 128
    1dcc:	89 2b       	or	r24, r25
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <_Z21check_sensors_releasemmi+0xa5a>
    1dd0:	42 c0       	rjmp	.+132    	; 0x1e56 <_Z21check_sensors_releasemmi+0xade>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1dd2:	62 17       	cp	r22, r18
    1dd4:	73 07       	cpc	r23, r19
    1dd6:	0c f4       	brge	.+2      	; 0x1dda <_Z21check_sensors_releasemmi+0xa62>
    1dd8:	dd c6       	rjmp	.+3514   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1dda:	f8 01       	movw	r30, r16
    1ddc:	e4 0f       	add	r30, r20
    1dde:	f5 1f       	adc	r31, r21
    1de0:	01 90       	ld	r0, Z+
    1de2:	f0 81       	ld	r31, Z
    1de4:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1de6:	30 97       	sbiw	r30, 0x00	; 0
    1de8:	81 f4       	brne	.+32     	; 0x1e0a <_Z21check_sensors_releasemmi+0xa92>
            keypress(KEY_W);
    1dea:	8a e1       	ldi	r24, 0x1A	; 26
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	76 da       	rcall	.-2836   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1e08:	c5 c6       	rjmp	.+3466   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1e0a:	e1 30       	cpi	r30, 0x01	; 1
    1e0c:	f1 05       	cpc	r31, r1
    1e0e:	81 f4       	brne	.+32     	; 0x1e30 <_Z21check_sensors_releasemmi+0xab8>
            keypress(KEYPAD_EQUAL);
    1e10:	87 e6       	ldi	r24, 0x67	; 103
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	63 da       	rcall	.-2874   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1e2e:	b2 c6       	rjmp	.+3428   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1e30:	32 97       	sbiw	r30, 0x02	; 2
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <_Z21check_sensors_releasemmi+0xabe>
    1e34:	70 c6       	rjmp	.+3296   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_LEFT_BRACE);
    1e36:	8f e2       	ldi	r24, 0x2F	; 47
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	50 da       	rcall	.-2912   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1e54:	9f c6       	rjmp	.+3390   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_TY) == KS1_TY && (sensors2 & KS2_TY) == KS2_TY) {
    1e56:	89 a5       	ldd	r24, Y+41	; 0x29
    1e58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5a:	ab a5       	ldd	r26, Y+43	; 0x2b
    1e5c:	bc a5       	ldd	r27, Y+44	; 0x2c
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	a1 05       	cpc	r26, r1
    1e62:	b1 05       	cpc	r27, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <_Z21check_sensors_releasemmi+0xaf0>
    1e66:	46 c0       	rjmp	.+140    	; 0x1ef4 <_Z21check_sensors_releasemmi+0xb7c>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1e68:	62 17       	cp	r22, r18
    1e6a:	73 07       	cpc	r23, r19
    1e6c:	0c f4       	brge	.+2      	; 0x1e70 <_Z21check_sensors_releasemmi+0xaf8>
    1e6e:	92 c6       	rjmp	.+3364   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1e70:	f8 01       	movw	r30, r16
    1e72:	e4 0f       	add	r30, r20
    1e74:	f5 1f       	adc	r31, r21
    1e76:	01 90       	ld	r0, Z+
    1e78:	f0 81       	ld	r31, Z
    1e7a:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1e7c:	30 97       	sbiw	r30, 0x00	; 0
    1e7e:	81 f4       	brne	.+32     	; 0x1ea0 <_Z21check_sensors_releasemmi+0xb28>
            keypress(KEY_K);
    1e80:	8e e0       	ldi	r24, 0x0E	; 14
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	2b da       	rcall	.-2986   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1e8e:	84 e0       	ldi	r24, 0x04	; 4
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1e9e:	7a c6       	rjmp	.+3316   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1ea0:	e1 30       	cpi	r30, 0x01	; 1
    1ea2:	f1 05       	cpc	r31, r1
    1ea4:	a1 f4       	brne	.+40     	; 0x1ece <_Z21check_sensors_releasemmi+0xb56>
            modifierdown(MODIFIERKEY_SHIFT);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_6);
    1eae:	83 e2       	ldi	r24, 0x23	; 35
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	14 da       	rcall	.-3032   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1ebc:	84 e0       	ldi	r24, 0x04	; 4
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1ecc:	63 c6       	rjmp	.+3270   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1ece:	32 97       	sbiw	r30, 0x02	; 2
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <_Z21check_sensors_releasemmi+0xb5c>
    1ed2:	21 c6       	rjmp	.+3138   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_RIGHT_BRACE);
    1ed4:	80 e3       	ldi	r24, 0x30	; 48
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	01 da       	rcall	.-3070   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1ef2:	50 c6       	rjmp	.+3232   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_UY) == KS1_UY && (sensors2 & KS2_UY) == KS2_UY) {
    1ef4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef8:	af a5       	ldd	r26, Y+47	; 0x2f
    1efa:	b8 a9       	ldd	r27, Y+48	; 0x30
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	a1 05       	cpc	r26, r1
    1f00:	b1 05       	cpc	r27, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <_Z21check_sensors_releasemmi+0xb8e>
    1f04:	46 c0       	rjmp	.+140    	; 0x1f92 <_Z21check_sensors_releasemmi+0xc1a>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1f06:	62 17       	cp	r22, r18
    1f08:	73 07       	cpc	r23, r19
    1f0a:	0c f4       	brge	.+2      	; 0x1f0e <_Z21check_sensors_releasemmi+0xb96>
    1f0c:	43 c6       	rjmp	.+3206   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1f0e:	f8 01       	movw	r30, r16
    1f10:	e4 0f       	add	r30, r20
    1f12:	f5 1f       	adc	r31, r21
    1f14:	01 90       	ld	r0, Z+
    1f16:	f0 81       	ld	r31, Z
    1f18:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    1f1a:	30 97       	sbiw	r30, 0x00	; 0
    1f1c:	81 f4       	brne	.+32     	; 0x1f3e <_Z21check_sensors_releasemmi+0xbc6>
            keypress(KEY_Z);
    1f1e:	8d e1       	ldi	r24, 0x1D	; 29
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	dc d9       	rcall	.-3144   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1f2c:	84 e0       	ldi	r24, 0x04	; 4
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1f3c:	2b c6       	rjmp	.+3158   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    1f3e:	e1 30       	cpi	r30, 0x01	; 1
    1f40:	f1 05       	cpc	r31, r1
    1f42:	a1 f4       	brne	.+40     	; 0x1f6c <_Z21check_sensors_releasemmi+0xbf4>
            modifierdown(MODIFIERKEY_SHIFT);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_5);
    1f4c:	82 e2       	ldi	r24, 0x22	; 34
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	c5 d9       	rcall	.-3190   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1f5a:	84 e0       	ldi	r24, 0x04	; 4
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1f6a:	14 c6       	rjmp	.+3112   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    1f6c:	32 97       	sbiw	r30, 0x02	; 2
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <_Z21check_sensors_releasemmi+0xbfa>
    1f70:	d2 c5       	rjmp	.+2980   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_BACKSLASH);
    1f72:	81 e3       	ldi	r24, 0x31	; 49
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	b2 d9       	rcall	.-3228   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1f90:	01 c6       	rjmp	.+3074   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_Y5) == KS1_Y5 && (sensors2 & KS2_Y5) == KS2_Y5 && modeCheck(KMODE_DEFAULT, pos)) {
    1f92:	89 a9       	ldd	r24, Y+49	; 0x31
    1f94:	9a a9       	ldd	r25, Y+50	; 0x32
    1f96:	ab a9       	ldd	r26, Y+51	; 0x33
    1f98:	bc a9       	ldd	r27, Y+52	; 0x34
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	a1 05       	cpc	r26, r1
    1f9e:	b1 05       	cpc	r27, r1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <_Z21check_sensors_releasemmi+0xc2c>
    1fa2:	d5 c5       	rjmp	.+2986   	; 0x2b4e <__stack+0xa4f>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    1fa4:	62 17       	cp	r22, r18
    1fa6:	73 07       	cpc	r23, r19
    1fa8:	0c f4       	brge	.+2      	; 0x1fac <_Z21check_sensors_releasemmi+0xc34>
    1faa:	d1 c5       	rjmp	.+2978   	; 0x2b4e <__stack+0xa4f>
    1fac:	f8 01       	movw	r30, r16
    1fae:	e4 0f       	add	r30, r20
    1fb0:	f5 1f       	adc	r31, r21
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	89 2b       	or	r24, r25
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <_Z21check_sensors_releasemmi+0xc44>
    1fba:	c9 c5       	rjmp	.+2962   	; 0x2b4e <__stack+0xa4f>
        keypress(KEY_V);
    1fbc:	89 e1       	ldi	r24, 0x19	; 25
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	8d d9       	rcall	.-3302   	; 0x12dc <_Z8keypressi>
        modifierup(MODIFIERKEY_SHIFT);
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
        modifierup(MODIFIERKEY_CTRL);
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
        modifierup(MODIFIERKEY_ALT);
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    1fda:	dc c5       	rjmp	.+3000   	; 0x2b94 <__stack+0xa95>
    1fdc:	62 17       	cp	r22, r18
    1fde:	73 07       	cpc	r23, r19
    1fe0:	0c f4       	brge	.+2      	; 0x1fe4 <_Z21check_sensors_releasemmi+0xc6c>
    1fe2:	be c5       	rjmp	.+2940   	; 0x2b60 <__stack+0xa61>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	e4 0f       	add	r30, r20
    1fe8:	f5 1f       	adc	r31, r21
    1fea:	01 90       	ld	r0, Z+
    1fec:	f0 81       	ld	r31, Z
    1fee:	e0 2d       	mov	r30, r0
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    1ff0:	30 97       	sbiw	r30, 0x00	; 0
    1ff2:	49 f0       	breq	.+18     	; 0x2006 <_Z21check_sensors_releasemmi+0xc8e>
    1ff4:	e1 30       	cpi	r30, 0x01	; 1
    1ff6:	f1 05       	cpc	r31, r1
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <_Z21check_sensors_releasemmi+0xc8e>
    1ffa:	e2 30       	cpi	r30, 0x02	; 2
    1ffc:	f1 05       	cpc	r31, r1
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <_Z21check_sensors_releasemmi+0xc8e>
    2000:	33 97       	sbiw	r30, 0x03	; 3
    2002:	09 f0       	breq	.+2      	; 0x2006 <_Z21check_sensors_releasemmi+0xc8e>
    2004:	ad c5       	rjmp	.+2906   	; 0x2b60 <__stack+0xa61>
        mouseoff(KMOUSE_SCROLL);
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 be 03 	call	0x77c	; 0x77c <_Z8mouseoffi>
    200e:	c2 c5       	rjmp	.+2948   	; 0x2b94 <__stack+0xa95>
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
        if ((sensors1 & KS1_ADY) == KS1_ADY && (sensors2 & KS2_ADY) == KS2_ADY) {
    2010:	87 fe       	sbrs	r8, 7
    2012:	35 c0       	rjmp	.+106    	; 0x207e <_Z21check_sensors_releasemmi+0xd06>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2014:	62 17       	cp	r22, r18
    2016:	73 07       	cpc	r23, r19
    2018:	0c f4       	brge	.+2      	; 0x201c <_Z21check_sensors_releasemmi+0xca4>
    201a:	bc c5       	rjmp	.+2936   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    201c:	f8 01       	movw	r30, r16
    201e:	e4 0f       	add	r30, r20
    2020:	f5 1f       	adc	r31, r21
    2022:	01 90       	ld	r0, Z+
    2024:	f0 81       	ld	r31, Z
    2026:	e0 2d       	mov	r30, r0
            if (modeCheck(KMODE_DEFAULT, pos)) {
    2028:	30 97       	sbiw	r30, 0x00	; 0
    202a:	81 f4       	brne	.+32     	; 0x204c <_Z21check_sensors_releasemmi+0xcd4>
                keypress(KEY_SPACE);
    202c:	8c e2       	ldi	r24, 0x2C	; 44
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	55 d9       	rcall	.-3414   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    204a:	a4 c5       	rjmp	.+2888   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    204c:	e1 30       	cpi	r30, 0x01	; 1
    204e:	f1 05       	cpc	r31, r1
    2050:	31 f0       	breq	.+12     	; 0x205e <_Z21check_sensors_releasemmi+0xce6>
    2052:	e2 30       	cpi	r30, 0x02	; 2
    2054:	f1 05       	cpc	r31, r1
    2056:	19 f0       	breq	.+6      	; 0x205e <_Z21check_sensors_releasemmi+0xce6>
    2058:	33 97       	sbiw	r30, 0x03	; 3
    205a:	09 f0       	breq	.+2      	; 0x205e <_Z21check_sensors_releasemmi+0xce6>
    205c:	5c c5       	rjmp	.+2744   	; 0x2b16 <__stack+0xa17>
                keypress(KEY_BACKSPACE);
    205e:	8a e2       	ldi	r24, 0x2A	; 42
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	3c d9       	rcall	.-3464   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    207c:	8b c5       	rjmp	.+2838   	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    207e:	62 17       	cp	r22, r18
    2080:	73 07       	cpc	r23, r19
    2082:	0c f4       	brge	.+2      	; 0x2086 <_Z21check_sensors_releasemmi+0xd0e>
    2084:	87 c5       	rjmp	.+2830   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2086:	f8 01       	movw	r30, r16
    2088:	e4 0f       	add	r30, r20
    208a:	f5 1f       	adc	r31, r21
    208c:	01 90       	ld	r0, Z+
    208e:	f0 81       	ld	r31, Z
    2090:	e0 2d       	mov	r30, r0
                return;
             }
        } else {
             if (modeCheck(KMODE_DEFAULT, pos)) {
    2092:	30 97       	sbiw	r30, 0x00	; 0
    2094:	81 f4       	brne	.+32     	; 0x20b6 <_Z21check_sensors_releasemmi+0xd3e>
                keypress(KEY_H);
    2096:	8b e0       	ldi	r24, 0x0B	; 11
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	20 d9       	rcall	.-3520   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    20a4:	84 e0       	ldi	r24, 0x04	; 4
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    20b4:	6f c5       	rjmp	.+2782   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_NUMBERS, pos)) {
    20b6:	e1 30       	cpi	r30, 0x01	; 1
    20b8:	f1 05       	cpc	r31, r1
    20ba:	81 f4       	brne	.+32     	; 0x20dc <_Z21check_sensors_releasemmi+0xd64>
                keypress(KEY_4);
    20bc:	81 e2       	ldi	r24, 0x21	; 33
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0d d9       	rcall	.-3558   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    20ca:	84 e0       	ldi	r24, 0x04	; 4
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    20da:	5c c5       	rjmp	.+2744   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    20dc:	e2 30       	cpi	r30, 0x02	; 2
    20de:	f1 05       	cpc	r31, r1
    20e0:	a1 f4       	brne	.+40     	; 0x210a <__stack+0xb>
                modifierdown(MODIFIERKEY_SHIFT);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
                keypress(KEY_9);
    20ea:	86 e2       	ldi	r24, 0x26	; 38
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	f6 d8       	rcall	.-3604   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    20f8:	84 e0       	ldi	r24, 0x04	; 4
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2108:	45 c5       	rjmp	.+2698   	; 0x2b94 <__stack+0xa95>
                return;
             } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    210a:	33 97       	sbiw	r30, 0x03	; 3
    210c:	09 f0       	breq	.+2      	; 0x2110 <__stack+0x11>
    210e:	03 c5       	rjmp	.+2566   	; 0x2b16 <__stack+0xa17>
                keypress(KEY_F4);
    2110:	8d e3       	ldi	r24, 0x3D	; 61
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	e3 d8       	rcall	.-3642   	; 0x12dc <_Z8keypressi>
                modifierup(MODIFIERKEY_SHIFT);
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_CTRL);
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
                modifierup(MODIFIERKEY_ALT);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    212e:	32 c5       	rjmp	.+2660   	; 0x2b94 <__stack+0xa95>
                return;
             }
        }
    } else if ((sensors1 & KS1_EY) == KS1_EY && (sensors2 & KS2_EY) == KS2_EY) {
    2130:	21 96       	adiw	r28, 0x01	; 1
    2132:	8c ad       	ldd	r24, Y+60	; 0x3c
    2134:	9d ad       	ldd	r25, Y+61	; 0x3d
    2136:	ae ad       	ldd	r26, Y+62	; 0x3e
    2138:	bf ad       	ldd	r27, Y+63	; 0x3f
    213a:	21 97       	sbiw	r28, 0x01	; 1
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	a1 05       	cpc	r26, r1
    2140:	b1 05       	cpc	r27, r1
    2142:	09 f4       	brne	.+2      	; 0x2146 <__stack+0x47>
    2144:	59 c0       	rjmp	.+178    	; 0x21f8 <__stack+0xf9>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2146:	62 17       	cp	r22, r18
    2148:	73 07       	cpc	r23, r19
    214a:	0c f4       	brge	.+2      	; 0x214e <__stack+0x4f>
    214c:	23 c5       	rjmp	.+2630   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    214e:	f8 01       	movw	r30, r16
    2150:	e4 0f       	add	r30, r20
    2152:	f5 1f       	adc	r31, r21
    2154:	01 90       	ld	r0, Z+
    2156:	f0 81       	ld	r31, Z
    2158:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    215a:	30 97       	sbiw	r30, 0x00	; 0
    215c:	81 f4       	brne	.+32     	; 0x217e <__stack+0x7f>
            keypress(KEY_M);
    215e:	80 e1       	ldi	r24, 0x10	; 16
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	bc d8       	rcall	.-3720   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    217c:	0b c5       	rjmp	.+2582   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    217e:	e1 30       	cpi	r30, 0x01	; 1
    2180:	f1 05       	cpc	r31, r1
    2182:	81 f4       	brne	.+32     	; 0x21a4 <__stack+0xa5>
            keypress(KEY_5);
    2184:	82 e2       	ldi	r24, 0x22	; 34
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a9 d8       	rcall	.-3758   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2192:	84 e0       	ldi	r24, 0x04	; 4
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    21a2:	f8 c4       	rjmp	.+2544   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    21a4:	e2 30       	cpi	r30, 0x02	; 2
    21a6:	f1 05       	cpc	r31, r1
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <__stack+0xd3>
            modifierdown(MODIFIERKEY_SHIFT);
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_0);
    21b2:	87 e2       	ldi	r24, 0x27	; 39
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	92 d8       	rcall	.-3804   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    21c0:	84 e0       	ldi	r24, 0x04	; 4
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    21d0:	e1 c4       	rjmp	.+2498   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    21d2:	33 97       	sbiw	r30, 0x03	; 3
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <__stack+0xd9>
    21d6:	9f c4       	rjmp	.+2366   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F5);
    21d8:	8e e3       	ldi	r24, 0x3E	; 62
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	7f d8       	rcall	.-3842   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    21e6:	84 e0       	ldi	r24, 0x04	; 4
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    21f6:	ce c4       	rjmp	.+2460   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_FY) == KS1_FY && (sensors2 & KS2_FY) == KS2_FY) {
    21f8:	25 96       	adiw	r28, 0x05	; 5
    21fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    21fc:	9d ad       	ldd	r25, Y+61	; 0x3d
    21fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    2200:	bf ad       	ldd	r27, Y+63	; 0x3f
    2202:	25 97       	sbiw	r28, 0x05	; 5
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	a1 05       	cpc	r26, r1
    2208:	b1 05       	cpc	r27, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <__stack+0x10f>
    220c:	59 c0       	rjmp	.+178    	; 0x22c0 <__stack+0x1c1>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    220e:	62 17       	cp	r22, r18
    2210:	73 07       	cpc	r23, r19
    2212:	0c f4       	brge	.+2      	; 0x2216 <__stack+0x117>
    2214:	bf c4       	rjmp	.+2430   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2216:	f8 01       	movw	r30, r16
    2218:	e4 0f       	add	r30, r20
    221a:	f5 1f       	adc	r31, r21
    221c:	01 90       	ld	r0, Z+
    221e:	f0 81       	ld	r31, Z
    2220:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	81 f4       	brne	.+32     	; 0x2246 <__stack+0x147>
            keypress(KEY_B);
    2226:	85 e0       	ldi	r24, 0x05	; 5
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	58 d8       	rcall	.-3920   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2234:	84 e0       	ldi	r24, 0x04	; 4
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2244:	a7 c4       	rjmp	.+2382   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2246:	e1 30       	cpi	r30, 0x01	; 1
    2248:	f1 05       	cpc	r31, r1
    224a:	81 f4       	brne	.+32     	; 0x226c <__stack+0x16d>
            keypress(KEY_6);
    224c:	83 e2       	ldi	r24, 0x23	; 35
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	45 d8       	rcall	.-3958   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    225a:	84 e0       	ldi	r24, 0x04	; 4
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    226a:	94 c4       	rjmp	.+2344   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    226c:	e2 30       	cpi	r30, 0x02	; 2
    226e:	f1 05       	cpc	r31, r1
    2270:	a1 f4       	brne	.+40     	; 0x229a <__stack+0x19b>
            modifierdown(MODIFIERKEY_SHIFT);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_SLASH);
    227a:	88 e3       	ldi	r24, 0x38	; 56
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2e d8       	rcall	.-4004   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2280:	82 e0       	ldi	r24, 0x02	; 2
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2298:	7d c4       	rjmp	.+2298   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    229a:	33 97       	sbiw	r30, 0x03	; 3
    229c:	09 f0       	breq	.+2      	; 0x22a0 <__stack+0x1a1>
    229e:	3b c4       	rjmp	.+2166   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F6);
    22a0:	8f e3       	ldi	r24, 0x3F	; 63
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	1b d8       	rcall	.-4042   	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    22ae:	84 e0       	ldi	r24, 0x04	; 4
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    22be:	6a c4       	rjmp	.+2260   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_PY) == KS1_PY && (sensors2 & KS2_PY) == KS2_PY) {
    22c0:	29 96       	adiw	r28, 0x09	; 9
    22c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    22c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    22c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    22c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    22ca:	29 97       	sbiw	r28, 0x09	; 9
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	a1 05       	cpc	r26, r1
    22d0:	b1 05       	cpc	r27, r1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <__stack+0x1d7>
    22d4:	5d c0       	rjmp	.+186    	; 0x2390 <__stack+0x291>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    22d6:	62 17       	cp	r22, r18
    22d8:	73 07       	cpc	r23, r19
    22da:	0c f4       	brge	.+2      	; 0x22de <__stack+0x1df>
    22dc:	5b c4       	rjmp	.+2230   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    22de:	f8 01       	movw	r30, r16
    22e0:	e4 0f       	add	r30, r20
    22e2:	f5 1f       	adc	r31, r21
    22e4:	01 90       	ld	r0, Z+
    22e6:	f0 81       	ld	r31, Z
    22e8:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    22ea:	30 97       	sbiw	r30, 0x00	; 0
    22ec:	89 f4       	brne	.+34     	; 0x2310 <__stack+0x211>
            keypress(KEY_O);
    22ee:	82 e1       	ldi	r24, 0x12	; 18
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    22fe:	84 e0       	ldi	r24, 0x04	; 4
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    230e:	42 c4       	rjmp	.+2180   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2310:	e1 30       	cpi	r30, 0x01	; 1
    2312:	f1 05       	cpc	r31, r1
    2314:	89 f4       	brne	.+34     	; 0x2338 <__stack+0x239>
            keypress(KEYPAD_ASTERIX);
    2316:	85 e5       	ldi	r24, 0x55	; 85
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2336:	2e c4       	rjmp	.+2140   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2338:	e2 30       	cpi	r30, 0x02	; 2
    233a:	f1 05       	cpc	r31, r1
    233c:	a9 f4       	brne	.+42     	; 0x2368 <__stack+0x269>
            modifierdown(MODIFIERKEY_SHIFT);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_LEFT_BRACE);
    2346:	8f e2       	ldi	r24, 0x2F	; 47
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2366:	16 c4       	rjmp	.+2092   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    2368:	33 97       	sbiw	r30, 0x03	; 3
    236a:	09 f0       	breq	.+2      	; 0x236e <__stack+0x26f>
    236c:	d4 c3       	rjmp	.+1960   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_MUTE);
    236e:	8f e7       	ldi	r24, 0x7F	; 127
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    238e:	02 c4       	rjmp	.+2052   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_QY) == KS1_QY && (sensors2 & KS2_QY) == KS2_QY) {
    2390:	2d 96       	adiw	r28, 0x0d	; 13
    2392:	8c ad       	ldd	r24, Y+60	; 0x3c
    2394:	9d ad       	ldd	r25, Y+61	; 0x3d
    2396:	ae ad       	ldd	r26, Y+62	; 0x3e
    2398:	bf ad       	ldd	r27, Y+63	; 0x3f
    239a:	2d 97       	sbiw	r28, 0x0d	; 13
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	a1 05       	cpc	r26, r1
    23a0:	b1 05       	cpc	r27, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <__stack+0x2a7>
    23a4:	49 c0       	rjmp	.+146    	; 0x2438 <__stack+0x339>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    23a6:	62 17       	cp	r22, r18
    23a8:	73 07       	cpc	r23, r19
    23aa:	0c f4       	brge	.+2      	; 0x23ae <__stack+0x2af>
    23ac:	f3 c3       	rjmp	.+2022   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    23ae:	f8 01       	movw	r30, r16
    23b0:	e4 0f       	add	r30, r20
    23b2:	f5 1f       	adc	r31, r21
    23b4:	01 90       	ld	r0, Z+
    23b6:	f0 81       	ld	r31, Z
    23b8:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	89 f4       	brne	.+34     	; 0x23e0 <__stack+0x2e1>
            keypress(KEY_U);
    23be:	88 e1       	ldi	r24, 0x18	; 24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    23de:	da c3       	rjmp	.+1972   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    23e0:	e1 30       	cpi	r30, 0x01	; 1
    23e2:	f1 05       	cpc	r31, r1
    23e4:	89 f4       	brne	.+34     	; 0x2408 <__stack+0x309>
            keypress(KEYPAD_SLASH);
    23e6:	84 e5       	ldi	r24, 0x54	; 84
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    23f6:	84 e0       	ldi	r24, 0x04	; 4
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2406:	c6 c3       	rjmp	.+1932   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2408:	32 97       	sbiw	r30, 0x02	; 2
    240a:	09 f0       	breq	.+2      	; 0x240e <__stack+0x30f>
    240c:	84 c3       	rjmp	.+1800   	; 0x2b16 <__stack+0xa17>
            modifierdown(MODIFIERKEY_SHIFT);
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_RIGHT_BRACE);
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2436:	ae c3       	rjmp	.+1884   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_RY) == KS1_RY && (sensors2 & KS2_RY) == KS2_RY) {
    2438:	41 14       	cp	r4, r1
    243a:	51 04       	cpc	r5, r1
    243c:	61 04       	cpc	r6, r1
    243e:	71 04       	cpc	r7, r1
    2440:	a9 f1       	breq	.+106    	; 0x24ac <__stack+0x3ad>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2442:	62 17       	cp	r22, r18
    2444:	73 07       	cpc	r23, r19
    2446:	0c f4       	brge	.+2      	; 0x244a <__stack+0x34b>
    2448:	a5 c3       	rjmp	.+1866   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    244a:	f8 01       	movw	r30, r16
    244c:	e4 0f       	add	r30, r20
    244e:	f5 1f       	adc	r31, r21
    2450:	01 90       	ld	r0, Z+
    2452:	f0 81       	ld	r31, Z
    2454:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2456:	30 97       	sbiw	r30, 0x00	; 0
    2458:	89 f4       	brne	.+34     	; 0x247c <__stack+0x37d>
            keypress(KEY_D);
    245a:	87 e0       	ldi	r24, 0x07	; 7
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    246a:	84 e0       	ldi	r24, 0x04	; 4
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    247a:	8c c3       	rjmp	.+1816   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    247c:	32 97       	sbiw	r30, 0x02	; 2
    247e:	09 f0       	breq	.+2      	; 0x2482 <__stack+0x383>
    2480:	4a c3       	rjmp	.+1684   	; 0x2b16 <__stack+0xa17>
            modifierdown(MODIFIERKEY_SHIFT);
    2482:	82 e0       	ldi	r24, 0x02	; 2
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_1);
    248a:	8e e1       	ldi	r24, 0x1E	; 30
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    249a:	84 e0       	ldi	r24, 0x04	; 4
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    24aa:	74 c3       	rjmp	.+1768   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_Y4) == KS1_Y4 && (sensors2 & KS2_Y4) == KS2_Y4 && modeCheck(KMODE_DEFAULT, pos)) {
    24ac:	84 fe       	sbrs	r8, 4
    24ae:	62 c3       	rjmp	.+1732   	; 0x2b74 <__stack+0xa75>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    24b0:	62 17       	cp	r22, r18
    24b2:	73 07       	cpc	r23, r19
    24b4:	0c f4       	brge	.+2      	; 0x24b8 <__stack+0x3b9>
    24b6:	5e c3       	rjmp	.+1724   	; 0x2b74 <__stack+0xa75>
    24b8:	f8 01       	movw	r30, r16
    24ba:	e4 0f       	add	r30, r20
    24bc:	f5 1f       	adc	r31, r21
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	89 2b       	or	r24, r25
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <__stack+0x3c9>
    24c6:	56 c3       	rjmp	.+1708   	; 0x2b74 <__stack+0xa75>
        keypress(KEY_J);
    24c8:	8d e0       	ldi	r24, 0x0D	; 13
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
        modifierup(MODIFIERKEY_SHIFT);
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
        modifierup(MODIFIERKEY_CTRL);
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
        modifierup(MODIFIERKEY_ALT);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    24e8:	55 c3       	rjmp	.+1706   	; 0x2b94 <__stack+0xa95>
    24ea:	62 17       	cp	r22, r18
    24ec:	73 07       	cpc	r23, r19
    24ee:	0c f4       	brge	.+2      	; 0x24f2 <__stack+0x3f3>
    24f0:	43 c3       	rjmp	.+1670   	; 0x2b78 <__stack+0xa79>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    24f2:	f8 01       	movw	r30, r16
    24f4:	e4 0f       	add	r30, r20
    24f6:	f5 1f       	adc	r31, r21
    24f8:	01 90       	ld	r0, Z+
    24fa:	f0 81       	ld	r31, Z
    24fc:	e0 2d       	mov	r30, r0
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    24fe:	30 97       	sbiw	r30, 0x00	; 0
    2500:	49 f0       	breq	.+18     	; 0x2514 <__stack+0x415>
    2502:	e1 30       	cpi	r30, 0x01	; 1
    2504:	f1 05       	cpc	r31, r1
    2506:	31 f0       	breq	.+12     	; 0x2514 <__stack+0x415>
    2508:	e2 30       	cpi	r30, 0x02	; 2
    250a:	f1 05       	cpc	r31, r1
    250c:	19 f0       	breq	.+6      	; 0x2514 <__stack+0x415>
    250e:	33 97       	sbiw	r30, 0x03	; 3
    2510:	09 f0       	breq	.+2      	; 0x2514 <__stack+0x415>
    2512:	32 c3       	rjmp	.+1636   	; 0x2b78 <__stack+0xa79>
        mouseoff(KMOUSE_MOVE);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 be 03 	call	0x77c	; 0x77c <_Z8mouseoffi>
    251c:	3b c3       	rjmp	.+1654   	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    251e:	62 17       	cp	r22, r18
    2520:	73 07       	cpc	r23, r19
    2522:	0c f4       	brge	.+2      	; 0x2526 <__stack+0x427>
    2524:	37 c3       	rjmp	.+1646   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2526:	f8 01       	movw	r30, r16
    2528:	e4 0f       	add	r30, r20
    252a:	f5 1f       	adc	r31, r21
    252c:	01 90       	ld	r0, Z+
    252e:	f0 81       	ld	r31, Z
    2530:	e0 2d       	mov	r30, r0
        return;
    } else if ((sensors1 & KS1_MY) == KS1_MY && (sensors2 & KS2_MY) == KS2_MY) {
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2532:	30 97       	sbiw	r30, 0x00	; 0
    2534:	89 f4       	brne	.+34     	; 0x2558 <__stack+0x459>
            keypress(KEY_A);
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2556:	1e c3       	rjmp	.+1596   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2558:	e1 30       	cpi	r30, 0x01	; 1
    255a:	f1 05       	cpc	r31, r1
    255c:	89 f4       	brne	.+34     	; 0x2580 <__stack+0x481>
            keypress(KEYPAD_PLUS);
    255e:	87 e5       	ldi	r24, 0x57	; 87
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    256e:	84 e0       	ldi	r24, 0x04	; 4
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    257e:	0a c3       	rjmp	.+1556   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2580:	32 97       	sbiw	r30, 0x02	; 2
    2582:	09 f0       	breq	.+2      	; 0x2586 <__stack+0x487>
    2584:	c8 c2       	rjmp	.+1424   	; 0x2b16 <__stack+0xa17>
            modifierdown(MODIFIERKEY_SHIFT);
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_QUOTE);
    258e:	84 e3       	ldi	r24, 0x34	; 52
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    259e:	84 e0       	ldi	r24, 0x04	; 4
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    25ae:	f2 c2       	rjmp	.+1508   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_AY) == KS1_AY && (sensors2 & KS2_AY) == KS2_AY) {
    25b0:	87 fe       	sbrs	r8, 7
    25b2:	59 c0       	rjmp	.+178    	; 0x2666 <__stack+0x567>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    25b4:	62 17       	cp	r22, r18
    25b6:	73 07       	cpc	r23, r19
    25b8:	0c f4       	brge	.+2      	; 0x25bc <__stack+0x4bd>
    25ba:	ec c2       	rjmp	.+1496   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    25bc:	f8 01       	movw	r30, r16
    25be:	e4 0f       	add	r30, r20
    25c0:	f5 1f       	adc	r31, r21
    25c2:	01 90       	ld	r0, Z+
    25c4:	f0 81       	ld	r31, Z
    25c6:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    25c8:	30 97       	sbiw	r30, 0x00	; 0
    25ca:	89 f4       	brne	.+34     	; 0x25ee <__stack+0x4ef>
            keypress(KEY_R);
    25cc:	85 e1       	ldi	r24, 0x15	; 21
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    25ec:	d3 c2       	rjmp	.+1446   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    25ee:	e1 30       	cpi	r30, 0x01	; 1
    25f0:	f1 05       	cpc	r31, r1
    25f2:	89 f4       	brne	.+34     	; 0x2616 <__stack+0x517>
            keypress(KEY_1);
    25f4:	8e e1       	ldi	r24, 0x1E	; 30
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2604:	84 e0       	ldi	r24, 0x04	; 4
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2614:	bf c2       	rjmp	.+1406   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2616:	e2 30       	cpi	r30, 0x02	; 2
    2618:	f1 05       	cpc	r31, r1
    261a:	89 f4       	brne	.+34     	; 0x263e <__stack+0x53f>
            keypress(KEY_PERIOD);
    261c:	87 e3       	ldi	r24, 0x37	; 55
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    262c:	84 e0       	ldi	r24, 0x04	; 4
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    263c:	ab c2       	rjmp	.+1366   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    263e:	33 97       	sbiw	r30, 0x03	; 3
    2640:	09 f0       	breq	.+2      	; 0x2644 <__stack+0x545>
    2642:	69 c2       	rjmp	.+1234   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F1);
    2644:	8a e3       	ldi	r24, 0x3A	; 58
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2654:	84 e0       	ldi	r24, 0x04	; 4
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2664:	97 c2       	rjmp	.+1326   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_BY) == KS1_BY && (sensors2 & KS2_BY) == KS2_BY) {
    2666:	90 fe       	sbrs	r9, 0
    2668:	59 c0       	rjmp	.+178    	; 0x271c <__stack+0x61d>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    266a:	62 17       	cp	r22, r18
    266c:	73 07       	cpc	r23, r19
    266e:	0c f4       	brge	.+2      	; 0x2672 <__stack+0x573>
    2670:	91 c2       	rjmp	.+1314   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2672:	f8 01       	movw	r30, r16
    2674:	e4 0f       	add	r30, r20
    2676:	f5 1f       	adc	r31, r21
    2678:	01 90       	ld	r0, Z+
    267a:	f0 81       	ld	r31, Z
    267c:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    267e:	30 97       	sbiw	r30, 0x00	; 0
    2680:	89 f4       	brne	.+34     	; 0x26a4 <__stack+0x5a5>
            keypress(KEY_N);
    2682:	81 e1       	ldi	r24, 0x11	; 17
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2692:	84 e0       	ldi	r24, 0x04	; 4
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    26a2:	78 c2       	rjmp	.+1264   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    26a4:	e1 30       	cpi	r30, 0x01	; 1
    26a6:	f1 05       	cpc	r31, r1
    26a8:	89 f4       	brne	.+34     	; 0x26cc <__stack+0x5cd>
            keypress(KEY_2);
    26aa:	8f e1       	ldi	r24, 0x1F	; 31
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    26ca:	64 c2       	rjmp	.+1224   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    26cc:	e2 30       	cpi	r30, 0x02	; 2
    26ce:	f1 05       	cpc	r31, r1
    26d0:	89 f4       	brne	.+34     	; 0x26f4 <__stack+0x5f5>
            keypress(KEY_COMMA);
    26d2:	86 e3       	ldi	r24, 0x36	; 54
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    26f2:	50 c2       	rjmp	.+1184   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    26f4:	33 97       	sbiw	r30, 0x03	; 3
    26f6:	09 f0       	breq	.+2      	; 0x26fa <__stack+0x5fb>
    26f8:	0e c2       	rjmp	.+1052   	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F2);
    26fa:	8b e3       	ldi	r24, 0x3B	; 59
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    270a:	84 e0       	ldi	r24, 0x04	; 4
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    271a:	3c c2       	rjmp	.+1144   	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_CY) == KS1_CY && (sensors2 & KS2_CY) == KS2_CY) {
    271c:	91 fe       	sbrs	r9, 1
    271e:	5d c0       	rjmp	.+186    	; 0x27da <__stack+0x6db>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2720:	62 17       	cp	r22, r18
    2722:	73 07       	cpc	r23, r19
    2724:	0c f4       	brge	.+2      	; 0x2728 <__stack+0x629>
    2726:	36 c2       	rjmp	.+1132   	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2728:	f8 01       	movw	r30, r16
    272a:	e4 0f       	add	r30, r20
    272c:	f5 1f       	adc	r31, r21
    272e:	01 90       	ld	r0, Z+
    2730:	f0 81       	ld	r31, Z
    2732:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2734:	30 97       	sbiw	r30, 0x00	; 0
    2736:	89 f4       	brne	.+34     	; 0x275a <__stack+0x65b>
            keypress(KEY_F);
    2738:	89 e0       	ldi	r24, 0x09	; 9
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2748:	84 e0       	ldi	r24, 0x04	; 4
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2758:	1d c2       	rjmp	.+1082   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    275a:	e1 30       	cpi	r30, 0x01	; 1
    275c:	f1 05       	cpc	r31, r1
    275e:	89 f4       	brne	.+34     	; 0x2782 <__stack+0x683>
            keypress(KEY_3);
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2770:	84 e0       	ldi	r24, 0x04	; 4
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2780:	09 c2       	rjmp	.+1042   	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2782:	e2 30       	cpi	r30, 0x02	; 2
    2784:	f1 05       	cpc	r31, r1
    2786:	a9 f4       	brne	.+42     	; 0x27b2 <__stack+0x6b3>
            modifierdown(MODIFIERKEY_SHIFT);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_2);
    2790:	8f e1       	ldi	r24, 0x1F	; 31
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    27a0:	84 e0       	ldi	r24, 0x04	; 4
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    27b0:	f1 c1       	rjmp	.+994    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    27b2:	33 97       	sbiw	r30, 0x03	; 3
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__stack+0x6b9>
    27b6:	af c1       	rjmp	.+862    	; 0x2b16 <__stack+0xa17>
            keypress(KEY_F3);
    27b8:	8c e3       	ldi	r24, 0x3C	; 60
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    27c8:	84 e0       	ldi	r24, 0x04	; 4
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    27d8:	dd c1       	rjmp	.+954    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_NY) == KS1_NY && (sensors2 & KS2_NY) == KS2_NY) {
    27da:	94 fe       	sbrs	r9, 4
    27dc:	4d c0       	rjmp	.+154    	; 0x2878 <__stack+0x779>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    27de:	62 17       	cp	r22, r18
    27e0:	73 07       	cpc	r23, r19
    27e2:	0c f4       	brge	.+2      	; 0x27e6 <__stack+0x6e7>
    27e4:	d7 c1       	rjmp	.+942    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    27e6:	f8 01       	movw	r30, r16
    27e8:	e4 0f       	add	r30, r20
    27ea:	f5 1f       	adc	r31, r21
    27ec:	01 90       	ld	r0, Z+
    27ee:	f0 81       	ld	r31, Z
    27f0:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    27f2:	30 97       	sbiw	r30, 0x00	; 0
    27f4:	89 f4       	brne	.+34     	; 0x2818 <__stack+0x719>
            keypress(KEY_E);
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2806:	84 e0       	ldi	r24, 0x04	; 4
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2816:	be c1       	rjmp	.+892    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    2818:	e1 30       	cpi	r30, 0x01	; 1
    281a:	f1 05       	cpc	r31, r1
    281c:	89 f4       	brne	.+34     	; 0x2840 <__stack+0x741>
            keypress(KEYPAD_MINUS);
    281e:	86 e5       	ldi	r24, 0x56	; 86
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    283e:	aa c1       	rjmp	.+852    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2840:	e2 30       	cpi	r30, 0x02	; 2
    2842:	f1 05       	cpc	r31, r1
    2844:	89 f4       	brne	.+34     	; 0x2868 <__stack+0x769>
            keypress(KEY_QUOTE);
    2846:	84 e3       	ldi	r24, 0x34	; 52
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    2856:	84 e0       	ldi	r24, 0x04	; 4
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    2866:	96 c1       	rjmp	.+812    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    2868:	33 97       	sbiw	r30, 0x03	; 3
    286a:	09 f0       	breq	.+2      	; 0x286e <__stack+0x76f>
    286c:	54 c1       	rjmp	.+680    	; 0x2b16 <__stack+0xa17>
            modifierpress(MODIFIERKEY_GUI);
    286e:	88 e0       	ldi	r24, 0x08	; 8
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_Z13modifierpressi>
    2876:	8e c1       	rjmp	.+796    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_OY) == KS1_OY && (sensors2 & KS2_OY) == KS2_OY) {
    2878:	96 fe       	sbrs	r9, 6
    287a:	49 c0       	rjmp	.+146    	; 0x290e <__stack+0x80f>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    287c:	62 17       	cp	r22, r18
    287e:	73 07       	cpc	r23, r19
    2880:	0c f4       	brge	.+2      	; 0x2884 <__stack+0x785>
    2882:	88 c1       	rjmp	.+784    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2884:	f8 01       	movw	r30, r16
    2886:	e4 0f       	add	r30, r20
    2888:	f5 1f       	adc	r31, r21
    288a:	01 90       	ld	r0, Z+
    288c:	f0 81       	ld	r31, Z
    288e:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos)) {
    2890:	30 97       	sbiw	r30, 0x00	; 0
    2892:	89 f4       	brne	.+34     	; 0x28b6 <__stack+0x7b7>
            keypress(KEY_I);
    2894:	8c e0       	ldi	r24, 0x0C	; 12
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    28a4:	84 e0       	ldi	r24, 0x04	; 4
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    28b4:	6f c1       	rjmp	.+734    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    28b6:	e2 30       	cpi	r30, 0x02	; 2
    28b8:	f1 05       	cpc	r31, r1
    28ba:	a9 f4       	brne	.+42     	; 0x28e6 <__stack+0x7e7>
            modifierdown(MODIFIERKEY_SHIFT);
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z12modifierdowni>
            keypress(KEY_7);
    28c4:	84 e2       	ldi	r24, 0x24	; 36
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    28e4:	57 c1       	rjmp	.+686    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    28e6:	33 97       	sbiw	r30, 0x03	; 3
    28e8:	09 f0       	breq	.+2      	; 0x28ec <__stack+0x7ed>
    28ea:	15 c1       	rjmp	.+554    	; 0x2b16 <__stack+0xa17>
            keypress(KEY_APP);
    28ec:	85 e6       	ldi	r24, 0x65	; 101
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_Z8keypressi>
            modifierup(MODIFIERKEY_SHIFT);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_CTRL);
    28fc:	84 e0       	ldi	r24, 0x04	; 4
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
            modifierup(MODIFIERKEY_ALT);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z10modifierupi>
    290c:	43 c1       	rjmp	.+646    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_A3) == KS1_A3 && (sensors2 & KS2_A3) == KS2_A3) {
    290e:	c4 01       	movw	r24, r8
    2910:	80 70       	andi	r24, 0x00	; 0
    2912:	90 78       	andi	r25, 0x80	; 128
    2914:	89 2b       	or	r24, r25
    2916:	f9 f0       	breq	.+62     	; 0x2956 <__stack+0x857>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2918:	62 17       	cp	r22, r18
    291a:	73 07       	cpc	r23, r19
    291c:	0c f4       	brge	.+2      	; 0x2920 <__stack+0x821>
    291e:	3a c1       	rjmp	.+628    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2920:	f8 01       	movw	r30, r16
    2922:	e4 0f       	add	r30, r20
    2924:	f5 1f       	adc	r31, r21
    2926:	01 90       	ld	r0, Z+
    2928:	f0 81       	ld	r31, Z
    292a:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos)) {
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	31 f0       	breq	.+12     	; 0x293c <__stack+0x83d>
    2930:	e1 30       	cpi	r30, 0x01	; 1
    2932:	f1 05       	cpc	r31, r1
    2934:	19 f0       	breq	.+6      	; 0x293c <__stack+0x83d>
    2936:	e2 30       	cpi	r30, 0x02	; 2
    2938:	f1 05       	cpc	r31, r1
    293a:	29 f4       	brne	.+10     	; 0x2946 <__stack+0x847>
            setmode(KMODE_FUNCTIONS);
    293c:	83 e0       	ldi	r24, 0x03	; 3
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    2944:	27 c1       	rjmp	.+590    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_FUNCTIONS, pos)) {
    2946:	33 97       	sbiw	r30, 0x03	; 3
    2948:	09 f0       	breq	.+2      	; 0x294c <__stack+0x84d>
    294a:	e5 c0       	rjmp	.+458    	; 0x2b16 <__stack+0xa17>
            setmode(KMODE_DEFAULT);
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    2954:	1f c1       	rjmp	.+574    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_A2) == KS1_A2 && (sensors2 & KS2_A2) == KS2_A2) {
    2956:	a0 fe       	sbrs	r10, 0
    2958:	1f c0       	rjmp	.+62     	; 0x2998 <__stack+0x899>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    295a:	62 17       	cp	r22, r18
    295c:	73 07       	cpc	r23, r19
    295e:	0c f4       	brge	.+2      	; 0x2962 <__stack+0x863>
    2960:	19 c1       	rjmp	.+562    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2962:	f8 01       	movw	r30, r16
    2964:	e4 0f       	add	r30, r20
    2966:	f5 1f       	adc	r31, r21
    2968:	01 90       	ld	r0, Z+
    296a:	f0 81       	ld	r31, Z
    296c:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	31 f0       	breq	.+12     	; 0x297e <__stack+0x87f>
    2972:	e1 30       	cpi	r30, 0x01	; 1
    2974:	f1 05       	cpc	r31, r1
    2976:	19 f0       	breq	.+6      	; 0x297e <__stack+0x87f>
    2978:	e3 30       	cpi	r30, 0x03	; 3
    297a:	f1 05       	cpc	r31, r1
    297c:	29 f4       	brne	.+10     	; 0x2988 <__stack+0x889>
            setmode(KMODE_SYMBOLS);
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    2986:	06 c1       	rjmp	.+524    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_SYMBOLS, pos)) {
    2988:	32 97       	sbiw	r30, 0x02	; 2
    298a:	09 f0       	breq	.+2      	; 0x298e <__stack+0x88f>
    298c:	c4 c0       	rjmp	.+392    	; 0x2b16 <__stack+0xa17>
            setmode(KMODE_DEFAULT);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    2996:	fe c0       	rjmp	.+508    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_A1) == KS1_A1 && (sensors2 & KS2_A1) == KS2_A1) {
    2998:	a1 fe       	sbrs	r10, 1
    299a:	1f c0       	rjmp	.+62     	; 0x29da <__stack+0x8db>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    299c:	62 17       	cp	r22, r18
    299e:	73 07       	cpc	r23, r19
    29a0:	0c f4       	brge	.+2      	; 0x29a4 <__stack+0x8a5>
    29a2:	f8 c0       	rjmp	.+496    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    29a4:	f8 01       	movw	r30, r16
    29a6:	e4 0f       	add	r30, r20
    29a8:	f5 1f       	adc	r31, r21
    29aa:	01 90       	ld	r0, Z+
    29ac:	f0 81       	ld	r31, Z
    29ae:	e0 2d       	mov	r30, r0
        if (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos)) {
    29b0:	30 97       	sbiw	r30, 0x00	; 0
    29b2:	31 f0       	breq	.+12     	; 0x29c0 <__stack+0x8c1>
    29b4:	e2 30       	cpi	r30, 0x02	; 2
    29b6:	f1 05       	cpc	r31, r1
    29b8:	19 f0       	breq	.+6      	; 0x29c0 <__stack+0x8c1>
    29ba:	e3 30       	cpi	r30, 0x03	; 3
    29bc:	f1 05       	cpc	r31, r1
    29be:	29 f4       	brne	.+10     	; 0x29ca <__stack+0x8cb>
            setmode(KMODE_NUMBERS);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    29c8:	e5 c0       	rjmp	.+458    	; 0x2b94 <__stack+0xa95>
            return;
         } else if (modeCheck(KMODE_NUMBERS, pos)) {
    29ca:	31 97       	sbiw	r30, 0x01	; 1
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <__stack+0x8d1>
    29ce:	a3 c0       	rjmp	.+326    	; 0x2b16 <__stack+0xa17>
            setmode(KMODE_DEFAULT);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z7setmodei>
    29d8:	dd c0       	rjmp	.+442    	; 0x2b94 <__stack+0xa95>
            return;
         }
    } else if ((sensors1 & KS1_D3) == KS1_D3 && (sensors2 & KS2_D3) == KS2_D3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    29da:	a2 fe       	sbrs	r10, 2
    29dc:	d0 c0       	rjmp	.+416    	; 0x2b7e <__stack+0xa7f>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    29de:	62 17       	cp	r22, r18
    29e0:	73 07       	cpc	r23, r19
    29e2:	0c f4       	brge	.+2      	; 0x29e6 <__stack+0x8e7>
    29e4:	cc c0       	rjmp	.+408    	; 0x2b7e <__stack+0xa7f>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    29e6:	f8 01       	movw	r30, r16
    29e8:	e4 0f       	add	r30, r20
    29ea:	f5 1f       	adc	r31, r21
    29ec:	01 90       	ld	r0, Z+
    29ee:	f0 81       	ld	r31, Z
    29f0:	e0 2d       	mov	r30, r0
    29f2:	30 97       	sbiw	r30, 0x00	; 0
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <__stack+0x8f9>
    29f6:	ce c0       	rjmp	.+412    	; 0x2b94 <__stack+0xa95>
    29f8:	e1 30       	cpi	r30, 0x01	; 1
    29fa:	f1 05       	cpc	r31, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <__stack+0x901>
    29fe:	ca c0       	rjmp	.+404    	; 0x2b94 <__stack+0xa95>
    2a00:	e2 30       	cpi	r30, 0x02	; 2
    2a02:	f1 05       	cpc	r31, r1
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <__stack+0x909>
    2a06:	c6 c0       	rjmp	.+396    	; 0x2b94 <__stack+0xa95>
    2a08:	33 97       	sbiw	r30, 0x03	; 3
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <__stack+0x90f>
    2a0c:	c3 c0       	rjmp	.+390    	; 0x2b94 <__stack+0xa95>
    2a0e:	b7 c0       	rjmp	.+366    	; 0x2b7e <__stack+0xa7f>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2a10:	62 17       	cp	r22, r18
    2a12:	73 07       	cpc	r23, r19
    2a14:	0c f4       	brge	.+2      	; 0x2a18 <__stack+0x919>
    2a16:	b5 c0       	rjmp	.+362    	; 0x2b82 <__stack+0xa83>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2a18:	f8 01       	movw	r30, r16
    2a1a:	e4 0f       	add	r30, r20
    2a1c:	f5 1f       	adc	r31, r21
    2a1e:	01 90       	ld	r0, Z+
    2a20:	f0 81       	ld	r31, Z
    2a22:	e0 2d       	mov	r30, r0
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_ALT', )
        return;
    } else if ((sensors1 & KS1_D2) == KS1_D2 && (sensors2 & KS2_D2) == KS2_D2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2a24:	30 97       	sbiw	r30, 0x00	; 0
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <__stack+0x92b>
    2a28:	b5 c0       	rjmp	.+362    	; 0x2b94 <__stack+0xa95>
    2a2a:	e1 30       	cpi	r30, 0x01	; 1
    2a2c:	f1 05       	cpc	r31, r1
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <__stack+0x933>
    2a30:	b1 c0       	rjmp	.+354    	; 0x2b94 <__stack+0xa95>
    2a32:	e2 30       	cpi	r30, 0x02	; 2
    2a34:	f1 05       	cpc	r31, r1
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <__stack+0x93b>
    2a38:	ad c0       	rjmp	.+346    	; 0x2b94 <__stack+0xa95>
    2a3a:	33 97       	sbiw	r30, 0x03	; 3
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__stack+0x941>
    2a3e:	aa c0       	rjmp	.+340    	; 0x2b94 <__stack+0xa95>
    2a40:	a0 c0       	rjmp	.+320    	; 0x2b82 <__stack+0xa83>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2a42:	62 17       	cp	r22, r18
    2a44:	73 07       	cpc	r23, r19
    2a46:	0c f4       	brge	.+2      	; 0x2a4a <__stack+0x94b>
    2a48:	9e c0       	rjmp	.+316    	; 0x2b86 <__stack+0xa87>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	e4 0f       	add	r30, r20
    2a4e:	f5 1f       	adc	r31, r21
    2a50:	01 90       	ld	r0, Z+
    2a52:	f0 81       	ld	r31, Z
    2a54:	e0 2d       	mov	r30, r0
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_CTRL', )
        return;
    } else if ((sensors1 & KS1_D1) == KS1_D1 && (sensors2 & KS2_D1) == KS2_D1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2a56:	30 97       	sbiw	r30, 0x00	; 0
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <__stack+0x95d>
    2a5a:	9c c0       	rjmp	.+312    	; 0x2b94 <__stack+0xa95>
    2a5c:	e1 30       	cpi	r30, 0x01	; 1
    2a5e:	f1 05       	cpc	r31, r1
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <__stack+0x965>
    2a62:	98 c0       	rjmp	.+304    	; 0x2b94 <__stack+0xa95>
    2a64:	e2 30       	cpi	r30, 0x02	; 2
    2a66:	f1 05       	cpc	r31, r1
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__stack+0x96d>
    2a6a:	94 c0       	rjmp	.+296    	; 0x2b94 <__stack+0xa95>
    2a6c:	33 97       	sbiw	r30, 0x03	; 3
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <__stack+0x973>
    2a70:	91 c0       	rjmp	.+290    	; 0x2b94 <__stack+0xa95>
    2a72:	89 c0       	rjmp	.+274    	; 0x2b86 <__stack+0xa87>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2a74:	62 17       	cp	r22, r18
    2a76:	73 07       	cpc	r23, r19
    2a78:	0c f4       	brge	.+2      	; 0x2a7c <__stack+0x97d>
    2a7a:	87 c0       	rjmp	.+270    	; 0x2b8a <__stack+0xa8b>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	e4 0f       	add	r30, r20
    2a80:	f5 1f       	adc	r31, r21
    2a82:	01 90       	ld	r0, Z+
    2a84:	f0 81       	ld	r31, Z
    2a86:	e0 2d       	mov	r30, r0
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_SHIFT', )
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2a88:	30 97       	sbiw	r30, 0x00	; 0
    2a8a:	49 f0       	breq	.+18     	; 0x2a9e <__stack+0x99f>
    2a8c:	e1 30       	cpi	r30, 0x01	; 1
    2a8e:	f1 05       	cpc	r31, r1
    2a90:	31 f0       	breq	.+12     	; 0x2a9e <__stack+0x99f>
    2a92:	e2 30       	cpi	r30, 0x02	; 2
    2a94:	f1 05       	cpc	r31, r1
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <__stack+0x99f>
    2a98:	33 97       	sbiw	r30, 0x03	; 3
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <__stack+0x99f>
    2a9c:	76 c0       	rjmp	.+236    	; 0x2b8a <__stack+0xa8b>
        mouseup(KMOUSE_RIGHT);
    2a9e:	84 e0       	ldi	r24, 0x04	; 4
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 8d 09 	call	0x131a	; 0x131a <_Z7mouseupi>
    2aa6:	76 c0       	rjmp	.+236    	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2aa8:	62 17       	cp	r22, r18
    2aaa:	73 07       	cpc	r23, r19
    2aac:	0c f4       	brge	.+2      	; 0x2ab0 <__stack+0x9b1>
    2aae:	6f c0       	rjmp	.+222    	; 0x2b8e <__stack+0xa8f>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	e4 0f       	add	r30, r20
    2ab4:	f5 1f       	adc	r31, r21
    2ab6:	01 90       	ld	r0, Z+
    2ab8:	f0 81       	ld	r31, Z
    2aba:	e0 2d       	mov	r30, r0
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2abc:	30 97       	sbiw	r30, 0x00	; 0
    2abe:	49 f0       	breq	.+18     	; 0x2ad2 <__stack+0x9d3>
    2ac0:	e1 30       	cpi	r30, 0x01	; 1
    2ac2:	f1 05       	cpc	r31, r1
    2ac4:	31 f0       	breq	.+12     	; 0x2ad2 <__stack+0x9d3>
    2ac6:	e2 30       	cpi	r30, 0x02	; 2
    2ac8:	f1 05       	cpc	r31, r1
    2aca:	19 f0       	breq	.+6      	; 0x2ad2 <__stack+0x9d3>
    2acc:	33 97       	sbiw	r30, 0x03	; 3
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <__stack+0x9d3>
    2ad0:	5e c0       	rjmp	.+188    	; 0x2b8e <__stack+0xa8f>
        mouseup(KMOUSE_MIDDLE);
    2ad2:	82 e0       	ldi	r24, 0x02	; 2
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 8d 09 	call	0x131a	; 0x131a <_Z7mouseupi>
    2ada:	5c c0       	rjmp	.+184    	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2adc:	62 17       	cp	r22, r18
    2ade:	73 07       	cpc	r23, r19
    2ae0:	0c f4       	brge	.+2      	; 0x2ae4 <__stack+0x9e5>
    2ae2:	58 c0       	rjmp	.+176    	; 0x2b94 <__stack+0xa95>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	e4 0f       	add	r30, r20
    2ae8:	f5 1f       	adc	r31, r21
    2aea:	01 90       	ld	r0, Z+
    2aec:	f0 81       	ld	r31, Z
    2aee:	e0 2d       	mov	r30, r0
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2af0:	30 97       	sbiw	r30, 0x00	; 0
    2af2:	41 f0       	breq	.+16     	; 0x2b04 <__stack+0xa05>
    2af4:	e1 30       	cpi	r30, 0x01	; 1
    2af6:	f1 05       	cpc	r31, r1
    2af8:	29 f0       	breq	.+10     	; 0x2b04 <__stack+0xa05>
    2afa:	e2 30       	cpi	r30, 0x02	; 2
    2afc:	f1 05       	cpc	r31, r1
    2afe:	11 f0       	breq	.+4      	; 0x2b04 <__stack+0xa05>
    2b00:	33 97       	sbiw	r30, 0x03	; 3
    2b02:	49 f4       	brne	.+18     	; 0x2b16 <__stack+0xa17>
        mouseup(KMOUSE_LEFT);
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 8d 09 	call	0x131a	; 0x131a <_Z7mouseupi>
    2b0c:	43 c0       	rjmp	.+134    	; 0x2b94 <__stack+0xa95>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2b0e:	62 17       	cp	r22, r18
    2b10:	73 07       	cpc	r23, r19
    2b12:	0c f4       	brge	.+2      	; 0x2b16 <__stack+0xa17>
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <__stack+0xa95>
        check_sensors_touch(sensors1, sensors2, pos + 1);
        return;
    }
}
 
void check_sensors_release(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    2b16:	f8 01       	movw	r30, r16
    2b18:	e4 0f       	add	r30, r20
    2b1a:	f5 1f       	adc	r31, r21
        mouseup(KMOUSE_LEFT);
        return;
    }
 
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	04 97       	sbiw	r24, 0x04	; 4
    2b22:	c1 f5       	brne	.+112    	; 0x2b94 <__stack+0xa95>
    2b24:	2f 5f       	subi	r18, 0xFF	; 255
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	62 17       	cp	r22, r18
    2b2a:	73 07       	cpc	r23, r19
    2b2c:	9c f1       	brlt	.+102    	; 0x2b94 <__stack+0xa95>
    2b2e:	42 50       	subi	r20, 0x02	; 2
    2b30:	50 40       	sbci	r21, 0x00	; 0
    2b32:	32 97       	sbiw	r30, 0x02	; 2
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	89 2b       	or	r24, r25
    2b3a:	11 f4       	brne	.+4      	; 0x2b40 <__stack+0xa41>
    2b3c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_Z21check_sensors_releasemmi+0x204>
    2b40:	29 c0       	rjmp	.+82     	; 0x2b94 <__stack+0xa95>
    2b42:	62 17       	cp	r22, r18
    2b44:	73 07       	cpc	r23, r19
    2b46:	14 f0       	brlt	.+4      	; 0x2b4c <__stack+0xa4d>
    2b48:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <_Z21check_sensors_releasemmi+0x356>
    2b4c:	23 c0       	rjmp	.+70     	; 0x2b94 <__stack+0xa95>
        keypress(KEY_V);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b4e:	8d a9       	ldd	r24, Y+53	; 0x35
    2b50:	9e a9       	ldd	r25, Y+54	; 0x36
    2b52:	af a9       	ldd	r26, Y+55	; 0x37
    2b54:	b8 ad       	ldd	r27, Y+56	; 0x38
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	a1 05       	cpc	r26, r1
    2b5a:	b1 05       	cpc	r27, r1
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <__stack+0xa61>
    2b5e:	3e ca       	rjmp	.-2948   	; 0x1fdc <_Z21check_sensors_releasemmi+0xc64>
        mouseoff(KMOUSE_SCROLL);
        return;
    } else if ((sensors1 & KS1_DY) == KS1_DY && (sensors2 & KS2_DY) == KS2_DY) {
    2b60:	89 ad       	ldd	r24, Y+57	; 0x39
    2b62:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b64:	ab ad       	ldd	r26, Y+59	; 0x3b
    2b66:	bc ad       	ldd	r27, Y+60	; 0x3c
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	a1 05       	cpc	r26, r1
    2b6c:	b1 05       	cpc	r27, r1
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <__stack+0xa73>
    2b70:	4f ca       	rjmp	.-2914   	; 0x2010 <_Z21check_sensors_releasemmi+0xc98>
    2b72:	de ca       	rjmp	.-2628   	; 0x2130 <__stack+0x31>
        keypress(KEY_J);
        modifierup(MODIFIERKEY_SHIFT);
        modifierup(MODIFIERKEY_CTRL);
        modifierup(MODIFIERKEY_ALT);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b74:	85 fc       	sbrc	r8, 5
    2b76:	b9 cc       	rjmp	.-1678   	; 0x24ea <__stack+0x3eb>
        mouseoff(KMOUSE_MOVE);
        return;
    } else if ((sensors1 & KS1_MY) == KS1_MY && (sensors2 & KS2_MY) == KS2_MY) {
    2b78:	86 fc       	sbrc	r8, 6
    2b7a:	d1 cc       	rjmp	.-1630   	; 0x251e <__stack+0x41f>
    2b7c:	19 cd       	rjmp	.-1486   	; 0x25b0 <__stack+0x4b1>
            return;
         }
    } else if ((sensors1 & KS1_D3) == KS1_D3 && (sensors2 & KS2_D3) == KS2_D3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_ALT', )
        return;
    } else if ((sensors1 & KS1_D2) == KS1_D2 && (sensors2 & KS2_D2) == KS2_D2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b7e:	a3 fc       	sbrc	r10, 3
    2b80:	47 cf       	rjmp	.-370    	; 0x2a10 <__stack+0x911>
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_CTRL', )
        return;
    } else if ((sensors1 & KS1_D1) == KS1_D1 && (sensors2 & KS2_D1) == KS2_D1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b82:	a4 fc       	sbrc	r10, 4
    2b84:	5e cf       	rjmp	.-324    	; 0x2a42 <__stack+0x943>
        // UNKNOWN: array (   'action' => 'togglemodifier',   'code' => 'MODIFIERKEY_SHIFT', )
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b86:	b0 fc       	sbrc	r11, 0
    2b88:	75 cf       	rjmp	.-278    	; 0x2a74 <__stack+0x975>
        mouseup(KMOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b8a:	b1 fc       	sbrc	r11, 1
    2b8c:	8d cf       	rjmp	.-230    	; 0x2aa8 <__stack+0x9a9>
        mouseup(KMOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2b8e:	b2 fe       	sbrs	r11, 2
    2b90:	be cf       	rjmp	.-132    	; 0x2b0e <__stack+0xa0f>
    2b92:	a4 cf       	rjmp	.-184    	; 0x2adc <__stack+0x9dd>
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
        check_sensors_release(sensors1, sensors2, pos + 1);
        return;
    }
}
    2b94:	c4 5b       	subi	r28, 0xB4	; 180
    2b96:	df 4f       	sbci	r29, 0xFF	; 255
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	9f 90       	pop	r9
    2bb8:	8f 90       	pop	r8
    2bba:	7f 90       	pop	r7
    2bbc:	6f 90       	pop	r6
    2bbe:	5f 90       	pop	r5
    2bc0:	4f 90       	pop	r4
    2bc2:	08 95       	ret

00002bc4 <_Z9mousedowni>:
        } else if (mode == KMOUSE_SCROLL) {
            opt_scroll_mode = 0;
        }
    }
    
    void mousedown(int button) {
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	8c 01       	movw	r16, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset mousedown ");
    2bca:	84 ed       	ldi	r24, 0xD4	; 212
    2bcc:	97 e0       	ldi	r25, 0x07	; 7
    2bce:	6c e8       	ldi	r22, 0x8C	; 140
    2bd0:	72 e0       	ldi	r23, 0x02	; 2
    2bd2:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(button);
    2bd6:	84 ed       	ldi	r24, 0xD4	; 212
    2bd8:	97 e0       	ldi	r25, 0x07	; 7
    2bda:	b8 01       	movw	r22, r16
    2bdc:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        mouseDown = mouseDown | button;
    2be0:	20 91 85 06 	lds	r18, 0x0685
    2be4:	30 91 86 06 	lds	r19, 0x0686
    2be8:	20 2b       	or	r18, r16
    2bea:	31 2b       	or	r19, r17
    2bec:	30 93 86 06 	sts	0x0686, r19
    2bf0:	20 93 85 06 	sts	0x0685, r18
        #ifdef ENABLE_USB
            Mouse.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	20 fd       	sbrc	r18, 0
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	36 95       	lsr	r19
    2bfc:	27 95       	ror	r18
    2bfe:	42 2f       	mov	r20, r18
    2c00:	41 70       	andi	r20, 0x01	; 1
    2c02:	36 95       	lsr	r19
    2c04:	27 95       	ror	r18
    2c06:	21 70       	andi	r18, 0x01	; 1
    2c08:	85 ed       	ldi	r24, 0xD5	; 213
    2c0a:	97 e0       	ldi	r25, 0x07	; 7
    2c0c:	0e 94 20 2a 	call	0x5440	; 0x5440 <_ZN8USBMouse11set_buttonsEhhh>
        #endif /* ENABLE_USB */
        #ifdef ENABLE_RX400
            RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
        #endif /* ENABLE_RX400 */
    }
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	08 95       	ret

00002c16 <_Z19check_sensors_touchmmi>:
#define KS2_J2 0x2000000
 
#define KS1_J1 0x0
#define KS2_J1 0x4000000
 
void check_sensors_touch(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    2c16:	2f 92       	push	r2
    2c18:	3f 92       	push	r3
    2c1a:	4f 92       	push	r4
    2c1c:	5f 92       	push	r5
    2c1e:	6f 92       	push	r6
    2c20:	7f 92       	push	r7
    2c22:	8f 92       	push	r8
    2c24:	9f 92       	push	r9
    2c26:	af 92       	push	r10
    2c28:	bf 92       	push	r11
    2c2a:	cf 92       	push	r12
    2c2c:	df 92       	push	r13
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	62 97       	sbiw	r28, 0x12	; 18
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	6b 01       	movw	r12, r22
    2c4c:	7c 01       	movw	r14, r24
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2c4e:	60 91 9b 06 	lds	r22, 0x069B
    2c52:	70 91 9c 06 	lds	r23, 0x069C
    2c56:	7a 8b       	std	Y+18, r23	; 0x12
    2c58:	69 8b       	std	Y+17, r22	; 0x11
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	80 95       	com	r24
    2c5e:	90 95       	com	r25
    2c60:	86 0f       	add	r24, r22
    2c62:	97 1f       	adc	r25, r23
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	89 57       	subi	r24, 0x79	; 121
    2c6a:	99 4f       	sbci	r25, 0xF9	; 249
    2c6c:	98 8b       	std	Y+16, r25	; 0x10
    2c6e:	8f 87       	std	Y+15, r24	; 0x0f
    2c70:	60 1b       	sub	r22, r16
    2c72:	71 0b       	sbc	r23, r17
    2c74:	66 0f       	add	r22, r22
    2c76:	77 1f       	adc	r23, r23
    2c78:	69 57       	subi	r22, 0x79	; 121
    2c7a:	79 4f       	sbci	r23, 0xF9	; 249
    2c7c:	7e 87       	std	Y+14, r23	; 0x0e
    2c7e:	6d 87       	std	Y+13, r22	; 0x0d
    2c80:	2b 01       	movw	r4, r22
    2c82:	3b 01       	movw	r6, r22
    2c84:	4b 01       	movw	r8, r22
    2c86:	5b 01       	movw	r10, r22
    2c88:	1b 01       	movw	r2, r22
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	c6 22       	and	r12, r22
    2c94:	d7 22       	and	r13, r23
    2c96:	e8 22       	and	r14, r24
    2c98:	f9 22       	and	r15, r25
        mouseon(KMOUSE_SCROLL);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2c9a:	da 01       	movw	r26, r20
    2c9c:	c9 01       	movw	r24, r18
    2c9e:	80 72       	andi	r24, 0x20	; 32
    2ca0:	90 70       	andi	r25, 0x00	; 0
    2ca2:	a0 70       	andi	r26, 0x00	; 0
    2ca4:	b0 70       	andi	r27, 0x00	; 0
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	ab 83       	std	Y+3, r26	; 0x03
    2cac:	bc 83       	std	Y+4, r27	; 0x04
        mouseon(KMOUSE_MOVE);
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2cae:	ca 01       	movw	r24, r20
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	60 70       	andi	r22, 0x00	; 0
    2cb4:	70 70       	andi	r23, 0x00	; 0
    2cb6:	80 70       	andi	r24, 0x00	; 0
    2cb8:	91 70       	andi	r25, 0x01	; 1
    2cba:	6d 83       	std	Y+5, r22	; 0x05
    2cbc:	7e 83       	std	Y+6, r23	; 0x06
    2cbe:	8f 83       	std	Y+7, r24	; 0x07
    2cc0:	98 87       	std	Y+8, r25	; 0x08
        mousedown(KMOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2cc2:	da 01       	movw	r26, r20
    2cc4:	c9 01       	movw	r24, r18
    2cc6:	80 70       	andi	r24, 0x00	; 0
    2cc8:	90 70       	andi	r25, 0x00	; 0
    2cca:	a0 70       	andi	r26, 0x00	; 0
    2ccc:	b2 70       	andi	r27, 0x02	; 2
    2cce:	89 87       	std	Y+9, r24	; 0x09
    2cd0:	9a 87       	std	Y+10, r25	; 0x0a
    2cd2:	ab 87       	std	Y+11, r26	; 0x0b
    2cd4:	bc 87       	std	Y+12, r27	; 0x0c
        mousedown(KMOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2cd6:	20 70       	andi	r18, 0x00	; 0
    2cd8:	30 70       	andi	r19, 0x00	; 0
    2cda:	40 70       	andi	r20, 0x00	; 0
    2cdc:	54 70       	andi	r21, 0x04	; 4
 
#define KS1_J1 0x0
#define KS2_J1 0x4000000
 
void check_sensors_touch(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2cde:	c1 14       	cp	r12, r1
    2ce0:	d1 04       	cpc	r13, r1
    2ce2:	e1 04       	cpc	r14, r1
    2ce4:	f1 04       	cpc	r15, r1
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <_Z19check_sensors_touchmmi+0xd4>
    2ce8:	a2 c0       	rjmp	.+324    	; 0x2e2e <_Z19check_sensors_touchmmi+0x218>
    2cea:	a9 89       	ldd	r26, Y+17	; 0x11
    2cec:	ba 89       	ldd	r27, Y+18	; 0x12
    2cee:	a0 17       	cp	r26, r16
    2cf0:	b1 07       	cpc	r27, r17
    2cf2:	0c f4       	brge	.+2      	; 0x2cf6 <_Z19check_sensors_touchmmi+0xe0>
    2cf4:	9c c0       	rjmp	.+312    	; 0x2e2e <_Z19check_sensors_touchmmi+0x218>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2cf6:	f3 01       	movw	r30, r6
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	49 f0       	breq	.+18     	; 0x2d12 <_Z19check_sensors_touchmmi+0xfc>
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	91 05       	cpc	r25, r1
    2d04:	31 f0       	breq	.+12     	; 0x2d12 <_Z19check_sensors_touchmmi+0xfc>
    2d06:	82 30       	cpi	r24, 0x02	; 2
    2d08:	91 05       	cpc	r25, r1
    2d0a:	19 f0       	breq	.+6      	; 0x2d12 <_Z19check_sensors_touchmmi+0xfc>
    2d0c:	03 97       	sbiw	r24, 0x03	; 3
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <_Z19check_sensors_touchmmi+0xfc>
    2d10:	8e c0       	rjmp	.+284    	; 0x2e2e <_Z19check_sensors_touchmmi+0x218>
        mouseon(KMOUSE_SCROLL);
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	16 c0       	rjmp	.+44     	; 0x2d44 <_Z19check_sensors_touchmmi+0x12e>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2d18:	69 89       	ldd	r22, Y+17	; 0x11
    2d1a:	7a 89       	ldd	r23, Y+18	; 0x12
    2d1c:	60 17       	cp	r22, r16
    2d1e:	71 07       	cpc	r23, r17
    2d20:	0c f4       	brge	.+2      	; 0x2d24 <_Z19check_sensors_touchmmi+0x10e>
    2d22:	8e c0       	rjmp	.+284    	; 0x2e40 <_Z19check_sensors_touchmmi+0x22a>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2d24:	d4 01       	movw	r26, r8
    2d26:	8d 91       	ld	r24, X+
    2d28:	9c 91       	ld	r25, X
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	49 f0       	breq	.+18     	; 0x2d40 <_Z19check_sensors_touchmmi+0x12a>
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	91 05       	cpc	r25, r1
    2d32:	31 f0       	breq	.+12     	; 0x2d40 <_Z19check_sensors_touchmmi+0x12a>
    2d34:	82 30       	cpi	r24, 0x02	; 2
    2d36:	91 05       	cpc	r25, r1
    2d38:	19 f0       	breq	.+6      	; 0x2d40 <_Z19check_sensors_touchmmi+0x12a>
    2d3a:	03 97       	sbiw	r24, 0x03	; 3
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <_Z19check_sensors_touchmmi+0x12a>
    2d3e:	80 c0       	rjmp	.+256    	; 0x2e40 <_Z19check_sensors_touchmmi+0x22a>
        mouseon(KMOUSE_MOVE);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_Z7mouseoni>
    2d48:	9a c0       	rjmp	.+308    	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2d4a:	e9 89       	ldd	r30, Y+17	; 0x11
    2d4c:	fa 89       	ldd	r31, Y+18	; 0x12
    2d4e:	e0 17       	cp	r30, r16
    2d50:	f1 07       	cpc	r31, r17
    2d52:	0c f4       	brge	.+2      	; 0x2d56 <_Z19check_sensors_touchmmi+0x140>
    2d54:	7f c0       	rjmp	.+254    	; 0x2e54 <_Z19check_sensors_touchmmi+0x23e>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2d56:	ad 85       	ldd	r26, Y+13	; 0x0d
    2d58:	be 85       	ldd	r27, Y+14	; 0x0e
    2d5a:	8d 91       	ld	r24, X+
    2d5c:	9c 91       	ld	r25, X
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	49 f0       	breq	.+18     	; 0x2d74 <_Z19check_sensors_touchmmi+0x15e>
    2d62:	81 30       	cpi	r24, 0x01	; 1
    2d64:	91 05       	cpc	r25, r1
    2d66:	31 f0       	breq	.+12     	; 0x2d74 <_Z19check_sensors_touchmmi+0x15e>
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	19 f0       	breq	.+6      	; 0x2d74 <_Z19check_sensors_touchmmi+0x15e>
    2d6e:	03 97       	sbiw	r24, 0x03	; 3
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <_Z19check_sensors_touchmmi+0x15e>
    2d72:	70 c0       	rjmp	.+224    	; 0x2e54 <_Z19check_sensors_touchmmi+0x23e>
        mousedown(KMOUSE_RIGHT);
    2d74:	84 e0       	ldi	r24, 0x04	; 4
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	2c c0       	rjmp	.+88     	; 0x2dd2 <_Z19check_sensors_touchmmi+0x1bc>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2d7a:	e9 89       	ldd	r30, Y+17	; 0x11
    2d7c:	fa 89       	ldd	r31, Y+18	; 0x12
    2d7e:	e0 17       	cp	r30, r16
    2d80:	f1 07       	cpc	r31, r17
    2d82:	0c f4       	brge	.+2      	; 0x2d86 <_Z19check_sensors_touchmmi+0x170>
    2d84:	70 c0       	rjmp	.+224    	; 0x2e66 <_Z19check_sensors_touchmmi+0x250>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2d86:	d5 01       	movw	r26, r10
    2d88:	8d 91       	ld	r24, X+
    2d8a:	9c 91       	ld	r25, X
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	49 f0       	breq	.+18     	; 0x2da2 <_Z19check_sensors_touchmmi+0x18c>
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	91 05       	cpc	r25, r1
    2d94:	31 f0       	breq	.+12     	; 0x2da2 <_Z19check_sensors_touchmmi+0x18c>
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	91 05       	cpc	r25, r1
    2d9a:	19 f0       	breq	.+6      	; 0x2da2 <_Z19check_sensors_touchmmi+0x18c>
    2d9c:	03 97       	sbiw	r24, 0x03	; 3
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <_Z19check_sensors_touchmmi+0x18c>
    2da0:	62 c0       	rjmp	.+196    	; 0x2e66 <_Z19check_sensors_touchmmi+0x250>
        mousedown(KMOUSE_MIDDLE);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	15 c0       	rjmp	.+42     	; 0x2dd2 <_Z19check_sensors_touchmmi+0x1bc>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2da8:	e9 89       	ldd	r30, Y+17	; 0x11
    2daa:	fa 89       	ldd	r31, Y+18	; 0x12
    2dac:	e0 17       	cp	r30, r16
    2dae:	f1 07       	cpc	r31, r17
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <_Z19check_sensors_touchmmi+0x19e>
    2db2:	65 c0       	rjmp	.+202    	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2db4:	d1 01       	movw	r26, r2
    2db6:	8d 91       	ld	r24, X+
    2db8:	9c 91       	ld	r25, X
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	41 f0       	breq	.+16     	; 0x2dce <_Z19check_sensors_touchmmi+0x1b8>
    2dbe:	81 30       	cpi	r24, 0x01	; 1
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	29 f0       	breq	.+10     	; 0x2dce <_Z19check_sensors_touchmmi+0x1b8>
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	11 f0       	breq	.+4      	; 0x2dce <_Z19check_sensors_touchmmi+0x1b8>
    2dca:	03 97       	sbiw	r24, 0x03	; 3
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <_Z19check_sensors_touchmmi+0x1c0>
        mousedown(KMOUSE_LEFT);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	f8 de       	rcall	.-528    	; 0x2bc4 <_Z9mousedowni>
    2dd4:	54 c0       	rjmp	.+168    	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
        return;
    }
 
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
    2dd6:	f2 01       	movw	r30, r4
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	04 97       	sbiw	r24, 0x04	; 4
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <_Z19check_sensors_touchmmi+0x1cc>
    2de0:	4e c0       	rjmp	.+156    	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
    2de2:	0f 5f       	subi	r16, 0xFF	; 255
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2de6:	69 89       	ldd	r22, Y+17	; 0x11
    2de8:	7a 89       	ldd	r23, Y+18	; 0x12
    2dea:	60 17       	cp	r22, r16
    2dec:	71 07       	cpc	r23, r17
    2dee:	0c f4       	brge	.+2      	; 0x2df2 <_Z19check_sensors_touchmmi+0x1dc>
    2df0:	46 c0       	rjmp	.+140    	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
            return false;
        }
        return modeStack[modeStackPos - pos] == mode;
    2df2:	af 85       	ldd	r26, Y+15	; 0x0f
    2df4:	b8 89       	ldd	r27, Y+16	; 0x10
    2df6:	8d 91       	ld	r24, X+
    2df8:	9c 91       	ld	r25, X
    2dfa:	11 97       	sbiw	r26, 0x01	; 1
    2dfc:	12 97       	sbiw	r26, 0x02	; 2
    2dfe:	b8 8b       	std	Y+16, r27	; 0x10
    2e00:	af 87       	std	Y+15, r26	; 0x0f
    2e02:	ee ef       	ldi	r30, 0xFE	; 254
    2e04:	ff ef       	ldi	r31, 0xFF	; 255
    2e06:	4e 0e       	add	r4, r30
    2e08:	5f 1e       	adc	r5, r31
    2e0a:	6e 0e       	add	r6, r30
    2e0c:	7f 1e       	adc	r7, r31
    2e0e:	8e 0e       	add	r8, r30
    2e10:	9f 1e       	adc	r9, r31
    2e12:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e14:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e16:	62 50       	subi	r22, 0x02	; 2
    2e18:	70 40       	sbci	r23, 0x00	; 0
    2e1a:	7e 87       	std	Y+14, r23	; 0x0e
    2e1c:	6d 87       	std	Y+13, r22	; 0x0d
    2e1e:	ae 0e       	add	r10, r30
    2e20:	bf 1e       	adc	r11, r31
    2e22:	2e 0e       	add	r2, r30
    2e24:	3f 1e       	adc	r3, r31
    2e26:	89 2b       	or	r24, r25
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <_Z19check_sensors_touchmmi+0x216>
    2e2a:	59 cf       	rjmp	.-334    	; 0x2cde <_Z19check_sensors_touchmmi+0xc8>
    2e2c:	28 c0       	rjmp	.+80     	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
 
void check_sensors_touch(long unsigned int sensors1, long unsigned int sensors2, int pos) {
    if ((sensors1 & KS1_D8) == KS1_D8 && (sensors2 & KS2_D8) == KS2_D8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
        mouseon(KMOUSE_SCROLL);
        return;
    } else if ((sensors1 & KS1_A8) == KS1_A8 && (sensors2 & KS2_A8) == KS2_A8 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	ab 81       	ldd	r26, Y+3	; 0x03
    2e34:	bc 81       	ldd	r27, Y+4	; 0x04
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	a1 05       	cpc	r26, r1
    2e3a:	b1 05       	cpc	r27, r1
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <_Z19check_sensors_touchmmi+0x22a>
    2e3e:	6c cf       	rjmp	.-296    	; 0x2d18 <_Z19check_sensors_touchmmi+0x102>
        mouseon(KMOUSE_MOVE);
        return;
    } else if ((sensors1 & KS1_J3) == KS1_J3 && (sensors2 & KS2_J3) == KS2_J3 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2e40:	6d 81       	ldd	r22, Y+5	; 0x05
    2e42:	7e 81       	ldd	r23, Y+6	; 0x06
    2e44:	8f 81       	ldd	r24, Y+7	; 0x07
    2e46:	98 85       	ldd	r25, Y+8	; 0x08
    2e48:	61 15       	cp	r22, r1
    2e4a:	71 05       	cpc	r23, r1
    2e4c:	81 05       	cpc	r24, r1
    2e4e:	91 05       	cpc	r25, r1
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <_Z19check_sensors_touchmmi+0x23e>
    2e52:	7b cf       	rjmp	.-266    	; 0x2d4a <_Z19check_sensors_touchmmi+0x134>
        mousedown(KMOUSE_RIGHT);
        return;
    } else if ((sensors1 & KS1_J2) == KS1_J2 && (sensors2 & KS2_J2) == KS2_J2 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	a1 05       	cpc	r26, r1
    2e60:	b1 05       	cpc	r27, r1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <_Z19check_sensors_touchmmi+0x250>
    2e64:	8a cf       	rjmp	.-236    	; 0x2d7a <_Z19check_sensors_touchmmi+0x164>
        mousedown(KMOUSE_MIDDLE);
        return;
    } else if ((sensors1 & KS1_J1) == KS1_J1 && (sensors2 & KS2_J1) == KS2_J1 && (modeCheck(KMODE_DEFAULT, pos) || modeCheck(KMODE_NUMBERS, pos) || modeCheck(KMODE_SYMBOLS, pos) || modeCheck(KMODE_FUNCTIONS, pos))) {
    2e66:	21 15       	cp	r18, r1
    2e68:	31 05       	cpc	r19, r1
    2e6a:	41 05       	cpc	r20, r1
    2e6c:	51 05       	cpc	r21, r1
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <_Z19check_sensors_touchmmi+0x25c>
    2e70:	9b cf       	rjmp	.-202    	; 0x2da8 <_Z19check_sensors_touchmmi+0x192>
    // declare these here so setmode() etc. have some context
    void activate_mode(int mode);
    void deactivate_mode(int mode);

    boolean modeCheck(int mode, int pos) {
        if (modeStackPos < pos) {
    2e72:	a9 89       	ldd	r26, Y+17	; 0x11
    2e74:	ba 89       	ldd	r27, Y+18	; 0x12
    2e76:	a0 17       	cp	r26, r16
    2e78:	b1 07       	cpc	r27, r17
    2e7a:	0c f0       	brlt	.+2      	; 0x2e7e <_Z19check_sensors_touchmmi+0x268>
    2e7c:	ac cf       	rjmp	.-168    	; 0x2dd6 <_Z19check_sensors_touchmmi+0x1c0>
    /* Fall throughs */
    if (modeCheck(KMODE_GUI, pos) && modeCheck(KMODE_DEFAULT, pos + 1)) {
        check_sensors_touch(sensors1, sensors2, pos + 1);
        return;
    }
}
    2e7e:	62 96       	adiw	r28, 0x12	; 18
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	ff 90       	pop	r15
    2e94:	ef 90       	pop	r14
    2e96:	df 90       	pop	r13
    2e98:	cf 90       	pop	r12
    2e9a:	bf 90       	pop	r11
    2e9c:	af 90       	pop	r10
    2e9e:	9f 90       	pop	r9
    2ea0:	8f 90       	pop	r8
    2ea2:	7f 90       	pop	r7
    2ea4:	6f 90       	pop	r6
    2ea6:	5f 90       	pop	r5
    2ea8:	4f 90       	pop	r4
    2eaa:	3f 90       	pop	r3
    2eac:	2f 90       	pop	r2
    2eae:	08 95       	ret

00002eb0 <loop>:

void loop() {
    2eb0:	2f 92       	push	r2
    2eb2:	3f 92       	push	r3
    2eb4:	4f 92       	push	r4
    2eb6:	5f 92       	push	r5
    2eb8:	6f 92       	push	r6
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	28 97       	sbiw	r28, 0x08	; 8
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    moveMouse = false;
    2ee4:	10 92 94 04 	sts	0x0494, r1
    scrollMouse = false;
    2ee8:	10 92 95 04 	sts	0x0495, r1
    if (counter % opt_motion_sampling_div == 0) {
    2eec:	60 91 22 04 	lds	r22, 0x0422
    2ef0:	70 91 23 04 	lds	r23, 0x0423
    2ef4:	80 91 88 04 	lds	r24, 0x0488
    2ef8:	90 91 89 04 	lds	r25, 0x0489
    2efc:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    2f00:	89 2b       	or	r24, r25
    2f02:	11 f0       	breq	.+4      	; 0x2f08 <loop+0x58>
    2f04:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <loop+0x17a4>
        if (opt_mouse_mode > 0 || opt_scroll_mode > 0) {
    2f08:	80 91 b9 04 	lds	r24, 0x04B9
    2f0c:	88 23       	and	r24, r24
    2f0e:	29 f4       	brne	.+10     	; 0x2f1a <loop+0x6a>
    2f10:	80 91 ba 04 	lds	r24, 0x04BA
    2f14:	88 23       	and	r24, r24
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <loop+0x6a>
    2f18:	59 c7       	rjmp	.+3762   	; 0x3dcc <loop+0xf1c>
            /* ===============================================
             * READ AND PROCESS ACCELEROMETER DATA
            =============================================== */
            #ifdef ENABLE_ACCEL
                x00 = x0;
    2f1a:	80 91 d7 04 	lds	r24, 0x04D7
    2f1e:	90 91 d8 04 	lds	r25, 0x04D8
    2f22:	90 93 de 04 	sts	0x04DE, r25
    2f26:	80 93 dd 04 	sts	0x04DD, r24
                y00 = y0;
    2f2a:	80 91 d9 04 	lds	r24, 0x04D9
    2f2e:	90 91 da 04 	lds	r25, 0x04DA
    2f32:	90 93 e0 04 	sts	0x04E0, r25
    2f36:	80 93 df 04 	sts	0x04DF, r24
                z00 = z0;
    2f3a:	80 91 db 04 	lds	r24, 0x04DB
    2f3e:	90 91 dc 04 	lds	r25, 0x04DC
    2f42:	90 93 e2 04 	sts	0x04E2, r25
    2f46:	80 93 e1 04 	sts	0x04E1, r24
                x0 = x;
    2f4a:	80 91 d1 04 	lds	r24, 0x04D1
    2f4e:	90 91 d2 04 	lds	r25, 0x04D2
    2f52:	90 93 d8 04 	sts	0x04D8, r25
    2f56:	80 93 d7 04 	sts	0x04D7, r24
                y0 = y;
    2f5a:	80 91 d3 04 	lds	r24, 0x04D3
    2f5e:	90 91 d4 04 	lds	r25, 0x04D4
    2f62:	90 93 da 04 	sts	0x04DA, r25
    2f66:	80 93 d9 04 	sts	0x04D9, r24
                z0 = z;
    2f6a:	80 91 d5 04 	lds	r24, 0x04D5
    2f6e:	90 91 d6 04 	lds	r25, 0x04D6
    2f72:	90 93 dc 04 	sts	0x04DC, r25
    2f76:	80 93 db 04 	sts	0x04DB, r24
                
                // read accelerometer with correct rotation settings
                if      (opt_accel_rot90 == 0) { // no rotation:            x = +x, y = +y, z = +z
    2f7a:	80 91 b7 04 	lds	r24, 0x04B7
    2f7e:	88 23       	and	r24, r24
    2f80:	59 f4       	brne	.+22     	; 0x2f98 <loop+0xe8>
                    accel.readAccel(&xRaw, &yRaw, &zRaw);
    2f82:	8b eb       	ldi	r24, 0xBB	; 187
    2f84:	94 e0       	ldi	r25, 0x04	; 4
    2f86:	6b ec       	ldi	r22, 0xCB	; 203
    2f88:	74 e0       	ldi	r23, 0x04	; 4
    2f8a:	4d ec       	ldi	r20, 0xCD	; 205
    2f8c:	54 e0       	ldi	r21, 0x04	; 4
    2f8e:	2f ec       	ldi	r18, 0xCF	; 207
    2f90:	34 e0       	ldi	r19, 0x04	; 4
    2f92:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>
    2f96:	78 c0       	rjmp	.+240    	; 0x3088 <loop+0x1d8>
                }
                else if (opt_accel_rot90 == 1) { // 90 around x axis:       x = +x, y = -z, z = +y
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	49 f4       	brne	.+18     	; 0x2fae <loop+0xfe>
                    accel.readAccel(&xRaw, &zRaw, &yRaw);
    2f9c:	8b eb       	ldi	r24, 0xBB	; 187
    2f9e:	94 e0       	ldi	r25, 0x04	; 4
    2fa0:	6b ec       	ldi	r22, 0xCB	; 203
    2fa2:	74 e0       	ldi	r23, 0x04	; 4
    2fa4:	4f ec       	ldi	r20, 0xCF	; 207
    2fa6:	54 e0       	ldi	r21, 0x04	; 4
    2fa8:	2d ec       	ldi	r18, 0xCD	; 205
    2faa:	34 e0       	ldi	r19, 0x04	; 4
    2fac:	60 c0       	rjmp	.+192    	; 0x306e <loop+0x1be>
                    zRaw = -zRaw;
                }
                else if (opt_accel_rot90 == 2) { // 90 around y axis:       x = -z, y = +y, z = +x
    2fae:	82 30       	cpi	r24, 0x02	; 2
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <loop+0x104>
    2fb2:	55 c0       	rjmp	.+170    	; 0x305e <loop+0x1ae>
                    accel.readAccel(&zRaw, &yRaw, &xRaw);
                    zRaw = -zRaw;
                }
                else if (opt_accel_rot90 == 4) { // 90 around z axis;       x = -y, y = +x, z = +z
    2fb4:	84 30       	cpi	r24, 0x04	; 4
    2fb6:	b1 f4       	brne	.+44     	; 0x2fe4 <loop+0x134>
                    accel.readAccel(&yRaw, &xRaw, &zRaw);
    2fb8:	8b eb       	ldi	r24, 0xBB	; 187
    2fba:	94 e0       	ldi	r25, 0x04	; 4
    2fbc:	6d ec       	ldi	r22, 0xCD	; 205
    2fbe:	74 e0       	ldi	r23, 0x04	; 4
    2fc0:	4b ec       	ldi	r20, 0xCB	; 203
    2fc2:	54 e0       	ldi	r21, 0x04	; 4
    2fc4:	2f ec       	ldi	r18, 0xCF	; 207
    2fc6:	34 e0       	ldi	r19, 0x04	; 4
    2fc8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>
                    yRaw = -yRaw;
    2fcc:	80 91 cd 04 	lds	r24, 0x04CD
    2fd0:	90 91 ce 04 	lds	r25, 0x04CE
    2fd4:	90 95       	com	r25
    2fd6:	81 95       	neg	r24
    2fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fda:	90 93 ce 04 	sts	0x04CE, r25
    2fde:	80 93 cd 04 	sts	0x04CD, r24
    2fe2:	52 c0       	rjmp	.+164    	; 0x3088 <loop+0x1d8>
                }
                else if (opt_accel_rot90 == 3) { // 90 around x, y axes:    x = -z, y = -x, z = +y
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	b1 f4       	brne	.+44     	; 0x3014 <loop+0x164>
                    accel.readAccel(&zRaw, &xRaw, &yRaw);
    2fe8:	8b eb       	ldi	r24, 0xBB	; 187
    2fea:	94 e0       	ldi	r25, 0x04	; 4
    2fec:	6f ec       	ldi	r22, 0xCF	; 207
    2fee:	74 e0       	ldi	r23, 0x04	; 4
    2ff0:	4b ec       	ldi	r20, 0xCB	; 203
    2ff2:	54 e0       	ldi	r21, 0x04	; 4
    2ff4:	2d ec       	ldi	r18, 0xCD	; 205
    2ff6:	34 e0       	ldi	r19, 0x04	; 4
    2ff8:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>
                    xRaw = -xRaw;
    2ffc:	80 91 cb 04 	lds	r24, 0x04CB
    3000:	90 91 cc 04 	lds	r25, 0x04CC
    3004:	90 95       	com	r25
    3006:	81 95       	neg	r24
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	90 93 cc 04 	sts	0x04CC, r25
    300e:	80 93 cb 04 	sts	0x04CB, r24
    3012:	2f c0       	rjmp	.+94     	; 0x3072 <loop+0x1c2>
                    zRaw = -zRaw;
                }
                else if (opt_accel_rot90 == 5) { // 90 around x, z axes:    x = -y, y = -z, z = +x
    3014:	85 30       	cpi	r24, 0x05	; 5
    3016:	49 f4       	brne	.+18     	; 0x302a <loop+0x17a>
                    accel.readAccel(&yRaw, &zRaw, &xRaw);
    3018:	8b eb       	ldi	r24, 0xBB	; 187
    301a:	94 e0       	ldi	r25, 0x04	; 4
    301c:	6d ec       	ldi	r22, 0xCD	; 205
    301e:	74 e0       	ldi	r23, 0x04	; 4
    3020:	4f ec       	ldi	r20, 0xCF	; 207
    3022:	54 e0       	ldi	r21, 0x04	; 4
    3024:	2b ec       	ldi	r18, 0xCB	; 203
    3026:	34 e0       	ldi	r19, 0x04	; 4
    3028:	0a c0       	rjmp	.+20     	; 0x303e <loop+0x18e>
                    yRaw = -yRaw;
                    zRaw = -zRaw;
                }
                else if (opt_accel_rot90 == 6) { // 90 around y, z axes:    x = -z, y = +x, z = -y
    302a:	86 30       	cpi	r24, 0x06	; 6
    302c:	b1 f4       	brne	.+44     	; 0x305a <loop+0x1aa>
                    accel.readAccel(&zRaw, &xRaw, &yRaw);
    302e:	8b eb       	ldi	r24, 0xBB	; 187
    3030:	94 e0       	ldi	r25, 0x04	; 4
    3032:	6f ec       	ldi	r22, 0xCF	; 207
    3034:	74 e0       	ldi	r23, 0x04	; 4
    3036:	4b ec       	ldi	r20, 0xCB	; 203
    3038:	54 e0       	ldi	r21, 0x04	; 4
    303a:	2d ec       	ldi	r18, 0xCD	; 205
    303c:	34 e0       	ldi	r19, 0x04	; 4
    303e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>
                    yRaw = -yRaw;
    3042:	80 91 cd 04 	lds	r24, 0x04CD
    3046:	90 91 ce 04 	lds	r25, 0x04CE
    304a:	90 95       	com	r25
    304c:	81 95       	neg	r24
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	90 93 ce 04 	sts	0x04CE, r25
    3054:	80 93 cd 04 	sts	0x04CD, r24
    3058:	0c c0       	rjmp	.+24     	; 0x3072 <loop+0x1c2>
                    zRaw = -zRaw;
                }
                else if (opt_accel_rot90 == 7) { // 90 around x, y, z axes: x = -z, y = +y, z = +x
    305a:	87 30       	cpi	r24, 0x07	; 7
    305c:	a9 f4       	brne	.+42     	; 0x3088 <loop+0x1d8>
                    accel.readAccel(&zRaw, &yRaw, &xRaw);
    305e:	8b eb       	ldi	r24, 0xBB	; 187
    3060:	94 e0       	ldi	r25, 0x04	; 4
    3062:	6f ec       	ldi	r22, 0xCF	; 207
    3064:	74 e0       	ldi	r23, 0x04	; 4
    3066:	4d ec       	ldi	r20, 0xCD	; 205
    3068:	54 e0       	ldi	r21, 0x04	; 4
    306a:	2b ec       	ldi	r18, 0xCB	; 203
    306c:	34 e0       	ldi	r19, 0x04	; 4
    306e:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>
                    zRaw = -zRaw;
    3072:	80 91 cf 04 	lds	r24, 0x04CF
    3076:	90 91 d0 04 	lds	r25, 0x04D0
    307a:	90 95       	com	r25
    307c:	81 95       	neg	r24
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	90 93 d0 04 	sts	0x04D0, r25
    3084:	80 93 cf 04 	sts	0x04CF, r24
                }
                
                // calculate reading time difference
                accelDiff = accelMicros > 0 ? (micros() - accelMicros) : 1; // eliminate error from large gaps of inactivity
    3088:	80 91 c1 04 	lds	r24, 0x04C1
    308c:	90 91 c2 04 	lds	r25, 0x04C2
    3090:	a0 91 c3 04 	lds	r26, 0x04C3
    3094:	b0 91 c4 04 	lds	r27, 0x04C4
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	a1 05       	cpc	r26, r1
    309c:	b1 05       	cpc	r27, r1
    309e:	29 f4       	brne	.+10     	; 0x30aa <loop+0x1fa>
    30a0:	21 e0       	ldi	r18, 0x01	; 1
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	10 c0       	rjmp	.+32     	; 0x30ca <loop+0x21a>
    30aa:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <micros>
    30ae:	9b 01       	movw	r18, r22
    30b0:	ac 01       	movw	r20, r24
    30b2:	80 91 c1 04 	lds	r24, 0x04C1
    30b6:	90 91 c2 04 	lds	r25, 0x04C2
    30ba:	a0 91 c3 04 	lds	r26, 0x04C3
    30be:	b0 91 c4 04 	lds	r27, 0x04C4
    30c2:	28 1b       	sub	r18, r24
    30c4:	39 0b       	sbc	r19, r25
    30c6:	4a 0b       	sbc	r20, r26
    30c8:	5b 0b       	sbc	r21, r27
    30ca:	20 93 c5 04 	sts	0x04C5, r18
    30ce:	30 93 c6 04 	sts	0x04C6, r19
    30d2:	40 93 c7 04 	sts	0x04C7, r20
    30d6:	50 93 c8 04 	sts	0x04C8, r21
                accelMicros = micros();
    30da:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <micros>
    30de:	60 93 c1 04 	sts	0x04C1, r22
    30e2:	70 93 c2 04 	sts	0x04C2, r23
    30e6:	80 93 c3 04 	sts	0x04C3, r24
    30ea:	90 93 c4 04 	sts	0x04C4, r25
                
                // offset
                xRaw += opt_accel_offset[0];
    30ee:	60 91 cb 04 	lds	r22, 0x04CB
    30f2:	70 91 cc 04 	lds	r23, 0x04CC
    30f6:	20 91 04 04 	lds	r18, 0x0404
    30fa:	30 91 05 04 	lds	r19, 0x0405
    30fe:	62 0f       	add	r22, r18
    3100:	73 1f       	adc	r23, r19
                yRaw += opt_accel_offset[1];
    3102:	e0 90 cd 04 	lds	r14, 0x04CD
    3106:	f0 90 ce 04 	lds	r15, 0x04CE
    310a:	20 91 06 04 	lds	r18, 0x0406
    310e:	30 91 07 04 	lds	r19, 0x0407
    3112:	e2 0e       	add	r14, r18
    3114:	f3 1e       	adc	r15, r19
                zRaw += opt_accel_offset[2];
    3116:	a0 90 cf 04 	lds	r10, 0x04CF
    311a:	b0 90 d0 04 	lds	r11, 0x04D0
    311e:	20 91 08 04 	lds	r18, 0x0408
    3122:	30 91 09 04 	lds	r19, 0x0409
    3126:	a2 0e       	add	r10, r18
    3128:	b3 1e       	adc	r11, r19
                
                // calibrate
                xRaw = (float)xRaw * opt_accel_calibrate[0];
    312a:	88 27       	eor	r24, r24
    312c:	77 fd       	sbrc	r23, 7
    312e:	80 95       	com	r24
    3130:	98 2f       	mov	r25, r24
    3132:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3136:	20 91 0a 04 	lds	r18, 0x040A
    313a:	30 91 0b 04 	lds	r19, 0x040B
    313e:	40 91 0c 04 	lds	r20, 0x040C
    3142:	50 91 0d 04 	lds	r21, 0x040D
    3146:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    314a:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    314e:	3b 01       	movw	r6, r22
    3150:	4c 01       	movw	r8, r24
    3152:	70 93 cc 04 	sts	0x04CC, r23
    3156:	60 93 cb 04 	sts	0x04CB, r22
                yRaw = (float)yRaw * opt_accel_calibrate[1];
    315a:	00 27       	eor	r16, r16
    315c:	f7 fc       	sbrc	r15, 7
    315e:	00 95       	com	r16
    3160:	10 2f       	mov	r17, r16
    3162:	c8 01       	movw	r24, r16
    3164:	b7 01       	movw	r22, r14
    3166:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    316a:	20 91 0e 04 	lds	r18, 0x040E
    316e:	30 91 0f 04 	lds	r19, 0x040F
    3172:	40 91 10 04 	lds	r20, 0x0410
    3176:	50 91 11 04 	lds	r21, 0x0411
    317a:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    317e:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3182:	1b 01       	movw	r2, r22
    3184:	2c 01       	movw	r4, r24
    3186:	70 93 ce 04 	sts	0x04CE, r23
    318a:	60 93 cd 04 	sts	0x04CD, r22
                zRaw = (float)zRaw * opt_accel_calibrate[2];
    318e:	cc 24       	eor	r12, r12
    3190:	b7 fc       	sbrc	r11, 7
    3192:	c0 94       	com	r12
    3194:	dc 2c       	mov	r13, r12
    3196:	c6 01       	movw	r24, r12
    3198:	b5 01       	movw	r22, r10
    319a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    319e:	20 91 12 04 	lds	r18, 0x0412
    31a2:	30 91 13 04 	lds	r19, 0x0413
    31a6:	40 91 14 04 	lds	r20, 0x0414
    31aa:	50 91 15 04 	lds	r21, 0x0415
    31ae:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    31b2:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    31b6:	4b 01       	movw	r8, r22
    31b8:	5c 01       	movw	r10, r24
    31ba:	70 93 d0 04 	sts	0x04D0, r23
    31be:	60 93 cf 04 	sts	0x04CF, r22
                
                // Kalman filtering
                x = x0 + (opt_accel_kalman_constant * (xRaw - x0));
    31c2:	00 91 d7 04 	lds	r16, 0x04D7
    31c6:	10 91 d8 04 	lds	r17, 0x04D8
    31ca:	b8 01       	movw	r22, r16
    31cc:	88 27       	eor	r24, r24
    31ce:	77 fd       	sbrc	r23, 7
    31d0:	80 95       	com	r24
    31d2:	98 2f       	mov	r25, r24
    31d4:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    31d8:	6b 01       	movw	r12, r22
    31da:	7c 01       	movw	r14, r24
    31dc:	60 1a       	sub	r6, r16
    31de:	71 0a       	sbc	r7, r17
    31e0:	b3 01       	movw	r22, r6
    31e2:	88 27       	eor	r24, r24
    31e4:	77 fd       	sbrc	r23, 7
    31e6:	80 95       	com	r24
    31e8:	98 2f       	mov	r25, r24
    31ea:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    31ee:	20 91 24 04 	lds	r18, 0x0424
    31f2:	30 91 25 04 	lds	r19, 0x0425
    31f6:	40 91 26 04 	lds	r20, 0x0426
    31fa:	50 91 27 04 	lds	r21, 0x0427
    31fe:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3202:	9b 01       	movw	r18, r22
    3204:	ac 01       	movw	r20, r24
    3206:	c7 01       	movw	r24, r14
    3208:	b6 01       	movw	r22, r12
    320a:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    320e:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3212:	70 93 d2 04 	sts	0x04D2, r23
    3216:	60 93 d1 04 	sts	0x04D1, r22
                y = y0 + (opt_accel_kalman_constant * (yRaw - y0));
    321a:	00 91 d9 04 	lds	r16, 0x04D9
    321e:	10 91 da 04 	lds	r17, 0x04DA
    3222:	b8 01       	movw	r22, r16
    3224:	88 27       	eor	r24, r24
    3226:	77 fd       	sbrc	r23, 7
    3228:	80 95       	com	r24
    322a:	98 2f       	mov	r25, r24
    322c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3230:	6b 01       	movw	r12, r22
    3232:	7c 01       	movw	r14, r24
    3234:	20 1a       	sub	r2, r16
    3236:	31 0a       	sbc	r3, r17
    3238:	b1 01       	movw	r22, r2
    323a:	88 27       	eor	r24, r24
    323c:	77 fd       	sbrc	r23, 7
    323e:	80 95       	com	r24
    3240:	98 2f       	mov	r25, r24
    3242:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3246:	20 91 24 04 	lds	r18, 0x0424
    324a:	30 91 25 04 	lds	r19, 0x0425
    324e:	40 91 26 04 	lds	r20, 0x0426
    3252:	50 91 27 04 	lds	r21, 0x0427
    3256:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    325a:	9b 01       	movw	r18, r22
    325c:	ac 01       	movw	r20, r24
    325e:	c7 01       	movw	r24, r14
    3260:	b6 01       	movw	r22, r12
    3262:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3266:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    326a:	70 93 d4 04 	sts	0x04D4, r23
    326e:	60 93 d3 04 	sts	0x04D3, r22
                z = z0 + (opt_accel_kalman_constant * (zRaw - z0));
    3272:	00 91 db 04 	lds	r16, 0x04DB
    3276:	10 91 dc 04 	lds	r17, 0x04DC
    327a:	b8 01       	movw	r22, r16
    327c:	88 27       	eor	r24, r24
    327e:	77 fd       	sbrc	r23, 7
    3280:	80 95       	com	r24
    3282:	98 2f       	mov	r25, r24
    3284:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3288:	6b 01       	movw	r12, r22
    328a:	7c 01       	movw	r14, r24
    328c:	94 01       	movw	r18, r8
    328e:	20 1b       	sub	r18, r16
    3290:	31 0b       	sbc	r19, r17
    3292:	b9 01       	movw	r22, r18
    3294:	88 27       	eor	r24, r24
    3296:	77 fd       	sbrc	r23, 7
    3298:	80 95       	com	r24
    329a:	98 2f       	mov	r25, r24
    329c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    32a0:	20 91 24 04 	lds	r18, 0x0424
    32a4:	30 91 25 04 	lds	r19, 0x0425
    32a8:	40 91 26 04 	lds	r20, 0x0426
    32ac:	50 91 27 04 	lds	r21, 0x0427
    32b0:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    32b4:	9b 01       	movw	r18, r22
    32b6:	ac 01       	movw	r20, r24
    32b8:	c7 01       	movw	r24, r14
    32ba:	b6 01       	movw	r22, r12
    32bc:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    32c0:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    32c4:	70 93 d6 04 	sts	0x04D6, r23
    32c8:	60 93 d5 04 	sts	0x04D5, r22

                // averaging
                if (opt_accel_smooth_average > 0) {
    32cc:	80 91 2c 04 	lds	r24, 0x042C
    32d0:	88 23       	and	r24, r24
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <loop+0x426>
    32d4:	b0 c0       	rjmp	.+352    	; 0x3436 <loop+0x586>
                    for (i = 1; i < opt_accel_smooth_average; i++) {
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	a0 e0       	ldi	r26, 0x00	; 0
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	80 93 90 04 	sts	0x0490, r24
    32e2:	90 93 91 04 	sts	0x0491, r25
    32e6:	a0 93 92 04 	sts	0x0492, r26
    32ea:	b0 93 93 04 	sts	0x0493, r27
    32ee:	3d c0       	rjmp	.+122    	; 0x336a <loop+0x4ba>
                        x += xHist[(accelTick + i) % opt_accel_smooth_average];
    32f0:	b3 01       	movw	r22, r6
    32f2:	88 27       	eor	r24, r24
    32f4:	77 fd       	sbrc	r23, 7
    32f6:	80 95       	com	r24
    32f8:	98 2f       	mov	r25, r24
    32fa:	6c 0d       	add	r22, r12
    32fc:	7d 1d       	adc	r23, r13
    32fe:	8e 1d       	adc	r24, r14
    3300:	9f 1d       	adc	r25, r15
    3302:	0e 94 13 3f 	call	0x7e26	; 0x7e26 <__divmodsi4>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	fc 01       	movw	r30, r24
    3310:	e5 50       	subi	r30, 0x05	; 5
    3312:	fb 4f       	sbci	r31, 0xFB	; 251
    3314:	20 81       	ld	r18, Z
    3316:	31 81       	ldd	r19, Z+1	; 0x01
    3318:	02 0f       	add	r16, r18
    331a:	13 1f       	adc	r17, r19
    331c:	10 93 d2 04 	sts	0x04D2, r17
    3320:	00 93 d1 04 	sts	0x04D1, r16
                        y += yHist[(accelTick + i) % opt_accel_smooth_average];
    3324:	fc 01       	movw	r30, r24
    3326:	ed 5d       	subi	r30, 0xDD	; 221
    3328:	fa 4f       	sbci	r31, 0xFA	; 250
    332a:	20 81       	ld	r18, Z
    332c:	31 81       	ldd	r19, Z+1	; 0x01
    332e:	a2 0e       	add	r10, r18
    3330:	b3 1e       	adc	r11, r19
    3332:	b0 92 d4 04 	sts	0x04D4, r11
    3336:	a0 92 d3 04 	sts	0x04D3, r10
                        z += zHist[(accelTick + i) % opt_accel_smooth_average];
    333a:	85 5b       	subi	r24, 0xB5	; 181
    333c:	9a 4f       	sbci	r25, 0xFA	; 250
    333e:	dc 01       	movw	r26, r24
    3340:	8d 91       	ld	r24, X+
    3342:	9c 91       	ld	r25, X
    3344:	48 0e       	add	r4, r24
    3346:	59 1e       	adc	r5, r25
    3348:	50 92 d6 04 	sts	0x04D6, r5
    334c:	40 92 d5 04 	sts	0x04D5, r4
                y = y0 + (opt_accel_kalman_constant * (yRaw - y0));
                z = z0 + (opt_accel_kalman_constant * (zRaw - z0));

                // averaging
                if (opt_accel_smooth_average > 0) {
                    for (i = 1; i < opt_accel_smooth_average; i++) {
    3350:	08 94       	sec
    3352:	c1 1c       	adc	r12, r1
    3354:	d1 1c       	adc	r13, r1
    3356:	e1 1c       	adc	r14, r1
    3358:	f1 1c       	adc	r15, r1
    335a:	c0 92 90 04 	sts	0x0490, r12
    335e:	d0 92 91 04 	sts	0x0491, r13
    3362:	e0 92 92 04 	sts	0x0492, r14
    3366:	f0 92 93 04 	sts	0x0493, r15
    336a:	c0 90 90 04 	lds	r12, 0x0490
    336e:	d0 90 91 04 	lds	r13, 0x0491
    3372:	e0 90 92 04 	lds	r14, 0x0492
    3376:	f0 90 93 04 	lds	r15, 0x0493
    337a:	90 90 2c 04 	lds	r9, 0x042C
    337e:	29 2d       	mov	r18, r9
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	00 91 d1 04 	lds	r16, 0x04D1
    338a:	10 91 d2 04 	lds	r17, 0x04D2
    338e:	a0 90 d3 04 	lds	r10, 0x04D3
    3392:	b0 90 d4 04 	lds	r11, 0x04D4
    3396:	40 90 d5 04 	lds	r4, 0x04D5
    339a:	50 90 d6 04 	lds	r5, 0x04D6
    339e:	60 90 c9 04 	lds	r6, 0x04C9
    33a2:	70 90 ca 04 	lds	r7, 0x04CA
    33a6:	c2 16       	cp	r12, r18
    33a8:	d3 06       	cpc	r13, r19
    33aa:	e4 06       	cpc	r14, r20
    33ac:	f5 06       	cpc	r15, r21
    33ae:	0c f4       	brge	.+2      	; 0x33b2 <loop+0x502>
    33b0:	9f cf       	rjmp	.-194    	; 0x32f0 <loop+0x440>
                        x += xHist[(accelTick + i) % opt_accel_smooth_average];
                        y += yHist[(accelTick + i) % opt_accel_smooth_average];
                        z += zHist[(accelTick + i) % opt_accel_smooth_average];
                    }
                    x /= opt_accel_smooth_average;
    33b2:	c8 01       	movw	r24, r16
    33b4:	69 2d       	mov	r22, r9
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    33bc:	9b 01       	movw	r18, r22
    33be:	70 93 d2 04 	sts	0x04D2, r23
    33c2:	60 93 d1 04 	sts	0x04D1, r22
                    y /= opt_accel_smooth_average;
    33c6:	c5 01       	movw	r24, r10
    33c8:	69 2d       	mov	r22, r9
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    33d0:	8b 01       	movw	r16, r22
    33d2:	70 93 d4 04 	sts	0x04D4, r23
    33d6:	60 93 d3 04 	sts	0x04D3, r22
                    z /= opt_accel_smooth_average;
    33da:	c2 01       	movw	r24, r4
    33dc:	69 2d       	mov	r22, r9
    33de:	70 e0       	ldi	r23, 0x00	; 0
    33e0:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    33e4:	7b 01       	movw	r14, r22
    33e6:	70 93 d6 04 	sts	0x04D6, r23
    33ea:	60 93 d5 04 	sts	0x04D5, r22
                    xHist[accelTick % opt_accel_smooth_average] = x;
    33ee:	c3 01       	movw	r24, r6
    33f0:	69 2d       	mov	r22, r9
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    33f8:	fc 01       	movw	r30, r24
    33fa:	ee 0f       	add	r30, r30
    33fc:	ff 1f       	adc	r31, r31
    33fe:	e5 50       	subi	r30, 0x05	; 5
    3400:	fb 4f       	sbci	r31, 0xFB	; 251
    3402:	31 83       	std	Z+1, r19	; 0x01
    3404:	20 83       	st	Z, r18
                    yHist[accelTick % opt_accel_smooth_average] = y;
    3406:	c3 01       	movw	r24, r6
    3408:	69 2d       	mov	r22, r9
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3410:	fc 01       	movw	r30, r24
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	ed 5d       	subi	r30, 0xDD	; 221
    3418:	fa 4f       	sbci	r31, 0xFA	; 250
    341a:	11 83       	std	Z+1, r17	; 0x01
    341c:	00 83       	st	Z, r16
                    zHist[accelTick % opt_accel_smooth_average] = z;
    341e:	c3 01       	movw	r24, r6
    3420:	69 2d       	mov	r22, r9
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3428:	fc 01       	movw	r30, r24
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	e5 5b       	subi	r30, 0xB5	; 181
    3430:	fa 4f       	sbci	r31, 0xFA	; 250
    3432:	f1 82       	std	Z+1, r15	; 0x01
    3434:	e0 82       	st	Z, r14
                }
                
                // calculate linear velocity (INACCURATE SO FAR)
                xv += (x - x0) - (x0 - x00);
    3436:	40 91 d7 04 	lds	r20, 0x04D7
    343a:	50 91 d8 04 	lds	r21, 0x04D8
    343e:	60 91 d1 04 	lds	r22, 0x04D1
    3442:	70 91 d2 04 	lds	r23, 0x04D2
    3446:	80 91 e3 04 	lds	r24, 0x04E3
    344a:	90 91 e4 04 	lds	r25, 0x04E4
    344e:	86 0f       	add	r24, r22
    3450:	97 1f       	adc	r25, r23
    3452:	20 91 dd 04 	lds	r18, 0x04DD
    3456:	30 91 de 04 	lds	r19, 0x04DE
    345a:	82 0f       	add	r24, r18
    345c:	93 1f       	adc	r25, r19
    345e:	84 1b       	sub	r24, r20
    3460:	95 0b       	sbc	r25, r21
    3462:	84 1b       	sub	r24, r20
    3464:	95 0b       	sbc	r25, r21
    3466:	90 93 e4 04 	sts	0x04E4, r25
    346a:	80 93 e3 04 	sts	0x04E3, r24
                yv += (y - y0) - (y0 - y00);
    346e:	40 91 d9 04 	lds	r20, 0x04D9
    3472:	50 91 da 04 	lds	r21, 0x04DA
    3476:	80 91 d3 04 	lds	r24, 0x04D3
    347a:	90 91 d4 04 	lds	r25, 0x04D4
    347e:	20 91 e5 04 	lds	r18, 0x04E5
    3482:	30 91 e6 04 	lds	r19, 0x04E6
    3486:	82 0f       	add	r24, r18
    3488:	93 1f       	adc	r25, r19
    348a:	20 91 df 04 	lds	r18, 0x04DF
    348e:	30 91 e0 04 	lds	r19, 0x04E0
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	84 1b       	sub	r24, r20
    3498:	95 0b       	sbc	r25, r21
    349a:	84 1b       	sub	r24, r20
    349c:	95 0b       	sbc	r25, r21
    349e:	90 93 e6 04 	sts	0x04E6, r25
    34a2:	80 93 e5 04 	sts	0x04E5, r24
                zv += (z - z0) - (z0 - z00);
    34a6:	40 91 db 04 	lds	r20, 0x04DB
    34aa:	50 91 dc 04 	lds	r21, 0x04DC
    34ae:	80 91 d5 04 	lds	r24, 0x04D5
    34b2:	90 91 d6 04 	lds	r25, 0x04D6
    34b6:	20 91 e7 04 	lds	r18, 0x04E7
    34ba:	30 91 e8 04 	lds	r19, 0x04E8
    34be:	82 0f       	add	r24, r18
    34c0:	93 1f       	adc	r25, r19
    34c2:	20 91 e1 04 	lds	r18, 0x04E1
    34c6:	30 91 e2 04 	lds	r19, 0x04E2
    34ca:	82 0f       	add	r24, r18
    34cc:	93 1f       	adc	r25, r19
    34ce:	84 1b       	sub	r24, r20
    34d0:	95 0b       	sbc	r25, r21
    34d2:	84 1b       	sub	r24, r20
    34d4:	95 0b       	sbc	r25, r21
    34d6:	90 93 e8 04 	sts	0x04E8, r25
    34da:	80 93 e7 04 	sts	0x04E7, r24
    
                if (opt_enable_calibration) {
    34de:	80 91 ae 04 	lds	r24, 0x04AE
    34e2:	90 91 af 04 	lds	r25, 0x04AF
    34e6:	89 2b       	or	r24, r25
    34e8:	09 f4       	brne	.+2      	; 0x34ec <loop+0x63c>
    34ea:	5d c0       	rjmp	.+186    	; 0x35a6 <loop+0x6f6>
                    xMin = min(xMin, x);
    34ec:	20 91 73 05 	lds	r18, 0x0573
    34f0:	30 91 74 05 	lds	r19, 0x0574
    34f4:	cb 01       	movw	r24, r22
    34f6:	26 17       	cp	r18, r22
    34f8:	37 07       	cpc	r19, r23
    34fa:	0c f4       	brge	.+2      	; 0x34fe <loop+0x64e>
    34fc:	c9 01       	movw	r24, r18
    34fe:	90 93 74 05 	sts	0x0574, r25
    3502:	80 93 73 05 	sts	0x0573, r24
                    yMin = min(yMin, y);
    3506:	20 91 75 05 	lds	r18, 0x0575
    350a:	30 91 76 05 	lds	r19, 0x0576
    350e:	80 91 d3 04 	lds	r24, 0x04D3
    3512:	90 91 d4 04 	lds	r25, 0x04D4
    3516:	28 17       	cp	r18, r24
    3518:	39 07       	cpc	r19, r25
    351a:	0c f4       	brge	.+2      	; 0x351e <loop+0x66e>
    351c:	c9 01       	movw	r24, r18
    351e:	90 93 76 05 	sts	0x0576, r25
    3522:	80 93 75 05 	sts	0x0575, r24
                    zMin = min(zMin, z);
    3526:	20 91 77 05 	lds	r18, 0x0577
    352a:	30 91 78 05 	lds	r19, 0x0578
    352e:	80 91 d5 04 	lds	r24, 0x04D5
    3532:	90 91 d6 04 	lds	r25, 0x04D6
    3536:	28 17       	cp	r18, r24
    3538:	39 07       	cpc	r19, r25
    353a:	0c f4       	brge	.+2      	; 0x353e <loop+0x68e>
    353c:	c9 01       	movw	r24, r18
    353e:	90 93 78 05 	sts	0x0578, r25
    3542:	80 93 77 05 	sts	0x0577, r24
                    xMax = max(xMax, x);
    3546:	20 91 79 05 	lds	r18, 0x0579
    354a:	30 91 7a 05 	lds	r19, 0x057A
    354e:	80 91 d1 04 	lds	r24, 0x04D1
    3552:	90 91 d2 04 	lds	r25, 0x04D2
    3556:	82 17       	cp	r24, r18
    3558:	93 07       	cpc	r25, r19
    355a:	0c f4       	brge	.+2      	; 0x355e <loop+0x6ae>
    355c:	c9 01       	movw	r24, r18
    355e:	90 93 7a 05 	sts	0x057A, r25
    3562:	80 93 79 05 	sts	0x0579, r24
                    yMax = max(yMax, y);
    3566:	20 91 7b 05 	lds	r18, 0x057B
    356a:	30 91 7c 05 	lds	r19, 0x057C
    356e:	80 91 d3 04 	lds	r24, 0x04D3
    3572:	90 91 d4 04 	lds	r25, 0x04D4
    3576:	82 17       	cp	r24, r18
    3578:	93 07       	cpc	r25, r19
    357a:	0c f4       	brge	.+2      	; 0x357e <loop+0x6ce>
    357c:	c9 01       	movw	r24, r18
    357e:	90 93 7c 05 	sts	0x057C, r25
    3582:	80 93 7b 05 	sts	0x057B, r24
                    zMax = max(zMax, z);
    3586:	20 91 7d 05 	lds	r18, 0x057D
    358a:	30 91 7e 05 	lds	r19, 0x057E
    358e:	80 91 d5 04 	lds	r24, 0x04D5
    3592:	90 91 d6 04 	lds	r25, 0x04D6
    3596:	82 17       	cp	r24, r18
    3598:	93 07       	cpc	r25, r19
    359a:	0c f4       	brge	.+2      	; 0x359e <loop+0x6ee>
    359c:	c9 01       	movw	r24, r18
    359e:	90 93 7e 05 	sts	0x057E, r25
    35a2:	80 93 7d 05 	sts	0x057D, r24
                        Serial.println(zMax);
                    #endif
                }
        
                // calculate tilt angle and angular velocity
                ax00 = ax0; // 2x-last-iteration
    35a6:	80 91 85 05 	lds	r24, 0x0585
    35aa:	90 91 86 05 	lds	r25, 0x0586
    35ae:	90 93 8c 05 	sts	0x058C, r25
    35b2:	80 93 8b 05 	sts	0x058B, r24
                ay00 = ay0;
    35b6:	80 91 87 05 	lds	r24, 0x0587
    35ba:	90 91 88 05 	lds	r25, 0x0588
    35be:	90 93 8e 05 	sts	0x058E, r25
    35c2:	80 93 8d 05 	sts	0x058D, r24
                az00 = az0;
    35c6:	80 91 89 05 	lds	r24, 0x0589
    35ca:	90 91 8a 05 	lds	r25, 0x058A
    35ce:	90 93 90 05 	sts	0x0590, r25
    35d2:	80 93 8f 05 	sts	0x058F, r24
                ax0 = ax; // last-iteration
    35d6:	80 91 7f 05 	lds	r24, 0x057F
    35da:	90 91 80 05 	lds	r25, 0x0580
    35de:	90 93 86 05 	sts	0x0586, r25
    35e2:	80 93 85 05 	sts	0x0585, r24
                ay0 = ay;
    35e6:	80 91 81 05 	lds	r24, 0x0581
    35ea:	90 91 82 05 	lds	r25, 0x0582
    35ee:	90 93 88 05 	sts	0x0588, r25
    35f2:	80 93 87 05 	sts	0x0587, r24
                az0 = az;
    35f6:	80 91 83 05 	lds	r24, 0x0583
    35fa:	90 91 84 05 	lds	r25, 0x0584
    35fe:	90 93 8a 05 	sts	0x058A, r25
    3602:	80 93 89 05 	sts	0x0589, r24
                
                float xc = (float)x/256, yc = (float)y/256, zc = (float)z/256;
    3606:	60 91 d1 04 	lds	r22, 0x04D1
    360a:	70 91 d2 04 	lds	r23, 0x04D2
    360e:	88 27       	eor	r24, r24
    3610:	77 fd       	sbrc	r23, 7
    3612:	80 95       	com	r24
    3614:	98 2f       	mov	r25, r24
    3616:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5b e3       	ldi	r21, 0x3B	; 59
    3622:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3626:	7b 01       	movw	r14, r22
    3628:	8c 01       	movw	r16, r24
    362a:	60 91 d3 04 	lds	r22, 0x04D3
    362e:	70 91 d4 04 	lds	r23, 0x04D4
    3632:	88 27       	eor	r24, r24
    3634:	77 fd       	sbrc	r23, 7
    3636:	80 95       	com	r24
    3638:	98 2f       	mov	r25, r24
    363a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5b e3       	ldi	r21, 0x3B	; 59
    3646:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    364a:	5b 01       	movw	r10, r22
    364c:	6c 01       	movw	r12, r24
    364e:	60 91 d5 04 	lds	r22, 0x04D5
    3652:	70 91 d6 04 	lds	r23, 0x04D6
    3656:	88 27       	eor	r24, r24
    3658:	77 fd       	sbrc	r23, 7
    365a:	80 95       	com	r24
    365c:	98 2f       	mov	r25, r24
    365e:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e8       	ldi	r20, 0x80	; 128
    3668:	5b e3       	ldi	r21, 0x3B	; 59
    366a:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    366e:	1b 01       	movw	r2, r22
    3670:	2c 01       	movw	r4, r24
                
                // regular atan method, more work and does not adjust for quadrants automatically
                ax = degrees(atan(xc / sqrt(yc*yc + zc*zc)));
    3672:	c6 01       	movw	r24, r12
    3674:	b5 01       	movw	r22, r10
    3676:	a6 01       	movw	r20, r12
    3678:	95 01       	movw	r18, r10
    367a:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    367e:	69 83       	std	Y+1, r22	; 0x01
    3680:	7a 83       	std	Y+2, r23	; 0x02
    3682:	8b 83       	std	Y+3, r24	; 0x03
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	c2 01       	movw	r24, r4
    3688:	b1 01       	movw	r22, r2
    368a:	a2 01       	movw	r20, r4
    368c:	91 01       	movw	r18, r2
    368e:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3692:	6d 83       	std	Y+5, r22	; 0x05
    3694:	7e 83       	std	Y+6, r23	; 0x06
    3696:	8f 83       	std	Y+7, r24	; 0x07
    3698:	98 87       	std	Y+8, r25	; 0x08
    369a:	69 81       	ldd	r22, Y+1	; 0x01
    369c:	7a 81       	ldd	r23, Y+2	; 0x02
    369e:	8b 81       	ldd	r24, Y+3	; 0x03
    36a0:	9c 81       	ldd	r25, Y+4	; 0x04
    36a2:	2d 81       	ldd	r18, Y+5	; 0x05
    36a4:	3e 81       	ldd	r19, Y+6	; 0x06
    36a6:	4f 81       	ldd	r20, Y+7	; 0x07
    36a8:	58 85       	ldd	r21, Y+8	; 0x08
    36aa:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    36ae:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	c8 01       	movw	r24, r16
    36b8:	b7 01       	movw	r22, r14
    36ba:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    36be:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <atan>
    36c2:	21 ee       	ldi	r18, 0xE1	; 225
    36c4:	3e e2       	ldi	r19, 0x2E	; 46
    36c6:	45 e6       	ldi	r20, 0x65	; 101
    36c8:	52 e4       	ldi	r21, 0x42	; 66
    36ca:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    36ce:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    36d2:	3b 01       	movw	r6, r22
    36d4:	4c 01       	movw	r8, r24
    36d6:	70 93 80 05 	sts	0x0580, r23
    36da:	60 93 7f 05 	sts	0x057F, r22
                ay = degrees(atan(yc / sqrt(xc*xc + zc*zc)));
    36de:	c8 01       	movw	r24, r16
    36e0:	b7 01       	movw	r22, r14
    36e2:	a8 01       	movw	r20, r16
    36e4:	97 01       	movw	r18, r14
    36e6:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    36ea:	7b 01       	movw	r14, r22
    36ec:	8c 01       	movw	r16, r24
    36ee:	2d 81       	ldd	r18, Y+5	; 0x05
    36f0:	3e 81       	ldd	r19, Y+6	; 0x06
    36f2:	4f 81       	ldd	r20, Y+7	; 0x07
    36f4:	58 85       	ldd	r21, Y+8	; 0x08
    36f6:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    36fa:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    36fe:	9b 01       	movw	r18, r22
    3700:	ac 01       	movw	r20, r24
    3702:	c6 01       	movw	r24, r12
    3704:	b5 01       	movw	r22, r10
    3706:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    370a:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <atan>
    370e:	21 ee       	ldi	r18, 0xE1	; 225
    3710:	3e e2       	ldi	r19, 0x2E	; 46
    3712:	45 e6       	ldi	r20, 0x65	; 101
    3714:	52 e4       	ldi	r21, 0x42	; 66
    3716:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    371a:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    371e:	70 93 82 05 	sts	0x0582, r23
    3722:	60 93 81 05 	sts	0x0581, r22
                //az = degrees(atan(sqrt(xc*xc + yc*yc) / zc));
                az = degrees(atan(zc / sqrt(xc*xc + yc*yc)));
    3726:	c8 01       	movw	r24, r16
    3728:	b7 01       	movw	r22, r14
    372a:	29 81       	ldd	r18, Y+1	; 0x01
    372c:	3a 81       	ldd	r19, Y+2	; 0x02
    372e:	4b 81       	ldd	r20, Y+3	; 0x03
    3730:	5c 81       	ldd	r21, Y+4	; 0x04
    3732:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3736:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    373a:	9b 01       	movw	r18, r22
    373c:	ac 01       	movw	r20, r24
    373e:	c2 01       	movw	r24, r4
    3740:	b1 01       	movw	r22, r2
    3742:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    3746:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <atan>
    374a:	21 ee       	ldi	r18, 0xE1	; 225
    374c:	3e e2       	ldi	r19, 0x2E	; 46
    374e:	45 e6       	ldi	r20, 0x65	; 101
    3750:	52 e4       	ldi	r21, 0x42	; 66
    3752:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3756:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    375a:	ab 01       	movw	r20, r22
    375c:	70 93 84 05 	sts	0x0584, r23
    3760:	60 93 83 05 	sts	0x0583, r22
                // atan2 is definitely very simple
                //ax = degrees(atan2(yc, zc));
                //ay = degrees(atan2(xc, zc));
                //az = degrees(atan(sqrt(xc*xc + yc*yc) / zc));

                int axa = abs(ax), aya = abs(ay); //, aza = abs(az);
    3764:	20 91 81 05 	lds	r18, 0x0581
    3768:	30 91 82 05 	lds	r19, 0x0582
                if (axa > 90 || aya > 90) az += 180;
    376c:	c3 01       	movw	r24, r6
    376e:	77 fe       	sbrs	r7, 7
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <loop+0x8c8>
    3772:	90 95       	com	r25
    3774:	81 95       	neg	r24
    3776:	9f 4f       	sbci	r25, 0xFF	; 255
    3778:	8b 35       	cpi	r24, 0x5B	; 91
    377a:	91 05       	cpc	r25, r1
    377c:	44 f4       	brge	.+16     	; 0x378e <loop+0x8de>
    377e:	37 ff       	sbrs	r19, 7
    3780:	03 c0       	rjmp	.+6      	; 0x3788 <loop+0x8d8>
    3782:	30 95       	com	r19
    3784:	21 95       	neg	r18
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	2b 35       	cpi	r18, 0x5B	; 91
    378a:	31 05       	cpc	r19, r1
    378c:	34 f0       	brlt	.+12     	; 0x379a <loop+0x8ea>
    378e:	4c 54       	subi	r20, 0x4C	; 76
    3790:	5f 4f       	sbci	r21, 0xFF	; 255
    3792:	50 93 84 05 	sts	0x0584, r21
    3796:	40 93 83 05 	sts	0x0583, r20
                    Serial.print(ax); Serial.print(" ");
                    Serial.print(ay); Serial.print(" ");
                    Serial.println(az);
                #endif /* SERIAL_DEBUG_ACCEL */
        
                accelTick++;
    379a:	80 91 c9 04 	lds	r24, 0x04C9
    379e:	90 91 ca 04 	lds	r25, 0x04CA
    37a2:	01 96       	adiw	r24, 0x01	; 1
    37a4:	90 93 ca 04 	sts	0x04CA, r25
    37a8:	80 93 c9 04 	sts	0x04C9, r24
        
            /* ===============================================
             * READ AND PROCESS GYROSCOPE DATA
            =============================================== */
            #ifdef ENABLE_GYRO
                gx00 = gx0;
    37ac:	80 91 ca 05 	lds	r24, 0x05CA
    37b0:	90 91 cb 05 	lds	r25, 0x05CB
    37b4:	90 93 d1 05 	sts	0x05D1, r25
    37b8:	80 93 d0 05 	sts	0x05D0, r24
                gy00 = gy0;
    37bc:	80 91 cc 05 	lds	r24, 0x05CC
    37c0:	90 91 cd 05 	lds	r25, 0x05CD
    37c4:	90 93 d3 05 	sts	0x05D3, r25
    37c8:	80 93 d2 05 	sts	0x05D2, r24
                gz00 = gz0;
    37cc:	80 91 ce 05 	lds	r24, 0x05CE
    37d0:	90 91 cf 05 	lds	r25, 0x05CF
    37d4:	90 93 d5 05 	sts	0x05D5, r25
    37d8:	80 93 d4 05 	sts	0x05D4, r24
                gx0 = gx;
    37dc:	80 91 c4 05 	lds	r24, 0x05C4
    37e0:	90 91 c5 05 	lds	r25, 0x05C5
    37e4:	90 93 cb 05 	sts	0x05CB, r25
    37e8:	80 93 ca 05 	sts	0x05CA, r24
                gy0 = gy;
    37ec:	80 91 c6 05 	lds	r24, 0x05C6
    37f0:	90 91 c7 05 	lds	r25, 0x05C7
    37f4:	90 93 cd 05 	sts	0x05CD, r25
    37f8:	80 93 cc 05 	sts	0x05CC, r24
                gz0 = gz;
    37fc:	80 91 c8 05 	lds	r24, 0x05C8
    3800:	90 91 c9 05 	lds	r25, 0x05C9
    3804:	90 93 cf 05 	sts	0x05CF, r25
    3808:	80 93 ce 05 	sts	0x05CE, r24

                // read gyroscope with correct rotation settings
                if      (opt_gyro_rot90 == 0) { // no rotation:            x = +x, y = +y, z = +z
    380c:	80 91 2d 04 	lds	r24, 0x042D
    3810:	88 23       	and	r24, r24
    3812:	59 f4       	brne	.+22     	; 0x382a <loop+0x97a>
                    gyro.readGyroRaw(&gxRaw, &gyRaw, &gzRaw);
    3814:	8b e9       	ldi	r24, 0x9B	; 155
    3816:	95 e0       	ldi	r25, 0x05	; 5
    3818:	6e eb       	ldi	r22, 0xBE	; 190
    381a:	75 e0       	ldi	r23, 0x05	; 5
    381c:	40 ec       	ldi	r20, 0xC0	; 192
    381e:	55 e0       	ldi	r21, 0x05	; 5
    3820:	22 ec       	ldi	r18, 0xC2	; 194
    3822:	35 e0       	ldi	r19, 0x05	; 5
    3824:	0e 94 3b 31 	call	0x6276	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
    3828:	78 c0       	rjmp	.+240    	; 0x391a <loop+0xa6a>
                }
                else if (opt_gyro_rot90 == 1) { // 90 around x axis:       x = +x, y = -z, z = +y
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	49 f4       	brne	.+18     	; 0x3840 <loop+0x990>
                    gyro.readGyroRaw(&gxRaw, &gzRaw, &gyRaw);
    382e:	8b e9       	ldi	r24, 0x9B	; 155
    3830:	95 e0       	ldi	r25, 0x05	; 5
    3832:	6e eb       	ldi	r22, 0xBE	; 190
    3834:	75 e0       	ldi	r23, 0x05	; 5
    3836:	42 ec       	ldi	r20, 0xC2	; 194
    3838:	55 e0       	ldi	r21, 0x05	; 5
    383a:	20 ec       	ldi	r18, 0xC0	; 192
    383c:	35 e0       	ldi	r19, 0x05	; 5
    383e:	60 c0       	rjmp	.+192    	; 0x3900 <loop+0xa50>
                    gzRaw = -gzRaw;
                }
                else if (opt_gyro_rot90 == 2) { // 90 around y axis:       x = -z, y = +y, z = +x
    3840:	82 30       	cpi	r24, 0x02	; 2
    3842:	09 f4       	brne	.+2      	; 0x3846 <loop+0x996>
    3844:	55 c0       	rjmp	.+170    	; 0x38f0 <loop+0xa40>
                    gyro.readGyroRaw(&gzRaw, &gyRaw, &gxRaw);
                    gzRaw = -gzRaw;
                }
                else if (opt_gyro_rot90 == 4) { // 90 around z axis;       x = -y, y = +x, z = +z
    3846:	84 30       	cpi	r24, 0x04	; 4
    3848:	b1 f4       	brne	.+44     	; 0x3876 <loop+0x9c6>
                    gyro.readGyroRaw(&gyRaw, &gxRaw, &gzRaw);
    384a:	8b e9       	ldi	r24, 0x9B	; 155
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	60 ec       	ldi	r22, 0xC0	; 192
    3850:	75 e0       	ldi	r23, 0x05	; 5
    3852:	4e eb       	ldi	r20, 0xBE	; 190
    3854:	55 e0       	ldi	r21, 0x05	; 5
    3856:	22 ec       	ldi	r18, 0xC2	; 194
    3858:	35 e0       	ldi	r19, 0x05	; 5
    385a:	0e 94 3b 31 	call	0x6276	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
                    gyRaw = -gyRaw;
    385e:	80 91 c0 05 	lds	r24, 0x05C0
    3862:	90 91 c1 05 	lds	r25, 0x05C1
    3866:	90 95       	com	r25
    3868:	81 95       	neg	r24
    386a:	9f 4f       	sbci	r25, 0xFF	; 255
    386c:	90 93 c1 05 	sts	0x05C1, r25
    3870:	80 93 c0 05 	sts	0x05C0, r24
    3874:	52 c0       	rjmp	.+164    	; 0x391a <loop+0xa6a>
                }
                else if (opt_gyro_rot90 == 3) { // 90 around x, y axes:    x = -z, y = -x, z = +y
    3876:	83 30       	cpi	r24, 0x03	; 3
    3878:	b1 f4       	brne	.+44     	; 0x38a6 <loop+0x9f6>
                    gyro.readGyroRaw(&gzRaw, &gxRaw, &gyRaw);
    387a:	8b e9       	ldi	r24, 0x9B	; 155
    387c:	95 e0       	ldi	r25, 0x05	; 5
    387e:	62 ec       	ldi	r22, 0xC2	; 194
    3880:	75 e0       	ldi	r23, 0x05	; 5
    3882:	4e eb       	ldi	r20, 0xBE	; 190
    3884:	55 e0       	ldi	r21, 0x05	; 5
    3886:	20 ec       	ldi	r18, 0xC0	; 192
    3888:	35 e0       	ldi	r19, 0x05	; 5
    388a:	0e 94 3b 31 	call	0x6276	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
                    gxRaw = -gxRaw;
    388e:	80 91 be 05 	lds	r24, 0x05BE
    3892:	90 91 bf 05 	lds	r25, 0x05BF
    3896:	90 95       	com	r25
    3898:	81 95       	neg	r24
    389a:	9f 4f       	sbci	r25, 0xFF	; 255
    389c:	90 93 bf 05 	sts	0x05BF, r25
    38a0:	80 93 be 05 	sts	0x05BE, r24
    38a4:	2f c0       	rjmp	.+94     	; 0x3904 <loop+0xa54>
                    gzRaw = -gzRaw;
                }
                else if (opt_gyro_rot90 == 5) { // 90 around x, z axes:    x = -y, y = -z, z = +x
    38a6:	85 30       	cpi	r24, 0x05	; 5
    38a8:	49 f4       	brne	.+18     	; 0x38bc <loop+0xa0c>
                    gyro.readGyroRaw(&gyRaw, &gzRaw, &gxRaw);
    38aa:	8b e9       	ldi	r24, 0x9B	; 155
    38ac:	95 e0       	ldi	r25, 0x05	; 5
    38ae:	60 ec       	ldi	r22, 0xC0	; 192
    38b0:	75 e0       	ldi	r23, 0x05	; 5
    38b2:	42 ec       	ldi	r20, 0xC2	; 194
    38b4:	55 e0       	ldi	r21, 0x05	; 5
    38b6:	2e eb       	ldi	r18, 0xBE	; 190
    38b8:	35 e0       	ldi	r19, 0x05	; 5
    38ba:	0a c0       	rjmp	.+20     	; 0x38d0 <loop+0xa20>
                    gyRaw = -gyRaw;
                    gzRaw = -gzRaw;
                }
                else if (opt_gyro_rot90 == 6) { // 90 around y, z axes:    x = -z, y = +x, z = -y
    38bc:	86 30       	cpi	r24, 0x06	; 6
    38be:	b1 f4       	brne	.+44     	; 0x38ec <loop+0xa3c>
                    gyro.readGyroRaw(&gzRaw, &gxRaw, &gyRaw);
    38c0:	8b e9       	ldi	r24, 0x9B	; 155
    38c2:	95 e0       	ldi	r25, 0x05	; 5
    38c4:	62 ec       	ldi	r22, 0xC2	; 194
    38c6:	75 e0       	ldi	r23, 0x05	; 5
    38c8:	4e eb       	ldi	r20, 0xBE	; 190
    38ca:	55 e0       	ldi	r21, 0x05	; 5
    38cc:	20 ec       	ldi	r18, 0xC0	; 192
    38ce:	35 e0       	ldi	r19, 0x05	; 5
    38d0:	0e 94 3b 31 	call	0x6276	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
                    gyRaw = -gyRaw;
    38d4:	80 91 c0 05 	lds	r24, 0x05C0
    38d8:	90 91 c1 05 	lds	r25, 0x05C1
    38dc:	90 95       	com	r25
    38de:	81 95       	neg	r24
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	90 93 c1 05 	sts	0x05C1, r25
    38e6:	80 93 c0 05 	sts	0x05C0, r24
    38ea:	0c c0       	rjmp	.+24     	; 0x3904 <loop+0xa54>
                    gzRaw = -gzRaw;
                }
                else if (opt_gyro_rot90 == 7) { // 90 around x, y, z axes: x = -z, y = +y, z = +x
    38ec:	87 30       	cpi	r24, 0x07	; 7
    38ee:	a9 f4       	brne	.+42     	; 0x391a <loop+0xa6a>
                    gyro.readGyroRaw(&gzRaw, &gyRaw, &gxRaw);
    38f0:	8b e9       	ldi	r24, 0x9B	; 155
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	62 ec       	ldi	r22, 0xC2	; 194
    38f6:	75 e0       	ldi	r23, 0x05	; 5
    38f8:	40 ec       	ldi	r20, 0xC0	; 192
    38fa:	55 e0       	ldi	r21, 0x05	; 5
    38fc:	2e eb       	ldi	r18, 0xBE	; 190
    38fe:	35 e0       	ldi	r19, 0x05	; 5
    3900:	0e 94 3b 31 	call	0x6276	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
                    gzRaw = -gzRaw;
    3904:	80 91 c2 05 	lds	r24, 0x05C2
    3908:	90 91 c3 05 	lds	r25, 0x05C3
    390c:	90 95       	com	r25
    390e:	81 95       	neg	r24
    3910:	9f 4f       	sbci	r25, 0xFF	; 255
    3912:	90 93 c3 05 	sts	0x05C3, r25
    3916:	80 93 c2 05 	sts	0x05C2, r24
                }
                
                // calculate reading time difference
                gyroDiff = gyroMicros > 0 ? (micros() - gyroMicros) : 1; // eliminate error from large gaps of inactivity
    391a:	80 91 b4 05 	lds	r24, 0x05B4
    391e:	90 91 b5 05 	lds	r25, 0x05B5
    3922:	a0 91 b6 05 	lds	r26, 0x05B6
    3926:	b0 91 b7 05 	lds	r27, 0x05B7
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	a1 05       	cpc	r26, r1
    392e:	b1 05       	cpc	r27, r1
    3930:	29 f4       	brne	.+10     	; 0x393c <loop+0xa8c>
    3932:	21 e0       	ldi	r18, 0x01	; 1
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	10 c0       	rjmp	.+32     	; 0x395c <loop+0xaac>
    393c:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <micros>
    3940:	9b 01       	movw	r18, r22
    3942:	ac 01       	movw	r20, r24
    3944:	80 91 b4 05 	lds	r24, 0x05B4
    3948:	90 91 b5 05 	lds	r25, 0x05B5
    394c:	a0 91 b6 05 	lds	r26, 0x05B6
    3950:	b0 91 b7 05 	lds	r27, 0x05B7
    3954:	28 1b       	sub	r18, r24
    3956:	39 0b       	sbc	r19, r25
    3958:	4a 0b       	sbc	r20, r26
    395a:	5b 0b       	sbc	r21, r27
    395c:	20 93 b8 05 	sts	0x05B8, r18
    3960:	30 93 b9 05 	sts	0x05B9, r19
    3964:	40 93 ba 05 	sts	0x05BA, r20
    3968:	50 93 bb 05 	sts	0x05BB, r21
                gyroMicros = micros();
    396c:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <micros>
    3970:	60 93 b4 05 	sts	0x05B4, r22
    3974:	70 93 b5 05 	sts	0x05B5, r23
    3978:	80 93 b6 05 	sts	0x05B6, r24
    397c:	90 93 b7 05 	sts	0x05B7, r25

                // offset
                gxRaw += opt_gyro_offset[0];
    3980:	60 91 be 05 	lds	r22, 0x05BE
    3984:	70 91 bf 05 	lds	r23, 0x05BF
    3988:	20 91 b0 04 	lds	r18, 0x04B0
    398c:	30 91 b1 04 	lds	r19, 0x04B1
    3990:	62 0f       	add	r22, r18
    3992:	73 1f       	adc	r23, r19
                gyRaw += opt_gyro_offset[1];
    3994:	e0 90 c0 05 	lds	r14, 0x05C0
    3998:	f0 90 c1 05 	lds	r15, 0x05C1
    399c:	20 91 b2 04 	lds	r18, 0x04B2
    39a0:	30 91 b3 04 	lds	r19, 0x04B3
    39a4:	e2 0e       	add	r14, r18
    39a6:	f3 1e       	adc	r15, r19
                gzRaw += opt_gyro_offset[2];
    39a8:	a0 90 c2 05 	lds	r10, 0x05C2
    39ac:	b0 90 c3 05 	lds	r11, 0x05C3
    39b0:	20 91 b4 04 	lds	r18, 0x04B4
    39b4:	30 91 b5 04 	lds	r19, 0x04B5
    39b8:	a2 0e       	add	r10, r18
    39ba:	b3 1e       	adc	r11, r19
                
                // calibrate
                gxRaw = (float)gxRaw * opt_gyro_calibrate[0] / 15; //14.375;
    39bc:	88 27       	eor	r24, r24
    39be:	77 fd       	sbrc	r23, 7
    39c0:	80 95       	com	r24
    39c2:	98 2f       	mov	r25, r24
    39c4:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    39c8:	20 91 16 04 	lds	r18, 0x0416
    39cc:	30 91 17 04 	lds	r19, 0x0417
    39d0:	40 91 18 04 	lds	r20, 0x0418
    39d4:	50 91 19 04 	lds	r21, 0x0419
    39d8:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e7       	ldi	r20, 0x70	; 112
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    39e8:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    39ec:	3b 01       	movw	r6, r22
    39ee:	4c 01       	movw	r8, r24
    39f0:	70 93 bf 05 	sts	0x05BF, r23
    39f4:	60 93 be 05 	sts	0x05BE, r22
                gyRaw = (float)gyRaw * opt_gyro_calibrate[1] / 15; //14.375;
    39f8:	00 27       	eor	r16, r16
    39fa:	f7 fc       	sbrc	r15, 7
    39fc:	00 95       	com	r16
    39fe:	10 2f       	mov	r17, r16
    3a00:	c8 01       	movw	r24, r16
    3a02:	b7 01       	movw	r22, r14
    3a04:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3a08:	20 91 1a 04 	lds	r18, 0x041A
    3a0c:	30 91 1b 04 	lds	r19, 0x041B
    3a10:	40 91 1c 04 	lds	r20, 0x041C
    3a14:	50 91 1d 04 	lds	r21, 0x041D
    3a18:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e7       	ldi	r20, 0x70	; 112
    3a22:	51 e4       	ldi	r21, 0x41	; 65
    3a24:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    3a28:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3a2c:	1b 01       	movw	r2, r22
    3a2e:	2c 01       	movw	r4, r24
    3a30:	70 93 c1 05 	sts	0x05C1, r23
    3a34:	60 93 c0 05 	sts	0x05C0, r22
                gzRaw = (float)gzRaw * opt_gyro_calibrate[2] / 15; //14.375;
    3a38:	cc 24       	eor	r12, r12
    3a3a:	b7 fc       	sbrc	r11, 7
    3a3c:	c0 94       	com	r12
    3a3e:	dc 2c       	mov	r13, r12
    3a40:	c6 01       	movw	r24, r12
    3a42:	b5 01       	movw	r22, r10
    3a44:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3a48:	20 91 1e 04 	lds	r18, 0x041E
    3a4c:	30 91 1f 04 	lds	r19, 0x041F
    3a50:	40 91 20 04 	lds	r20, 0x0420
    3a54:	50 91 21 04 	lds	r21, 0x0421
    3a58:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e7       	ldi	r20, 0x70	; 112
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    3a68:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3a6c:	4b 01       	movw	r8, r22
    3a6e:	5c 01       	movw	r10, r24
    3a70:	70 93 c3 05 	sts	0x05C3, r23
    3a74:	60 93 c2 05 	sts	0x05C2, r22
                
                // Kalman filtering
                gx = gx0 + (opt_gyro_kalman_constant * (gxRaw - gx0));
    3a78:	00 91 ca 05 	lds	r16, 0x05CA
    3a7c:	10 91 cb 05 	lds	r17, 0x05CB
    3a80:	b8 01       	movw	r22, r16
    3a82:	88 27       	eor	r24, r24
    3a84:	77 fd       	sbrc	r23, 7
    3a86:	80 95       	com	r24
    3a88:	98 2f       	mov	r25, r24
    3a8a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3a8e:	6b 01       	movw	r12, r22
    3a90:	7c 01       	movw	r14, r24
    3a92:	60 1a       	sub	r6, r16
    3a94:	71 0a       	sbc	r7, r17
    3a96:	b3 01       	movw	r22, r6
    3a98:	88 27       	eor	r24, r24
    3a9a:	77 fd       	sbrc	r23, 7
    3a9c:	80 95       	com	r24
    3a9e:	98 2f       	mov	r25, r24
    3aa0:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3aa4:	20 91 28 04 	lds	r18, 0x0428
    3aa8:	30 91 29 04 	lds	r19, 0x0429
    3aac:	40 91 2a 04 	lds	r20, 0x042A
    3ab0:	50 91 2b 04 	lds	r21, 0x042B
    3ab4:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3ab8:	9b 01       	movw	r18, r22
    3aba:	ac 01       	movw	r20, r24
    3abc:	c7 01       	movw	r24, r14
    3abe:	b6 01       	movw	r22, r12
    3ac0:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3ac4:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3ac8:	70 93 c5 05 	sts	0x05C5, r23
    3acc:	60 93 c4 05 	sts	0x05C4, r22
                gy = gy0 + (opt_gyro_kalman_constant * (gyRaw - gy0));
    3ad0:	00 91 cc 05 	lds	r16, 0x05CC
    3ad4:	10 91 cd 05 	lds	r17, 0x05CD
    3ad8:	b8 01       	movw	r22, r16
    3ada:	88 27       	eor	r24, r24
    3adc:	77 fd       	sbrc	r23, 7
    3ade:	80 95       	com	r24
    3ae0:	98 2f       	mov	r25, r24
    3ae2:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3ae6:	6b 01       	movw	r12, r22
    3ae8:	7c 01       	movw	r14, r24
    3aea:	20 1a       	sub	r2, r16
    3aec:	31 0a       	sbc	r3, r17
    3aee:	b1 01       	movw	r22, r2
    3af0:	88 27       	eor	r24, r24
    3af2:	77 fd       	sbrc	r23, 7
    3af4:	80 95       	com	r24
    3af6:	98 2f       	mov	r25, r24
    3af8:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3afc:	20 91 28 04 	lds	r18, 0x0428
    3b00:	30 91 29 04 	lds	r19, 0x0429
    3b04:	40 91 2a 04 	lds	r20, 0x042A
    3b08:	50 91 2b 04 	lds	r21, 0x042B
    3b0c:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3b10:	9b 01       	movw	r18, r22
    3b12:	ac 01       	movw	r20, r24
    3b14:	c7 01       	movw	r24, r14
    3b16:	b6 01       	movw	r22, r12
    3b18:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3b1c:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3b20:	70 93 c7 05 	sts	0x05C7, r23
    3b24:	60 93 c6 05 	sts	0x05C6, r22
                gz = gz0 + (opt_gyro_kalman_constant * (gzRaw - gz0));
    3b28:	00 91 ce 05 	lds	r16, 0x05CE
    3b2c:	10 91 cf 05 	lds	r17, 0x05CF
    3b30:	b8 01       	movw	r22, r16
    3b32:	88 27       	eor	r24, r24
    3b34:	77 fd       	sbrc	r23, 7
    3b36:	80 95       	com	r24
    3b38:	98 2f       	mov	r25, r24
    3b3a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3b3e:	6b 01       	movw	r12, r22
    3b40:	7c 01       	movw	r14, r24
    3b42:	94 01       	movw	r18, r8
    3b44:	20 1b       	sub	r18, r16
    3b46:	31 0b       	sbc	r19, r17
    3b48:	b9 01       	movw	r22, r18
    3b4a:	88 27       	eor	r24, r24
    3b4c:	77 fd       	sbrc	r23, 7
    3b4e:	80 95       	com	r24
    3b50:	98 2f       	mov	r25, r24
    3b52:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3b56:	20 91 28 04 	lds	r18, 0x0428
    3b5a:	30 91 29 04 	lds	r19, 0x0429
    3b5e:	40 91 2a 04 	lds	r20, 0x042A
    3b62:	50 91 2b 04 	lds	r21, 0x042B
    3b66:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    3b6a:	9b 01       	movw	r18, r22
    3b6c:	ac 01       	movw	r20, r24
    3b6e:	c7 01       	movw	r24, r14
    3b70:	b6 01       	movw	r22, r12
    3b72:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3b76:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3b7a:	70 93 c9 05 	sts	0x05C9, r23
    3b7e:	60 93 c8 05 	sts	0x05C8, r22
                
                // averaging
                if (opt_gyro_smooth_average > 0) {
    3b82:	80 91 b6 04 	lds	r24, 0x04B6
    3b86:	88 23       	and	r24, r24
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <loop+0xcdc>
    3b8a:	b0 c0       	rjmp	.+352    	; 0x3cec <loop+0xe3c>
                    for (i = 1; i < opt_gyro_smooth_average; i++) {
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	a0 e0       	ldi	r26, 0x00	; 0
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	80 93 90 04 	sts	0x0490, r24
    3b98:	90 93 91 04 	sts	0x0491, r25
    3b9c:	a0 93 92 04 	sts	0x0492, r26
    3ba0:	b0 93 93 04 	sts	0x0493, r27
    3ba4:	3d c0       	rjmp	.+122    	; 0x3c20 <loop+0xd70>
                        gx += gxHist[(gyroTick + i) % opt_gyro_smooth_average];
    3ba6:	b4 01       	movw	r22, r8
    3ba8:	88 27       	eor	r24, r24
    3baa:	77 fd       	sbrc	r23, 7
    3bac:	80 95       	com	r24
    3bae:	98 2f       	mov	r25, r24
    3bb0:	6e 0d       	add	r22, r14
    3bb2:	7f 1d       	adc	r23, r15
    3bb4:	80 1f       	adc	r24, r16
    3bb6:	91 1f       	adc	r25, r17
    3bb8:	0e 94 13 3f 	call	0x7e26	; 0x7e26 <__divmodsi4>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	e8 51       	subi	r30, 0x18	; 24
    3bc8:	fa 4f       	sbci	r31, 0xFA	; 250
    3bca:	20 81       	ld	r18, Z
    3bcc:	31 81       	ldd	r19, Z+1	; 0x01
    3bce:	42 0e       	add	r4, r18
    3bd0:	53 1e       	adc	r5, r19
    3bd2:	50 92 c5 05 	sts	0x05C5, r5
    3bd6:	40 92 c4 05 	sts	0x05C4, r4
                        gy += gyHist[(gyroTick + i) % opt_gyro_smooth_average];
    3bda:	fc 01       	movw	r30, r24
    3bdc:	e0 5f       	subi	r30, 0xF0	; 240
    3bde:	f9 4f       	sbci	r31, 0xF9	; 249
    3be0:	20 81       	ld	r18, Z
    3be2:	31 81       	ldd	r19, Z+1	; 0x01
    3be4:	c2 0e       	add	r12, r18
    3be6:	d3 1e       	adc	r13, r19
    3be8:	d0 92 c7 05 	sts	0x05C7, r13
    3bec:	c0 92 c6 05 	sts	0x05C6, r12
                        gz += gzHist[(gyroTick + i) % opt_gyro_smooth_average];
    3bf0:	88 5c       	subi	r24, 0xC8	; 200
    3bf2:	99 4f       	sbci	r25, 0xF9	; 249
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	68 0e       	add	r6, r24
    3bfc:	79 1e       	adc	r7, r25
    3bfe:	70 92 c9 05 	sts	0x05C9, r7
    3c02:	60 92 c8 05 	sts	0x05C8, r6
                gy = gy0 + (opt_gyro_kalman_constant * (gyRaw - gy0));
                gz = gz0 + (opt_gyro_kalman_constant * (gzRaw - gz0));
                
                // averaging
                if (opt_gyro_smooth_average > 0) {
                    for (i = 1; i < opt_gyro_smooth_average; i++) {
    3c06:	08 94       	sec
    3c08:	e1 1c       	adc	r14, r1
    3c0a:	f1 1c       	adc	r15, r1
    3c0c:	01 1d       	adc	r16, r1
    3c0e:	11 1d       	adc	r17, r1
    3c10:	e0 92 90 04 	sts	0x0490, r14
    3c14:	f0 92 91 04 	sts	0x0491, r15
    3c18:	00 93 92 04 	sts	0x0492, r16
    3c1c:	10 93 93 04 	sts	0x0493, r17
    3c20:	e0 90 90 04 	lds	r14, 0x0490
    3c24:	f0 90 91 04 	lds	r15, 0x0491
    3c28:	00 91 92 04 	lds	r16, 0x0492
    3c2c:	10 91 93 04 	lds	r17, 0x0493
    3c30:	b0 90 b6 04 	lds	r11, 0x04B6
    3c34:	2b 2d       	mov	r18, r11
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	40 90 c4 05 	lds	r4, 0x05C4
    3c40:	50 90 c5 05 	lds	r5, 0x05C5
    3c44:	c0 90 c6 05 	lds	r12, 0x05C6
    3c48:	d0 90 c7 05 	lds	r13, 0x05C7
    3c4c:	60 90 c8 05 	lds	r6, 0x05C8
    3c50:	70 90 c9 05 	lds	r7, 0x05C9
    3c54:	80 90 bc 05 	lds	r8, 0x05BC
    3c58:	90 90 bd 05 	lds	r9, 0x05BD
    3c5c:	e2 16       	cp	r14, r18
    3c5e:	f3 06       	cpc	r15, r19
    3c60:	04 07       	cpc	r16, r20
    3c62:	15 07       	cpc	r17, r21
    3c64:	0c f4       	brge	.+2      	; 0x3c68 <loop+0xdb8>
    3c66:	9f cf       	rjmp	.-194    	; 0x3ba6 <loop+0xcf6>
                        gx += gxHist[(gyroTick + i) % opt_gyro_smooth_average];
                        gy += gyHist[(gyroTick + i) % opt_gyro_smooth_average];
                        gz += gzHist[(gyroTick + i) % opt_gyro_smooth_average];
                    }
                    gx /= opt_gyro_smooth_average;
    3c68:	c2 01       	movw	r24, r4
    3c6a:	6b 2d       	mov	r22, r11
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3c72:	9b 01       	movw	r18, r22
    3c74:	70 93 c5 05 	sts	0x05C5, r23
    3c78:	60 93 c4 05 	sts	0x05C4, r22
                    gy /= opt_gyro_smooth_average;
    3c7c:	c6 01       	movw	r24, r12
    3c7e:	6b 2d       	mov	r22, r11
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3c86:	8b 01       	movw	r16, r22
    3c88:	70 93 c7 05 	sts	0x05C7, r23
    3c8c:	60 93 c6 05 	sts	0x05C6, r22
                    gz /= opt_gyro_smooth_average;
    3c90:	c3 01       	movw	r24, r6
    3c92:	6b 2d       	mov	r22, r11
    3c94:	70 e0       	ldi	r23, 0x00	; 0
    3c96:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3c9a:	7b 01       	movw	r14, r22
    3c9c:	70 93 c9 05 	sts	0x05C9, r23
    3ca0:	60 93 c8 05 	sts	0x05C8, r22
                    gxHist[gyroTick % opt_gyro_smooth_average] = gx;
    3ca4:	c4 01       	movw	r24, r8
    3ca6:	6b 2d       	mov	r22, r11
    3ca8:	70 e0       	ldi	r23, 0x00	; 0
    3caa:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3cae:	fc 01       	movw	r30, r24
    3cb0:	ee 0f       	add	r30, r30
    3cb2:	ff 1f       	adc	r31, r31
    3cb4:	e8 51       	subi	r30, 0x18	; 24
    3cb6:	fa 4f       	sbci	r31, 0xFA	; 250
    3cb8:	31 83       	std	Z+1, r19	; 0x01
    3cba:	20 83       	st	Z, r18
                    gyHist[gyroTick % opt_gyro_smooth_average] = gy;
    3cbc:	c4 01       	movw	r24, r8
    3cbe:	6b 2d       	mov	r22, r11
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	ee 0f       	add	r30, r30
    3cca:	ff 1f       	adc	r31, r31
    3ccc:	e0 5f       	subi	r30, 0xF0	; 240
    3cce:	f9 4f       	sbci	r31, 0xF9	; 249
    3cd0:	11 83       	std	Z+1, r17	; 0x01
    3cd2:	00 83       	st	Z, r16
                    gzHist[gyroTick % opt_gyro_smooth_average] = gz;
    3cd4:	c4 01       	movw	r24, r8
    3cd6:	6b 2d       	mov	r22, r11
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    3cde:	fc 01       	movw	r30, r24
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	e8 5c       	subi	r30, 0xC8	; 200
    3ce6:	f9 4f       	sbci	r31, 0xF9	; 249
    3ce8:	f1 82       	std	Z+1, r15	; 0x01
    3cea:	e0 82       	st	Z, r14
                }
                
                if (opt_enable_calibration) {
    3cec:	80 91 ae 04 	lds	r24, 0x04AE
    3cf0:	90 91 af 04 	lds	r25, 0x04AF
    3cf4:	89 2b       	or	r24, r25
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <loop+0xe4a>
    3cf8:	60 c0       	rjmp	.+192    	; 0x3dba <loop+0xf0a>
                    gxMin = min(gxMin, gx);
    3cfa:	20 91 60 06 	lds	r18, 0x0660
    3cfe:	30 91 61 06 	lds	r19, 0x0661
    3d02:	80 91 c4 05 	lds	r24, 0x05C4
    3d06:	90 91 c5 05 	lds	r25, 0x05C5
    3d0a:	28 17       	cp	r18, r24
    3d0c:	39 07       	cpc	r19, r25
    3d0e:	0c f4       	brge	.+2      	; 0x3d12 <loop+0xe62>
    3d10:	c9 01       	movw	r24, r18
    3d12:	90 93 61 06 	sts	0x0661, r25
    3d16:	80 93 60 06 	sts	0x0660, r24
                    gyMin = min(gyMin, gy);
    3d1a:	20 91 62 06 	lds	r18, 0x0662
    3d1e:	30 91 63 06 	lds	r19, 0x0663
    3d22:	80 91 c6 05 	lds	r24, 0x05C6
    3d26:	90 91 c7 05 	lds	r25, 0x05C7
    3d2a:	28 17       	cp	r18, r24
    3d2c:	39 07       	cpc	r19, r25
    3d2e:	0c f4       	brge	.+2      	; 0x3d32 <loop+0xe82>
    3d30:	c9 01       	movw	r24, r18
    3d32:	90 93 63 06 	sts	0x0663, r25
    3d36:	80 93 62 06 	sts	0x0662, r24
                    gzMin = min(gzMin, gz);
    3d3a:	20 91 64 06 	lds	r18, 0x0664
    3d3e:	30 91 65 06 	lds	r19, 0x0665
    3d42:	80 91 c8 05 	lds	r24, 0x05C8
    3d46:	90 91 c9 05 	lds	r25, 0x05C9
    3d4a:	28 17       	cp	r18, r24
    3d4c:	39 07       	cpc	r19, r25
    3d4e:	0c f4       	brge	.+2      	; 0x3d52 <loop+0xea2>
    3d50:	c9 01       	movw	r24, r18
    3d52:	90 93 65 06 	sts	0x0665, r25
    3d56:	80 93 64 06 	sts	0x0664, r24
                    gxMax = max(gxMax, gx);
    3d5a:	20 91 66 06 	lds	r18, 0x0666
    3d5e:	30 91 67 06 	lds	r19, 0x0667
    3d62:	80 91 c4 05 	lds	r24, 0x05C4
    3d66:	90 91 c5 05 	lds	r25, 0x05C5
    3d6a:	82 17       	cp	r24, r18
    3d6c:	93 07       	cpc	r25, r19
    3d6e:	0c f4       	brge	.+2      	; 0x3d72 <loop+0xec2>
    3d70:	c9 01       	movw	r24, r18
    3d72:	90 93 67 06 	sts	0x0667, r25
    3d76:	80 93 66 06 	sts	0x0666, r24
                    gyMax = max(gyMax, gy);
    3d7a:	20 91 68 06 	lds	r18, 0x0668
    3d7e:	30 91 69 06 	lds	r19, 0x0669
    3d82:	80 91 c6 05 	lds	r24, 0x05C6
    3d86:	90 91 c7 05 	lds	r25, 0x05C7
    3d8a:	82 17       	cp	r24, r18
    3d8c:	93 07       	cpc	r25, r19
    3d8e:	0c f4       	brge	.+2      	; 0x3d92 <loop+0xee2>
    3d90:	c9 01       	movw	r24, r18
    3d92:	90 93 69 06 	sts	0x0669, r25
    3d96:	80 93 68 06 	sts	0x0668, r24
                    gzMax = max(gzMax, gz);
    3d9a:	20 91 6a 06 	lds	r18, 0x066A
    3d9e:	30 91 6b 06 	lds	r19, 0x066B
    3da2:	80 91 c8 05 	lds	r24, 0x05C8
    3da6:	90 91 c9 05 	lds	r25, 0x05C9
    3daa:	82 17       	cp	r24, r18
    3dac:	93 07       	cpc	r25, r19
    3dae:	0c f4       	brge	.+2      	; 0x3db2 <loop+0xf02>
    3db0:	c9 01       	movw	r24, r18
    3db2:	90 93 6b 06 	sts	0x066B, r25
    3db6:	80 93 6a 06 	sts	0x066A, r24
                    Serial.print(gx); Serial.print(" ");
                    Serial.print(gy); Serial.print(" ");
                    Serial.println(gz);
                #endif /* SERIAL_DEBUG_GYRO */
        
                gyroTick++;
    3dba:	80 91 bc 05 	lds	r24, 0x05BC
    3dbe:	90 91 bd 05 	lds	r25, 0x05BD
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	90 93 bd 05 	sts	0x05BD, r25
    3dc8:	80 93 bc 05 	sts	0x05BC, r24
            #endif /* ENABLE_GYRO */
        }
    
        #ifdef ENABLE_MOUSE
            switch (opt_mouse_mode) {
    3dcc:	90 90 b9 04 	lds	r9, 0x04B9
    3dd0:	f2 e0       	ldi	r31, 0x02	; 2
    3dd2:	9f 16       	cp	r9, r31
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <loop+0xf28>
    3dd6:	9b c0       	rjmp	.+310    	; 0x3f0e <loop+0x105e>
    3dd8:	f9 15       	cp	r31, r9
    3dda:	28 f0       	brcs	.+10     	; 0x3de6 <loop+0xf36>
    3ddc:	21 e0       	ldi	r18, 0x01	; 1
    3dde:	92 16       	cp	r9, r18
    3de0:	09 f0       	breq	.+2      	; 0x3de4 <loop+0xf34>
    3de2:	37 c2       	rjmp	.+1134   	; 0x4252 <loop+0x13a2>
    3de4:	09 c0       	rjmp	.+18     	; 0x3df8 <loop+0xf48>
    3de6:	33 e0       	ldi	r19, 0x03	; 3
    3de8:	93 16       	cp	r9, r19
    3dea:	09 f4       	brne	.+2      	; 0x3dee <loop+0xf3e>
    3dec:	09 c1       	rjmp	.+530    	; 0x4000 <loop+0x1150>
    3dee:	84 e0       	ldi	r24, 0x04	; 4
    3df0:	98 16       	cp	r9, r24
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <loop+0xf46>
    3df4:	2e c2       	rjmp	.+1116   	; 0x4252 <loop+0x13a2>
    3df6:	96 c1       	rjmp	.+812    	; 0x4124 <loop+0x1274>
                case MOUSE_MODE_TILT_VELOCITY:
                    if (aset) {
    3df8:	80 91 97 05 	lds	r24, 0x0597
    3dfc:	00 91 7f 05 	lds	r16, 0x057F
    3e00:	10 91 80 05 	lds	r17, 0x0580
    3e04:	60 90 81 05 	lds	r6, 0x0581
    3e08:	70 90 82 05 	lds	r7, 0x0582
    3e0c:	88 23       	and	r24, r24
    3e0e:	09 f4       	brne	.+2      	; 0x3e12 <loop+0xf62>
    3e10:	6b c0       	rjmp	.+214    	; 0x3ee8 <loop+0x1038>
                        mx0 = mx;
    3e12:	60 91 96 04 	lds	r22, 0x0496
    3e16:	70 91 97 04 	lds	r23, 0x0497
    3e1a:	70 93 9f 04 	sts	0x049F, r23
    3e1e:	60 93 9e 04 	sts	0x049E, r22
                        my0 = my;
    3e22:	e0 90 98 04 	lds	r14, 0x0498
    3e26:	f0 90 99 04 	lds	r15, 0x0499
    3e2a:	f0 92 a1 04 	sts	0x04A1, r15
    3e2e:	e0 92 a0 04 	sts	0x04A0, r14
                        mx -= (float)(ax - axBase) / opt_mouse_scale_mode1[0];
    3e32:	88 27       	eor	r24, r24
    3e34:	77 fd       	sbrc	r23, 7
    3e36:	80 95       	com	r24
    3e38:	98 2f       	mov	r25, r24
    3e3a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3e3e:	5b 01       	movw	r10, r22
    3e40:	6c 01       	movw	r12, r24
    3e42:	80 91 91 05 	lds	r24, 0x0591
    3e46:	90 91 92 05 	lds	r25, 0x0592
    3e4a:	08 1b       	sub	r16, r24
    3e4c:	19 0b       	sbc	r17, r25
    3e4e:	b8 01       	movw	r22, r16
    3e50:	88 27       	eor	r24, r24
    3e52:	77 fd       	sbrc	r23, 7
    3e54:	80 95       	com	r24
    3e56:	98 2f       	mov	r25, r24
    3e58:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3e5c:	20 91 30 04 	lds	r18, 0x0430
    3e60:	30 91 31 04 	lds	r19, 0x0431
    3e64:	40 91 32 04 	lds	r20, 0x0432
    3e68:	50 91 33 04 	lds	r21, 0x0433
    3e6c:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	c6 01       	movw	r24, r12
    3e76:	b5 01       	movw	r22, r10
    3e78:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    3e7c:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3e80:	70 93 97 04 	sts	0x0497, r23
    3e84:	60 93 96 04 	sts	0x0496, r22
                        my -= (float)(ay - ayBase) / opt_mouse_scale_mode1[1];
    3e88:	00 27       	eor	r16, r16
    3e8a:	f7 fc       	sbrc	r15, 7
    3e8c:	00 95       	com	r16
    3e8e:	10 2f       	mov	r17, r16
    3e90:	c8 01       	movw	r24, r16
    3e92:	b7 01       	movw	r22, r14
    3e94:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3e98:	7b 01       	movw	r14, r22
    3e9a:	8c 01       	movw	r16, r24
    3e9c:	80 91 93 05 	lds	r24, 0x0593
    3ea0:	90 91 94 05 	lds	r25, 0x0594
    3ea4:	68 1a       	sub	r6, r24
    3ea6:	79 0a       	sbc	r7, r25
    3ea8:	b3 01       	movw	r22, r6
    3eaa:	88 27       	eor	r24, r24
    3eac:	77 fd       	sbrc	r23, 7
    3eae:	80 95       	com	r24
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3eb6:	20 91 34 04 	lds	r18, 0x0434
    3eba:	30 91 35 04 	lds	r19, 0x0435
    3ebe:	40 91 36 04 	lds	r20, 0x0436
    3ec2:	50 91 37 04 	lds	r21, 0x0437
    3ec6:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    3eca:	9b 01       	movw	r18, r22
    3ecc:	ac 01       	movw	r20, r24
    3ece:	c8 01       	movw	r24, r16
    3ed0:	b7 01       	movw	r22, r14
    3ed2:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    3ed6:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3eda:	70 93 99 04 	sts	0x0499, r23
    3ede:	60 93 98 04 	sts	0x0498, r22
                        moveMouse = true;
    3ee2:	90 92 94 04 	sts	0x0494, r9
    3ee6:	b5 c1       	rjmp	.+874    	; 0x4252 <loop+0x13a2>
                    } else {
                        axBase = ax;
    3ee8:	10 93 92 05 	sts	0x0592, r17
    3eec:	00 93 91 05 	sts	0x0591, r16
                        ayBase = ay;
    3ef0:	70 92 94 05 	sts	0x0594, r7
    3ef4:	60 92 93 05 	sts	0x0593, r6
                        azBase = az;
    3ef8:	80 91 83 05 	lds	r24, 0x0583
    3efc:	90 91 84 05 	lds	r25, 0x0584
    3f00:	90 93 96 05 	sts	0x0596, r25
    3f04:	80 93 95 05 	sts	0x0595, r24
                        aset = true;
    3f08:	90 92 97 05 	sts	0x0597, r9
    3f0c:	a2 c1       	rjmp	.+836    	; 0x4252 <loop+0x13a2>
                    ayBase = ay;
                    azBase = az;
                    aset = true;
                    break;*/
                case MOUSE_MODE_TILT_POSITION:
                    mx0 = mx;
    3f0e:	c0 90 96 04 	lds	r12, 0x0496
    3f12:	d0 90 97 04 	lds	r13, 0x0497
    3f16:	d0 92 9f 04 	sts	0x049F, r13
    3f1a:	c0 92 9e 04 	sts	0x049E, r12
                    my0 = my;
    3f1e:	80 91 98 04 	lds	r24, 0x0498
    3f22:	90 91 99 04 	lds	r25, 0x0499
    3f26:	90 93 a1 04 	sts	0x04A1, r25
    3f2a:	80 93 a0 04 	sts	0x04A0, r24
                    mx += (gx < 0) ? -sqrt(-gx) : sqrt(gx);
    3f2e:	20 91 c4 05 	lds	r18, 0x05C4
    3f32:	30 91 c5 05 	lds	r19, 0x05C5
    3f36:	37 ff       	sbrs	r19, 7
    3f38:	13 c0       	rjmp	.+38     	; 0x3f60 <loop+0x10b0>
    3f3a:	66 27       	eor	r22, r22
    3f3c:	77 27       	eor	r23, r23
    3f3e:	62 1b       	sub	r22, r18
    3f40:	73 0b       	sbc	r23, r19
    3f42:	88 27       	eor	r24, r24
    3f44:	77 fd       	sbrc	r23, 7
    3f46:	80 95       	com	r24
    3f48:	98 2f       	mov	r25, r24
    3f4a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3f4e:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    3f52:	7b 01       	movw	r14, r22
    3f54:	8c 01       	movw	r16, r24
    3f56:	17 fb       	bst	r17, 7
    3f58:	10 95       	com	r17
    3f5a:	17 f9       	bld	r17, 7
    3f5c:	10 95       	com	r17
    3f5e:	0b c0       	rjmp	.+22     	; 0x3f76 <loop+0x10c6>
    3f60:	b9 01       	movw	r22, r18
    3f62:	88 27       	eor	r24, r24
    3f64:	77 fd       	sbrc	r23, 7
    3f66:	80 95       	com	r24
    3f68:	98 2f       	mov	r25, r24
    3f6a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3f6e:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    3f72:	7b 01       	movw	r14, r22
    3f74:	8c 01       	movw	r16, r24
    3f76:	b6 01       	movw	r22, r12
    3f78:	88 27       	eor	r24, r24
    3f7a:	77 fd       	sbrc	r23, 7
    3f7c:	80 95       	com	r24
    3f7e:	98 2f       	mov	r25, r24
    3f80:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3f84:	a8 01       	movw	r20, r16
    3f86:	97 01       	movw	r18, r14
    3f88:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3f8c:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    3f90:	70 93 97 04 	sts	0x0497, r23
    3f94:	60 93 96 04 	sts	0x0496, r22
                    my += (gy < 0) ? -sqrt(-gy) : sqrt(gy);
    3f98:	c0 90 98 04 	lds	r12, 0x0498
    3f9c:	d0 90 99 04 	lds	r13, 0x0499
    3fa0:	20 91 c6 05 	lds	r18, 0x05C6
    3fa4:	30 91 c7 05 	lds	r19, 0x05C7
    3fa8:	37 ff       	sbrs	r19, 7
    3faa:	13 c0       	rjmp	.+38     	; 0x3fd2 <loop+0x1122>
    3fac:	66 27       	eor	r22, r22
    3fae:	77 27       	eor	r23, r23
    3fb0:	62 1b       	sub	r22, r18
    3fb2:	73 0b       	sbc	r23, r19
    3fb4:	88 27       	eor	r24, r24
    3fb6:	77 fd       	sbrc	r23, 7
    3fb8:	80 95       	com	r24
    3fba:	98 2f       	mov	r25, r24
    3fbc:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3fc0:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    3fc4:	7b 01       	movw	r14, r22
    3fc6:	8c 01       	movw	r16, r24
    3fc8:	17 fb       	bst	r17, 7
    3fca:	10 95       	com	r17
    3fcc:	17 f9       	bld	r17, 7
    3fce:	10 95       	com	r17
    3fd0:	0b c0       	rjmp	.+22     	; 0x3fe8 <loop+0x1138>
    3fd2:	b9 01       	movw	r22, r18
    3fd4:	88 27       	eor	r24, r24
    3fd6:	77 fd       	sbrc	r23, 7
    3fd8:	80 95       	com	r24
    3fda:	98 2f       	mov	r25, r24
    3fdc:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3fe0:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    3fe4:	7b 01       	movw	r14, r22
    3fe6:	8c 01       	movw	r16, r24
    3fe8:	b6 01       	movw	r22, r12
    3fea:	88 27       	eor	r24, r24
    3fec:	77 fd       	sbrc	r23, 7
    3fee:	80 95       	com	r24
    3ff0:	98 2f       	mov	r25, r24
    3ff2:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    3ff6:	a8 01       	movw	r20, r16
    3ff8:	97 01       	movw	r18, r14
    3ffa:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    3ffe:	73 c0       	rjmp	.+230    	; 0x40e6 <loop+0x1236>
                    moveMouse = true;
                    break;
                case MOUSE_MODE_MOVEMENT_POSITION:
                    if (aset) {
    4000:	80 91 97 05 	lds	r24, 0x0597
    4004:	00 91 d1 04 	lds	r16, 0x04D1
    4008:	10 91 d2 04 	lds	r17, 0x04D2
    400c:	40 90 d5 04 	lds	r4, 0x04D5
    4010:	50 90 d6 04 	lds	r5, 0x04D6
    4014:	88 23       	and	r24, r24
    4016:	09 f4       	brne	.+2      	; 0x401a <loop+0x116a>
    4018:	6d c0       	rjmp	.+218    	; 0x40f4 <loop+0x1244>
                        mx0 = mx;
    401a:	60 91 96 04 	lds	r22, 0x0496
    401e:	70 91 97 04 	lds	r23, 0x0497
    4022:	70 93 9f 04 	sts	0x049F, r23
    4026:	60 93 9e 04 	sts	0x049E, r22
                        my0 = my;
    402a:	e0 90 98 04 	lds	r14, 0x0498
    402e:	f0 90 99 04 	lds	r15, 0x0499
    4032:	f0 92 a1 04 	sts	0x04A1, r15
    4036:	e0 92 a0 04 	sts	0x04A0, r14
                        mx -= (float)(x - xBase) / opt_mouse_scale_mode3[0];
    403a:	88 27       	eor	r24, r24
    403c:	77 fd       	sbrc	r23, 7
    403e:	80 95       	com	r24
    4040:	98 2f       	mov	r25, r24
    4042:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4046:	5b 01       	movw	r10, r22
    4048:	6c 01       	movw	r12, r24
    404a:	80 91 f5 04 	lds	r24, 0x04F5
    404e:	90 91 f6 04 	lds	r25, 0x04F6
    4052:	08 1b       	sub	r16, r24
    4054:	19 0b       	sbc	r17, r25
    4056:	b8 01       	movw	r22, r16
    4058:	88 27       	eor	r24, r24
    405a:	77 fd       	sbrc	r23, 7
    405c:	80 95       	com	r24
    405e:	98 2f       	mov	r25, r24
    4060:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4064:	20 91 40 04 	lds	r18, 0x0440
    4068:	30 91 41 04 	lds	r19, 0x0441
    406c:	40 91 42 04 	lds	r20, 0x0442
    4070:	50 91 43 04 	lds	r21, 0x0443
    4074:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    4078:	9b 01       	movw	r18, r22
    407a:	ac 01       	movw	r20, r24
    407c:	c6 01       	movw	r24, r12
    407e:	b5 01       	movw	r22, r10
    4080:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    4084:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    4088:	70 93 97 04 	sts	0x0497, r23
    408c:	60 93 96 04 	sts	0x0496, r22
                        my -= (float)((z - 256) - zBase) / opt_mouse_scale_mode3[1];
    4090:	00 27       	eor	r16, r16
    4092:	f7 fc       	sbrc	r15, 7
    4094:	00 95       	com	r16
    4096:	10 2f       	mov	r17, r16
    4098:	c8 01       	movw	r24, r16
    409a:	b7 01       	movw	r22, r14
    409c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    40a0:	7b 01       	movw	r14, r22
    40a2:	8c 01       	movw	r16, r24
    40a4:	a0 e0       	ldi	r26, 0x00	; 0
    40a6:	bf ef       	ldi	r27, 0xFF	; 255
    40a8:	4a 0e       	add	r4, r26
    40aa:	5b 1e       	adc	r5, r27
    40ac:	80 91 f9 04 	lds	r24, 0x04F9
    40b0:	90 91 fa 04 	lds	r25, 0x04FA
    40b4:	48 1a       	sub	r4, r24
    40b6:	59 0a       	sbc	r5, r25
    40b8:	b2 01       	movw	r22, r4
    40ba:	88 27       	eor	r24, r24
    40bc:	77 fd       	sbrc	r23, 7
    40be:	80 95       	com	r24
    40c0:	98 2f       	mov	r25, r24
    40c2:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    40c6:	20 91 44 04 	lds	r18, 0x0444
    40ca:	30 91 45 04 	lds	r19, 0x0445
    40ce:	40 91 46 04 	lds	r20, 0x0446
    40d2:	50 91 47 04 	lds	r21, 0x0447
    40d6:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    40da:	9b 01       	movw	r18, r22
    40dc:	ac 01       	movw	r20, r24
    40de:	c8 01       	movw	r24, r16
    40e0:	b7 01       	movw	r22, r14
    40e2:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    40e6:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    40ea:	70 93 99 04 	sts	0x0499, r23
    40ee:	60 93 98 04 	sts	0x0498, r22
    40f2:	ac c0       	rjmp	.+344    	; 0x424c <loop+0x139c>
                        moveMouse = true;
                    } else {
                        xBase = x;
    40f4:	10 93 f6 04 	sts	0x04F6, r17
    40f8:	00 93 f5 04 	sts	0x04F5, r16
                        yBase = y;
    40fc:	80 91 d3 04 	lds	r24, 0x04D3
    4100:	90 91 d4 04 	lds	r25, 0x04D4
    4104:	90 93 f8 04 	sts	0x04F8, r25
    4108:	80 93 f7 04 	sts	0x04F7, r24
                        zBase = z - 256;
    410c:	e0 e0       	ldi	r30, 0x00	; 0
    410e:	ff ef       	ldi	r31, 0xFF	; 255
    4110:	4e 0e       	add	r4, r30
    4112:	5f 1e       	adc	r5, r31
    4114:	50 92 fa 04 	sts	0x04FA, r5
    4118:	40 92 f9 04 	sts	0x04F9, r4
                        aset = true;
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	80 93 97 05 	sts	0x0597, r24
    4122:	97 c0       	rjmp	.+302    	; 0x4252 <loop+0x13a2>
                    }
                    break;
                case MOUSE_MODE_3D:
                    mx0 = mx;
    4124:	60 91 96 04 	lds	r22, 0x0496
    4128:	70 91 97 04 	lds	r23, 0x0497
    412c:	70 93 9f 04 	sts	0x049F, r23
    4130:	60 93 9e 04 	sts	0x049E, r22
                    my0 = my;
    4134:	e0 90 98 04 	lds	r14, 0x0498
    4138:	f0 90 99 04 	lds	r15, 0x0499
    413c:	f0 92 a1 04 	sts	0x04A1, r15
    4140:	e0 92 a0 04 	sts	0x04A0, r14
                    mz0 = mz;
    4144:	a0 90 9a 04 	lds	r10, 0x049A
    4148:	b0 90 9b 04 	lds	r11, 0x049B
    414c:	b0 92 a3 04 	sts	0x04A3, r11
    4150:	a0 92 a2 04 	sts	0x04A2, r10
                    mx -= xv / opt_mouse_scale_mode4[0];
    4154:	88 27       	eor	r24, r24
    4156:	77 fd       	sbrc	r23, 7
    4158:	80 95       	com	r24
    415a:	98 2f       	mov	r25, r24
    415c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4160:	3b 01       	movw	r6, r22
    4162:	4c 01       	movw	r8, r24
    4164:	60 91 e3 04 	lds	r22, 0x04E3
    4168:	70 91 e4 04 	lds	r23, 0x04E4
    416c:	88 27       	eor	r24, r24
    416e:	77 fd       	sbrc	r23, 7
    4170:	80 95       	com	r24
    4172:	98 2f       	mov	r25, r24
    4174:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4178:	20 91 48 04 	lds	r18, 0x0448
    417c:	30 91 49 04 	lds	r19, 0x0449
    4180:	40 91 4a 04 	lds	r20, 0x044A
    4184:	50 91 4b 04 	lds	r21, 0x044B
    4188:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    418c:	9b 01       	movw	r18, r22
    418e:	ac 01       	movw	r20, r24
    4190:	c4 01       	movw	r24, r8
    4192:	b3 01       	movw	r22, r6
    4194:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    4198:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    419c:	70 93 97 04 	sts	0x0497, r23
    41a0:	60 93 96 04 	sts	0x0496, r22
                    my -= zv / opt_mouse_scale_mode4[1];
    41a4:	00 27       	eor	r16, r16
    41a6:	f7 fc       	sbrc	r15, 7
    41a8:	00 95       	com	r16
    41aa:	10 2f       	mov	r17, r16
    41ac:	c8 01       	movw	r24, r16
    41ae:	b7 01       	movw	r22, r14
    41b0:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    41b4:	7b 01       	movw	r14, r22
    41b6:	8c 01       	movw	r16, r24
    41b8:	60 91 e7 04 	lds	r22, 0x04E7
    41bc:	70 91 e8 04 	lds	r23, 0x04E8
    41c0:	88 27       	eor	r24, r24
    41c2:	77 fd       	sbrc	r23, 7
    41c4:	80 95       	com	r24
    41c6:	98 2f       	mov	r25, r24
    41c8:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    41cc:	20 91 4c 04 	lds	r18, 0x044C
    41d0:	30 91 4d 04 	lds	r19, 0x044D
    41d4:	40 91 4e 04 	lds	r20, 0x044E
    41d8:	50 91 4f 04 	lds	r21, 0x044F
    41dc:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    41e0:	9b 01       	movw	r18, r22
    41e2:	ac 01       	movw	r20, r24
    41e4:	c8 01       	movw	r24, r16
    41e6:	b7 01       	movw	r22, r14
    41e8:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    41ec:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    41f0:	70 93 99 04 	sts	0x0499, r23
    41f4:	60 93 98 04 	sts	0x0498, r22
                    mz -= yv / opt_mouse_scale_mode4[2];
    41f8:	cc 24       	eor	r12, r12
    41fa:	b7 fc       	sbrc	r11, 7
    41fc:	c0 94       	com	r12
    41fe:	dc 2c       	mov	r13, r12
    4200:	c6 01       	movw	r24, r12
    4202:	b5 01       	movw	r22, r10
    4204:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4208:	7b 01       	movw	r14, r22
    420a:	8c 01       	movw	r16, r24
    420c:	60 91 e5 04 	lds	r22, 0x04E5
    4210:	70 91 e6 04 	lds	r23, 0x04E6
    4214:	88 27       	eor	r24, r24
    4216:	77 fd       	sbrc	r23, 7
    4218:	80 95       	com	r24
    421a:	98 2f       	mov	r25, r24
    421c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    4220:	20 91 50 04 	lds	r18, 0x0450
    4224:	30 91 51 04 	lds	r19, 0x0451
    4228:	40 91 52 04 	lds	r20, 0x0452
    422c:	50 91 53 04 	lds	r21, 0x0453
    4230:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    4234:	9b 01       	movw	r18, r22
    4236:	ac 01       	movw	r20, r24
    4238:	c8 01       	movw	r24, r16
    423a:	b7 01       	movw	r22, r14
    423c:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    4240:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    4244:	70 93 9b 04 	sts	0x049B, r23
    4248:	60 93 9a 04 	sts	0x049A, r22
                    moveMouse = true;
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	80 93 94 04 	sts	0x0494, r24
                    break;
            }
            switch (opt_scroll_mode) {
    4252:	90 90 ba 04 	lds	r9, 0x04BA
    4256:	f2 e0       	ldi	r31, 0x02	; 2
    4258:	9f 16       	cp	r9, r31
    425a:	09 f4       	brne	.+2      	; 0x425e <loop+0x13ae>
    425c:	93 c0       	rjmp	.+294    	; 0x4384 <loop+0x14d4>
    425e:	23 e0       	ldi	r18, 0x03	; 3
    4260:	92 16       	cp	r9, r18
    4262:	09 f4       	brne	.+2      	; 0x4266 <loop+0x13b6>
    4264:	d0 c0       	rjmp	.+416    	; 0x4406 <loop+0x1556>
    4266:	31 e0       	ldi	r19, 0x01	; 1
    4268:	93 16       	cp	r9, r19
    426a:	09 f0       	breq	.+2      	; 0x426e <loop+0x13be>
    426c:	60 c1       	rjmp	.+704    	; 0x452e <loop+0x167e>
                case SCROLL_MODE_TILT_VELOCITY: // gyro
                    if (aset) {
    426e:	80 91 97 05 	lds	r24, 0x0597
    4272:	00 91 7f 05 	lds	r16, 0x057F
    4276:	10 91 80 05 	lds	r17, 0x0580
    427a:	60 90 81 05 	lds	r6, 0x0581
    427e:	70 90 82 05 	lds	r7, 0x0582
    4282:	88 23       	and	r24, r24
    4284:	09 f4       	brne	.+2      	; 0x4288 <loop+0x13d8>
    4286:	6b c0       	rjmp	.+214    	; 0x435e <loop+0x14ae>
                        mx0 = mx;
    4288:	60 91 96 04 	lds	r22, 0x0496
    428c:	70 91 97 04 	lds	r23, 0x0497
    4290:	70 93 9f 04 	sts	0x049F, r23
    4294:	60 93 9e 04 	sts	0x049E, r22
                        my0 = my;
    4298:	e0 90 98 04 	lds	r14, 0x0498
    429c:	f0 90 99 04 	lds	r15, 0x0499
    42a0:	f0 92 a1 04 	sts	0x04A1, r15
    42a4:	e0 92 a0 04 	sts	0x04A0, r14
                        mx -= (float)(ax - axBase) / opt_mouse_scale_mode1[0];
    42a8:	88 27       	eor	r24, r24
    42aa:	77 fd       	sbrc	r23, 7
    42ac:	80 95       	com	r24
    42ae:	98 2f       	mov	r25, r24
    42b0:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    42b4:	5b 01       	movw	r10, r22
    42b6:	6c 01       	movw	r12, r24
    42b8:	80 91 91 05 	lds	r24, 0x0591
    42bc:	90 91 92 05 	lds	r25, 0x0592
    42c0:	08 1b       	sub	r16, r24
    42c2:	19 0b       	sbc	r17, r25
    42c4:	b8 01       	movw	r22, r16
    42c6:	88 27       	eor	r24, r24
    42c8:	77 fd       	sbrc	r23, 7
    42ca:	80 95       	com	r24
    42cc:	98 2f       	mov	r25, r24
    42ce:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    42d2:	20 91 30 04 	lds	r18, 0x0430
    42d6:	30 91 31 04 	lds	r19, 0x0431
    42da:	40 91 32 04 	lds	r20, 0x0432
    42de:	50 91 33 04 	lds	r21, 0x0433
    42e2:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    42e6:	9b 01       	movw	r18, r22
    42e8:	ac 01       	movw	r20, r24
    42ea:	c6 01       	movw	r24, r12
    42ec:	b5 01       	movw	r22, r10
    42ee:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    42f2:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    42f6:	70 93 97 04 	sts	0x0497, r23
    42fa:	60 93 96 04 	sts	0x0496, r22
                        my -= (float)(ay - ayBase) / opt_mouse_scale_mode1[1];
    42fe:	00 27       	eor	r16, r16
    4300:	f7 fc       	sbrc	r15, 7
    4302:	00 95       	com	r16
    4304:	10 2f       	mov	r17, r16
    4306:	c8 01       	movw	r24, r16
    4308:	b7 01       	movw	r22, r14
    430a:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    430e:	7b 01       	movw	r14, r22
    4310:	8c 01       	movw	r16, r24
    4312:	80 91 93 05 	lds	r24, 0x0593
    4316:	90 91 94 05 	lds	r25, 0x0594
    431a:	68 1a       	sub	r6, r24
    431c:	79 0a       	sbc	r7, r25
    431e:	b3 01       	movw	r22, r6
    4320:	88 27       	eor	r24, r24
    4322:	77 fd       	sbrc	r23, 7
    4324:	80 95       	com	r24
    4326:	98 2f       	mov	r25, r24
    4328:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    432c:	20 91 34 04 	lds	r18, 0x0434
    4330:	30 91 35 04 	lds	r19, 0x0435
    4334:	40 91 36 04 	lds	r20, 0x0436
    4338:	50 91 37 04 	lds	r21, 0x0437
    433c:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    4340:	9b 01       	movw	r18, r22
    4342:	ac 01       	movw	r20, r24
    4344:	c8 01       	movw	r24, r16
    4346:	b7 01       	movw	r22, r14
    4348:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    434c:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    4350:	70 93 99 04 	sts	0x0499, r23
    4354:	60 93 98 04 	sts	0x0498, r22
                        scrollMouse = true;
    4358:	90 92 95 04 	sts	0x0495, r9
    435c:	e8 c0       	rjmp	.+464    	; 0x452e <loop+0x167e>
                    } else {
                        axBase = ax;
    435e:	10 93 92 05 	sts	0x0592, r17
    4362:	00 93 91 05 	sts	0x0591, r16
                        ayBase = ay;
    4366:	70 92 94 05 	sts	0x0594, r7
    436a:	60 92 93 05 	sts	0x0593, r6
                        azBase = az;
    436e:	80 91 83 05 	lds	r24, 0x0583
    4372:	90 91 84 05 	lds	r25, 0x0584
    4376:	90 93 96 05 	sts	0x0596, r25
    437a:	80 93 95 05 	sts	0x0595, r24
                        aset = true;
    437e:	90 92 97 05 	sts	0x0597, r9
    4382:	d5 c0       	rjmp	.+426    	; 0x452e <loop+0x167e>
                    }
                    break;
                case SCROLL_MODE_TILT_POSITION: // gyro
                    sy0 = sy;
    4384:	c0 90 9c 04 	lds	r12, 0x049C
    4388:	d0 90 9d 04 	lds	r13, 0x049D
    438c:	d0 92 a5 04 	sts	0x04A5, r13
    4390:	c0 92 a4 04 	sts	0x04A4, r12
                    sy -= (gx < 0) ? -sqrt(-gx / 30) : sqrt(gx / 30);
    4394:	80 91 c4 05 	lds	r24, 0x05C4
    4398:	90 91 c5 05 	lds	r25, 0x05C5
    439c:	97 ff       	sbrs	r25, 7
    439e:	13 c0       	rjmp	.+38     	; 0x43c6 <loop+0x1516>
    43a0:	62 ee       	ldi	r22, 0xE2	; 226
    43a2:	7f ef       	ldi	r23, 0xFF	; 255
    43a4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    43a8:	88 27       	eor	r24, r24
    43aa:	77 fd       	sbrc	r23, 7
    43ac:	80 95       	com	r24
    43ae:	98 2f       	mov	r25, r24
    43b0:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    43b4:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    43b8:	7b 01       	movw	r14, r22
    43ba:	8c 01       	movw	r16, r24
    43bc:	17 fb       	bst	r17, 7
    43be:	10 95       	com	r17
    43c0:	17 f9       	bld	r17, 7
    43c2:	10 95       	com	r17
    43c4:	0e c0       	rjmp	.+28     	; 0x43e2 <loop+0x1532>
    43c6:	6e e1       	ldi	r22, 0x1E	; 30
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    43ce:	88 27       	eor	r24, r24
    43d0:	77 fd       	sbrc	r23, 7
    43d2:	80 95       	com	r24
    43d4:	98 2f       	mov	r25, r24
    43d6:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    43da:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <sqrt>
    43de:	7b 01       	movw	r14, r22
    43e0:	8c 01       	movw	r16, r24
    43e2:	b6 01       	movw	r22, r12
    43e4:	88 27       	eor	r24, r24
    43e6:	77 fd       	sbrc	r23, 7
    43e8:	80 95       	com	r24
    43ea:	98 2f       	mov	r25, r24
    43ec:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    43f0:	a8 01       	movw	r20, r16
    43f2:	97 01       	movw	r18, r14
    43f4:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    43f8:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    43fc:	70 93 9d 04 	sts	0x049D, r23
    4400:	60 93 9c 04 	sts	0x049C, r22
    4404:	79 c0       	rjmp	.+242    	; 0x44f8 <loop+0x1648>
                    scrollMouse = true;
                    break;
                case SCROLL_MODE_MOVEMENT_POSITION: // accel
                    if (aset) {
    4406:	80 91 97 05 	lds	r24, 0x0597
    440a:	00 91 d1 04 	lds	r16, 0x04D1
    440e:	10 91 d2 04 	lds	r17, 0x04D2
    4412:	40 90 d5 04 	lds	r4, 0x04D5
    4416:	50 90 d6 04 	lds	r5, 0x04D6
    441a:	88 23       	and	r24, r24
    441c:	09 f4       	brne	.+2      	; 0x4420 <loop+0x1570>
    441e:	70 c0       	rjmp	.+224    	; 0x4500 <loop+0x1650>
                        mx0 = mx;
    4420:	60 91 96 04 	lds	r22, 0x0496
    4424:	70 91 97 04 	lds	r23, 0x0497
    4428:	70 93 9f 04 	sts	0x049F, r23
    442c:	60 93 9e 04 	sts	0x049E, r22
                        my0 = my;
    4430:	e0 90 98 04 	lds	r14, 0x0498
    4434:	f0 90 99 04 	lds	r15, 0x0499
    4438:	f0 92 a1 04 	sts	0x04A1, r15
    443c:	e0 92 a0 04 	sts	0x04A0, r14
                        mx -= (float)(x - xBase) / opt_mouse_scale_mode3[0];
    4440:	88 27       	eor	r24, r24
    4442:	77 fd       	sbrc	r23, 7
    4444:	80 95       	com	r24
    4446:	98 2f       	mov	r25, r24
    4448:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    444c:	5b 01       	movw	r10, r22
    444e:	6c 01       	movw	r12, r24
    4450:	80 91 f5 04 	lds	r24, 0x04F5
    4454:	90 91 f6 04 	lds	r25, 0x04F6
    4458:	08 1b       	sub	r16, r24
    445a:	19 0b       	sbc	r17, r25
    445c:	b8 01       	movw	r22, r16
    445e:	88 27       	eor	r24, r24
    4460:	77 fd       	sbrc	r23, 7
    4462:	80 95       	com	r24
    4464:	98 2f       	mov	r25, r24
    4466:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    446a:	20 91 40 04 	lds	r18, 0x0440
    446e:	30 91 41 04 	lds	r19, 0x0441
    4472:	40 91 42 04 	lds	r20, 0x0442
    4476:	50 91 43 04 	lds	r21, 0x0443
    447a:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    447e:	9b 01       	movw	r18, r22
    4480:	ac 01       	movw	r20, r24
    4482:	c6 01       	movw	r24, r12
    4484:	b5 01       	movw	r22, r10
    4486:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    448a:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    448e:	70 93 97 04 	sts	0x0497, r23
    4492:	60 93 96 04 	sts	0x0496, r22
                        my -= (float)((z - 256) - zBase) / opt_mouse_scale_mode3[1];
    4496:	00 27       	eor	r16, r16
    4498:	f7 fc       	sbrc	r15, 7
    449a:	00 95       	com	r16
    449c:	10 2f       	mov	r17, r16
    449e:	c8 01       	movw	r24, r16
    44a0:	b7 01       	movw	r22, r14
    44a2:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    44a6:	7b 01       	movw	r14, r22
    44a8:	8c 01       	movw	r16, r24
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	9f ef       	ldi	r25, 0xFF	; 255
    44ae:	48 0e       	add	r4, r24
    44b0:	59 1e       	adc	r5, r25
    44b2:	80 91 f9 04 	lds	r24, 0x04F9
    44b6:	90 91 fa 04 	lds	r25, 0x04FA
    44ba:	48 1a       	sub	r4, r24
    44bc:	59 0a       	sbc	r5, r25
    44be:	b2 01       	movw	r22, r4
    44c0:	88 27       	eor	r24, r24
    44c2:	77 fd       	sbrc	r23, 7
    44c4:	80 95       	com	r24
    44c6:	98 2f       	mov	r25, r24
    44c8:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    44cc:	20 91 44 04 	lds	r18, 0x0444
    44d0:	30 91 45 04 	lds	r19, 0x0445
    44d4:	40 91 46 04 	lds	r20, 0x0446
    44d8:	50 91 47 04 	lds	r21, 0x0447
    44dc:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    44e0:	9b 01       	movw	r18, r22
    44e2:	ac 01       	movw	r20, r24
    44e4:	c8 01       	movw	r24, r16
    44e6:	b7 01       	movw	r22, r14
    44e8:	0e 94 16 3b 	call	0x762c	; 0x762c <__subsf3>
    44ec:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    44f0:	70 93 99 04 	sts	0x0499, r23
    44f4:	60 93 98 04 	sts	0x0498, r22
                        scrollMouse = true;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	80 93 95 04 	sts	0x0495, r24
    44fe:	17 c0       	rjmp	.+46     	; 0x452e <loop+0x167e>
                    } else {
                        xBase = x;
    4500:	10 93 f6 04 	sts	0x04F6, r17
    4504:	00 93 f5 04 	sts	0x04F5, r16
                        yBase = y;
    4508:	80 91 d3 04 	lds	r24, 0x04D3
    450c:	90 91 d4 04 	lds	r25, 0x04D4
    4510:	90 93 f8 04 	sts	0x04F8, r25
    4514:	80 93 f7 04 	sts	0x04F7, r24
                        zBase = z - 256;
    4518:	a0 e0       	ldi	r26, 0x00	; 0
    451a:	bf ef       	ldi	r27, 0xFF	; 255
    451c:	4a 0e       	add	r4, r26
    451e:	5b 1e       	adc	r5, r27
    4520:	50 92 fa 04 	sts	0x04FA, r5
    4524:	40 92 f9 04 	sts	0x04F9, r4
                        aset = true;
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	80 93 97 05 	sts	0x0597, r24
    
        //if (BOUND_MOUSEX > 0 && abs(mx) > BOUND_MOUSEX) mx = mx < 0 ? -BOUND_MOUSEX : BOUND_MOUSEX;
        //if (BOUND_MOUSEY > 0 && abs(my) > BOUND_MOUSEY) my = my < 0 ? -BOUND_MOUSEY : BOUND_MOUSEY;
    
        // get relative movement amounts
        mdx = mx - mx0;
    452e:	40 91 96 04 	lds	r20, 0x0496
    4532:	50 91 97 04 	lds	r21, 0x0497
    4536:	80 91 9e 04 	lds	r24, 0x049E
    453a:	90 91 9f 04 	lds	r25, 0x049F
    453e:	48 1b       	sub	r20, r24
    4540:	59 0b       	sbc	r21, r25
    4542:	50 93 a7 04 	sts	0x04A7, r21
    4546:	40 93 a6 04 	sts	0x04A6, r20
        mdy = my - my0;
    454a:	80 91 98 04 	lds	r24, 0x0498
    454e:	90 91 99 04 	lds	r25, 0x0499
    4552:	20 91 a0 04 	lds	r18, 0x04A0
    4556:	30 91 a1 04 	lds	r19, 0x04A1
    455a:	82 1b       	sub	r24, r18
    455c:	93 0b       	sbc	r25, r19
    455e:	90 93 a9 04 	sts	0x04A9, r25
    4562:	80 93 a8 04 	sts	0x04A8, r24
        mdz = mz - mz0;
    4566:	80 91 9a 04 	lds	r24, 0x049A
    456a:	90 91 9b 04 	lds	r25, 0x049B
    456e:	20 91 a2 04 	lds	r18, 0x04A2
    4572:	30 91 a3 04 	lds	r19, 0x04A3
    4576:	82 1b       	sub	r24, r18
    4578:	93 0b       	sbc	r25, r19
    457a:	90 93 ab 04 	sts	0x04AB, r25
    457e:	80 93 aa 04 	sts	0x04AA, r24

        if (opt_mouse_invert_x == 1) mdx = -mdx;
    4582:	80 91 2e 04 	lds	r24, 0x042E
    4586:	81 30       	cpi	r24, 0x01	; 1
    4588:	41 f4       	brne	.+16     	; 0x459a <loop+0x16ea>
    458a:	88 27       	eor	r24, r24
    458c:	99 27       	eor	r25, r25
    458e:	84 1b       	sub	r24, r20
    4590:	95 0b       	sbc	r25, r21
    4592:	90 93 a7 04 	sts	0x04A7, r25
    4596:	80 93 a6 04 	sts	0x04A6, r24
        if (opt_mouse_invert_y == 1) mdy = -mdy;
    459a:	80 91 2f 04 	lds	r24, 0x042F
    459e:	81 30       	cpi	r24, 0x01	; 1
    45a0:	59 f4       	brne	.+22     	; 0x45b8 <loop+0x1708>
    45a2:	80 91 a8 04 	lds	r24, 0x04A8
    45a6:	90 91 a9 04 	lds	r25, 0x04A9
    45aa:	90 95       	com	r25
    45ac:	81 95       	neg	r24
    45ae:	9f 4f       	sbci	r25, 0xFF	; 255
    45b0:	90 93 a9 04 	sts	0x04A9, r25
    45b4:	80 93 a8 04 	sts	0x04A8, r24
        if (opt_mouse_invert_z == 1) mdz = -mdz;
    45b8:	80 91 b8 04 	lds	r24, 0x04B8
    45bc:	81 30       	cpi	r24, 0x01	; 1
    45be:	59 f4       	brne	.+22     	; 0x45d6 <loop+0x1726>
    45c0:	80 91 aa 04 	lds	r24, 0x04AA
    45c4:	90 91 ab 04 	lds	r25, 0x04AB
    45c8:	90 95       	com	r25
    45ca:	81 95       	neg	r24
    45cc:	9f 4f       	sbci	r25, 0xFF	; 255
    45ce:	90 93 ab 04 	sts	0x04AB, r25
    45d2:	80 93 aa 04 	sts	0x04AA, r24
        if (moveMouse && opt_mouse_mode > 0 && (mdx != 0 || mdy != 0 || mdz != 0)) {
    45d6:	80 91 94 04 	lds	r24, 0x0494
    45da:	88 23       	and	r24, r24
    45dc:	49 f1       	breq	.+82     	; 0x4630 <loop+0x1780>
    45de:	80 91 b9 04 	lds	r24, 0x04B9
    45e2:	88 23       	and	r24, r24
    45e4:	29 f1       	breq	.+74     	; 0x4630 <loop+0x1780>
    45e6:	60 91 a6 04 	lds	r22, 0x04A6
    45ea:	70 91 a7 04 	lds	r23, 0x04A7
    45ee:	61 15       	cp	r22, r1
    45f0:	71 05       	cpc	r23, r1
    45f2:	61 f4       	brne	.+24     	; 0x460c <loop+0x175c>
    45f4:	80 91 a8 04 	lds	r24, 0x04A8
    45f8:	90 91 a9 04 	lds	r25, 0x04A9
    45fc:	89 2b       	or	r24, r25
    45fe:	31 f4       	brne	.+12     	; 0x460c <loop+0x175c>
    4600:	80 91 aa 04 	lds	r24, 0x04AA
    4604:	90 91 ab 04 	lds	r25, 0x04AB
    4608:	89 2b       	or	r24, r25
    460a:	91 f0       	breq	.+36     	; 0x4630 <loop+0x1780>
            #ifdef ENABLE_USB
                if (mdz > 0) Mouse.move(mdx, mdy, mdz);
    460c:	20 91 aa 04 	lds	r18, 0x04AA
    4610:	30 91 ab 04 	lds	r19, 0x04AB
    4614:	12 16       	cp	r1, r18
    4616:	13 06       	cpc	r1, r19
    4618:	34 f4       	brge	.+12     	; 0x4626 <loop+0x1776>
    461a:	85 ed       	ldi	r24, 0xD5	; 213
    461c:	97 e0       	ldi	r25, 0x07	; 7
    461e:	40 91 a8 04 	lds	r20, 0x04A8
    4622:	21 d7       	rcall	.+3650   	; 0x5466 <_ZN8USBMouse4moveEhhh>
    4624:	05 c0       	rjmp	.+10     	; 0x4630 <loop+0x1780>
                else Mouse.move(mdx, mdy);
    4626:	85 ed       	ldi	r24, 0xD5	; 213
    4628:	97 e0       	ldi	r25, 0x07	; 7
    462a:	40 91 a8 04 	lds	r20, 0x04A8
    462e:	2b d7       	rcall	.+3670   	; 0x5486 <_ZN8USBMouse4moveEhh>
                Serial.print(mdy); Serial.print(" ");
                Serial.print(mdz); Serial.print(" ");
                Serial.println(mdz);
            #endif /* SERIAL_DEBUG_MOUSE */
        }
        if (scrollMouse && opt_scroll_mode > 0 && sdy != 0) {
    4630:	80 91 95 04 	lds	r24, 0x0495
    4634:	88 23       	and	r24, r24
    4636:	71 f0       	breq	.+28     	; 0x4654 <loop+0x17a4>
    4638:	80 91 ba 04 	lds	r24, 0x04BA
    463c:	88 23       	and	r24, r24
    463e:	51 f0       	breq	.+20     	; 0x4654 <loop+0x17a4>
    4640:	60 91 ac 04 	lds	r22, 0x04AC
    4644:	70 91 ad 04 	lds	r23, 0x04AD
    4648:	61 15       	cp	r22, r1
    464a:	71 05       	cpc	r23, r1
    464c:	19 f0       	breq	.+6      	; 0x4654 <loop+0x17a4>
            #ifdef ENABLE_USB
                Mouse.scroll(sdy);
    464e:	85 ed       	ldi	r24, 0xD5	; 213
    4650:	97 e0       	ldi	r25, 0x07	; 7
    4652:	e6 d6       	rcall	.+3532   	; 0x5420 <_ZN8USBMouse6scrollEh>

    /* ===============================================
     * READ AND PROCESS TOUCH DATA
    =============================================== */
    #ifdef ENABLE_TOUCH
        detect1 = 0;
    4654:	10 92 a3 06 	sts	0x06A3, r1
    4658:	10 92 a4 06 	sts	0x06A4, r1
    465c:	10 92 a5 06 	sts	0x06A5, r1
    4660:	10 92 a6 06 	sts	0x06A6, r1
        detect2 = 0;
    4664:	10 92 a7 06 	sts	0x06A7, r1
    4668:	10 92 a8 06 	sts	0x06A8, r1
    466c:	10 92 a9 06 	sts	0x06A9, r1
    4670:	10 92 aa 06 	sts	0x06AA, r1
        removing = false;
    4674:	10 92 a2 06 	sts	0x06A2, r1
    
        // loop through every possible 1-to-1 sensor combination and record levels
        for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    4678:	10 92 90 04 	sts	0x0490, r1
    467c:	10 92 91 04 	sts	0x0491, r1
    4680:	10 92 92 04 	sts	0x0492, r1
    4684:	10 92 93 04 	sts	0x0493, r1
            if (i < 32) {
                // write value to sensors1
                if (digitalRead(p2) == LOW) bitSet(detect1, i);
            } else {
                // write value to sensors2
                if (digitalRead(p2) == LOW) bitSet(detect2, i - 32);
    4688:	11 e0       	ldi	r17, 0x01	; 1
    468a:	c1 2e       	mov	r12, r17
    468c:	d1 2c       	mov	r13, r1
    468e:	e1 2c       	mov	r14, r1
    4690:	f1 2c       	mov	r15, r1
    4692:	85 c0       	rjmp	.+266    	; 0x479e <loop+0x18ee>
        removing = false;
    
        // loop through every possible 1-to-1 sensor combination and record levels
        for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
            int p1 = combinations[i][0];
            int p2 = combinations[i][1];
    4694:	fc 01       	movw	r30, r24
    4696:	ee 0f       	add	r30, r30
    4698:	ff 1f       	adc	r31, r31
    469a:	ee 0f       	add	r30, r30
    469c:	ff 1f       	adc	r31, r31
    469e:	df 01       	movw	r26, r30
    46a0:	ac 5e       	subi	r26, 0xEC	; 236
    46a2:	bc 4f       	sbci	r27, 0xFC	; 252
    46a4:	0c 91       	ld	r16, X
    
            pinMode(p1, OUTPUT);    // change to OUTPUT mode
    46a6:	ee 5e       	subi	r30, 0xEE	; 238
    46a8:	fc 4f       	sbci	r31, 0xFC	; 252
    46aa:	10 81       	ld	r17, Z
    46ac:	81 2f       	mov	r24, r17
    46ae:	61 e0       	ldi	r22, 0x01	; 1
    46b0:	9f d5       	rcall	.+2878   	; 0x51f0 <pinMode>
            digitalWrite(p1, LOW);  // bring LOW (default input level is HIGH)
    46b2:	81 2f       	mov	r24, r17
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	93 d4       	rcall	.+2342   	; 0x4fde <digitalWrite>
            if (i < 32) {
    46b8:	80 91 90 04 	lds	r24, 0x0490
    46bc:	90 91 91 04 	lds	r25, 0x0491
    46c0:	a0 91 92 04 	lds	r26, 0x0492
    46c4:	b0 91 93 04 	lds	r27, 0x0493
    46c8:	80 97       	sbiw	r24, 0x20	; 32
    46ca:	a1 05       	cpc	r26, r1
    46cc:	b1 05       	cpc	r27, r1
    46ce:	2c f5       	brge	.+74     	; 0x471a <loop+0x186a>
                // write value to sensors1
                if (digitalRead(p2) == LOW) bitSet(detect1, i);
    46d0:	80 2f       	mov	r24, r16
    46d2:	2a d4       	rcall	.+2132   	; 0x4f28 <digitalRead>
    46d4:	89 2b       	or	r24, r25
    46d6:	09 f0       	breq	.+2      	; 0x46da <loop+0x182a>
    46d8:	49 c0       	rjmp	.+146    	; 0x476c <loop+0x18bc>
    46da:	a7 01       	movw	r20, r14
    46dc:	96 01       	movw	r18, r12
    46de:	00 90 90 04 	lds	r0, 0x0490
    46e2:	04 c0       	rjmp	.+8      	; 0x46ec <loop+0x183c>
    46e4:	22 0f       	add	r18, r18
    46e6:	33 1f       	adc	r19, r19
    46e8:	44 1f       	adc	r20, r20
    46ea:	55 1f       	adc	r21, r21
    46ec:	0a 94       	dec	r0
    46ee:	d2 f7       	brpl	.-12     	; 0x46e4 <loop+0x1834>
    46f0:	80 91 a3 06 	lds	r24, 0x06A3
    46f4:	90 91 a4 06 	lds	r25, 0x06A4
    46f8:	a0 91 a5 06 	lds	r26, 0x06A5
    46fc:	b0 91 a6 06 	lds	r27, 0x06A6
    4700:	82 2b       	or	r24, r18
    4702:	93 2b       	or	r25, r19
    4704:	a4 2b       	or	r26, r20
    4706:	b5 2b       	or	r27, r21
    4708:	80 93 a3 06 	sts	0x06A3, r24
    470c:	90 93 a4 06 	sts	0x06A4, r25
    4710:	a0 93 a5 06 	sts	0x06A5, r26
    4714:	b0 93 a6 06 	sts	0x06A6, r27
    4718:	29 c0       	rjmp	.+82     	; 0x476c <loop+0x18bc>
            } else {
                // write value to sensors2
                if (digitalRead(p2) == LOW) bitSet(detect2, i - 32);
    471a:	80 2f       	mov	r24, r16
    471c:	05 d4       	rcall	.+2058   	; 0x4f28 <digitalRead>
    471e:	89 2b       	or	r24, r25
    4720:	29 f5       	brne	.+74     	; 0x476c <loop+0x18bc>
    4722:	20 91 90 04 	lds	r18, 0x0490
    4726:	30 91 91 04 	lds	r19, 0x0491
    472a:	20 52       	subi	r18, 0x20	; 32
    472c:	30 40       	sbci	r19, 0x00	; 0
    472e:	d7 01       	movw	r26, r14
    4730:	c6 01       	movw	r24, r12
    4732:	04 c0       	rjmp	.+8      	; 0x473c <loop+0x188c>
    4734:	88 0f       	add	r24, r24
    4736:	99 1f       	adc	r25, r25
    4738:	aa 1f       	adc	r26, r26
    473a:	bb 1f       	adc	r27, r27
    473c:	2a 95       	dec	r18
    473e:	d2 f7       	brpl	.-12     	; 0x4734 <loop+0x1884>
    4740:	9c 01       	movw	r18, r24
    4742:	ad 01       	movw	r20, r26
    4744:	80 91 a7 06 	lds	r24, 0x06A7
    4748:	90 91 a8 06 	lds	r25, 0x06A8
    474c:	a0 91 a9 06 	lds	r26, 0x06A9
    4750:	b0 91 aa 06 	lds	r27, 0x06AA
    4754:	82 2b       	or	r24, r18
    4756:	93 2b       	or	r25, r19
    4758:	a4 2b       	or	r26, r20
    475a:	b5 2b       	or	r27, r21
    475c:	80 93 a7 06 	sts	0x06A7, r24
    4760:	90 93 a8 06 	sts	0x06A8, r25
    4764:	a0 93 a9 06 	sts	0x06A9, r26
    4768:	b0 93 aa 06 	sts	0x06AA, r27
            }
            pinMode(p1, INPUT);     // reset to INPUT mode
    476c:	81 2f       	mov	r24, r17
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	3f d5       	rcall	.+2686   	; 0x51f0 <pinMode>
            digitalWrite(p1, HIGH); // enable pullup
    4772:	81 2f       	mov	r24, r17
    4774:	61 e0       	ldi	r22, 0x01	; 1
    4776:	33 d4       	rcall	.+2150   	; 0x4fde <digitalWrite>
        detect1 = 0;
        detect2 = 0;
        removing = false;
    
        // loop through every possible 1-to-1 sensor combination and record levels
        for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    4778:	80 91 90 04 	lds	r24, 0x0490
    477c:	90 91 91 04 	lds	r25, 0x0491
    4780:	a0 91 92 04 	lds	r26, 0x0492
    4784:	b0 91 93 04 	lds	r27, 0x0493
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	a1 1d       	adc	r26, r1
    478c:	b1 1d       	adc	r27, r1
    478e:	80 93 90 04 	sts	0x0490, r24
    4792:	90 93 91 04 	sts	0x0491, r25
    4796:	a0 93 92 04 	sts	0x0492, r26
    479a:	b0 93 93 04 	sts	0x0493, r27
    479e:	80 91 90 04 	lds	r24, 0x0490
    47a2:	90 91 91 04 	lds	r25, 0x0491
    47a6:	a0 91 92 04 	lds	r26, 0x0492
    47aa:	b0 91 93 04 	lds	r27, 0x0493
    47ae:	8c 33       	cpi	r24, 0x3C	; 60
    47b0:	91 05       	cpc	r25, r1
    47b2:	a1 05       	cpc	r26, r1
    47b4:	b1 05       	cpc	r27, r1
    47b6:	0c f4       	brge	.+2      	; 0x47ba <loop+0x190a>
    47b8:	6d cf       	rjmp	.-294    	; 0x4694 <loop+0x17e4>
            pinMode(p1, INPUT);     // reset to INPUT mode
            digitalWrite(p1, HIGH); // enable pullup
        }
        
        // check to see if we need to reset detection threshold
        if (verify1 != detect1 || verify2 != detect2) {
    47ba:	e0 90 ab 06 	lds	r14, 0x06AB
    47be:	f0 90 ac 06 	lds	r15, 0x06AC
    47c2:	00 91 ad 06 	lds	r16, 0x06AD
    47c6:	10 91 ae 06 	lds	r17, 0x06AE
    47ca:	80 91 a3 06 	lds	r24, 0x06A3
    47ce:	90 91 a4 06 	lds	r25, 0x06A4
    47d2:	a0 91 a5 06 	lds	r26, 0x06A5
    47d6:	b0 91 a6 06 	lds	r27, 0x06A6
    47da:	e8 16       	cp	r14, r24
    47dc:	f9 06       	cpc	r15, r25
    47de:	0a 07       	cpc	r16, r26
    47e0:	1b 07       	cpc	r17, r27
    47e2:	a9 f4       	brne	.+42     	; 0x480e <loop+0x195e>
    47e4:	20 91 af 06 	lds	r18, 0x06AF
    47e8:	30 91 b0 06 	lds	r19, 0x06B0
    47ec:	40 91 b1 06 	lds	r20, 0x06B1
    47f0:	50 91 b2 06 	lds	r21, 0x06B2
    47f4:	80 91 a7 06 	lds	r24, 0x06A7
    47f8:	90 91 a8 06 	lds	r25, 0x06A8
    47fc:	a0 91 a9 06 	lds	r26, 0x06A9
    4800:	b0 91 aa 06 	lds	r27, 0x06AA
    4804:	28 17       	cp	r18, r24
    4806:	39 07       	cpc	r19, r25
    4808:	4a 07       	cpc	r20, r26
    480a:	5b 07       	cpc	r21, r27
    480c:	59 f0       	breq	.+22     	; 0x4824 <loop+0x1974>
            // current sensors different from last detection, so reset threshold
            touchTime = millis();
    480e:	0e 94 39 35 	call	0x6a72	; 0x6a72 <millis>
    4812:	60 93 9d 06 	sts	0x069D, r22
    4816:	70 93 9e 06 	sts	0x069E, r23
    481a:	80 93 9f 06 	sts	0x069F, r24
    481e:	90 93 a0 06 	sts	0x06A0, r25
    4822:	17 c1       	rjmp	.+558    	; 0x4a52 <loop+0x1ba2>
        } else if ((verify1 != sensors1 || verify2 != sensors2) && millis() - touchTime >= opt_touch_detect_threshold) {
    4824:	80 91 b3 06 	lds	r24, 0x06B3
    4828:	90 91 b4 06 	lds	r25, 0x06B4
    482c:	a0 91 b5 06 	lds	r26, 0x06B5
    4830:	b0 91 b6 06 	lds	r27, 0x06B6
    4834:	e8 16       	cp	r14, r24
    4836:	f9 06       	cpc	r15, r25
    4838:	0a 07       	cpc	r16, r26
    483a:	1b 07       	cpc	r17, r27
    483c:	71 f4       	brne	.+28     	; 0x485a <loop+0x19aa>
    483e:	80 91 b7 06 	lds	r24, 0x06B7
    4842:	90 91 b8 06 	lds	r25, 0x06B8
    4846:	a0 91 b9 06 	lds	r26, 0x06B9
    484a:	b0 91 ba 06 	lds	r27, 0x06BA
    484e:	28 17       	cp	r18, r24
    4850:	39 07       	cpc	r19, r25
    4852:	4a 07       	cpc	r20, r26
    4854:	5b 07       	cpc	r21, r27
    4856:	09 f4       	brne	.+2      	; 0x485a <loop+0x19aa>
    4858:	fc c0       	rjmp	.+504    	; 0x4a52 <loop+0x1ba2>
    485a:	0e 94 39 35 	call	0x6a72	; 0x6a72 <millis>
    485e:	20 91 9d 06 	lds	r18, 0x069D
    4862:	30 91 9e 06 	lds	r19, 0x069E
    4866:	40 91 9f 06 	lds	r20, 0x069F
    486a:	50 91 a0 06 	lds	r21, 0x06A0
    486e:	62 1b       	sub	r22, r18
    4870:	73 0b       	sbc	r23, r19
    4872:	84 0b       	sbc	r24, r20
    4874:	95 0b       	sbc	r25, r21
    4876:	20 91 02 04 	lds	r18, 0x0402
    487a:	30 91 03 04 	lds	r19, 0x0403
    487e:	40 e0       	ldi	r20, 0x00	; 0
    4880:	50 e0       	ldi	r21, 0x00	; 0
    4882:	62 17       	cp	r22, r18
    4884:	73 07       	cpc	r23, r19
    4886:	84 07       	cpc	r24, r20
    4888:	95 07       	cpc	r25, r21
    488a:	08 f4       	brcc	.+2      	; 0x488e <loop+0x19de>
    488c:	e2 c0       	rjmp	.+452    	; 0x4a52 <loop+0x1ba2>
            // detection is over threshold and current readings are different from previous readings

            #ifdef SERIAL_DEBUG_TOUCH
                Serial.print("touch ");
    488e:	84 ed       	ldi	r24, 0xD4	; 212
    4890:	97 e0       	ldi	r25, 0x07	; 7
    4892:	60 ea       	ldi	r22, 0xA0	; 160
    4894:	72 e0       	ldi	r23, 0x02	; 2
    4896:	01 d3       	rcall	.+1538   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
                for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    4898:	10 92 90 04 	sts	0x0490, r1
    489c:	10 92 91 04 	sts	0x0491, r1
    48a0:	10 92 92 04 	sts	0x0492, r1
    48a4:	10 92 93 04 	sts	0x0493, r1
    48a8:	38 c0       	rjmp	.+112    	; 0x491a <loop+0x1a6a>
                    if (i < 32) Serial.print(bitRead(detect1, i));
    48aa:	80 32       	cpi	r24, 0x20	; 32
    48ac:	91 05       	cpc	r25, r1
    48ae:	a1 05       	cpc	r26, r1
    48b0:	b1 05       	cpc	r27, r1
    48b2:	4c f4       	brge	.+18     	; 0x48c6 <loop+0x1a16>
    48b4:	40 91 a3 06 	lds	r20, 0x06A3
    48b8:	50 91 a4 06 	lds	r21, 0x06A4
    48bc:	60 91 a5 06 	lds	r22, 0x06A5
    48c0:	70 91 a6 06 	lds	r23, 0x06A6
    48c4:	09 c0       	rjmp	.+18     	; 0x48d8 <loop+0x1a28>
                    else Serial.print(bitRead(detect2, i - 32));
    48c6:	80 97       	sbiw	r24, 0x20	; 32
    48c8:	40 91 a7 06 	lds	r20, 0x06A7
    48cc:	50 91 a8 06 	lds	r21, 0x06A8
    48d0:	60 91 a9 06 	lds	r22, 0x06A9
    48d4:	70 91 aa 06 	lds	r23, 0x06AA
    48d8:	04 c0       	rjmp	.+8      	; 0x48e2 <loop+0x1a32>
    48da:	76 95       	lsr	r23
    48dc:	67 95       	ror	r22
    48de:	57 95       	ror	r21
    48e0:	47 95       	ror	r20
    48e2:	8a 95       	dec	r24
    48e4:	d2 f7       	brpl	.-12     	; 0x48da <loop+0x1a2a>
    48e6:	41 70       	andi	r20, 0x01	; 1
    48e8:	50 70       	andi	r21, 0x00	; 0
    48ea:	60 70       	andi	r22, 0x00	; 0
    48ec:	70 70       	andi	r23, 0x00	; 0
    48ee:	84 ed       	ldi	r24, 0xD4	; 212
    48f0:	97 e0       	ldi	r25, 0x07	; 7
    48f2:	d6 d2       	rcall	.+1452   	; 0x4ea0 <_ZN16USBVirtualSerial5printEm>
        } else if ((verify1 != sensors1 || verify2 != sensors2) && millis() - touchTime >= opt_touch_detect_threshold) {
            // detection is over threshold and current readings are different from previous readings

            #ifdef SERIAL_DEBUG_TOUCH
                Serial.print("touch ");
                for (i = 0; i < KG_BASE_COMBINATIONS; i++) {
    48f4:	80 91 90 04 	lds	r24, 0x0490
    48f8:	90 91 91 04 	lds	r25, 0x0491
    48fc:	a0 91 92 04 	lds	r26, 0x0492
    4900:	b0 91 93 04 	lds	r27, 0x0493
    4904:	01 96       	adiw	r24, 0x01	; 1
    4906:	a1 1d       	adc	r26, r1
    4908:	b1 1d       	adc	r27, r1
    490a:	80 93 90 04 	sts	0x0490, r24
    490e:	90 93 91 04 	sts	0x0491, r25
    4912:	a0 93 92 04 	sts	0x0492, r26
    4916:	b0 93 93 04 	sts	0x0493, r27
    491a:	80 91 90 04 	lds	r24, 0x0490
    491e:	90 91 91 04 	lds	r25, 0x0491
    4922:	a0 91 92 04 	lds	r26, 0x0492
    4926:	b0 91 93 04 	lds	r27, 0x0493
    492a:	8c 33       	cpi	r24, 0x3C	; 60
    492c:	91 05       	cpc	r25, r1
    492e:	a1 05       	cpc	r26, r1
    4930:	b1 05       	cpc	r27, r1
    4932:	0c f4       	brge	.+2      	; 0x4936 <loop+0x1a86>
    4934:	ba cf       	rjmp	.-140    	; 0x48aa <loop+0x19fa>
                    if (i < 32) Serial.print(bitRead(detect1, i));
                    else Serial.print(bitRead(detect2, i - 32));
                }
                Serial.print("\n");
    4936:	84 ed       	ldi	r24, 0xD4	; 212
    4938:	97 e0       	ldi	r25, 0x07	; 7
    493a:	67 ea       	ldi	r22, 0xA7	; 167
    493c:	72 e0       	ldi	r23, 0x02	; 2
    493e:	ad d2       	rcall	.+1370   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            #endif /* SERIAL_DEBUG_TOUCH */

            // check to see if they've just initiated or removed any touches
            if (verify1 > sensors1 || verify2 > sensors2) {
    4940:	60 90 ab 06 	lds	r6, 0x06AB
    4944:	70 90 ac 06 	lds	r7, 0x06AC
    4948:	80 90 ad 06 	lds	r8, 0x06AD
    494c:	90 90 ae 06 	lds	r9, 0x06AE
    4950:	a0 90 b3 06 	lds	r10, 0x06B3
    4954:	b0 90 b4 06 	lds	r11, 0x06B4
    4958:	c0 90 b5 06 	lds	r12, 0x06B5
    495c:	d0 90 b6 06 	lds	r13, 0x06B6
    4960:	a6 14       	cp	r10, r6
    4962:	b7 04       	cpc	r11, r7
    4964:	c8 04       	cpc	r12, r8
    4966:	d9 04       	cpc	r13, r9
    4968:	a8 f0       	brcs	.+42     	; 0x4994 <loop+0x1ae4>
    496a:	e0 90 af 06 	lds	r14, 0x06AF
    496e:	f0 90 b0 06 	lds	r15, 0x06B0
    4972:	00 91 b1 06 	lds	r16, 0x06B1
    4976:	10 91 b2 06 	lds	r17, 0x06B2
    497a:	20 91 b7 06 	lds	r18, 0x06B7
    497e:	30 91 b8 06 	lds	r19, 0x06B8
    4982:	40 91 b9 06 	lds	r20, 0x06B9
    4986:	50 91 ba 06 	lds	r21, 0x06BA
    498a:	2e 15       	cp	r18, r14
    498c:	3f 05       	cpc	r19, r15
    498e:	40 07       	cpc	r20, r16
    4990:	51 07       	cpc	r21, r17
    4992:	c0 f4       	brcc	.+48     	; 0x49c4 <loop+0x1b14>
                adding = true;
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	80 93 a1 06 	sts	0x06A1, r24

                // touch initiation, check for actions
                check_sensors_touch(verify1, verify2, 1);
    499a:	60 91 ab 06 	lds	r22, 0x06AB
    499e:	70 91 ac 06 	lds	r23, 0x06AC
    49a2:	80 91 ad 06 	lds	r24, 0x06AD
    49a6:	90 91 ae 06 	lds	r25, 0x06AE
    49aa:	20 91 af 06 	lds	r18, 0x06AF
    49ae:	30 91 b0 06 	lds	r19, 0x06B0
    49b2:	40 91 b1 06 	lds	r20, 0x06B1
    49b6:	50 91 b2 06 	lds	r21, 0x06B2
    49ba:	01 e0       	ldi	r16, 0x01	; 1
    49bc:	10 e0       	ldi	r17, 0x00	; 0
    49be:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_Z19check_sensors_touchmmi>
    49c2:	27 c0       	rjmp	.+78     	; 0x4a12 <loop+0x1b62>
            } else if (adding && (verify1 < sensors1 || verify2 < sensors2)) {
    49c4:	80 91 a1 06 	lds	r24, 0x06A1
    49c8:	88 23       	and	r24, r24
    49ca:	19 f1       	breq	.+70     	; 0x4a12 <loop+0x1b62>
    49cc:	6a 14       	cp	r6, r10
    49ce:	7b 04       	cpc	r7, r11
    49d0:	8c 04       	cpc	r8, r12
    49d2:	9d 04       	cpc	r9, r13
    49d4:	28 f0       	brcs	.+10     	; 0x49e0 <loop+0x1b30>
    49d6:	e2 16       	cp	r14, r18
    49d8:	f3 06       	cpc	r15, r19
    49da:	04 07       	cpc	r16, r20
    49dc:	15 07       	cpc	r17, r21
    49de:	c8 f4       	brcc	.+50     	; 0x4a12 <loop+0x1b62>
                adding = false;
    49e0:	10 92 a1 06 	sts	0x06A1, r1
                removing = true;
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	80 93 a2 06 	sts	0x06A2, r24
    
                // touch release, check for actions
                check_sensors_release(sensors1, sensors2, 1);
    49ea:	60 91 b3 06 	lds	r22, 0x06B3
    49ee:	70 91 b4 06 	lds	r23, 0x06B4
    49f2:	80 91 b5 06 	lds	r24, 0x06B5
    49f6:	90 91 b6 06 	lds	r25, 0x06B6
    49fa:	20 91 b7 06 	lds	r18, 0x06B7
    49fe:	30 91 b8 06 	lds	r19, 0x06B8
    4a02:	40 91 b9 06 	lds	r20, 0x06B9
    4a06:	50 91 ba 06 	lds	r21, 0x06BA
    4a0a:	01 e0       	ldi	r16, 0x01	; 1
    4a0c:	10 e0       	ldi	r17, 0x00	; 0
    4a0e:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z21check_sensors_releasemmi>
            }
            
            // set official sensor readings to current readings 
            sensors1 = verify1;
    4a12:	80 91 ab 06 	lds	r24, 0x06AB
    4a16:	90 91 ac 06 	lds	r25, 0x06AC
    4a1a:	a0 91 ad 06 	lds	r26, 0x06AD
    4a1e:	b0 91 ae 06 	lds	r27, 0x06AE
    4a22:	80 93 b3 06 	sts	0x06B3, r24
    4a26:	90 93 b4 06 	sts	0x06B4, r25
    4a2a:	a0 93 b5 06 	sts	0x06B5, r26
    4a2e:	b0 93 b6 06 	sts	0x06B6, r27
            sensors2 = verify2;
    4a32:	80 91 af 06 	lds	r24, 0x06AF
    4a36:	90 91 b0 06 	lds	r25, 0x06B0
    4a3a:	a0 91 b1 06 	lds	r26, 0x06B1
    4a3e:	b0 91 b2 06 	lds	r27, 0x06B2
    4a42:	80 93 b7 06 	sts	0x06B7, r24
    4a46:	90 93 b8 06 	sts	0x06B8, r25
    4a4a:	a0 93 b9 06 	sts	0x06B9, r26
    4a4e:	b0 93 ba 06 	sts	0x06BA, r27
        }
        
        verify1 = detect1;
    4a52:	80 91 a3 06 	lds	r24, 0x06A3
    4a56:	90 91 a4 06 	lds	r25, 0x06A4
    4a5a:	a0 91 a5 06 	lds	r26, 0x06A5
    4a5e:	b0 91 a6 06 	lds	r27, 0x06A6
    4a62:	80 93 ab 06 	sts	0x06AB, r24
    4a66:	90 93 ac 06 	sts	0x06AC, r25
    4a6a:	a0 93 ad 06 	sts	0x06AD, r26
    4a6e:	b0 93 ae 06 	sts	0x06AE, r27
        verify2 = detect2;
    4a72:	80 91 a7 06 	lds	r24, 0x06A7
    4a76:	90 91 a8 06 	lds	r25, 0x06A8
    4a7a:	a0 91 a9 06 	lds	r26, 0x06A9
    4a7e:	b0 91 aa 06 	lds	r27, 0x06AA
    4a82:	80 93 af 06 	sts	0x06AF, r24
    4a86:	90 93 b0 06 	sts	0x06B0, r25
    4a8a:	a0 93 b1 06 	sts	0x06B1, r26
    4a8e:	b0 93 b2 06 	sts	0x06B2, r27
    #endif /* ENABLE_TOUCH */

    // increment loop tick counter
    counter++;
    4a92:	20 91 88 04 	lds	r18, 0x0488
    4a96:	30 91 89 04 	lds	r19, 0x0489
    4a9a:	2f 5f       	subi	r18, 0xFF	; 255
    4a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9e:	30 93 89 04 	sts	0x0489, r19
    4aa2:	20 93 88 04 	sts	0x0488, r18

    #ifdef ENABLE_TRICOLOR
        if      (tricolorBlinkRed   == 1 && counter % 500 == 0) tricolor(counter % 1000 >= 500 ? 0 : 1, 255, 255);
    4aa6:	e0 91 70 06 	lds	r30, 0x0670
    4aaa:	f0 91 71 06 	lds	r31, 0x0671
    4aae:	e1 30       	cpi	r30, 0x01	; 1
    4ab0:	f1 05       	cpc	r31, r1
    4ab2:	89 f4       	brne	.+34     	; 0x4ad6 <loop+0x1c26>
    4ab4:	c9 01       	movw	r24, r18
    4ab6:	64 ef       	ldi	r22, 0xF4	; 244
    4ab8:	71 e0       	ldi	r23, 0x01	; 1
    4aba:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4abe:	89 2b       	or	r24, r25
    4ac0:	51 f4       	brne	.+20     	; 0x4ad6 <loop+0x1c26>
    4ac2:	40 e0       	ldi	r20, 0x00	; 0
    4ac4:	c9 01       	movw	r24, r18
    4ac6:	68 ee       	ldi	r22, 0xE8	; 232
    4ac8:	73 e0       	ldi	r23, 0x03	; 3
    4aca:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4ace:	84 5f       	subi	r24, 0xF4	; 244
    4ad0:	91 40       	sbci	r25, 0x01	; 1
    4ad2:	d4 f5       	brge	.+116    	; 0x4b48 <loop+0x1c98>
    4ad4:	38 c0       	rjmp	.+112    	; 0x4b46 <loop+0x1c96>
        else if (tricolorBlinkRed   == 2 && counter % 100 == 0) tricolor(counter % 1000 >= 100 ? 0 : 1, 255, 255);
    4ad6:	e2 30       	cpi	r30, 0x02	; 2
    4ad8:	f1 05       	cpc	r31, r1
    4ada:	89 f4       	brne	.+34     	; 0x4afe <loop+0x1c4e>
    4adc:	c9 01       	movw	r24, r18
    4ade:	64 e6       	ldi	r22, 0x64	; 100
    4ae0:	70 e0       	ldi	r23, 0x00	; 0
    4ae2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4ae6:	89 2b       	or	r24, r25
    4ae8:	51 f4       	brne	.+20     	; 0x4afe <loop+0x1c4e>
    4aea:	40 e0       	ldi	r20, 0x00	; 0
    4aec:	c9 01       	movw	r24, r18
    4aee:	68 ee       	ldi	r22, 0xE8	; 232
    4af0:	73 e0       	ldi	r23, 0x03	; 3
    4af2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4af6:	84 36       	cpi	r24, 0x64	; 100
    4af8:	91 05       	cpc	r25, r1
    4afa:	34 f5       	brge	.+76     	; 0x4b48 <loop+0x1c98>
    4afc:	24 c0       	rjmp	.+72     	; 0x4b46 <loop+0x1c96>
        else if (tricolorBlinkRed   == 3 && counter %  50 == 0) tricolor(counter %  100 >=  50 ? 0 : 1, 255, 255);
    4afe:	e3 30       	cpi	r30, 0x03	; 3
    4b00:	f1 05       	cpc	r31, r1
    4b02:	81 f4       	brne	.+32     	; 0x4b24 <loop+0x1c74>
    4b04:	c9 01       	movw	r24, r18
    4b06:	62 e3       	ldi	r22, 0x32	; 50
    4b08:	70 e0       	ldi	r23, 0x00	; 0
    4b0a:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b0e:	89 2b       	or	r24, r25
    4b10:	49 f4       	brne	.+18     	; 0x4b24 <loop+0x1c74>
    4b12:	40 e0       	ldi	r20, 0x00	; 0
    4b14:	c9 01       	movw	r24, r18
    4b16:	64 e6       	ldi	r22, 0x64	; 100
    4b18:	70 e0       	ldi	r23, 0x00	; 0
    4b1a:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b1e:	c2 97       	sbiw	r24, 0x32	; 50
    4b20:	9c f4       	brge	.+38     	; 0x4b48 <loop+0x1c98>
    4b22:	11 c0       	rjmp	.+34     	; 0x4b46 <loop+0x1c96>
        else if (tricolorBlinkRed   == 4 && counter %  10 == 0) tricolor(counter %  100 >=  10 ? 0 : 1, 255, 255);
    4b24:	34 97       	sbiw	r30, 0x04	; 4
    4b26:	a9 f4       	brne	.+42     	; 0x4b52 <loop+0x1ca2>
    4b28:	c9 01       	movw	r24, r18
    4b2a:	6a e0       	ldi	r22, 0x0A	; 10
    4b2c:	70 e0       	ldi	r23, 0x00	; 0
    4b2e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b32:	89 2b       	or	r24, r25
    4b34:	71 f4       	brne	.+28     	; 0x4b52 <loop+0x1ca2>
    4b36:	40 e0       	ldi	r20, 0x00	; 0
    4b38:	c9 01       	movw	r24, r18
    4b3a:	64 e6       	ldi	r22, 0x64	; 100
    4b3c:	70 e0       	ldi	r23, 0x00	; 0
    4b3e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b42:	0a 97       	sbiw	r24, 0x0a	; 10
    4b44:	0c f4       	brge	.+2      	; 0x4b48 <loop+0x1c98>
    4b46:	41 e0       	ldi	r20, 0x01	; 1
    4b48:	84 2f       	mov	r24, r20
    4b4a:	6f ef       	ldi	r22, 0xFF	; 255
    4b4c:	4f ef       	ldi	r20, 0xFF	; 255
    4b4e:	0e 94 a4 03 	call	0x748	; 0x748 <_Z8tricolorhhh>
        if      (tricolorBlinkGreen == 1 && counter % 500 == 0) tricolor(255, counter % 1000 >= 500 ? 0 : 1, 255);
    4b52:	20 91 72 06 	lds	r18, 0x0672
    4b56:	30 91 73 06 	lds	r19, 0x0673
    4b5a:	21 30       	cpi	r18, 0x01	; 1
    4b5c:	31 05       	cpc	r19, r1
    4b5e:	a9 f4       	brne	.+42     	; 0x4b8a <loop+0x1cda>
    4b60:	e0 91 88 04 	lds	r30, 0x0488
    4b64:	f0 91 89 04 	lds	r31, 0x0489
    4b68:	cf 01       	movw	r24, r30
    4b6a:	64 ef       	ldi	r22, 0xF4	; 244
    4b6c:	71 e0       	ldi	r23, 0x01	; 1
    4b6e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b72:	89 2b       	or	r24, r25
    4b74:	51 f4       	brne	.+20     	; 0x4b8a <loop+0x1cda>
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	cf 01       	movw	r24, r30
    4b7a:	68 ee       	ldi	r22, 0xE8	; 232
    4b7c:	73 e0       	ldi	r23, 0x03	; 3
    4b7e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4b82:	84 5f       	subi	r24, 0xF4	; 244
    4b84:	91 40       	sbci	r25, 0x01	; 1
    4b86:	84 f5       	brge	.+96     	; 0x4be8 <loop+0x1d38>
    4b88:	2e c0       	rjmp	.+92     	; 0x4be6 <loop+0x1d36>
        else if (tricolorBlinkGreen == 3 && counter % 100 == 0) tricolor(255, counter % 1000 >= 100 ? 0 : 1, 255);
    4b8a:	23 30       	cpi	r18, 0x03	; 3
    4b8c:	31 05       	cpc	r19, r1
    4b8e:	a9 f4       	brne	.+42     	; 0x4bba <loop+0x1d0a>
    4b90:	e0 91 88 04 	lds	r30, 0x0488
    4b94:	f0 91 89 04 	lds	r31, 0x0489
    4b98:	cf 01       	movw	r24, r30
    4b9a:	64 e6       	ldi	r22, 0x64	; 100
    4b9c:	70 e0       	ldi	r23, 0x00	; 0
    4b9e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4ba2:	89 2b       	or	r24, r25
    4ba4:	51 f4       	brne	.+20     	; 0x4bba <loop+0x1d0a>
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	cf 01       	movw	r24, r30
    4baa:	68 ee       	ldi	r22, 0xE8	; 232
    4bac:	73 e0       	ldi	r23, 0x03	; 3
    4bae:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4bb2:	84 36       	cpi	r24, 0x64	; 100
    4bb4:	91 05       	cpc	r25, r1
    4bb6:	c4 f4       	brge	.+48     	; 0x4be8 <loop+0x1d38>
    4bb8:	16 c0       	rjmp	.+44     	; 0x4be6 <loop+0x1d36>
        else if (tricolorBlinkGreen == 2 && counter %  50 == 0) tricolor(255, counter %  100 >=  50 ? 0 : 1, 255);
    4bba:	22 30       	cpi	r18, 0x02	; 2
    4bbc:	31 05       	cpc	r19, r1
    4bbe:	b9 f4       	brne	.+46     	; 0x4bee <loop+0x1d3e>
    4bc0:	e0 91 88 04 	lds	r30, 0x0488
    4bc4:	f0 91 89 04 	lds	r31, 0x0489
    4bc8:	cf 01       	movw	r24, r30
    4bca:	62 e3       	ldi	r22, 0x32	; 50
    4bcc:	70 e0       	ldi	r23, 0x00	; 0
    4bce:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4bd2:	89 2b       	or	r24, r25
    4bd4:	61 f4       	brne	.+24     	; 0x4bee <loop+0x1d3e>
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	cf 01       	movw	r24, r30
    4bda:	64 e6       	ldi	r22, 0x64	; 100
    4bdc:	70 e0       	ldi	r23, 0x00	; 0
    4bde:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4be2:	c2 97       	sbiw	r24, 0x32	; 50
    4be4:	0c f4       	brge	.+2      	; 0x4be8 <loop+0x1d38>
    4be6:	21 e0       	ldi	r18, 0x01	; 1
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	62 2f       	mov	r22, r18
    4bec:	19 c0       	rjmp	.+50     	; 0x4c20 <loop+0x1d70>
        else if (tricolorBlinkGreen == 4 && counter %  10 == 0) tricolor(255, counter %  100 >=  10 ? 0 : 1, 255);
    4bee:	24 30       	cpi	r18, 0x04	; 4
    4bf0:	31 05       	cpc	r19, r1
    4bf2:	c9 f4       	brne	.+50     	; 0x4c26 <loop+0x1d76>
    4bf4:	20 91 88 04 	lds	r18, 0x0488
    4bf8:	30 91 89 04 	lds	r19, 0x0489
    4bfc:	c9 01       	movw	r24, r18
    4bfe:	6a e0       	ldi	r22, 0x0A	; 10
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c06:	89 2b       	or	r24, r25
    4c08:	71 f4       	brne	.+28     	; 0x4c26 <loop+0x1d76>
    4c0a:	40 e0       	ldi	r20, 0x00	; 0
    4c0c:	c9 01       	movw	r24, r18
    4c0e:	64 e6       	ldi	r22, 0x64	; 100
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c16:	0a 97       	sbiw	r24, 0x0a	; 10
    4c18:	0c f4       	brge	.+2      	; 0x4c1c <loop+0x1d6c>
    4c1a:	41 e0       	ldi	r20, 0x01	; 1
    4c1c:	8f ef       	ldi	r24, 0xFF	; 255
    4c1e:	64 2f       	mov	r22, r20
    4c20:	4f ef       	ldi	r20, 0xFF	; 255
    4c22:	0e 94 a4 03 	call	0x748	; 0x748 <_Z8tricolorhhh>
        if      (tricolorBlinkBlue  == 1 && counter % 500 == 0) tricolor(255, 255, counter % 1000 >= 500 ? 0 : 1);
    4c26:	20 91 74 06 	lds	r18, 0x0674
    4c2a:	30 91 75 06 	lds	r19, 0x0675
    4c2e:	21 30       	cpi	r18, 0x01	; 1
    4c30:	31 05       	cpc	r19, r1
    4c32:	b1 f4       	brne	.+44     	; 0x4c60 <loop+0x1db0>
    4c34:	e0 91 88 04 	lds	r30, 0x0488
    4c38:	f0 91 89 04 	lds	r31, 0x0489
    4c3c:	cf 01       	movw	r24, r30
    4c3e:	64 ef       	ldi	r22, 0xF4	; 244
    4c40:	71 e0       	ldi	r23, 0x01	; 1
    4c42:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c46:	89 2b       	or	r24, r25
    4c48:	59 f4       	brne	.+22     	; 0x4c60 <loop+0x1db0>
    4c4a:	40 e0       	ldi	r20, 0x00	; 0
    4c4c:	cf 01       	movw	r24, r30
    4c4e:	68 ee       	ldi	r22, 0xE8	; 232
    4c50:	73 e0       	ldi	r23, 0x03	; 3
    4c52:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c56:	84 5f       	subi	r24, 0xF4	; 244
    4c58:	91 40       	sbci	r25, 0x01	; 1
    4c5a:	0c f0       	brlt	.+2      	; 0x4c5e <loop+0x1dae>
    4c5c:	47 c0       	rjmp	.+142    	; 0x4cec <loop+0x1e3c>
    4c5e:	45 c0       	rjmp	.+138    	; 0x4cea <loop+0x1e3a>
        else if (tricolorBlinkBlue  == 2 && counter % 100 == 0) tricolor(255, 255, counter % 1000 >= 100 ? 0 : 1);
    4c60:	22 30       	cpi	r18, 0x02	; 2
    4c62:	31 05       	cpc	r19, r1
    4c64:	a9 f4       	brne	.+42     	; 0x4c90 <loop+0x1de0>
    4c66:	e0 91 88 04 	lds	r30, 0x0488
    4c6a:	f0 91 89 04 	lds	r31, 0x0489
    4c6e:	cf 01       	movw	r24, r30
    4c70:	64 e6       	ldi	r22, 0x64	; 100
    4c72:	70 e0       	ldi	r23, 0x00	; 0
    4c74:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c78:	89 2b       	or	r24, r25
    4c7a:	51 f4       	brne	.+20     	; 0x4c90 <loop+0x1de0>
    4c7c:	40 e0       	ldi	r20, 0x00	; 0
    4c7e:	cf 01       	movw	r24, r30
    4c80:	68 ee       	ldi	r22, 0xE8	; 232
    4c82:	73 e0       	ldi	r23, 0x03	; 3
    4c84:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4c88:	84 36       	cpi	r24, 0x64	; 100
    4c8a:	91 05       	cpc	r25, r1
    4c8c:	7c f5       	brge	.+94     	; 0x4cec <loop+0x1e3c>
    4c8e:	2d c0       	rjmp	.+90     	; 0x4cea <loop+0x1e3a>
        else if (tricolorBlinkBlue  == 3 && counter %  50 == 0) tricolor(255, 255, counter %  100 >=  50 ? 0 : 1);
    4c90:	23 30       	cpi	r18, 0x03	; 3
    4c92:	31 05       	cpc	r19, r1
    4c94:	a1 f4       	brne	.+40     	; 0x4cbe <loop+0x1e0e>
    4c96:	e0 91 88 04 	lds	r30, 0x0488
    4c9a:	f0 91 89 04 	lds	r31, 0x0489
    4c9e:	cf 01       	movw	r24, r30
    4ca0:	62 e3       	ldi	r22, 0x32	; 50
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4ca8:	89 2b       	or	r24, r25
    4caa:	49 f4       	brne	.+18     	; 0x4cbe <loop+0x1e0e>
    4cac:	40 e0       	ldi	r20, 0x00	; 0
    4cae:	cf 01       	movw	r24, r30
    4cb0:	64 e6       	ldi	r22, 0x64	; 100
    4cb2:	70 e0       	ldi	r23, 0x00	; 0
    4cb4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4cb8:	c2 97       	sbiw	r24, 0x32	; 50
    4cba:	c4 f4       	brge	.+48     	; 0x4cec <loop+0x1e3c>
    4cbc:	16 c0       	rjmp	.+44     	; 0x4cea <loop+0x1e3a>
        else if (tricolorBlinkBlue  == 4 && counter %  10 == 0) tricolor(255, 255, counter %  100 >=  10 ? 0 : 1);
    4cbe:	24 30       	cpi	r18, 0x04	; 4
    4cc0:	31 05       	cpc	r19, r1
    4cc2:	c1 f4       	brne	.+48     	; 0x4cf4 <loop+0x1e44>
    4cc4:	20 91 88 04 	lds	r18, 0x0488
    4cc8:	30 91 89 04 	lds	r19, 0x0489
    4ccc:	c9 01       	movw	r24, r18
    4cce:	6a e0       	ldi	r22, 0x0A	; 10
    4cd0:	70 e0       	ldi	r23, 0x00	; 0
    4cd2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4cd6:	89 2b       	or	r24, r25
    4cd8:	69 f4       	brne	.+26     	; 0x4cf4 <loop+0x1e44>
    4cda:	40 e0       	ldi	r20, 0x00	; 0
    4cdc:	c9 01       	movw	r24, r18
    4cde:	64 e6       	ldi	r22, 0x64	; 100
    4ce0:	70 e0       	ldi	r23, 0x00	; 0
    4ce2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__divmodhi4>
    4ce6:	0a 97       	sbiw	r24, 0x0a	; 10
    4ce8:	0c f4       	brge	.+2      	; 0x4cec <loop+0x1e3c>
    4cea:	41 e0       	ldi	r20, 0x01	; 1
    4cec:	8f ef       	ldi	r24, 0xFF	; 255
    4cee:	6f ef       	ldi	r22, 0xFF	; 255
    4cf0:	0e 94 a4 03 	call	0x748	; 0x748 <_Z8tricolorhhh>
    #endif /* ENABLE_TRICOLOR */

    // test counter and reset if necessary
    if (counter == 1000) {
    4cf4:	80 91 88 04 	lds	r24, 0x0488
    4cf8:	90 91 89 04 	lds	r25, 0x0489
    4cfc:	88 5e       	subi	r24, 0xE8	; 232
    4cfe:	93 40       	sbci	r25, 0x03	; 3
    4d00:	09 f0       	breq	.+2      	; 0x4d04 <loop+0x1e54>
    4d02:	4b c0       	rjmp	.+150    	; 0x4d9a <loop+0x1eea>
        counter = 0;
    4d04:	10 92 89 04 	sts	0x0489, r1
    4d08:	10 92 88 04 	sts	0x0488, r1
        ticks++;
    4d0c:	80 91 8a 04 	lds	r24, 0x048A
    4d10:	90 91 8b 04 	lds	r25, 0x048B
    4d14:	01 96       	adiw	r24, 0x01	; 1
    4d16:	90 93 8b 04 	sts	0x048B, r25
    4d1a:	80 93 8a 04 	sts	0x048A, r24
        #ifdef ENABLE_BLINK
            blink_led = !blink_led;
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	80 91 76 06 	lds	r24, 0x0676
    4d24:	88 23       	and	r24, r24
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <loop+0x1e7a>
    4d28:	91 e0       	ldi	r25, 0x01	; 1
    4d2a:	90 93 76 06 	sts	0x0676, r25
            if (blink_led) digitalWrite(BLINK_LED_PIN, HIGH);
    4d2e:	99 23       	and	r25, r25
    4d30:	19 f0       	breq	.+6      	; 0x4d38 <loop+0x1e88>
    4d32:	86 e0       	ldi	r24, 0x06	; 6
    4d34:	61 e0       	ldi	r22, 0x01	; 1
    4d36:	02 c0       	rjmp	.+4      	; 0x4d3c <loop+0x1e8c>
            else digitalWrite(BLINK_LED_PIN, LOW);
    4d38:	86 e0       	ldi	r24, 0x06	; 6
    4d3a:	60 e0       	ldi	r22, 0x00	; 0
    4d3c:	50 d1       	rcall	.+672    	; 0x4fde <digitalWrite>
        #endif /* ENABLE_BLINK */
        #ifdef SERIAL_DEBUG_BENCHMARK
            Serial.print("benchmark 1000 ");
    4d3e:	84 ed       	ldi	r24, 0xD4	; 212
    4d40:	97 e0       	ldi	r25, 0x07	; 7
    4d42:	69 ea       	ldi	r22, 0xA9	; 169
    4d44:	72 e0       	ldi	r23, 0x02	; 2
    4d46:	a9 d0       	rcall	.+338    	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.print(millis() - t);
    4d48:	0e 94 39 35 	call	0x6a72	; 0x6a72 <millis>
    4d4c:	ab 01       	movw	r20, r22
    4d4e:	bc 01       	movw	r22, r24
    4d50:	80 91 8c 04 	lds	r24, 0x048C
    4d54:	90 91 8d 04 	lds	r25, 0x048D
    4d58:	a0 91 8e 04 	lds	r26, 0x048E
    4d5c:	b0 91 8f 04 	lds	r27, 0x048F
    4d60:	48 1b       	sub	r20, r24
    4d62:	59 0b       	sbc	r21, r25
    4d64:	6a 0b       	sbc	r22, r26
    4d66:	7b 0b       	sbc	r23, r27
    4d68:	84 ed       	ldi	r24, 0xD4	; 212
    4d6a:	97 e0       	ldi	r25, 0x07	; 7
    4d6c:	99 d0       	rcall	.+306    	; 0x4ea0 <_ZN16USBVirtualSerial5printEm>
            Serial.print(" ");
    4d6e:	84 ed       	ldi	r24, 0xD4	; 212
    4d70:	97 e0       	ldi	r25, 0x07	; 7
    4d72:	67 e3       	ldi	r22, 0x37	; 55
    4d74:	71 e0       	ldi	r23, 0x01	; 1
    4d76:	91 d0       	rcall	.+290    	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(ticks);
    4d78:	60 91 8a 04 	lds	r22, 0x048A
    4d7c:	70 91 8b 04 	lds	r23, 0x048B
    4d80:	84 ed       	ldi	r24, 0xD4	; 212
    4d82:	97 e0       	ldi	r25, 0x07	; 7
    4d84:	96 d0       	rcall	.+300    	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_BENCHMARK */
        t = millis();
    4d86:	0e 94 39 35 	call	0x6a72	; 0x6a72 <millis>
    4d8a:	60 93 8c 04 	sts	0x048C, r22
    4d8e:	70 93 8d 04 	sts	0x048D, r23
    4d92:	80 93 8e 04 	sts	0x048E, r24
    4d96:	90 93 8f 04 	sts	0x048F, r25
    }
}
    4d9a:	28 96       	adiw	r28, 0x08	; 8
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	de bf       	out	0x3e, r29	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	cd bf       	out	0x3d, r28	; 61
    4da6:	cf 91       	pop	r28
    4da8:	df 91       	pop	r29
    4daa:	1f 91       	pop	r17
    4dac:	0f 91       	pop	r16
    4dae:	ff 90       	pop	r15
    4db0:	ef 90       	pop	r14
    4db2:	df 90       	pop	r13
    4db4:	cf 90       	pop	r12
    4db6:	bf 90       	pop	r11
    4db8:	af 90       	pop	r10
    4dba:	9f 90       	pop	r9
    4dbc:	8f 90       	pop	r8
    4dbe:	7f 90       	pop	r7
    4dc0:	6f 90       	pop	r6
    4dc2:	5f 90       	pop	r5
    4dc4:	4f 90       	pop	r4
    4dc6:	3f 90       	pop	r3
    4dc8:	2f 90       	pop	r2
    4dca:	08 95       	ret

00004dcc <main>:
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    4dcc:	e7 ec       	ldi	r30, 0xC7	; 199
    4dce:	f6 e0       	ldi	r31, 0x06	; 6
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4dd0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4dd2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
    4dd4:	82 ed       	ldi	r24, 0xD2	; 210
    4dd6:	96 e0       	ldi	r25, 0x06	; 6
    4dd8:	91 83       	std	Z+1, r25	; 0x01
    4dda:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    4ddc:	93 83       	std	Z+3, r25	; 0x03
    4dde:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    4de0:	95 83       	std	Z+5, r25	; 0x05
    4de2:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    4de4:	82 e5       	ldi	r24, 0x52	; 82
    4de6:	97 e0       	ldi	r25, 0x07	; 7
    4de8:	97 83       	std	Z+7, r25	; 0x07
    4dea:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    4dec:	80 e8       	ldi	r24, 0x80	; 128
    4dee:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
    4df0:	12 86       	std	Z+10, r1	; 0x0a
    4df2:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4df4:	2f bf       	out	0x3f, r18	; 63
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
    4df6:	ec eb       	ldi	r30, 0xBC	; 188
    4df8:	f6 e0       	ldi	r31, 0x06	; 6
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4dfa:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4dfc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
    4dfe:	82 e5       	ldi	r24, 0x52	; 82
    4e00:	97 e0       	ldi	r25, 0x07	; 7
    4e02:	91 83       	std	Z+1, r25	; 0x01
    4e04:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
    4e06:	93 83       	std	Z+3, r25	; 0x03
    4e08:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
    4e0a:	95 83       	std	Z+5, r25	; 0x05
    4e0c:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
    4e0e:	82 ed       	ldi	r24, 0xD2	; 210
    4e10:	97 e0       	ldi	r25, 0x07	; 7
    4e12:	97 83       	std	Z+7, r25	; 0x07
    4e14:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
    4e16:	80 e8       	ldi	r24, 0x80	; 128
    4e18:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
    4e1a:	12 86       	std	Z+10, r1	; 0x0a
    4e1c:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4e1e:	2f bf       	out	0x3f, r18	; 63
int main(void)
{
    RingBuffer_InitBuffer(&HostRXSerial_Buffer, HostRXSerial_Buffer_Data, sizeof(HostRXSerial_Buffer_Data));
    RingBuffer_InitBuffer(&HostTXSerial_Buffer, HostTXSerial_Buffer_Data, sizeof(HostTXSerial_Buffer_Data));

    SetupHardware();
    4e20:	0e 94 8a 03 	call	0x714	; 0x714 <SetupHardware>
    //LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    //sei(); // called by init()
    init();
    4e24:	0e 94 91 35 	call	0x6b22	; 0x6b22 <init>
    setup();
    4e28:	0e 94 01 07 	call	0xe02	; 0xe02 <setup>
            HIDReportInData[6] = 0; // right y exis
            HIDReportInData[7] = 0; // ] - unused
            HIDReportInData[8] = 0; // ]
        }*/

        loop();
    4e2c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <loop>
        if (!CDCTaskRun) CDC_Task(); else CDCTaskRun = false;
    4e30:	80 91 d2 07 	lds	r24, 0x07D2
    4e34:	88 23       	and	r24, r24
    4e36:	19 f4       	brne	.+6      	; 0x4e3e <main+0x72>
    4e38:	0e 94 2c 02 	call	0x458	; 0x458 <CDC_Task>
    4e3c:	02 c0       	rjmp	.+4      	; 0x4e42 <main+0x76>
    4e3e:	10 92 d2 07 	sts	0x07D2, r1
        if (!HIDTaskRun) HID_Task(); else HIDTaskRun = false;
    4e42:	80 91 d3 07 	lds	r24, 0x07D3
    4e46:	88 23       	and	r24, r24
    4e48:	19 f4       	brne	.+6      	; 0x4e50 <main+0x84>
    4e4a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HID_Task>
    4e4e:	02 c0       	rjmp	.+4      	; 0x4e54 <main+0x88>
    4e50:	10 92 d3 07 	sts	0x07D3, r1
        USB_USBTask();
    4e54:	0e 94 03 3b 	call	0x7606	; 0x7606 <USB_USBTask>
    4e58:	e9 cf       	rjmp	.-46     	; 0x4e2c <main+0x60>

00004e5a <_Z10mouseclicki>:
                RX400.set_buttons((mouseDown & 1) > 0 ? 1 : 0, (mouseDown & 2) > 0 ? 1 : 0, (mouseDown & 4) > 0 ? 1 : 0);
            #endif /* ENABLE_RX400 */
        }
    }
    
    void mouseclick(int button) {
    4e5a:	ef 92       	push	r14
    4e5c:	ff 92       	push	r15
    4e5e:	0f 93       	push	r16
    4e60:	1f 93       	push	r17
    4e62:	7c 01       	movw	r14, r24
        #ifdef SERIAL_DEBUG_TOUCHSET
            Serial.print("touchset mouseclick ");
    4e64:	04 ed       	ldi	r16, 0xD4	; 212
    4e66:	17 e0       	ldi	r17, 0x07	; 7
    4e68:	c8 01       	movw	r24, r16
    4e6a:	69 eb       	ldi	r22, 0xB9	; 185
    4e6c:	72 e0       	ldi	r23, 0x02	; 2
    4e6e:	15 d0       	rcall	.+42     	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
            Serial.println(button);
    4e70:	c8 01       	movw	r24, r16
    4e72:	b7 01       	movw	r22, r14
    4e74:	1e d0       	rcall	.+60     	; 0x4eb2 <_ZN16USBVirtualSerial7printlnEi>
        #endif /* SERIAL_DEBUG_TOUCHSET */
        mousedown(button);
    4e76:	c7 01       	movw	r24, r14
    4e78:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_Z9mousedowni>
        delay(5);
    4e7c:	65 e0       	ldi	r22, 0x05	; 5
    4e7e:	70 e0       	ldi	r23, 0x00	; 0
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	0e 94 6d 35 	call	0x6ada	; 0x6ada <delay>
        mouseup(button);
    4e88:	c7 01       	movw	r24, r14
    4e8a:	0e 94 8d 09 	call	0x131a	; 0x131a <_Z7mouseupi>
    }
    4e8e:	1f 91       	pop	r17
    4e90:	0f 91       	pop	r16
    4e92:	ff 90       	pop	r15
    4e94:	ef 90       	pop	r14
    4e96:	08 95       	ret

00004e98 <_ZN16USBVirtualSerial5beginEm>:

extern "C" {
    #include "Keyglove.h"
}

void USBVirtualSerial::begin(uint32_t baud) { }
    4e98:	08 95       	ret

00004e9a <_ZN16USBVirtualSerial5printEPKc>:

void USBVirtualSerial::print(const char *str) { }
    4e9a:	08 95       	ret

00004e9c <_ZN16USBVirtualSerial5printEh>:
void USBVirtualSerial::print(byte val) { }
    4e9c:	08 95       	ret

00004e9e <_ZN16USBVirtualSerial5printEi>:
void USBVirtualSerial::print(int val) { }
    4e9e:	08 95       	ret

00004ea0 <_ZN16USBVirtualSerial5printEm>:
void USBVirtualSerial::print(long unsigned int val) { }
    4ea0:	08 95       	ret

00004ea2 <_ZN16USBVirtualSerial5printEe>:
void USBVirtualSerial::print(long double val) { }
    4ea2:	08 95       	ret

00004ea4 <_ZN16USBVirtualSerial5printEPKci>:

void USBVirtualSerial::print(const char *str, int format) { }
    4ea4:	08 95       	ret

00004ea6 <_ZN16USBVirtualSerial5printEhi>:
void USBVirtualSerial::print(byte val, int format) { }
    4ea6:	08 95       	ret

00004ea8 <_ZN16USBVirtualSerial5printEii>:
void USBVirtualSerial::print(int val, int format) { }
    4ea8:	08 95       	ret

00004eaa <_ZN16USBVirtualSerial5printEmi>:
void USBVirtualSerial::print(long unsigned int val, int format) { }
    4eaa:	08 95       	ret

00004eac <_ZN16USBVirtualSerial5printEei>:
void USBVirtualSerial::print(long double val, int format) { }
    4eac:	08 95       	ret

00004eae <_ZN16USBVirtualSerial7printlnEPKc>:

void USBVirtualSerial::println(const char *str) { }
    4eae:	08 95       	ret

00004eb0 <_ZN16USBVirtualSerial7printlnEh>:
void USBVirtualSerial::println(byte val) { }
    4eb0:	08 95       	ret

00004eb2 <_ZN16USBVirtualSerial7printlnEi>:
void USBVirtualSerial::println(int val) { }
    4eb2:	08 95       	ret

00004eb4 <_ZN16USBVirtualSerial7printlnEm>:
void USBVirtualSerial::println(long unsigned int val) { }
    4eb4:	08 95       	ret

00004eb6 <_ZN16USBVirtualSerial7printlnEe>:
void USBVirtualSerial::println(long double val) { }
    4eb6:	08 95       	ret

00004eb8 <_ZN16USBVirtualSerial7printlnEPKci>:

void USBVirtualSerial::println(const char *str, int format) { }
    4eb8:	08 95       	ret

00004eba <_ZN16USBVirtualSerial7printlnEhi>:
void USBVirtualSerial::println(byte val, int format) { }
    4eba:	08 95       	ret

00004ebc <_ZN16USBVirtualSerial7printlnEii>:
void USBVirtualSerial::println(int val, int format) { }
    4ebc:	08 95       	ret

00004ebe <_ZN16USBVirtualSerial7printlnEmi>:
void USBVirtualSerial::println(long unsigned int val, int format) { }
    4ebe:	08 95       	ret

00004ec0 <_ZN16USBVirtualSerial7printlnEei>:
void USBVirtualSerial::println(long double val, int format) { }
    4ec0:	08 95       	ret

00004ec2 <_ZN14HardwareSerial5beginEm>:

void HardwareSerial::begin(uint32_t baud) { /*Serial_Init(baud, false);*/ }
    4ec2:	08 95       	ret

00004ec4 <_ZN14HardwareSerial5printEPKc>:
// bool Serial_IsCharReceived();

void HardwareSerial::print(const char *str) { }
    4ec4:	08 95       	ret

00004ec6 <_ZN14HardwareSerial5printEh>:
void HardwareSerial::print(byte val) { }
    4ec6:	08 95       	ret

00004ec8 <_ZN14HardwareSerial5printEi>:
void HardwareSerial::print(int val) { }
    4ec8:	08 95       	ret

00004eca <_ZN14HardwareSerial5printEm>:
void HardwareSerial::print(long unsigned int val) { }
    4eca:	08 95       	ret

00004ecc <_ZN14HardwareSerial5printEe>:
void HardwareSerial::print(long double val) { }
    4ecc:	08 95       	ret

00004ece <_ZN14HardwareSerial5printEPKci>:

void HardwareSerial::print(const char *str, int format) { }
    4ece:	08 95       	ret

00004ed0 <_ZN14HardwareSerial5printEhi>:
void HardwareSerial::print(byte val, int format) { }
    4ed0:	08 95       	ret

00004ed2 <_ZN14HardwareSerial5printEii>:
void HardwareSerial::print(int val, int format) { }
    4ed2:	08 95       	ret

00004ed4 <_ZN14HardwareSerial5printEmi>:
void HardwareSerial::print(long unsigned int val, int format) { }
    4ed4:	08 95       	ret

00004ed6 <_ZN14HardwareSerial5printEei>:
void HardwareSerial::print(long double val, int format) { }
    4ed6:	08 95       	ret

00004ed8 <_ZN14HardwareSerial7printlnEPKc>:

void HardwareSerial::println(const char *str) { }
    4ed8:	08 95       	ret

00004eda <_ZN14HardwareSerial7printlnEh>:
void HardwareSerial::println(byte val) { }
    4eda:	08 95       	ret

00004edc <_ZN14HardwareSerial7printlnEi>:
void HardwareSerial::println(int val) { }
    4edc:	08 95       	ret

00004ede <_ZN14HardwareSerial7printlnEm>:
void HardwareSerial::println(long unsigned int val) { }
    4ede:	08 95       	ret

00004ee0 <_ZN14HardwareSerial7printlnEe>:
void HardwareSerial::println(long double val) { }
    4ee0:	08 95       	ret

00004ee2 <_ZN14HardwareSerial7printlnEPKci>:

void HardwareSerial::println(const char *str, int format) { }
    4ee2:	08 95       	ret

00004ee4 <_ZN14HardwareSerial7printlnEhi>:
void HardwareSerial::println(byte val, int format) { }
    4ee4:	08 95       	ret

00004ee6 <_ZN14HardwareSerial7printlnEii>:
void HardwareSerial::println(int val, int format) { }
    4ee6:	08 95       	ret

00004ee8 <_ZN14HardwareSerial7printlnEmi>:
void HardwareSerial::println(long unsigned int val, int format) { }
    4ee8:	08 95       	ret

00004eea <_ZN14HardwareSerial7printlnEei>:
void HardwareSerial::println(long double val, int format) { }
    4eea:	08 95       	ret

00004eec <_ZN11USBKeyboard12set_modifierEh>:
    report[3] = z;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}

void USBKeyboard::set_modifier(uint8_t modifier) {
    4eec:	fc 01       	movw	r30, r24
    report[0] = modifier;
    4eee:	60 83       	st	Z, r22
}
    4ef0:	08 95       	ret

00004ef2 <_ZN11USBKeyboard8set_key1Eh>:
void USBKeyboard::set_key1(uint8_t code) {
    report[2] = code;
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	62 83       	std	Z+2, r22	; 0x02
}
    4ef6:	08 95       	ret

00004ef8 <_ZN11USBKeyboard8set_key2Eh>:
void USBKeyboard::set_key2(uint8_t code) {
    report[3] = code;
    4ef8:	fc 01       	movw	r30, r24
    4efa:	63 83       	std	Z+3, r22	; 0x03
}
    4efc:	08 95       	ret

00004efe <_ZN11USBKeyboard8set_key3Eh>:
void USBKeyboard::set_key3(uint8_t code) {
    report[4] = code;
    4efe:	fc 01       	movw	r30, r24
    4f00:	64 83       	std	Z+4, r22	; 0x04
}
    4f02:	08 95       	ret

00004f04 <_ZN11USBKeyboard8set_key4Eh>:
void USBKeyboard::set_key4(uint8_t code) {
    report[5] = code;
    4f04:	fc 01       	movw	r30, r24
    4f06:	65 83       	std	Z+5, r22	; 0x05
}
    4f08:	08 95       	ret

00004f0a <_ZN11USBKeyboard8set_key5Eh>:
void USBKeyboard::set_key5(uint8_t code) {
    report[6] = code;
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	66 83       	std	Z+6, r22	; 0x06
}
    4f0e:	08 95       	ret

00004f10 <_ZN11USBKeyboard8set_key6Eh>:
void USBKeyboard::set_key6(uint8_t code) {
    report[7] = code;
    4f10:	fc 01       	movw	r30, r24
    4f12:	67 83       	std	Z+7, r22	; 0x07
}
    4f14:	08 95       	ret

00004f16 <_ZN7WireI2C5beginEv>:
    HIDReportInData[0] = HID_REPORTID_KeyboardReport;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}

void WireI2C::begin() { }
    4f16:	08 95       	ret

00004f18 <_ZN7WireI2C17beginTransmissionEi>:
void WireI2C::beginTransmission(int) { }
    4f18:	08 95       	ret

00004f1a <_ZN7WireI2C15endTransmissionEv>:
void WireI2C::endTransmission() { }
    4f1a:	08 95       	ret

00004f1c <_ZN7WireI2C4sendEh>:
void WireI2C::send(byte) { }
    4f1c:	08 95       	ret

00004f1e <_ZN7WireI2C7receiveEv>:
byte WireI2C::receive() { return 0; }
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	08 95       	ret

00004f22 <_ZN7WireI2C11requestFromEii>:
void WireI2C::requestFrom(int, int) { }
    4f22:	08 95       	ret

00004f24 <_ZN7WireI2C9availableEv>:
bool WireI2C::available() { return false; }
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	08 95       	ret

00004f28 <digitalRead>:

int digitalRead(uint8_t pin) {
    4f28:	98 2f       	mov	r25, r24
    if (pin >= 0 && pin < 8) {
    4f2a:	88 30       	cpi	r24, 0x08	; 8
    4f2c:	60 f4       	brcc	.+24     	; 0x4f46 <digitalRead+0x1e>
        return PIND & (1 << pin);
    4f2e:	89 b1       	in	r24, 0x09	; 9
    4f30:	41 e0       	ldi	r20, 0x01	; 1
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	02 c0       	rjmp	.+4      	; 0x4f3a <digitalRead+0x12>
    4f36:	44 0f       	add	r20, r20
    4f38:	55 1f       	adc	r21, r21
    4f3a:	9a 95       	dec	r25
    4f3c:	e2 f7       	brpl	.-8      	; 0x4f36 <digitalRead+0xe>
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	48 23       	and	r20, r24
    4f42:	59 23       	and	r21, r25
    4f44:	4a c0       	rjmp	.+148    	; 0x4fda <digitalRead+0xb2>
    } else if (pin >= 8 && pin < 10) {
    4f46:	88 50       	subi	r24, 0x08	; 8
    4f48:	82 30       	cpi	r24, 0x02	; 2
    4f4a:	28 f4       	brcc	.+10     	; 0x4f56 <digitalRead+0x2e>
        return PINE & (1 << (pin - 8));
    4f4c:	2c b1       	in	r18, 0x0c	; 12
    4f4e:	89 2f       	mov	r24, r25
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	08 97       	sbiw	r24, 0x08	; 8
    4f54:	38 c0       	rjmp	.+112    	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 10 && pin < 18) {
    4f56:	89 2f       	mov	r24, r25
    4f58:	8a 50       	subi	r24, 0x0A	; 10
    4f5a:	88 30       	cpi	r24, 0x08	; 8
    4f5c:	28 f4       	brcc	.+10     	; 0x4f68 <digitalRead+0x40>
        return PINC & (1 << (pin - 10));
    4f5e:	26 b1       	in	r18, 0x06	; 6
    4f60:	89 2f       	mov	r24, r25
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0a 97       	sbiw	r24, 0x0a	; 10
    4f66:	2f c0       	rjmp	.+94     	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 18 && pin < 20) {
    4f68:	89 2f       	mov	r24, r25
    4f6a:	82 51       	subi	r24, 0x12	; 18
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	28 f4       	brcc	.+10     	; 0x4f7a <digitalRead+0x52>
        return PINE & (1 << (pin - 18 + 6));
    4f70:	2c b1       	in	r18, 0x0c	; 12
    4f72:	89 2f       	mov	r24, r25
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	0c 97       	sbiw	r24, 0x0c	; 12
    4f78:	26 c0       	rjmp	.+76     	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 20 && pin < 28) {
    4f7a:	89 2f       	mov	r24, r25
    4f7c:	84 51       	subi	r24, 0x14	; 20
    4f7e:	88 30       	cpi	r24, 0x08	; 8
    4f80:	28 f4       	brcc	.+10     	; 0x4f8c <digitalRead+0x64>
        return PINB & (1 << (pin - 20));
    4f82:	23 b1       	in	r18, 0x03	; 3
    4f84:	89 2f       	mov	r24, r25
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	44 97       	sbiw	r24, 0x14	; 20
    4f8a:	1d c0       	rjmp	.+58     	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 28 && pin < 36) {
    4f8c:	89 2f       	mov	r24, r25
    4f8e:	8c 51       	subi	r24, 0x1C	; 28
    4f90:	88 30       	cpi	r24, 0x08	; 8
    4f92:	28 f4       	brcc	.+10     	; 0x4f9e <digitalRead+0x76>
        return PINA & (1 << (pin - 28));
    4f94:	20 b1       	in	r18, 0x00	; 0
    4f96:	89 2f       	mov	r24, r25
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	4c 97       	sbiw	r24, 0x1c	; 28
    4f9c:	14 c0       	rjmp	.+40     	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 36 && pin < 38) {
    4f9e:	89 2f       	mov	r24, r25
    4fa0:	84 52       	subi	r24, 0x24	; 36
    4fa2:	82 30       	cpi	r24, 0x02	; 2
    4fa4:	28 f4       	brcc	.+10     	; 0x4fb0 <digitalRead+0x88>
        return PINE & (1 << (pin - 36 + 4));
    4fa6:	2c b1       	in	r18, 0x0c	; 12
    4fa8:	89 2f       	mov	r24, r25
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	80 97       	sbiw	r24, 0x20	; 32
    4fae:	0b c0       	rjmp	.+22     	; 0x4fc6 <digitalRead+0x9e>
    } else if (pin >= 38 && pin < 46) {
    4fb0:	89 2f       	mov	r24, r25
    4fb2:	86 52       	subi	r24, 0x26	; 38
    4fb4:	88 30       	cpi	r24, 0x08	; 8
    4fb6:	18 f0       	brcs	.+6      	; 0x4fbe <digitalRead+0x96>
    4fb8:	40 e0       	ldi	r20, 0x00	; 0
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	0e c0       	rjmp	.+28     	; 0x4fda <digitalRead+0xb2>
        return PINF & (1 << (pin - 38));
    4fbe:	2f b1       	in	r18, 0x0f	; 15
    4fc0:	89 2f       	mov	r24, r25
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	86 97       	sbiw	r24, 0x26	; 38
    4fc6:	41 e0       	ldi	r20, 0x01	; 1
    4fc8:	50 e0       	ldi	r21, 0x00	; 0
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <digitalRead+0xa8>
    4fcc:	44 0f       	add	r20, r20
    4fce:	55 1f       	adc	r21, r21
    4fd0:	8a 95       	dec	r24
    4fd2:	e2 f7       	brpl	.-8      	; 0x4fcc <digitalRead+0xa4>
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	42 23       	and	r20, r18
    4fd8:	53 23       	and	r21, r19
    }
    return 0;
}
    4fda:	ca 01       	movw	r24, r20
    4fdc:	08 95       	ret

00004fde <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t level) {
    4fde:	38 2f       	mov	r19, r24
    if (level == LOW) {
    4fe0:	66 23       	and	r22, r22
    4fe2:	09 f0       	breq	.+2      	; 0x4fe6 <digitalWrite+0x8>
    4fe4:	86 c0       	rjmp	.+268    	; 0x50f2 <digitalWrite+0x114>
        if (pin >= 0 && pin < 8) {
    4fe6:	88 30       	cpi	r24, 0x08	; 8
    4fe8:	60 f4       	brcc	.+24     	; 0x5002 <digitalWrite+0x24>
            PORTD &= ~(1 << pin);
    4fea:	2b b1       	in	r18, 0x0b	; 11
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	02 c0       	rjmp	.+4      	; 0x4ff6 <digitalWrite+0x18>
    4ff2:	88 0f       	add	r24, r24
    4ff4:	99 1f       	adc	r25, r25
    4ff6:	3a 95       	dec	r19
    4ff8:	e2 f7       	brpl	.-8      	; 0x4ff2 <digitalWrite+0x14>
    4ffa:	80 95       	com	r24
    4ffc:	82 23       	and	r24, r18
    4ffe:	8b b9       	out	0x0b, r24	; 11
    5000:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    5002:	88 50       	subi	r24, 0x08	; 8
    5004:	82 30       	cpi	r24, 0x02	; 2
    5006:	30 f4       	brcc	.+12     	; 0x5014 <digitalWrite+0x36>
            PORTE &= ~(1 << (pin - 8));
    5008:	4e b1       	in	r20, 0x0e	; 14
    500a:	23 2f       	mov	r18, r19
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	28 50       	subi	r18, 0x08	; 8
    5010:	30 40       	sbci	r19, 0x00	; 0
    5012:	4f c0       	rjmp	.+158    	; 0x50b2 <digitalWrite+0xd4>
        } else if (pin >= 10 && pin < 18) {
    5014:	83 2f       	mov	r24, r19
    5016:	8a 50       	subi	r24, 0x0A	; 10
    5018:	88 30       	cpi	r24, 0x08	; 8
    501a:	80 f4       	brcc	.+32     	; 0x503c <digitalWrite+0x5e>
            PORTC &= ~(1 << (pin - 10));
    501c:	48 b1       	in	r20, 0x08	; 8
    501e:	23 2f       	mov	r18, r19
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	2a 50       	subi	r18, 0x0A	; 10
    5024:	30 40       	sbci	r19, 0x00	; 0
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <digitalWrite+0x52>
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	2a 95       	dec	r18
    5032:	e2 f7       	brpl	.-8      	; 0x502c <digitalWrite+0x4e>
    5034:	80 95       	com	r24
    5036:	84 23       	and	r24, r20
    5038:	88 b9       	out	0x08, r24	; 8
    503a:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    503c:	83 2f       	mov	r24, r19
    503e:	82 51       	subi	r24, 0x12	; 18
    5040:	82 30       	cpi	r24, 0x02	; 2
    5042:	30 f4       	brcc	.+12     	; 0x5050 <digitalWrite+0x72>
            PORTE &= ~(1 << (pin - 18 + 6));
    5044:	4e b1       	in	r20, 0x0e	; 14
    5046:	23 2f       	mov	r18, r19
    5048:	30 e0       	ldi	r19, 0x00	; 0
    504a:	2c 50       	subi	r18, 0x0C	; 12
    504c:	30 40       	sbci	r19, 0x00	; 0
    504e:	31 c0       	rjmp	.+98     	; 0x50b2 <digitalWrite+0xd4>
        } else if (pin >= 20 && pin < 28) {
    5050:	83 2f       	mov	r24, r19
    5052:	84 51       	subi	r24, 0x14	; 20
    5054:	88 30       	cpi	r24, 0x08	; 8
    5056:	80 f4       	brcc	.+32     	; 0x5078 <digitalWrite+0x9a>
            PORTB &= ~(1 << (pin - 20));
    5058:	45 b1       	in	r20, 0x05	; 5
    505a:	23 2f       	mov	r18, r19
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	24 51       	subi	r18, 0x14	; 20
    5060:	30 40       	sbci	r19, 0x00	; 0
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	02 c0       	rjmp	.+4      	; 0x506c <digitalWrite+0x8e>
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	2a 95       	dec	r18
    506e:	e2 f7       	brpl	.-8      	; 0x5068 <digitalWrite+0x8a>
    5070:	80 95       	com	r24
    5072:	84 23       	and	r24, r20
    5074:	85 b9       	out	0x05, r24	; 5
    5076:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    5078:	83 2f       	mov	r24, r19
    507a:	8c 51       	subi	r24, 0x1C	; 28
    507c:	88 30       	cpi	r24, 0x08	; 8
    507e:	80 f4       	brcc	.+32     	; 0x50a0 <digitalWrite+0xc2>
            PORTA &= ~(1 << (pin - 28));
    5080:	42 b1       	in	r20, 0x02	; 2
    5082:	23 2f       	mov	r18, r19
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	2c 51       	subi	r18, 0x1C	; 28
    5088:	30 40       	sbci	r19, 0x00	; 0
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <digitalWrite+0xb6>
    5090:	88 0f       	add	r24, r24
    5092:	99 1f       	adc	r25, r25
    5094:	2a 95       	dec	r18
    5096:	e2 f7       	brpl	.-8      	; 0x5090 <digitalWrite+0xb2>
    5098:	80 95       	com	r24
    509a:	84 23       	and	r24, r20
    509c:	82 b9       	out	0x02, r24	; 2
    509e:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    50a0:	83 2f       	mov	r24, r19
    50a2:	84 52       	subi	r24, 0x24	; 36
    50a4:	82 30       	cpi	r24, 0x02	; 2
    50a6:	80 f4       	brcc	.+32     	; 0x50c8 <digitalWrite+0xea>
            PORTE &= ~(1 << (pin - 36 + 4));
    50a8:	4e b1       	in	r20, 0x0e	; 14
    50aa:	23 2f       	mov	r18, r19
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	20 52       	subi	r18, 0x20	; 32
    50b0:	30 40       	sbci	r19, 0x00	; 0
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <digitalWrite+0xde>
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	2a 95       	dec	r18
    50be:	e2 f7       	brpl	.-8      	; 0x50b8 <digitalWrite+0xda>
    50c0:	80 95       	com	r24
    50c2:	84 23       	and	r24, r20
    50c4:	8e b9       	out	0x0e, r24	; 14
    50c6:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    50c8:	83 2f       	mov	r24, r19
    50ca:	86 52       	subi	r24, 0x26	; 38
    50cc:	88 30       	cpi	r24, 0x08	; 8
    50ce:	08 f0       	brcs	.+2      	; 0x50d2 <digitalWrite+0xf4>
    50d0:	8e c0       	rjmp	.+284    	; 0x51ee <digitalWrite+0x210>
            PORTF &= ~(1 << (pin - 38));
    50d2:	41 b3       	in	r20, 0x11	; 17
    50d4:	23 2f       	mov	r18, r19
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	26 52       	subi	r18, 0x26	; 38
    50da:	30 40       	sbci	r19, 0x00	; 0
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	02 c0       	rjmp	.+4      	; 0x50e6 <digitalWrite+0x108>
    50e2:	88 0f       	add	r24, r24
    50e4:	99 1f       	adc	r25, r25
    50e6:	2a 95       	dec	r18
    50e8:	e2 f7       	brpl	.-8      	; 0x50e2 <digitalWrite+0x104>
    50ea:	80 95       	com	r24
    50ec:	84 23       	and	r24, r20
    50ee:	81 bb       	out	0x11, r24	; 17
    50f0:	08 95       	ret
        }
    } else {
        if (pin >= 0 && pin < 8) {
    50f2:	88 30       	cpi	r24, 0x08	; 8
    50f4:	58 f4       	brcc	.+22     	; 0x510c <digitalWrite+0x12e>
            PORTD |= (1 << pin);
    50f6:	2b b1       	in	r18, 0x0b	; 11
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	02 c0       	rjmp	.+4      	; 0x5102 <digitalWrite+0x124>
    50fe:	88 0f       	add	r24, r24
    5100:	99 1f       	adc	r25, r25
    5102:	3a 95       	dec	r19
    5104:	e2 f7       	brpl	.-8      	; 0x50fe <digitalWrite+0x120>
    5106:	28 2b       	or	r18, r24
    5108:	2b b9       	out	0x0b, r18	; 11
    510a:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    510c:	88 50       	subi	r24, 0x08	; 8
    510e:	82 30       	cpi	r24, 0x02	; 2
    5110:	30 f4       	brcc	.+12     	; 0x511e <digitalWrite+0x140>
            PORTE |= (1 << (pin - 8));
    5112:	4e b1       	in	r20, 0x0e	; 14
    5114:	23 2f       	mov	r18, r19
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	28 50       	subi	r18, 0x08	; 8
    511a:	30 40       	sbci	r19, 0x00	; 0
    511c:	4c c0       	rjmp	.+152    	; 0x51b6 <digitalWrite+0x1d8>
        } else if (pin >= 10 && pin < 18) {
    511e:	83 2f       	mov	r24, r19
    5120:	8a 50       	subi	r24, 0x0A	; 10
    5122:	88 30       	cpi	r24, 0x08	; 8
    5124:	78 f4       	brcc	.+30     	; 0x5144 <digitalWrite+0x166>
            PORTC |= (1 << (pin - 10));
    5126:	48 b1       	in	r20, 0x08	; 8
    5128:	23 2f       	mov	r18, r19
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	2a 50       	subi	r18, 0x0A	; 10
    512e:	30 40       	sbci	r19, 0x00	; 0
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	02 c0       	rjmp	.+4      	; 0x513a <digitalWrite+0x15c>
    5136:	88 0f       	add	r24, r24
    5138:	99 1f       	adc	r25, r25
    513a:	2a 95       	dec	r18
    513c:	e2 f7       	brpl	.-8      	; 0x5136 <digitalWrite+0x158>
    513e:	48 2b       	or	r20, r24
    5140:	48 b9       	out	0x08, r20	; 8
    5142:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    5144:	83 2f       	mov	r24, r19
    5146:	82 51       	subi	r24, 0x12	; 18
    5148:	82 30       	cpi	r24, 0x02	; 2
    514a:	30 f4       	brcc	.+12     	; 0x5158 <digitalWrite+0x17a>
            PORTE |= (1 << (pin - 18 + 6));
    514c:	4e b1       	in	r20, 0x0e	; 14
    514e:	23 2f       	mov	r18, r19
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	2c 50       	subi	r18, 0x0C	; 12
    5154:	30 40       	sbci	r19, 0x00	; 0
    5156:	2f c0       	rjmp	.+94     	; 0x51b6 <digitalWrite+0x1d8>
        } else if (pin >= 20 && pin < 28) {
    5158:	83 2f       	mov	r24, r19
    515a:	84 51       	subi	r24, 0x14	; 20
    515c:	88 30       	cpi	r24, 0x08	; 8
    515e:	78 f4       	brcc	.+30     	; 0x517e <digitalWrite+0x1a0>
            PORTB |= (1 << (pin - 20));
    5160:	45 b1       	in	r20, 0x05	; 5
    5162:	23 2f       	mov	r18, r19
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	24 51       	subi	r18, 0x14	; 20
    5168:	30 40       	sbci	r19, 0x00	; 0
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	02 c0       	rjmp	.+4      	; 0x5174 <digitalWrite+0x196>
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	2a 95       	dec	r18
    5176:	e2 f7       	brpl	.-8      	; 0x5170 <digitalWrite+0x192>
    5178:	48 2b       	or	r20, r24
    517a:	45 b9       	out	0x05, r20	; 5
    517c:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    517e:	83 2f       	mov	r24, r19
    5180:	8c 51       	subi	r24, 0x1C	; 28
    5182:	88 30       	cpi	r24, 0x08	; 8
    5184:	78 f4       	brcc	.+30     	; 0x51a4 <digitalWrite+0x1c6>
            PORTA |= (1 << (pin - 28));
    5186:	42 b1       	in	r20, 0x02	; 2
    5188:	23 2f       	mov	r18, r19
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	2c 51       	subi	r18, 0x1C	; 28
    518e:	30 40       	sbci	r19, 0x00	; 0
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	02 c0       	rjmp	.+4      	; 0x519a <digitalWrite+0x1bc>
    5196:	88 0f       	add	r24, r24
    5198:	99 1f       	adc	r25, r25
    519a:	2a 95       	dec	r18
    519c:	e2 f7       	brpl	.-8      	; 0x5196 <digitalWrite+0x1b8>
    519e:	48 2b       	or	r20, r24
    51a0:	42 b9       	out	0x02, r20	; 2
    51a2:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    51a4:	83 2f       	mov	r24, r19
    51a6:	84 52       	subi	r24, 0x24	; 36
    51a8:	82 30       	cpi	r24, 0x02	; 2
    51aa:	78 f4       	brcc	.+30     	; 0x51ca <digitalWrite+0x1ec>
            PORTE |= (1 << (pin - 36 + 4));
    51ac:	4e b1       	in	r20, 0x0e	; 14
    51ae:	23 2f       	mov	r18, r19
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	20 52       	subi	r18, 0x20	; 32
    51b4:	30 40       	sbci	r19, 0x00	; 0
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <digitalWrite+0x1e2>
    51bc:	88 0f       	add	r24, r24
    51be:	99 1f       	adc	r25, r25
    51c0:	2a 95       	dec	r18
    51c2:	e2 f7       	brpl	.-8      	; 0x51bc <digitalWrite+0x1de>
    51c4:	48 2b       	or	r20, r24
    51c6:	4e b9       	out	0x0e, r20	; 14
    51c8:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    51ca:	83 2f       	mov	r24, r19
    51cc:	86 52       	subi	r24, 0x26	; 38
    51ce:	88 30       	cpi	r24, 0x08	; 8
    51d0:	70 f4       	brcc	.+28     	; 0x51ee <digitalWrite+0x210>
            PORTF |= (1 << (pin - 38));
    51d2:	41 b3       	in	r20, 0x11	; 17
    51d4:	23 2f       	mov	r18, r19
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	26 52       	subi	r18, 0x26	; 38
    51da:	30 40       	sbci	r19, 0x00	; 0
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	02 c0       	rjmp	.+4      	; 0x51e6 <digitalWrite+0x208>
    51e2:	88 0f       	add	r24, r24
    51e4:	99 1f       	adc	r25, r25
    51e6:	2a 95       	dec	r18
    51e8:	e2 f7       	brpl	.-8      	; 0x51e2 <digitalWrite+0x204>
    51ea:	48 2b       	or	r20, r24
    51ec:	41 bb       	out	0x11, r20	; 17
    51ee:	08 95       	ret

000051f0 <pinMode>:
        }
    }
}

void pinMode(byte pin, byte mode) {
    51f0:	38 2f       	mov	r19, r24
    if (mode == INPUT) {
    51f2:	66 23       	and	r22, r22
    51f4:	09 f0       	breq	.+2      	; 0x51f8 <pinMode+0x8>
    51f6:	86 c0       	rjmp	.+268    	; 0x5304 <pinMode+0x114>
        if (pin >= 0 && pin < 8) {
    51f8:	88 30       	cpi	r24, 0x08	; 8
    51fa:	60 f4       	brcc	.+24     	; 0x5214 <pinMode+0x24>
            DDRD &= ~(1 << pin);
    51fc:	2a b1       	in	r18, 0x0a	; 10
    51fe:	81 e0       	ldi	r24, 0x01	; 1
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	02 c0       	rjmp	.+4      	; 0x5208 <pinMode+0x18>
    5204:	88 0f       	add	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	3a 95       	dec	r19
    520a:	e2 f7       	brpl	.-8      	; 0x5204 <pinMode+0x14>
    520c:	80 95       	com	r24
    520e:	82 23       	and	r24, r18
    5210:	8a b9       	out	0x0a, r24	; 10
    5212:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    5214:	88 50       	subi	r24, 0x08	; 8
    5216:	82 30       	cpi	r24, 0x02	; 2
    5218:	30 f4       	brcc	.+12     	; 0x5226 <pinMode+0x36>
            DDRE &= ~(1 << (pin - 8));
    521a:	4d b1       	in	r20, 0x0d	; 13
    521c:	23 2f       	mov	r18, r19
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	28 50       	subi	r18, 0x08	; 8
    5222:	30 40       	sbci	r19, 0x00	; 0
    5224:	4f c0       	rjmp	.+158    	; 0x52c4 <pinMode+0xd4>
        } else if (pin >= 10 && pin < 18) {
    5226:	83 2f       	mov	r24, r19
    5228:	8a 50       	subi	r24, 0x0A	; 10
    522a:	88 30       	cpi	r24, 0x08	; 8
    522c:	80 f4       	brcc	.+32     	; 0x524e <pinMode+0x5e>
            DDRC &= ~(1 << (pin - 10));
    522e:	47 b1       	in	r20, 0x07	; 7
    5230:	23 2f       	mov	r18, r19
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	2a 50       	subi	r18, 0x0A	; 10
    5236:	30 40       	sbci	r19, 0x00	; 0
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	02 c0       	rjmp	.+4      	; 0x5242 <pinMode+0x52>
    523e:	88 0f       	add	r24, r24
    5240:	99 1f       	adc	r25, r25
    5242:	2a 95       	dec	r18
    5244:	e2 f7       	brpl	.-8      	; 0x523e <pinMode+0x4e>
    5246:	80 95       	com	r24
    5248:	84 23       	and	r24, r20
    524a:	87 b9       	out	0x07, r24	; 7
    524c:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    524e:	83 2f       	mov	r24, r19
    5250:	82 51       	subi	r24, 0x12	; 18
    5252:	82 30       	cpi	r24, 0x02	; 2
    5254:	30 f4       	brcc	.+12     	; 0x5262 <pinMode+0x72>
            DDRE &= ~(1 << (pin - 18 + 6));
    5256:	4d b1       	in	r20, 0x0d	; 13
    5258:	23 2f       	mov	r18, r19
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	2c 50       	subi	r18, 0x0C	; 12
    525e:	30 40       	sbci	r19, 0x00	; 0
    5260:	31 c0       	rjmp	.+98     	; 0x52c4 <pinMode+0xd4>
        } else if (pin >= 20 && pin < 28) {
    5262:	83 2f       	mov	r24, r19
    5264:	84 51       	subi	r24, 0x14	; 20
    5266:	88 30       	cpi	r24, 0x08	; 8
    5268:	80 f4       	brcc	.+32     	; 0x528a <pinMode+0x9a>
            DDRB &= ~(1 << (pin - 20));
    526a:	44 b1       	in	r20, 0x04	; 4
    526c:	23 2f       	mov	r18, r19
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	24 51       	subi	r18, 0x14	; 20
    5272:	30 40       	sbci	r19, 0x00	; 0
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	02 c0       	rjmp	.+4      	; 0x527e <pinMode+0x8e>
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	2a 95       	dec	r18
    5280:	e2 f7       	brpl	.-8      	; 0x527a <pinMode+0x8a>
    5282:	80 95       	com	r24
    5284:	84 23       	and	r24, r20
    5286:	84 b9       	out	0x04, r24	; 4
    5288:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    528a:	83 2f       	mov	r24, r19
    528c:	8c 51       	subi	r24, 0x1C	; 28
    528e:	88 30       	cpi	r24, 0x08	; 8
    5290:	80 f4       	brcc	.+32     	; 0x52b2 <pinMode+0xc2>
            DDRA &= ~(1 << (pin - 28));
    5292:	41 b1       	in	r20, 0x01	; 1
    5294:	23 2f       	mov	r18, r19
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	2c 51       	subi	r18, 0x1C	; 28
    529a:	30 40       	sbci	r19, 0x00	; 0
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <pinMode+0xb6>
    52a2:	88 0f       	add	r24, r24
    52a4:	99 1f       	adc	r25, r25
    52a6:	2a 95       	dec	r18
    52a8:	e2 f7       	brpl	.-8      	; 0x52a2 <pinMode+0xb2>
    52aa:	80 95       	com	r24
    52ac:	84 23       	and	r24, r20
    52ae:	81 b9       	out	0x01, r24	; 1
    52b0:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    52b2:	83 2f       	mov	r24, r19
    52b4:	84 52       	subi	r24, 0x24	; 36
    52b6:	82 30       	cpi	r24, 0x02	; 2
    52b8:	80 f4       	brcc	.+32     	; 0x52da <pinMode+0xea>
            DDRE &= ~(1 << (pin - 36 + 4));
    52ba:	4d b1       	in	r20, 0x0d	; 13
    52bc:	23 2f       	mov	r18, r19
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	20 52       	subi	r18, 0x20	; 32
    52c2:	30 40       	sbci	r19, 0x00	; 0
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	02 c0       	rjmp	.+4      	; 0x52ce <pinMode+0xde>
    52ca:	88 0f       	add	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	2a 95       	dec	r18
    52d0:	e2 f7       	brpl	.-8      	; 0x52ca <pinMode+0xda>
    52d2:	80 95       	com	r24
    52d4:	84 23       	and	r24, r20
    52d6:	8d b9       	out	0x0d, r24	; 13
    52d8:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    52da:	83 2f       	mov	r24, r19
    52dc:	86 52       	subi	r24, 0x26	; 38
    52de:	88 30       	cpi	r24, 0x08	; 8
    52e0:	08 f0       	brcs	.+2      	; 0x52e4 <pinMode+0xf4>
    52e2:	8e c0       	rjmp	.+284    	; 0x5400 <pinMode+0x210>
            DDRF &= ~(1 << (pin - 38));
    52e4:	40 b3       	in	r20, 0x10	; 16
    52e6:	23 2f       	mov	r18, r19
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	26 52       	subi	r18, 0x26	; 38
    52ec:	30 40       	sbci	r19, 0x00	; 0
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	02 c0       	rjmp	.+4      	; 0x52f8 <pinMode+0x108>
    52f4:	88 0f       	add	r24, r24
    52f6:	99 1f       	adc	r25, r25
    52f8:	2a 95       	dec	r18
    52fa:	e2 f7       	brpl	.-8      	; 0x52f4 <pinMode+0x104>
    52fc:	80 95       	com	r24
    52fe:	84 23       	and	r24, r20
    5300:	80 bb       	out	0x10, r24	; 16
    5302:	08 95       	ret
        }
    } else {
        if (pin >= 0 && pin < 8) {
    5304:	88 30       	cpi	r24, 0x08	; 8
    5306:	58 f4       	brcc	.+22     	; 0x531e <pinMode+0x12e>
            DDRD |= (1 << pin);
    5308:	2a b1       	in	r18, 0x0a	; 10
    530a:	81 e0       	ldi	r24, 0x01	; 1
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	02 c0       	rjmp	.+4      	; 0x5314 <pinMode+0x124>
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	3a 95       	dec	r19
    5316:	e2 f7       	brpl	.-8      	; 0x5310 <pinMode+0x120>
    5318:	28 2b       	or	r18, r24
    531a:	2a b9       	out	0x0a, r18	; 10
    531c:	08 95       	ret
        } else if (pin >= 8 && pin < 10) {
    531e:	88 50       	subi	r24, 0x08	; 8
    5320:	82 30       	cpi	r24, 0x02	; 2
    5322:	30 f4       	brcc	.+12     	; 0x5330 <pinMode+0x140>
            DDRE |= (1 << (pin - 8));
    5324:	4d b1       	in	r20, 0x0d	; 13
    5326:	23 2f       	mov	r18, r19
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	28 50       	subi	r18, 0x08	; 8
    532c:	30 40       	sbci	r19, 0x00	; 0
    532e:	4c c0       	rjmp	.+152    	; 0x53c8 <pinMode+0x1d8>
        } else if (pin >= 10 && pin < 18) {
    5330:	83 2f       	mov	r24, r19
    5332:	8a 50       	subi	r24, 0x0A	; 10
    5334:	88 30       	cpi	r24, 0x08	; 8
    5336:	78 f4       	brcc	.+30     	; 0x5356 <pinMode+0x166>
            DDRC |= (1 << (pin - 10));
    5338:	47 b1       	in	r20, 0x07	; 7
    533a:	23 2f       	mov	r18, r19
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	2a 50       	subi	r18, 0x0A	; 10
    5340:	30 40       	sbci	r19, 0x00	; 0
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	02 c0       	rjmp	.+4      	; 0x534c <pinMode+0x15c>
    5348:	88 0f       	add	r24, r24
    534a:	99 1f       	adc	r25, r25
    534c:	2a 95       	dec	r18
    534e:	e2 f7       	brpl	.-8      	; 0x5348 <pinMode+0x158>
    5350:	48 2b       	or	r20, r24
    5352:	47 b9       	out	0x07, r20	; 7
    5354:	08 95       	ret
        } else if (pin >= 18 && pin < 20) {
    5356:	83 2f       	mov	r24, r19
    5358:	82 51       	subi	r24, 0x12	; 18
    535a:	82 30       	cpi	r24, 0x02	; 2
    535c:	30 f4       	brcc	.+12     	; 0x536a <pinMode+0x17a>
            DDRE |= (1 << (pin - 18 + 6));
    535e:	4d b1       	in	r20, 0x0d	; 13
    5360:	23 2f       	mov	r18, r19
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	2c 50       	subi	r18, 0x0C	; 12
    5366:	30 40       	sbci	r19, 0x00	; 0
    5368:	2f c0       	rjmp	.+94     	; 0x53c8 <pinMode+0x1d8>
        } else if (pin >= 20 && pin < 28) {
    536a:	83 2f       	mov	r24, r19
    536c:	84 51       	subi	r24, 0x14	; 20
    536e:	88 30       	cpi	r24, 0x08	; 8
    5370:	78 f4       	brcc	.+30     	; 0x5390 <pinMode+0x1a0>
            DDRB |= (1 << (pin - 20));
    5372:	44 b1       	in	r20, 0x04	; 4
    5374:	23 2f       	mov	r18, r19
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	24 51       	subi	r18, 0x14	; 20
    537a:	30 40       	sbci	r19, 0x00	; 0
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	02 c0       	rjmp	.+4      	; 0x5386 <pinMode+0x196>
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	2a 95       	dec	r18
    5388:	e2 f7       	brpl	.-8      	; 0x5382 <pinMode+0x192>
    538a:	48 2b       	or	r20, r24
    538c:	44 b9       	out	0x04, r20	; 4
    538e:	08 95       	ret
        } else if (pin >= 28 && pin < 36) {
    5390:	83 2f       	mov	r24, r19
    5392:	8c 51       	subi	r24, 0x1C	; 28
    5394:	88 30       	cpi	r24, 0x08	; 8
    5396:	78 f4       	brcc	.+30     	; 0x53b6 <pinMode+0x1c6>
            DDRA |= (1 << (pin - 28));
    5398:	41 b1       	in	r20, 0x01	; 1
    539a:	23 2f       	mov	r18, r19
    539c:	30 e0       	ldi	r19, 0x00	; 0
    539e:	2c 51       	subi	r18, 0x1C	; 28
    53a0:	30 40       	sbci	r19, 0x00	; 0
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	02 c0       	rjmp	.+4      	; 0x53ac <pinMode+0x1bc>
    53a8:	88 0f       	add	r24, r24
    53aa:	99 1f       	adc	r25, r25
    53ac:	2a 95       	dec	r18
    53ae:	e2 f7       	brpl	.-8      	; 0x53a8 <pinMode+0x1b8>
    53b0:	48 2b       	or	r20, r24
    53b2:	41 b9       	out	0x01, r20	; 1
    53b4:	08 95       	ret
        } else if (pin >= 36 && pin < 38) {
    53b6:	83 2f       	mov	r24, r19
    53b8:	84 52       	subi	r24, 0x24	; 36
    53ba:	82 30       	cpi	r24, 0x02	; 2
    53bc:	78 f4       	brcc	.+30     	; 0x53dc <pinMode+0x1ec>
            DDRE |= (1 << (pin - 36 + 4));
    53be:	4d b1       	in	r20, 0x0d	; 13
    53c0:	23 2f       	mov	r18, r19
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	20 52       	subi	r18, 0x20	; 32
    53c6:	30 40       	sbci	r19, 0x00	; 0
    53c8:	81 e0       	ldi	r24, 0x01	; 1
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	02 c0       	rjmp	.+4      	; 0x53d2 <pinMode+0x1e2>
    53ce:	88 0f       	add	r24, r24
    53d0:	99 1f       	adc	r25, r25
    53d2:	2a 95       	dec	r18
    53d4:	e2 f7       	brpl	.-8      	; 0x53ce <pinMode+0x1de>
    53d6:	48 2b       	or	r20, r24
    53d8:	4d b9       	out	0x0d, r20	; 13
    53da:	08 95       	ret
        } else if (pin >= 38 && pin < 46) {
    53dc:	83 2f       	mov	r24, r19
    53de:	86 52       	subi	r24, 0x26	; 38
    53e0:	88 30       	cpi	r24, 0x08	; 8
    53e2:	70 f4       	brcc	.+28     	; 0x5400 <pinMode+0x210>
            DDRF |= (1 << (pin - 38));
    53e4:	40 b3       	in	r20, 0x10	; 16
    53e6:	23 2f       	mov	r18, r19
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	26 52       	subi	r18, 0x26	; 38
    53ec:	30 40       	sbci	r19, 0x00	; 0
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <pinMode+0x208>
    53f4:	88 0f       	add	r24, r24
    53f6:	99 1f       	adc	r25, r25
    53f8:	2a 95       	dec	r18
    53fa:	e2 f7       	brpl	.-8      	; 0x53f4 <pinMode+0x204>
    53fc:	48 2b       	or	r20, r24
    53fe:	40 bb       	out	0x10, r20	; 16
    5400:	08 95       	ret

00005402 <_Z4tonehjj>:
        }
    }
}

void tone(uint8_t pin, uint16_t pitch, uint16_t duration) {
}
    5402:	08 95       	ret

00005404 <_Z6noToneh>:

void noTone(uint8_t pin) {
}
    5404:	08 95       	ret

00005406 <_ZN11USBKeyboard8send_nowEv>:
}
void USBKeyboard::set_key6(uint8_t code) {
    report[7] = code;
}
void USBKeyboard::send_now() {
    HIDReportInData[0] = HID_REPORTID_KeyboardReport;
    5406:	22 e0       	ldi	r18, 0x02	; 2
    5408:	20 93 75 04 	sts	0x0475, r18
    memcpy(HIDReportInData + 1, report, 8);
    540c:	a6 e7       	ldi	r26, 0x76	; 118
    540e:	b4 e0       	ldi	r27, 0x04	; 4
    5410:	fc 01       	movw	r30, r24
    5412:	88 e0       	ldi	r24, 0x08	; 8
    5414:	01 90       	ld	r0, Z+
    5416:	0d 92       	st	X+, r0
    5418:	81 50       	subi	r24, 0x01	; 1
    541a:	e1 f7       	brne	.-8      	; 0x5414 <_ZN11USBKeyboard8send_nowEv+0xe>
    HID_Task();
    541c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <HID_Task>

00005420 <_ZN8USBMouse6scrollEh>:
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    report[0] = (b1 << 2) + (b2 << 1) + b3;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}
void USBMouse::scroll(uint8_t z) {
    5420:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	80 93 75 04 	sts	0x0475, r24
    report[1] = 0;
    5428:	11 82       	std	Z+1, r1	; 0x01
    report[2] = 0;
    542a:	12 82       	std	Z+2, r1	; 0x02
    report[3] = z;
    542c:	63 83       	std	Z+3, r22	; 0x03
    memcpy(HIDReportInData + 1, report, 8);
    542e:	a6 e7       	ldi	r26, 0x76	; 118
    5430:	b4 e0       	ldi	r27, 0x04	; 4
    5432:	88 e0       	ldi	r24, 0x08	; 8
    5434:	01 90       	ld	r0, Z+
    5436:	0d 92       	st	X+, r0
    5438:	81 50       	subi	r24, 0x01	; 1
    543a:	e1 f7       	brne	.-8      	; 0x5434 <_ZN8USBMouse6scrollEh+0x14>
    HID_Task();
    543c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <HID_Task>

00005440 <_ZN8USBMouse11set_buttonsEhhh>:
    report[2] = y;
    report[3] = z;
    memcpy(HIDReportInData + 1, report, 8);
    HID_Task();
}
void USBMouse::set_buttons(uint8_t b1, uint8_t b2, uint8_t b3) {
    5440:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	80 93 75 04 	sts	0x0475, r24
    report[0] = (b1 << 2) + (b2 << 1) + b3;
    5448:	44 0f       	add	r20, r20
    544a:	42 0f       	add	r20, r18
    544c:	66 0f       	add	r22, r22
    544e:	66 0f       	add	r22, r22
    5450:	46 0f       	add	r20, r22
    5452:	40 83       	st	Z, r20
    memcpy(HIDReportInData + 1, report, 8);
    5454:	a6 e7       	ldi	r26, 0x76	; 118
    5456:	b4 e0       	ldi	r27, 0x04	; 4
    5458:	88 e0       	ldi	r24, 0x08	; 8
    545a:	01 90       	ld	r0, Z+
    545c:	0d 92       	st	X+, r0
    545e:	81 50       	subi	r24, 0x01	; 1
    5460:	e1 f7       	brne	.-8      	; 0x545a <_ZN8USBMouse11set_buttonsEhhh+0x1a>
    HID_Task();
    5462:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <HID_Task>

00005466 <_ZN8USBMouse4moveEhhh>:
void HardwareSerial::println(long double val, int format) { }

void USBMouse::move(uint8_t x, uint8_t y) {
    move(x, y, 0);
}
void USBMouse::move(uint8_t x, uint8_t y, uint8_t z) {
    5466:	fc 01       	movw	r30, r24
    HIDReportInData[0] = HID_REPORTID_MouseReport;
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	80 93 75 04 	sts	0x0475, r24
    report[1] = x;
    546e:	61 83       	std	Z+1, r22	; 0x01
    report[2] = y;
    5470:	42 83       	std	Z+2, r20	; 0x02
    report[3] = z;
    5472:	23 83       	std	Z+3, r18	; 0x03
    memcpy(HIDReportInData + 1, report, 8);
    5474:	a6 e7       	ldi	r26, 0x76	; 118
    5476:	b4 e0       	ldi	r27, 0x04	; 4
    5478:	88 e0       	ldi	r24, 0x08	; 8
    547a:	01 90       	ld	r0, Z+
    547c:	0d 92       	st	X+, r0
    547e:	81 50       	subi	r24, 0x01	; 1
    5480:	e1 f7       	brne	.-8      	; 0x547a <_ZN8USBMouse4moveEhhh+0x14>
    HID_Task();
    5482:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <HID_Task>

00005486 <_ZN8USBMouse4moveEhh>:
void HardwareSerial::println(int val, int format) { }
void HardwareSerial::println(long unsigned int val, int format) { }
void HardwareSerial::println(long double val, int format) { }

void USBMouse::move(uint8_t x, uint8_t y) {
    move(x, y, 0);
    5486:	20 e0       	ldi	r18, 0x00	; 0
}
    5488:	ee cf       	rjmp	.-36     	; 0x5466 <_ZN8USBMouse4moveEhhh>

0000548a <_ZN13AccelerometerC2Ev>:
#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

Accelerometer::Accelerometer() {

}
    548a:	08 95       	ret

0000548c <_ZN13AccelerometerC1Ev>:
    548c:	08 95       	ret

0000548e <_ZN13Accelerometer7writeToEihh>:
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

// Writes val to address register on device
void Accelerometer::writeTo(int device, byte address, byte val) {
    548e:	ef 92       	push	r14
    5490:	ff 92       	push	r15
    5492:	0f 93       	push	r16
    5494:	1f 93       	push	r17
    5496:	f4 2e       	mov	r15, r20
    5498:	e2 2e       	mov	r14, r18
  Wire.beginTransmission(device); // start transmission to device 
    549a:	05 ee       	ldi	r16, 0xE5	; 229
    549c:	17 e0       	ldi	r17, 0x07	; 7
    549e:	c8 01       	movw	r24, r16
    54a0:	3b dd       	rcall	.-1418   	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(address);             // send register address
    54a2:	c8 01       	movw	r24, r16
    54a4:	6f 2d       	mov	r22, r15
    54a6:	3a dd       	rcall	.-1420   	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.send(val);                 // send value to write
    54a8:	c8 01       	movw	r24, r16
    54aa:	6e 2d       	mov	r22, r14
    54ac:	37 dd       	rcall	.-1426   	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.endTransmission();         // end transmission
    54ae:	c8 01       	movw	r24, r16
    54b0:	34 dd       	rcall	.-1432   	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>
}
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	ff 90       	pop	r15
    54b8:	ef 90       	pop	r14
    54ba:	08 95       	ret

000054bc <_ZN13Accelerometer19setFreeFallDurationEi>:
// Sets the TIME_FF register, which holds an unsigned time value representing the minimum
// time that the RSS value of all axes must be less than THRESH_FF to generate a free-fall 
// interrupt. The scale factor is 5ms/LSB. A value of 0 may result in undesirable behavior if
// the free-fall interrupt is enabled. The maximum value is 255.
void Accelerometer::setFreeFallDuration(int freeFallDuration) {
  freeFallDuration = min(max(freeFallDuration,0),255);  
    54bc:	6f 3f       	cpi	r22, 0xFF	; 255
    54be:	71 05       	cpc	r23, r1
    54c0:	1c f0       	brlt	.+6      	; 0x54c8 <_ZN13Accelerometer19setFreeFallDurationEi+0xc>
    54c2:	2f ef       	ldi	r18, 0xFF	; 255
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	05 c0       	rjmp	.+10     	; 0x54d2 <_ZN13Accelerometer19setFreeFallDurationEi+0x16>
    54c8:	9b 01       	movw	r18, r22
    54ca:	77 ff       	sbrs	r23, 7
    54cc:	02 c0       	rjmp	.+4      	; 0x54d2 <_ZN13Accelerometer19setFreeFallDurationEi+0x16>
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (freeFallDuration);
  writeTo(DEVICE, ADXL345_TIME_FF, _b);  
    54d2:	63 e5       	ldi	r22, 0x53	; 83
    54d4:	70 e0       	ldi	r23, 0x00	; 0
    54d6:	49 e2       	ldi	r20, 0x29	; 41
}
    54d8:	da cf       	rjmp	.-76     	; 0x548e <_ZN13Accelerometer7writeToEihh>

000054da <_ZN13Accelerometer20setFreeFallThresholdEi>:
// free-fall detection. The root-sum-square (RSS) value of all axes is calculated and
// compared whith the value in THRESH_FF to determine if a free-fall event occured. The 
// scale factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the free-fall
// interrupt is enabled. The maximum value is 255.
void Accelerometer::setFreeFallThreshold(int freeFallThreshold) {
  freeFallThreshold = min(max(freeFallThreshold,0),255);
    54da:	6f 3f       	cpi	r22, 0xFF	; 255
    54dc:	71 05       	cpc	r23, r1
    54de:	1c f0       	brlt	.+6      	; 0x54e6 <_ZN13Accelerometer20setFreeFallThresholdEi+0xc>
    54e0:	2f ef       	ldi	r18, 0xFF	; 255
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	05 c0       	rjmp	.+10     	; 0x54f0 <_ZN13Accelerometer20setFreeFallThresholdEi+0x16>
    54e6:	9b 01       	movw	r18, r22
    54e8:	77 ff       	sbrs	r23, 7
    54ea:	02 c0       	rjmp	.+4      	; 0x54f0 <_ZN13Accelerometer20setFreeFallThresholdEi+0x16>
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (freeFallThreshold);
  writeTo(DEVICE, ADXL345_THRESH_FF, _b);  
    54f0:	63 e5       	ldi	r22, 0x53	; 83
    54f2:	70 e0       	ldi	r23, 0x00	; 0
    54f4:	48 e2       	ldi	r20, 0x28	; 40
}
    54f6:	cb cf       	rjmp	.-106    	; 0x548e <_ZN13Accelerometer7writeToEihh>

000054f8 <_ZN13Accelerometer17setTimeInactivityEi>:
// Sets the TIME_INACT register, which contains an unsigned time value representing the
// amount of time that acceleration must be less thant the value in the THRESH_INACT
// register for inactivity to be declared. The scale factor is 1sec/LSB. The value must
// be between 0 and 255.
void Accelerometer::setTimeInactivity(int timeInactivity) {
  timeInactivity = min(max(timeInactivity,0),255);
    54f8:	6f 3f       	cpi	r22, 0xFF	; 255
    54fa:	71 05       	cpc	r23, r1
    54fc:	1c f0       	brlt	.+6      	; 0x5504 <_ZN13Accelerometer17setTimeInactivityEi+0xc>
    54fe:	2f ef       	ldi	r18, 0xFF	; 255
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	05 c0       	rjmp	.+10     	; 0x550e <_ZN13Accelerometer17setTimeInactivityEi+0x16>
    5504:	9b 01       	movw	r18, r22
    5506:	77 ff       	sbrs	r23, 7
    5508:	02 c0       	rjmp	.+4      	; 0x550e <_ZN13Accelerometer17setTimeInactivityEi+0x16>
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (timeInactivity);
  writeTo(DEVICE, ADXL345_TIME_INACT, _b);  
    550e:	63 e5       	ldi	r22, 0x53	; 83
    5510:	70 e0       	ldi	r23, 0x00	; 0
    5512:	46 e2       	ldi	r20, 0x26	; 38
}
    5514:	bc cf       	rjmp	.-136    	; 0x548e <_ZN13Accelerometer7writeToEihh>

00005516 <_ZN13Accelerometer22setInactivityThresholdEi>:
// The data format is unsigned, so the magnitude of the inactivity event is compared 
// with the value is compared with the value in the THRESH_INACT register. The scale
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// inactivity interrupt is enabled. The maximum value is 255.
void Accelerometer::setInactivityThreshold(int inactivityThreshold) {
  inactivityThreshold = min(max(inactivityThreshold,0),255);
    5516:	6f 3f       	cpi	r22, 0xFF	; 255
    5518:	71 05       	cpc	r23, r1
    551a:	1c f0       	brlt	.+6      	; 0x5522 <_ZN13Accelerometer22setInactivityThresholdEi+0xc>
    551c:	2f ef       	ldi	r18, 0xFF	; 255
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	05 c0       	rjmp	.+10     	; 0x552c <_ZN13Accelerometer22setInactivityThresholdEi+0x16>
    5522:	9b 01       	movw	r18, r22
    5524:	77 ff       	sbrs	r23, 7
    5526:	02 c0       	rjmp	.+4      	; 0x552c <_ZN13Accelerometer22setInactivityThresholdEi+0x16>
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (inactivityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_INACT, _b);  
    552c:	63 e5       	ldi	r22, 0x53	; 83
    552e:	70 e0       	ldi	r23, 0x00	; 0
    5530:	45 e2       	ldi	r20, 0x25	; 37
}
    5532:	ad cf       	rjmp	.-166    	; 0x548e <_ZN13Accelerometer7writeToEihh>

00005534 <_ZN13Accelerometer20setActivityThresholdEi>:
// The data format is unsigned, so the magnitude of the activity event is compared 
// with the value is compared with the value in the THRESH_ACT register. The scale
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// activity interrupt is enabled. The maximum value is 255.
void Accelerometer::setActivityThreshold(int activityThreshold) {
  activityThreshold = min(max(activityThreshold,0),255);
    5534:	6f 3f       	cpi	r22, 0xFF	; 255
    5536:	71 05       	cpc	r23, r1
    5538:	1c f0       	brlt	.+6      	; 0x5540 <_ZN13Accelerometer20setActivityThresholdEi+0xc>
    553a:	2f ef       	ldi	r18, 0xFF	; 255
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	05 c0       	rjmp	.+10     	; 0x554a <_ZN13Accelerometer20setActivityThresholdEi+0x16>
    5540:	9b 01       	movw	r18, r22
    5542:	77 ff       	sbrs	r23, 7
    5544:	02 c0       	rjmp	.+4      	; 0x554a <_ZN13Accelerometer20setActivityThresholdEi+0x16>
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (activityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_ACT, _b);  
    554a:	63 e5       	ldi	r22, 0x53	; 83
    554c:	70 e0       	ldi	r23, 0x00	; 0
    554e:	44 e2       	ldi	r20, 0x24	; 36
}
    5550:	9e cf       	rjmp	.-196    	; 0x548e <_ZN13Accelerometer7writeToEihh>

00005552 <_ZN13Accelerometer18setDoubleTapWindowEi>:
// Sets the Window register, which contains an unsigned time value representing
// the amount of time after the expiration of the latency time (Latent register)
// during which a second valud tap can begin. The scale factor is 1.25ms/LSB. A
// value of 0 disables the double tap function. The maximum value is 255.
void Accelerometer::setDoubleTapWindow(int doubleTapWindow) {
  doubleTapWindow = min(max(doubleTapWindow,0),255);
    5552:	6f 3f       	cpi	r22, 0xFF	; 255
    5554:	71 05       	cpc	r23, r1
    5556:	1c f0       	brlt	.+6      	; 0x555e <_ZN13Accelerometer18setDoubleTapWindowEi+0xc>
    5558:	2f ef       	ldi	r18, 0xFF	; 255
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	05 c0       	rjmp	.+10     	; 0x5568 <_ZN13Accelerometer18setDoubleTapWindowEi+0x16>
    555e:	9b 01       	movw	r18, r22
    5560:	77 ff       	sbrs	r23, 7
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <_ZN13Accelerometer18setDoubleTapWindowEi+0x16>
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (doubleTapWindow);
  writeTo(DEVICE, ADXL345_WINDOW, _b);  
    5568:	63 e5       	ldi	r22, 0x53	; 83
    556a:	70 e0       	ldi	r23, 0x00	; 0
    556c:	43 e2       	ldi	r20, 0x23	; 35
}
    556e:	8f cf       	rjmp	.-226    	; 0x548e <_ZN13Accelerometer7writeToEihh>

00005570 <_ZN13Accelerometer19setDoubleTapLatencyEi>:
// Sets the latency (latent register) which contains an unsigned time value
// representing the wait time from the detection of a tap event to the start
// of the time window, during which a possible second tap can be detected.
// The scale factor is 1.25ms/LSB. A value of 0 disables the double tap function.
// It accepts a maximum value of 255.
void Accelerometer::setDoubleTapLatency(int doubleTapLatency) {
    5570:	26 2f       	mov	r18, r22
  byte _b = byte (doubleTapLatency);
  writeTo(DEVICE, ADXL345_LATENT, _b);  
    5572:	63 e5       	ldi	r22, 0x53	; 83
    5574:	70 e0       	ldi	r23, 0x00	; 0
    5576:	42 e2       	ldi	r20, 0x22	; 34
}
    5578:	8a cf       	rjmp	.-236    	; 0x548e <_ZN13Accelerometer7writeToEihh>

0000557a <_ZN13Accelerometer14setTapDurationEi>:
// The DUR byte contains an unsigned time value representing the maximum time
// that an event must be above THRESH_TAP threshold to qualify as a tap event
// The scale factor is 625µs/LSB
// A value of 0 disables the tap/double tap funcitons. Max value is 255.
void Accelerometer::setTapDuration(int tapDuration) {
  tapDuration = min(max(tapDuration,0),255);
    557a:	6f 3f       	cpi	r22, 0xFF	; 255
    557c:	71 05       	cpc	r23, r1
    557e:	1c f0       	brlt	.+6      	; 0x5586 <_ZN13Accelerometer14setTapDurationEi+0xc>
    5580:	2f ef       	ldi	r18, 0xFF	; 255
    5582:	30 e0       	ldi	r19, 0x00	; 0
    5584:	05 c0       	rjmp	.+10     	; 0x5590 <_ZN13Accelerometer14setTapDurationEi+0x16>
    5586:	9b 01       	movw	r18, r22
    5588:	77 ff       	sbrs	r23, 7
    558a:	02 c0       	rjmp	.+4      	; 0x5590 <_ZN13Accelerometer14setTapDurationEi+0x16>
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (tapDuration);
  writeTo(DEVICE, ADXL345_DUR, _b);  
    5590:	63 e5       	ldi	r22, 0x53	; 83
    5592:	70 e0       	ldi	r23, 0x00	; 0
    5594:	41 e2       	ldi	r20, 0x21	; 33
}
    5596:	7b cf       	rjmp	.-266    	; 0x548e <_ZN13Accelerometer7writeToEihh>

00005598 <_ZN13Accelerometer13setAxisOffsetEiii>:

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void Accelerometer::setAxisOffset(int x, int y, int z) {
    5598:	ef 92       	push	r14
    559a:	ff 92       	push	r15
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	8c 01       	movw	r16, r24
    55a2:	36 2f       	mov	r19, r22
    55a4:	f4 2e       	mov	r15, r20
    55a6:	e2 2e       	mov	r14, r18
  writeTo(DEVICE, ADXL345_OFSX, byte (x));  
    55a8:	63 e5       	ldi	r22, 0x53	; 83
    55aa:	70 e0       	ldi	r23, 0x00	; 0
    55ac:	4e e1       	ldi	r20, 0x1E	; 30
    55ae:	23 2f       	mov	r18, r19
    55b0:	6e df       	rcall	.-292    	; 0x548e <_ZN13Accelerometer7writeToEihh>
  writeTo(DEVICE, ADXL345_OFSY, byte (y));  
    55b2:	c8 01       	movw	r24, r16
    55b4:	63 e5       	ldi	r22, 0x53	; 83
    55b6:	70 e0       	ldi	r23, 0x00	; 0
    55b8:	4f e1       	ldi	r20, 0x1F	; 31
    55ba:	2f 2d       	mov	r18, r15
    55bc:	68 df       	rcall	.-304    	; 0x548e <_ZN13Accelerometer7writeToEihh>
  writeTo(DEVICE, ADXL345_OFSZ, byte (z));  
    55be:	c8 01       	movw	r24, r16
    55c0:	63 e5       	ldi	r22, 0x53	; 83
    55c2:	70 e0       	ldi	r23, 0x00	; 0
    55c4:	40 e2       	ldi	r20, 0x20	; 32
    55c6:	2e 2d       	mov	r18, r14
    55c8:	62 df       	rcall	.-316    	; 0x548e <_ZN13Accelerometer7writeToEihh>
}
    55ca:	1f 91       	pop	r17
    55cc:	0f 91       	pop	r16
    55ce:	ff 90       	pop	r15
    55d0:	ef 90       	pop	r14
    55d2:	08 95       	ret

000055d4 <_ZN13Accelerometer15setTapThresholdEi>:
// Sets the THRESH_TAP byte value
// it should be between 0 and 255
// the scale factor is 62.5 mg/LSB
// A value of 0 may result in undesirable behavior
void Accelerometer::setTapThreshold(int tapThreshold) {
  tapThreshold = min(max(tapThreshold,0),255);
    55d4:	6f 3f       	cpi	r22, 0xFF	; 255
    55d6:	71 05       	cpc	r23, r1
    55d8:	1c f0       	brlt	.+6      	; 0x55e0 <_ZN13Accelerometer15setTapThresholdEi+0xc>
    55da:	2f ef       	ldi	r18, 0xFF	; 255
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	05 c0       	rjmp	.+10     	; 0x55ea <_ZN13Accelerometer15setTapThresholdEi+0x16>
    55e0:	9b 01       	movw	r18, r22
    55e2:	77 ff       	sbrs	r23, 7
    55e4:	02 c0       	rjmp	.+4      	; 0x55ea <_ZN13Accelerometer15setTapThresholdEi+0x16>
    55e6:	20 e0       	ldi	r18, 0x00	; 0
    55e8:	30 e0       	ldi	r19, 0x00	; 0
  byte _b = byte (tapThreshold);
  writeTo(DEVICE, ADXL345_THRESH_TAP, _b);  
    55ea:	63 e5       	ldi	r22, 0x53	; 83
    55ec:	70 e0       	ldi	r23, 0x00	; 0
    55ee:	4d e1       	ldi	r20, 0x1D	; 29
}
    55f0:	4e cf       	rjmp	.-356    	; 0x548e <_ZN13Accelerometer7writeToEihh>

000055f2 <_ZN13Accelerometer8readFromEihiPh>:
  Wire.send(val);                 // send value to write
  Wire.endTransmission();         // end transmission
}

// Reads num bytes starting from address register on device in to _buff array
void Accelerometer::readFrom(int device, byte address, int num, byte _buff[]) {
    55f2:	af 92       	push	r10
    55f4:	bf 92       	push	r11
    55f6:	df 92       	push	r13
    55f8:	ef 92       	push	r14
    55fa:	ff 92       	push	r15
    55fc:	0f 93       	push	r16
    55fe:	1f 93       	push	r17
    5600:	cf 93       	push	r28
    5602:	df 93       	push	r29
    5604:	7b 01       	movw	r14, r22
    5606:	d4 2e       	mov	r13, r20
    5608:	59 01       	movw	r10, r18
  Wire.beginTransmission(device); // start transmission to device 
    560a:	85 ee       	ldi	r24, 0xE5	; 229
    560c:	97 e0       	ldi	r25, 0x07	; 7
    560e:	84 dc       	rcall	.-1784   	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(address);             // sends address to read from
    5610:	85 ee       	ldi	r24, 0xE5	; 229
    5612:	97 e0       	ldi	r25, 0x07	; 7
    5614:	6d 2d       	mov	r22, r13
    5616:	82 dc       	rcall	.-1788   	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.endTransmission();         // end transmission
    5618:	85 ee       	ldi	r24, 0xE5	; 229
    561a:	97 e0       	ldi	r25, 0x07	; 7
    561c:	7e dc       	rcall	.-1796   	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>

    Wire.beginTransmission(device); // start transmission to device
    561e:	85 ee       	ldi	r24, 0xE5	; 229
    5620:	97 e0       	ldi	r25, 0x07	; 7
    5622:	b7 01       	movw	r22, r14
    5624:	79 dc       	rcall	.-1806   	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.requestFrom(device, num);    // request 6 bytes from device
    5626:	85 ee       	ldi	r24, 0xE5	; 229
    5628:	97 e0       	ldi	r25, 0x07	; 7
    562a:	b7 01       	movw	r22, r14
    562c:	a5 01       	movw	r20, r10
    562e:	79 dc       	rcall	.-1806   	; 0x4f22 <_ZN7WireI2C11requestFromEii>
    5630:	e8 01       	movw	r28, r16
    5632:	04 c0       	rjmp	.+8      	; 0x563c <_ZN13Accelerometer8readFromEihiPh+0x4a>

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
  { 
    _buff[i] = Wire.receive();    // receive a byte
    5634:	85 ee       	ldi	r24, 0xE5	; 229
    5636:	97 e0       	ldi	r25, 0x07	; 7
    5638:	72 dc       	rcall	.-1820   	; 0x4f1e <_ZN7WireI2C7receiveEv>
    563a:	89 93       	st	Y+, r24

    Wire.beginTransmission(device); // start transmission to device
  Wire.requestFrom(device, num);    // request 6 bytes from device

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
    563c:	85 ee       	ldi	r24, 0xE5	; 229
    563e:	97 e0       	ldi	r25, 0x07	; 7
    5640:	71 dc       	rcall	.-1822   	; 0x4f24 <_ZN7WireI2C9availableEv>
    5642:	88 23       	and	r24, r24
    5644:	b9 f7       	brne	.-18     	; 0x5634 <_ZN13Accelerometer8readFromEihiPh+0x42>
  { 
    _buff[i] = Wire.receive();    // receive a byte
    i++;
  }
  Wire.endTransmission();         // end transmission
    5646:	85 ee       	ldi	r24, 0xE5	; 229
    5648:	97 e0       	ldi	r25, 0x07	; 7
    564a:	67 dc       	rcall	.-1842   	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>
}
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	ff 90       	pop	r15
    5656:	ef 90       	pop	r14
    5658:	df 90       	pop	r13
    565a:	bf 90       	pop	r11
    565c:	af 90       	pop	r10
    565e:	08 95       	ret

00005660 <_ZN13Accelerometer16printAllRegisterEv>:
  return ((_b >> bitPos) & 1);
}

// print all register value to the serial ouptut, which requires it to be setup
// this can be used to manually to check the current configuration of the device
void Accelerometer::printAllRegister() {
    5660:	9f 92       	push	r9
    5662:	af 92       	push	r10
    5664:	bf 92       	push	r11
    5666:	cf 92       	push	r12
    5668:	df 92       	push	r13
    566a:	ef 92       	push	r14
    566c:	ff 92       	push	r15
    566e:	0f 93       	push	r16
    5670:	1f 93       	push	r17
    5672:	df 93       	push	r29
    5674:	cf 93       	push	r28
    5676:	0f 92       	push	r0
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	5c 01       	movw	r10, r24
  byte _b;
  Serial.print("0x00:\t");
    567e:	84 ed       	ldi	r24, 0xD4	; 212
    5680:	97 e0       	ldi	r25, 0x07	; 7
    5682:	6b e5       	ldi	r22, 0x5B	; 91
    5684:	74 e0       	ldi	r23, 0x04	; 4
    5686:	09 dc       	rcall	.-2030   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
  readFrom(DEVICE, 0x00, 1, &_b);
    5688:	c5 01       	movw	r24, r10
    568a:	63 e5       	ldi	r22, 0x53	; 83
    568c:	70 e0       	ldi	r23, 0x00	; 0
    568e:	40 e0       	ldi	r20, 0x00	; 0
    5690:	21 e0       	ldi	r18, 0x01	; 1
    5692:	30 e0       	ldi	r19, 0x00	; 0
    5694:	7e 01       	movw	r14, r28
    5696:	08 94       	sec
    5698:	e1 1c       	adc	r14, r1
    569a:	f1 1c       	adc	r15, r1
    569c:	87 01       	movw	r16, r14
    569e:	a9 df       	rcall	.-174    	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  Serial.print(_b, BIN);
    56a0:	84 ed       	ldi	r24, 0xD4	; 212
    56a2:	97 e0       	ldi	r25, 0x07	; 7
    56a4:	69 81       	ldd	r22, Y+1	; 0x01
    56a6:	42 e0       	ldi	r20, 0x02	; 2
    56a8:	50 e0       	ldi	r21, 0x00	; 0
    56aa:	fd db       	rcall	.-2054   	; 0x4ea6 <_ZN16USBVirtualSerial5printEhi>
  Serial.print("\r\n");
    56ac:	84 ed       	ldi	r24, 0xD4	; 212
    56ae:	97 e0       	ldi	r25, 0x07	; 7
    56b0:	62 e6       	ldi	r22, 0x62	; 98
    56b2:	74 e0       	ldi	r23, 0x04	; 4
    56b4:	f2 db       	rcall	.-2076   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
    56b6:	8d e1       	ldi	r24, 0x1D	; 29
    56b8:	c8 2e       	mov	r12, r24
    56ba:	d1 2c       	mov	r13, r1
  int i;
  for (i=29;i<=57;i++){
    Serial.print("0x");
    Serial.print(i, HEX);
    Serial.print(":\t");
    readFrom(DEVICE, i, 1, &_b);
    56bc:	9e 2c       	mov	r9, r14
    56be:	ef 2c       	mov	r14, r15
  readFrom(DEVICE, 0x00, 1, &_b);
  Serial.print(_b, BIN);
  Serial.print("\r\n");
  int i;
  for (i=29;i<=57;i++){
    Serial.print("0x");
    56c0:	84 ed       	ldi	r24, 0xD4	; 212
    56c2:	97 e0       	ldi	r25, 0x07	; 7
    56c4:	65 e6       	ldi	r22, 0x65	; 101
    56c6:	74 e0       	ldi	r23, 0x04	; 4
    56c8:	e8 db       	rcall	.-2096   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
    Serial.print(i, HEX);
    56ca:	84 ed       	ldi	r24, 0xD4	; 212
    56cc:	97 e0       	ldi	r25, 0x07	; 7
    56ce:	b6 01       	movw	r22, r12
    56d0:	40 e1       	ldi	r20, 0x10	; 16
    56d2:	50 e0       	ldi	r21, 0x00	; 0
    56d4:	e9 db       	rcall	.-2094   	; 0x4ea8 <_ZN16USBVirtualSerial5printEii>
    Serial.print(":\t");
    56d6:	84 ed       	ldi	r24, 0xD4	; 212
    56d8:	97 e0       	ldi	r25, 0x07	; 7
    56da:	68 e6       	ldi	r22, 0x68	; 104
    56dc:	74 e0       	ldi	r23, 0x04	; 4
    56de:	dd db       	rcall	.-2118   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
    readFrom(DEVICE, i, 1, &_b);
    56e0:	c5 01       	movw	r24, r10
    56e2:	63 e5       	ldi	r22, 0x53	; 83
    56e4:	70 e0       	ldi	r23, 0x00	; 0
    56e6:	4c 2d       	mov	r20, r12
    56e8:	21 e0       	ldi	r18, 0x01	; 1
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	09 2d       	mov	r16, r9
    56ee:	1e 2d       	mov	r17, r14
    56f0:	80 df       	rcall	.-256    	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
    Serial.print(_b, BIN);
    56f2:	84 ed       	ldi	r24, 0xD4	; 212
    56f4:	97 e0       	ldi	r25, 0x07	; 7
    56f6:	69 81       	ldd	r22, Y+1	; 0x01
    56f8:	42 e0       	ldi	r20, 0x02	; 2
    56fa:	50 e0       	ldi	r21, 0x00	; 0
    56fc:	d4 db       	rcall	.-2136   	; 0x4ea6 <_ZN16USBVirtualSerial5printEhi>
    Serial.print("\r\n");    
    56fe:	84 ed       	ldi	r24, 0xD4	; 212
    5700:	97 e0       	ldi	r25, 0x07	; 7
    5702:	62 e6       	ldi	r22, 0x62	; 98
    5704:	74 e0       	ldi	r23, 0x04	; 4
    5706:	c9 db       	rcall	.-2158   	; 0x4e9a <_ZN16USBVirtualSerial5printEPKc>
  Serial.print("0x00:\t");
  readFrom(DEVICE, 0x00, 1, &_b);
  Serial.print(_b, BIN);
  Serial.print("\r\n");
  int i;
  for (i=29;i<=57;i++){
    5708:	08 94       	sec
    570a:	c1 1c       	adc	r12, r1
    570c:	d1 1c       	adc	r13, r1
    570e:	8a e3       	ldi	r24, 0x3A	; 58
    5710:	c8 16       	cp	r12, r24
    5712:	d1 04       	cpc	r13, r1
    5714:	a9 f6       	brne	.-86     	; 0x56c0 <_ZN13Accelerometer16printAllRegisterEv+0x60>
    Serial.print(":\t");
    readFrom(DEVICE, i, 1, &_b);
    Serial.print(_b, BIN);
    Serial.print("\r\n");    
  }
}
    5716:	0f 90       	pop	r0
    5718:	cf 91       	pop	r28
    571a:	df 91       	pop	r29
    571c:	1f 91       	pop	r17
    571e:	0f 91       	pop	r16
    5720:	ff 90       	pop	r15
    5722:	ef 90       	pop	r14
    5724:	df 90       	pop	r13
    5726:	cf 90       	pop	r12
    5728:	bf 90       	pop	r11
    572a:	af 90       	pop	r10
    572c:	9f 90       	pop	r9
    572e:	08 95       	ret

00005730 <_ZN13Accelerometer14getRegisterBitEhi>:
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
  }
  writeTo(DEVICE, regAdress, _b);  
}

bool Accelerometer::getRegisterBit(byte regAdress, int bitPos) {
    5730:	ff 92       	push	r15
    5732:	0f 93       	push	r16
    5734:	1f 93       	push	r17
    5736:	df 93       	push	r29
    5738:	cf 93       	push	r28
    573a:	0f 92       	push	r0
    573c:	cd b7       	in	r28, 0x3d	; 61
    573e:	de b7       	in	r29, 0x3e	; 62
    5740:	26 2f       	mov	r18, r22
    5742:	f4 2e       	mov	r15, r20
  byte _b;
  readFrom(DEVICE, regAdress, 1, &_b);
    5744:	63 e5       	ldi	r22, 0x53	; 83
    5746:	70 e0       	ldi	r23, 0x00	; 0
    5748:	42 2f       	mov	r20, r18
    574a:	21 e0       	ldi	r18, 0x01	; 1
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	8e 01       	movw	r16, r28
    5750:	0f 5f       	subi	r16, 0xFF	; 255
    5752:	1f 4f       	sbci	r17, 0xFF	; 255
    5754:	4e df       	rcall	.-356    	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
    5756:	89 81       	ldd	r24, Y+1	; 0x01
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	02 c0       	rjmp	.+4      	; 0x5760 <_ZN13Accelerometer14getRegisterBitEhi+0x30>
    575c:	95 95       	asr	r25
    575e:	87 95       	ror	r24
    5760:	fa 94       	dec	r15
    5762:	e2 f7       	brpl	.-8      	; 0x575c <_ZN13Accelerometer14getRegisterBitEhi+0x2c>
  return ((_b >> bitPos) & 1);
}
    5764:	81 70       	andi	r24, 0x01	; 1
    5766:	0f 90       	pop	r0
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	1f 91       	pop	r17
    576e:	0f 91       	pop	r16
    5770:	ff 90       	pop	r15
    5772:	08 95       	ret

00005774 <_ZN13Accelerometer18isInterruptEnabledEh>:
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void Accelerometer::setInterruptMapping(byte interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

bool Accelerometer::isInterruptEnabled(byte interruptBit) {
    5774:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
    5776:	6e e2       	ldi	r22, 0x2E	; 46
    5778:	50 e0       	ldi	r21, 0x00	; 0
}
    577a:	da cf       	rjmp	.-76     	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000577c <_ZN13Accelerometer19getInterruptMappingEh>:

bool Accelerometer::getInterruptSource(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
}

bool Accelerometer::getInterruptMapping(byte interruptBit) {
    577c:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
    577e:	6f e2       	ldi	r22, 0x2F	; 47
    5780:	50 e0       	ldi	r21, 0x00	; 0
}
    5782:	d6 cf       	rjmp	.-84     	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005784 <_ZN13Accelerometer18getInterruptSourceEh>:
  byte _b;
  readFrom(DEVICE, ADXL345_INT_SOURCE, 1, &_b);
  return _b;
}

bool Accelerometer::getInterruptSource(byte interruptBit) {
    5784:	46 2f       	mov	r20, r22
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
    5786:	60 e3       	ldi	r22, 0x30	; 48
    5788:	50 e0       	ldi	r21, 0x00	; 0
}
    578a:	d2 cf       	rjmp	.-92     	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000578c <_ZN13Accelerometer10isLowPowerEv>:
bool Accelerometer::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
}

bool Accelerometer::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
    578c:	6c e2       	ldi	r22, 0x2C	; 44
    578e:	44 e0       	ldi	r20, 0x04	; 4
    5790:	50 e0       	ldi	r21, 0x00	; 0
}
    5792:	ce cf       	rjmp	.-100    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005794 <_ZN13Accelerometer8isAsleepEv>:
bool Accelerometer::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
}

bool Accelerometer::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
    5794:	6b e2       	ldi	r22, 0x2B	; 43
    5796:	43 e0       	ldi	r20, 0x03	; 3
    5798:	50 e0       	ldi	r21, 0x00	; 0
}
    579a:	ca cf       	rjmp	.-108    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000579c <_ZN13Accelerometer14isTapSourceOnZEv>:
}
bool Accelerometer::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
}
bool Accelerometer::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
    579c:	6b e2       	ldi	r22, 0x2B	; 43
    579e:	40 e0       	ldi	r20, 0x00	; 0
    57a0:	50 e0       	ldi	r21, 0x00	; 0
}
    57a2:	c6 cf       	rjmp	.-116    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057a4 <_ZN13Accelerometer14isTapSourceOnYEv>:

bool Accelerometer::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
}
bool Accelerometer::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
    57a4:	6b e2       	ldi	r22, 0x2B	; 43
    57a6:	41 e0       	ldi	r20, 0x01	; 1
    57a8:	50 e0       	ldi	r21, 0x00	; 0
}
    57aa:	c2 cf       	rjmp	.-124    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057ac <_ZN13Accelerometer14isTapSourceOnXEv>:
bool Accelerometer::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
}

bool Accelerometer::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
    57ac:	6b e2       	ldi	r22, 0x2B	; 43
    57ae:	42 e0       	ldi	r20, 0x02	; 2
    57b0:	50 e0       	ldi	r21, 0x00	; 0
}
    57b2:	be cf       	rjmp	.-132    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057b4 <_ZN13Accelerometer19isActivitySourceOnZEv>:
}
bool Accelerometer::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
}
bool Accelerometer::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
    57b4:	6b e2       	ldi	r22, 0x2B	; 43
    57b6:	44 e0       	ldi	r20, 0x04	; 4
    57b8:	50 e0       	ldi	r21, 0x00	; 0
}
    57ba:	ba cf       	rjmp	.-140    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057bc <_ZN13Accelerometer19isActivitySourceOnYEv>:

bool Accelerometer::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
}
bool Accelerometer::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
    57bc:	6b e2       	ldi	r22, 0x2B	; 43
    57be:	45 e0       	ldi	r20, 0x05	; 5
    57c0:	50 e0       	ldi	r21, 0x00	; 0
}
    57c2:	b6 cf       	rjmp	.-148    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057c4 <_ZN13Accelerometer19isActivitySourceOnXEv>:
void Accelerometer::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
}

bool Accelerometer::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
    57c4:	6b e2       	ldi	r22, 0x2B	; 43
    57c6:	46 e0       	ldi	r20, 0x06	; 6
    57c8:	50 e0       	ldi	r21, 0x00	; 0
}
    57ca:	b2 cf       	rjmp	.-156    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057cc <_ZN13Accelerometer17isTapDetectionOnZEv>:
}
void Accelerometer::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool Accelerometer::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
    57cc:	6a e2       	ldi	r22, 0x2A	; 42
    57ce:	40 e0       	ldi	r20, 0x00	; 0
    57d0:	50 e0       	ldi	r21, 0x00	; 0
}
    57d2:	ae cf       	rjmp	.-164    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057d4 <_ZN13Accelerometer17isTapDetectionOnYEv>:
}
void Accelerometer::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool Accelerometer::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
    57d4:	6a e2       	ldi	r22, 0x2A	; 42
    57d6:	41 e0       	ldi	r20, 0x01	; 1
    57d8:	50 e0       	ldi	r21, 0x00	; 0
}
    57da:	aa cf       	rjmp	.-172    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057dc <_ZN13Accelerometer17isTapDetectionOnXEv>:
void Accelerometer::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
}

bool Accelerometer::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
    57dc:	6a e2       	ldi	r22, 0x2A	; 42
    57de:	42 e0       	ldi	r20, 0x02	; 2
    57e0:	50 e0       	ldi	r21, 0x00	; 0
}
    57e2:	a6 cf       	rjmp	.-180    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057e4 <_ZN13Accelerometer14getSuppressBitEv>:
void Accelerometer::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
}

bool Accelerometer::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
    57e4:	6a e2       	ldi	r22, 0x2A	; 42
    57e6:	43 e0       	ldi	r20, 0x03	; 3
    57e8:	50 e0       	ldi	r21, 0x00	; 0
}
    57ea:	a2 cf       	rjmp	.-188    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057ec <_ZN13Accelerometer14isInactivityAcEv>:

bool Accelerometer::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
}
bool Accelerometer::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
    57ec:	67 e2       	ldi	r22, 0x27	; 39
    57ee:	43 e0       	ldi	r20, 0x03	; 3
    57f0:	50 e0       	ldi	r21, 0x00	; 0
}
    57f2:	9e cf       	rjmp	.-196    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057f4 <_ZN13Accelerometer12isActivityAcEv>:
void Accelerometer::setInactivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
}

bool Accelerometer::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
    57f4:	67 e2       	ldi	r22, 0x27	; 39
    57f6:	47 e0       	ldi	r20, 0x07	; 7
    57f8:	50 e0       	ldi	r21, 0x00	; 0
}
    57fa:	9a cf       	rjmp	.-204    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

000057fc <_ZN13Accelerometer20isInactivityZEnabledEv>:
}
bool Accelerometer::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
}
bool Accelerometer::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
    57fc:	67 e2       	ldi	r22, 0x27	; 39
    57fe:	40 e0       	ldi	r20, 0x00	; 0
    5800:	50 e0       	ldi	r21, 0x00	; 0
}
    5802:	96 cf       	rjmp	.-212    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005804 <_ZN13Accelerometer20isInactivityYEnabledEv>:
}
bool Accelerometer::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
}
bool Accelerometer::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
    5804:	67 e2       	ldi	r22, 0x27	; 39
    5806:	41 e0       	ldi	r20, 0x01	; 1
    5808:	50 e0       	ldi	r21, 0x00	; 0
}
    580a:	92 cf       	rjmp	.-220    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000580c <_ZN13Accelerometer20isInactivityXEnabledEv>:
}
bool Accelerometer::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
}
bool Accelerometer::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
    580c:	67 e2       	ldi	r22, 0x27	; 39
    580e:	42 e0       	ldi	r20, 0x02	; 2
    5810:	50 e0       	ldi	r21, 0x00	; 0
}
    5812:	8e cf       	rjmp	.-228    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005814 <_ZN13Accelerometer18isActivityZEnabledEv>:
}
bool Accelerometer::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
}
bool Accelerometer::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
    5814:	67 e2       	ldi	r22, 0x27	; 39
    5816:	44 e0       	ldi	r20, 0x04	; 4
    5818:	50 e0       	ldi	r21, 0x00	; 0
}
    581a:	8a cf       	rjmp	.-236    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000581c <_ZN13Accelerometer18isActivityYEnabledEv>:

bool Accelerometer::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
}
bool Accelerometer::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
    581c:	67 e2       	ldi	r22, 0x27	; 39
    581e:	45 e0       	ldi	r20, 0x05	; 5
    5820:	50 e0       	ldi	r21, 0x00	; 0
}
    5822:	86 cf       	rjmp	.-244    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005824 <_ZN13Accelerometer18isActivityXEnabledEv>:
  readFrom(DEVICE, ADXL345_TIME_FF, 1, &_b);  
  return int (_b);
}

bool Accelerometer::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
    5824:	67 e2       	ldi	r22, 0x27	; 39
    5826:	46 e0       	ldi	r20, 0x06	; 6
    5828:	50 e0       	ldi	r21, 0x00	; 0
}
    582a:	82 cf       	rjmp	.-252    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000582c <_ZN13Accelerometer13getJustifyBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 3, fullResBit);
}

// Gets the state of the justify bit
bool Accelerometer::getJustifyBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 2);
    582c:	61 e3       	ldi	r22, 0x31	; 49
    582e:	42 e0       	ldi	r20, 0x02	; 2
    5830:	50 e0       	ldi	r21, 0x00	; 0
}
    5832:	7e cf       	rjmp	.-260    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005834 <_ZN13Accelerometer13getFullResBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 5, interruptLevelBit);
}

// Gets the state of the FULL_RES bit
bool Accelerometer::getFullResBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 3);
    5834:	61 e3       	ldi	r22, 0x31	; 49
    5836:	43 e0       	ldi	r20, 0x03	; 3
    5838:	50 e0       	ldi	r21, 0x00	; 0
}
    583a:	7a cf       	rjmp	.-268    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000583c <_ZN13Accelerometer20getInterruptLevelBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 6, spiBit);
}

// Gets the state of the INT_INVERT bit
bool Accelerometer::getInterruptLevelBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 5);
    583c:	61 e3       	ldi	r22, 0x31	; 49
    583e:	45 e0       	ldi	r20, 0x05	; 5
    5840:	50 e0       	ldi	r21, 0x00	; 0
}
    5842:	76 cf       	rjmp	.-276    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005844 <_ZN13Accelerometer9getSpiBitEv>:
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
}

// Gets the state of the SPI bit
bool Accelerometer::getSpiBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 6);
    5844:	61 e3       	ldi	r22, 0x31	; 49
    5846:	46 e0       	ldi	r20, 0x06	; 6
    5848:	50 e0       	ldi	r21, 0x00	; 0
}
    584a:	72 cf       	rjmp	.-284    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

0000584c <_ZN13Accelerometer14getSelfTestBitEv>:
  _s |= (_b & 0B11101100);
  writeTo(DEVICE, ADXL345_DATA_FORMAT, _s);
}
// gets the state of the SELF_TEST bit
bool Accelerometer::getSelfTestBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 7);
    584c:	61 e3       	ldi	r22, 0x31	; 49
    584e:	47 e0       	ldi	r20, 0x07	; 7
    5850:	50 e0       	ldi	r21, 0x00	; 0
}
    5852:	6e cf       	rjmp	.-292    	; 0x5730 <_ZN13Accelerometer14getRegisterBitEhi>

00005854 <_ZN13Accelerometer14setRegisterBitEhib>:

void Accelerometer::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void Accelerometer::setRegisterBit(byte regAdress, int bitPos, bool state) {
    5854:	bf 92       	push	r11
    5856:	cf 92       	push	r12
    5858:	df 92       	push	r13
    585a:	ef 92       	push	r14
    585c:	ff 92       	push	r15
    585e:	0f 93       	push	r16
    5860:	1f 93       	push	r17
    5862:	df 93       	push	r29
    5864:	cf 93       	push	r28
    5866:	0f 92       	push	r0
    5868:	cd b7       	in	r28, 0x3d	; 61
    586a:	de b7       	in	r29, 0x3e	; 62
    586c:	6c 01       	movw	r12, r24
    586e:	b6 2e       	mov	r11, r22
    5870:	e4 2e       	mov	r14, r20
    5872:	f2 2e       	mov	r15, r18
  byte _b;
  readFrom(DEVICE, regAdress, 1, &_b);
    5874:	63 e5       	ldi	r22, 0x53	; 83
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	4b 2d       	mov	r20, r11
    587a:	21 e0       	ldi	r18, 0x01	; 1
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	8e 01       	movw	r16, r28
    5880:	0f 5f       	subi	r16, 0xFF	; 255
    5882:	1f 4f       	sbci	r17, 0xFF	; 255
    5884:	b6 de       	rcall	.-660    	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
    5886:	29 81       	ldd	r18, Y+1	; 0x01
  if (state) {
    5888:	ff 20       	and	r15, r15
    588a:	49 f0       	breq	.+18     	; 0x589e <_ZN13Accelerometer14setRegisterBitEhib+0x4a>
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
    588c:	81 e0       	ldi	r24, 0x01	; 1
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	02 c0       	rjmp	.+4      	; 0x5896 <_ZN13Accelerometer14setRegisterBitEhib+0x42>
    5892:	88 0f       	add	r24, r24
    5894:	99 1f       	adc	r25, r25
    5896:	ea 94       	dec	r14
    5898:	e2 f7       	brpl	.-8      	; 0x5892 <_ZN13Accelerometer14setRegisterBitEhib+0x3e>
    589a:	28 2b       	or	r18, r24
    589c:	09 c0       	rjmp	.+18     	; 0x58b0 <_ZN13Accelerometer14setRegisterBitEhib+0x5c>
  } 
  else {
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	02 c0       	rjmp	.+4      	; 0x58a8 <_ZN13Accelerometer14setRegisterBitEhib+0x54>
    58a4:	88 0f       	add	r24, r24
    58a6:	99 1f       	adc	r25, r25
    58a8:	ea 94       	dec	r14
    58aa:	e2 f7       	brpl	.-8      	; 0x58a4 <_ZN13Accelerometer14setRegisterBitEhib+0x50>
    58ac:	80 95       	com	r24
    58ae:	28 23       	and	r18, r24
    58b0:	29 83       	std	Y+1, r18	; 0x01
  }
  writeTo(DEVICE, regAdress, _b);  
    58b2:	c6 01       	movw	r24, r12
    58b4:	63 e5       	ldi	r22, 0x53	; 83
    58b6:	70 e0       	ldi	r23, 0x00	; 0
    58b8:	4b 2d       	mov	r20, r11
    58ba:	29 81       	ldd	r18, Y+1	; 0x01
    58bc:	e8 dd       	rcall	.-1072   	; 0x548e <_ZN13Accelerometer7writeToEihh>
}
    58be:	0f 90       	pop	r0
    58c0:	cf 91       	pop	r28
    58c2:	df 91       	pop	r29
    58c4:	1f 91       	pop	r17
    58c6:	0f 91       	pop	r16
    58c8:	ff 90       	pop	r15
    58ca:	ef 90       	pop	r14
    58cc:	df 90       	pop	r13
    58ce:	cf 90       	pop	r12
    58d0:	bf 90       	pop	r11
    58d2:	08 95       	ret

000058d4 <_ZN13Accelerometer12setInterruptEhb>:

bool Accelerometer::isInterruptEnabled(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void Accelerometer::setInterrupt(byte interruptBit, bool state) {
    58d4:	36 2f       	mov	r19, r22
    58d6:	24 2f       	mov	r18, r20
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
    58d8:	6e e2       	ldi	r22, 0x2E	; 46
    58da:	43 2f       	mov	r20, r19
    58dc:	50 e0       	ldi	r21, 0x00	; 0
}
    58de:	ba cf       	rjmp	.-140    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

000058e0 <_ZN13Accelerometer19setInterruptMappingEhb>:
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
}

// Set the mapping of an interrupt to pin1 or pin2
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void Accelerometer::setInterruptMapping(byte interruptBit, bool interruptPin) {
    58e0:	36 2f       	mov	r19, r22
    58e2:	24 2f       	mov	r18, r20
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
    58e4:	6f e2       	ldi	r22, 0x2F	; 47
    58e6:	43 2f       	mov	r20, r19
    58e8:	50 e0       	ldi	r21, 0x00	; 0
}
    58ea:	b4 cf       	rjmp	.-152    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

000058ec <_ZN13Accelerometer11setLowPowerEb>:
}

bool Accelerometer::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
}
void Accelerometer::setLowPower(bool state) {  
    58ec:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
    58ee:	6c e2       	ldi	r22, 0x2C	; 44
    58f0:	44 e0       	ldi	r20, 0x04	; 4
    58f2:	50 e0       	ldi	r21, 0x00	; 0
}
    58f4:	af cf       	rjmp	.-162    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

000058f6 <_ZN13Accelerometer18setTapDetectionOnZEb>:
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool Accelerometer::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
}
void Accelerometer::setTapDetectionOnZ(bool state) {  
    58f6:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
    58f8:	6a e2       	ldi	r22, 0x2A	; 42
    58fa:	40 e0       	ldi	r20, 0x00	; 0
    58fc:	50 e0       	ldi	r21, 0x00	; 0
}
    58fe:	aa cf       	rjmp	.-172    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005900 <_ZN13Accelerometer18setTapDetectionOnYEb>:
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool Accelerometer::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
}
void Accelerometer::setTapDetectionOnY(bool state) {  
    5900:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
    5902:	6a e2       	ldi	r22, 0x2A	; 42
    5904:	41 e0       	ldi	r20, 0x01	; 1
    5906:	50 e0       	ldi	r21, 0x00	; 0
}
    5908:	a5 cf       	rjmp	.-182    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000590a <_ZN13Accelerometer18setTapDetectionOnXEb>:
}

bool Accelerometer::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
}
void Accelerometer::setTapDetectionOnX(bool state) {  
    590a:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
    590c:	6a e2       	ldi	r22, 0x2A	; 42
    590e:	42 e0       	ldi	r20, 0x02	; 2
    5910:	50 e0       	ldi	r21, 0x00	; 0
}
    5912:	a0 cf       	rjmp	.-192    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005914 <_ZN13Accelerometer14setSuppressBitEb>:
}

bool Accelerometer::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
}
void Accelerometer::setSuppressBit(bool state) {  
    5914:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
    5916:	6a e2       	ldi	r22, 0x2A	; 42
    5918:	43 e0       	ldi	r20, 0x03	; 3
    591a:	50 e0       	ldi	r21, 0x00	; 0
}
    591c:	9b cf       	rjmp	.-202    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000591e <_ZN13Accelerometer15setInactivityAcEb>:
}

void Accelerometer::setActivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
}
void Accelerometer::setInactivityAc(bool state) {  
    591e:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
    5920:	67 e2       	ldi	r22, 0x27	; 39
    5922:	43 e0       	ldi	r20, 0x03	; 3
    5924:	50 e0       	ldi	r21, 0x00	; 0
}
    5926:	96 cf       	rjmp	.-212    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005928 <_ZN13Accelerometer13setActivityAcEb>:
}
bool Accelerometer::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
}

void Accelerometer::setActivityAc(bool state) {  
    5928:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
    592a:	67 e2       	ldi	r22, 0x27	; 39
    592c:	47 e0       	ldi	r20, 0x07	; 7
    592e:	50 e0       	ldi	r21, 0x00	; 0
}
    5930:	91 cf       	rjmp	.-222    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005932 <_ZN13Accelerometer14setInactivityZEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
}
void Accelerometer::setInactivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
}
void Accelerometer::setInactivityZ(bool state) {  
    5932:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
    5934:	67 e2       	ldi	r22, 0x27	; 39
    5936:	40 e0       	ldi	r20, 0x00	; 0
    5938:	50 e0       	ldi	r21, 0x00	; 0
}
    593a:	8c cf       	rjmp	.-232    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000593c <_ZN13Accelerometer14setInactivityYEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void Accelerometer::setInactivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
}
void Accelerometer::setInactivityY(bool state) {  
    593c:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
    593e:	67 e2       	ldi	r22, 0x27	; 39
    5940:	41 e0       	ldi	r20, 0x01	; 1
    5942:	50 e0       	ldi	r21, 0x00	; 0
}
    5944:	87 cf       	rjmp	.-242    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005946 <_ZN13Accelerometer14setInactivityXEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
}
void Accelerometer::setActivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
}
void Accelerometer::setInactivityX(bool state) {  
    5946:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
    5948:	67 e2       	ldi	r22, 0x27	; 39
    594a:	42 e0       	ldi	r20, 0x02	; 2
    594c:	50 e0       	ldi	r21, 0x00	; 0
}
    594e:	82 cf       	rjmp	.-252    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005950 <_ZN13Accelerometer12setActivityZEb>:
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
}
void Accelerometer::setActivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
}
void Accelerometer::setActivityZ(bool state) {  
    5950:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
    5952:	67 e2       	ldi	r22, 0x27	; 39
    5954:	44 e0       	ldi	r20, 0x04	; 4
    5956:	50 e0       	ldi	r21, 0x00	; 0
}
    5958:	7d cf       	rjmp	.-262    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000595a <_ZN13Accelerometer12setActivityYEb>:
}

void Accelerometer::setActivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
}
void Accelerometer::setActivityY(bool state) {  
    595a:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
    595c:	67 e2       	ldi	r22, 0x27	; 39
    595e:	45 e0       	ldi	r20, 0x05	; 5
    5960:	50 e0       	ldi	r21, 0x00	; 0
}
    5962:	78 cf       	rjmp	.-272    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005964 <_ZN13Accelerometer12setActivityXEb>:
}
bool Accelerometer::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void Accelerometer::setActivityX(bool state) {  
    5964:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
    5966:	67 e2       	ldi	r22, 0x27	; 39
    5968:	46 e0       	ldi	r20, 0x06	; 6
    596a:	50 e0       	ldi	r21, 0x00	; 0
}
    596c:	73 cf       	rjmp	.-282    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000596e <_ZN13Accelerometer13setJustifyBitEb>:
}

// Sets the JUSTIFY bit
// if sets to 1 selects the left justified mode
// if sets to 0 selects right justified mode with sign extension
void Accelerometer::setJustifyBit(bool justifyBit) {
    596e:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 2, justifyBit);
    5970:	61 e3       	ldi	r22, 0x31	; 49
    5972:	42 e0       	ldi	r20, 0x02	; 2
    5974:	50 e0       	ldi	r21, 0x00	; 0
}
    5976:	6e cf       	rjmp	.-292    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005978 <_ZN13Accelerometer13setFullResBitEb>:
// Sets the FULL_RES bit
// if set to 1, the device is in full resolution mode, where the output resolution increases with the
//   g range set by the range bits to maintain a 4mg/LSB scal factor
// if set to 0, the device is in 10-bit mode, and the range buts determine the maximum g range
//   and scale factor
void Accelerometer::setFullResBit(bool fullResBit) {
    5978:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 3, fullResBit);
    597a:	61 e3       	ldi	r22, 0x31	; 49
    597c:	43 e0       	ldi	r20, 0x03	; 3
    597e:	50 e0       	ldi	r21, 0x00	; 0
}
    5980:	69 cf       	rjmp	.-302    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005982 <_ZN13Accelerometer20setInterruptLevelBitEb>:
}

// Sets the INT_INVERT bit
// if set to 0 sets the interrupts to active high
// if set to 1 sets the interrupts to active low
void Accelerometer::setInterruptLevelBit(bool interruptLevelBit) {
    5982:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 5, interruptLevelBit);
    5984:	61 e3       	ldi	r22, 0x31	; 49
    5986:	45 e0       	ldi	r20, 0x05	; 5
    5988:	50 e0       	ldi	r21, 0x00	; 0
}
    598a:	64 cf       	rjmp	.-312    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

0000598c <_ZN13Accelerometer9setSpiBitEb>:
}

// Sets the SPI bit
// if set to 1 it sets the device to 3-wire mode
// if set to 0 it sets the device to 4-wire SPI mode
void Accelerometer::setSpiBit(bool spiBit) {
    598c:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 6, spiBit);
    598e:	61 e3       	ldi	r22, 0x31	; 49
    5990:	46 e0       	ldi	r20, 0x06	; 6
    5992:	50 e0       	ldi	r21, 0x00	; 0
}
    5994:	5f cf       	rjmp	.-322    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

00005996 <_ZN13Accelerometer14setSelfTestBitEb>:
}

// Sets the SELF-TEST bit
// if set to 1 it applies a self-test force to the sensor causing a shift in the output data
// if set to 0 it disables the self-test force
void Accelerometer::setSelfTestBit(bool selfTestBit) {
    5996:	26 2f       	mov	r18, r22
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
    5998:	61 e3       	ldi	r22, 0x31	; 49
    599a:	47 e0       	ldi	r20, 0x07	; 7
    599c:	50 e0       	ldi	r21, 0x00	; 0
}
    599e:	5a cf       	rjmp	.-332    	; 0x5854 <_ZN13Accelerometer14setRegisterBitEhib>

000059a0 <_ZN13Accelerometer18getInterruptSourceEv>:
    _s = (byte) (r + 6) | (_b & 0B11110000);
    writeTo(DEVICE, ADXL345_BW_RATE, _s);
  }
}

byte Accelerometer::getInterruptSource() {
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	df 93       	push	r29
    59a6:	cf 93       	push	r28
    59a8:	0f 92       	push	r0
    59aa:	cd b7       	in	r28, 0x3d	; 61
    59ac:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_INT_SOURCE, 1, &_b);
    59ae:	63 e5       	ldi	r22, 0x53	; 83
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	40 e3       	ldi	r20, 0x30	; 48
    59b4:	21 e0       	ldi	r18, 0x01	; 1
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	8e 01       	movw	r16, r28
    59ba:	0f 5f       	subi	r16, 0xFF	; 255
    59bc:	1f 4f       	sbci	r17, 0xFF	; 255
    59be:	19 de       	rcall	.-974    	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return _b;
}
    59c0:	89 81       	ldd	r24, Y+1	; 0x01
    59c2:	0f 90       	pop	r0
    59c4:	cf 91       	pop	r28
    59c6:	df 91       	pop	r29
    59c8:	1f 91       	pop	r17
    59ca:	0f 91       	pop	r16
    59cc:	08 95       	ret

000059ce <_ZN13Accelerometer7setRateEf>:
  readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
  _b &= 0B00001111;
  return (pow(2,((int) _b)-6)) * 6.25;
}

void Accelerometer::setRate(float rate){
    59ce:	cf 92       	push	r12
    59d0:	df 92       	push	r13
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	df 93       	push	r29
    59dc:	cf 93       	push	r28
    59de:	0f 92       	push	r0
    59e0:	cd b7       	in	r28, 0x3d	; 61
    59e2:	de b7       	in	r29, 0x3e	; 62
    59e4:	6c 01       	movw	r12, r24
  byte _b,_s;
  int v = (int) (rate / 6.25);
    59e6:	cb 01       	movw	r24, r22
    59e8:	ba 01       	movw	r22, r20
    59ea:	20 e0       	ldi	r18, 0x00	; 0
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	48 ec       	ldi	r20, 0xC8	; 200
    59f0:	50 e4       	ldi	r21, 0x40	; 64
    59f2:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    59f6:	0e 94 0b 3c 	call	0x7816	; 0x7816 <__fixsfsi>
    59fa:	ee 24       	eor	r14, r14
    59fc:	ff 24       	eor	r15, r15
    59fe:	03 c0       	rjmp	.+6      	; 0x5a06 <_ZN13Accelerometer7setRateEf+0x38>
  int r = 0;
  while (v >>= 1)
  {
    r++;
    5a00:	08 94       	sec
    5a02:	e1 1c       	adc	r14, r1
    5a04:	f1 1c       	adc	r15, r1

void Accelerometer::setRate(float rate){
  byte _b,_s;
  int v = (int) (rate / 6.25);
  int r = 0;
  while (v >>= 1)
    5a06:	75 95       	asr	r23
    5a08:	67 95       	ror	r22
    5a0a:	61 15       	cp	r22, r1
    5a0c:	71 05       	cpc	r23, r1
    5a0e:	c1 f7       	brne	.-16     	; 0x5a00 <_ZN13Accelerometer7setRateEf+0x32>
  {
    r++;
  }
  if (r <= 9) { 
    5a10:	8a e0       	ldi	r24, 0x0A	; 10
    5a12:	e8 16       	cp	r14, r24
    5a14:	f1 04       	cpc	r15, r1
    5a16:	a4 f4       	brge	.+40     	; 0x5a40 <_ZN13Accelerometer7setRateEf+0x72>
    readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
    5a18:	c6 01       	movw	r24, r12
    5a1a:	63 e5       	ldi	r22, 0x53	; 83
    5a1c:	70 e0       	ldi	r23, 0x00	; 0
    5a1e:	4c e2       	ldi	r20, 0x2C	; 44
    5a20:	21 e0       	ldi	r18, 0x01	; 1
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	8e 01       	movw	r16, r28
    5a26:	0f 5f       	subi	r16, 0xFF	; 255
    5a28:	1f 4f       	sbci	r17, 0xFF	; 255
    5a2a:	e3 dd       	rcall	.-1082   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
    _s = (byte) (r + 6) | (_b & 0B11110000);
    writeTo(DEVICE, ADXL345_BW_RATE, _s);
    5a2c:	2e 2d       	mov	r18, r14
    5a2e:	2a 5f       	subi	r18, 0xFA	; 250
    5a30:	89 81       	ldd	r24, Y+1	; 0x01
    5a32:	80 7f       	andi	r24, 0xF0	; 240
    5a34:	28 2b       	or	r18, r24
    5a36:	c6 01       	movw	r24, r12
    5a38:	63 e5       	ldi	r22, 0x53	; 83
    5a3a:	70 e0       	ldi	r23, 0x00	; 0
    5a3c:	4c e2       	ldi	r20, 0x2C	; 44
    5a3e:	27 dd       	rcall	.-1458   	; 0x548e <_ZN13Accelerometer7writeToEihh>
  }
}
    5a40:	0f 90       	pop	r0
    5a42:	cf 91       	pop	r28
    5a44:	df 91       	pop	r29
    5a46:	1f 91       	pop	r17
    5a48:	0f 91       	pop	r16
    5a4a:	ff 90       	pop	r15
    5a4c:	ef 90       	pop	r14
    5a4e:	df 90       	pop	r13
    5a50:	cf 90       	pop	r12
    5a52:	08 95       	ret

00005a54 <_ZN13Accelerometer7getRateEv>:
}
void Accelerometer::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
}

float Accelerometer::getRate(){
    5a54:	0f 93       	push	r16
    5a56:	1f 93       	push	r17
    5a58:	df 93       	push	r29
    5a5a:	cf 93       	push	r28
    5a5c:	0f 92       	push	r0
    5a5e:	cd b7       	in	r28, 0x3d	; 61
    5a60:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_BW_RATE, 1, &_b);
    5a62:	63 e5       	ldi	r22, 0x53	; 83
    5a64:	70 e0       	ldi	r23, 0x00	; 0
    5a66:	4c e2       	ldi	r20, 0x2C	; 44
    5a68:	21 e0       	ldi	r18, 0x01	; 1
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	8e 01       	movw	r16, r28
    5a6e:	0f 5f       	subi	r16, 0xFF	; 255
    5a70:	1f 4f       	sbci	r17, 0xFF	; 255
    5a72:	bf dd       	rcall	.-1154   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  _b &= 0B00001111;
  return (pow(2,((int) _b)-6)) * 6.25;
    5a74:	69 81       	ldd	r22, Y+1	; 0x01
    5a76:	6f 70       	andi	r22, 0x0F	; 15
    5a78:	70 e0       	ldi	r23, 0x00	; 0
    5a7a:	66 50       	subi	r22, 0x06	; 6
    5a7c:	70 40       	sbci	r23, 0x00	; 0
    5a7e:	88 27       	eor	r24, r24
    5a80:	77 fd       	sbrc	r23, 7
    5a82:	80 95       	com	r24
    5a84:	98 2f       	mov	r25, r24
    5a86:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    5a8a:	9b 01       	movw	r18, r22
    5a8c:	ac 01       	movw	r20, r24
    5a8e:	60 e0       	ldi	r22, 0x00	; 0
    5a90:	70 e0       	ldi	r23, 0x00	; 0
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	90 e4       	ldi	r25, 0x40	; 64
    5a96:	0e 94 59 3d 	call	0x7ab2	; 0x7ab2 <pow>
    5a9a:	9b 01       	movw	r18, r22
    5a9c:	ac 01       	movw	r20, r24
    5a9e:	ca 01       	movw	r24, r20
    5aa0:	b9 01       	movw	r22, r18
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	48 ec       	ldi	r20, 0xC8	; 200
    5aa8:	50 e4       	ldi	r21, 0x40	; 64
    5aaa:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
}
    5aae:	0f 90       	pop	r0
    5ab0:	cf 91       	pop	r28
    5ab2:	df 91       	pop	r29
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	08 95       	ret

00005aba <_ZN13Accelerometer19getFreeFallDurationEv>:
  byte _b = byte (freeFallDuration);
  writeTo(DEVICE, ADXL345_TIME_FF, _b);  
}

// Gets the TIME_FF register.
int Accelerometer::getFreeFallDuration() {
    5aba:	0f 93       	push	r16
    5abc:	1f 93       	push	r17
    5abe:	df 93       	push	r29
    5ac0:	cf 93       	push	r28
    5ac2:	0f 92       	push	r0
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_TIME_FF, 1, &_b);  
    5ac8:	63 e5       	ldi	r22, 0x53	; 83
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	49 e2       	ldi	r20, 0x29	; 41
    5ace:	21 e0       	ldi	r18, 0x01	; 1
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	8e 01       	movw	r16, r28
    5ad4:	0f 5f       	subi	r16, 0xFF	; 255
    5ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad8:	8c dd       	rcall	.-1256   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5ada:	89 81       	ldd	r24, Y+1	; 0x01
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	0f 90       	pop	r0
    5ae0:	cf 91       	pop	r28
    5ae2:	df 91       	pop	r29
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <_ZN13Accelerometer20getFreeFallThresholdEv>:
  byte _b = byte (freeFallThreshold);
  writeTo(DEVICE, ADXL345_THRESH_FF, _b);  
}

// Gets the THRESH_FF register.
int Accelerometer::getFreeFallThreshold() {
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	df 93       	push	r29
    5af0:	cf 93       	push	r28
    5af2:	0f 92       	push	r0
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_THRESH_FF, 1, &_b);  
    5af8:	63 e5       	ldi	r22, 0x53	; 83
    5afa:	70 e0       	ldi	r23, 0x00	; 0
    5afc:	48 e2       	ldi	r20, 0x28	; 40
    5afe:	21 e0       	ldi	r18, 0x01	; 1
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	8e 01       	movw	r16, r28
    5b04:	0f 5f       	subi	r16, 0xFF	; 255
    5b06:	1f 4f       	sbci	r17, 0xFF	; 255
    5b08:	74 dd       	rcall	.-1304   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5b0a:	89 81       	ldd	r24, Y+1	; 0x01
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	0f 90       	pop	r0
    5b10:	cf 91       	pop	r28
    5b12:	df 91       	pop	r29
    5b14:	1f 91       	pop	r17
    5b16:	0f 91       	pop	r16
    5b18:	08 95       	ret

00005b1a <_ZN13Accelerometer17getTimeInactivityEv>:
  byte _b = byte (timeInactivity);
  writeTo(DEVICE, ADXL345_TIME_INACT, _b);  
}

// Gets the TIME_INACT register
int Accelerometer::getTimeInactivity() {
    5b1a:	0f 93       	push	r16
    5b1c:	1f 93       	push	r17
    5b1e:	df 93       	push	r29
    5b20:	cf 93       	push	r28
    5b22:	0f 92       	push	r0
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_TIME_INACT, 1, &_b);  
    5b28:	63 e5       	ldi	r22, 0x53	; 83
    5b2a:	70 e0       	ldi	r23, 0x00	; 0
    5b2c:	46 e2       	ldi	r20, 0x26	; 38
    5b2e:	21 e0       	ldi	r18, 0x01	; 1
    5b30:	30 e0       	ldi	r19, 0x00	; 0
    5b32:	8e 01       	movw	r16, r28
    5b34:	0f 5f       	subi	r16, 0xFF	; 255
    5b36:	1f 4f       	sbci	r17, 0xFF	; 255
    5b38:	5c dd       	rcall	.-1352   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5b3a:	89 81       	ldd	r24, Y+1	; 0x01
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	0f 90       	pop	r0
    5b40:	cf 91       	pop	r28
    5b42:	df 91       	pop	r29
    5b44:	1f 91       	pop	r17
    5b46:	0f 91       	pop	r16
    5b48:	08 95       	ret

00005b4a <_ZN13Accelerometer22getInactivityThresholdEv>:
  byte _b = byte (inactivityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_INACT, _b);  
}

// Gets the THRESH_INACT byte
int Accelerometer::getInactivityThreshold() {
    5b4a:	0f 93       	push	r16
    5b4c:	1f 93       	push	r17
    5b4e:	df 93       	push	r29
    5b50:	cf 93       	push	r28
    5b52:	0f 92       	push	r0
    5b54:	cd b7       	in	r28, 0x3d	; 61
    5b56:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_THRESH_INACT, 1, &_b);  
    5b58:	63 e5       	ldi	r22, 0x53	; 83
    5b5a:	70 e0       	ldi	r23, 0x00	; 0
    5b5c:	45 e2       	ldi	r20, 0x25	; 37
    5b5e:	21 e0       	ldi	r18, 0x01	; 1
    5b60:	30 e0       	ldi	r19, 0x00	; 0
    5b62:	8e 01       	movw	r16, r28
    5b64:	0f 5f       	subi	r16, 0xFF	; 255
    5b66:	1f 4f       	sbci	r17, 0xFF	; 255
    5b68:	44 dd       	rcall	.-1400   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5b6a:	89 81       	ldd	r24, Y+1	; 0x01
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	0f 90       	pop	r0
    5b70:	cf 91       	pop	r28
    5b72:	df 91       	pop	r29
    5b74:	1f 91       	pop	r17
    5b76:	0f 91       	pop	r16
    5b78:	08 95       	ret

00005b7a <_ZN13Accelerometer20getActivityThresholdEv>:
  byte _b = byte (activityThreshold);
  writeTo(DEVICE, ADXL345_THRESH_ACT, _b);  
}

// Gets the THRESH_ACT byte
int Accelerometer::getActivityThreshold() {
    5b7a:	0f 93       	push	r16
    5b7c:	1f 93       	push	r17
    5b7e:	df 93       	push	r29
    5b80:	cf 93       	push	r28
    5b82:	0f 92       	push	r0
    5b84:	cd b7       	in	r28, 0x3d	; 61
    5b86:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_THRESH_ACT, 1, &_b);  
    5b88:	63 e5       	ldi	r22, 0x53	; 83
    5b8a:	70 e0       	ldi	r23, 0x00	; 0
    5b8c:	44 e2       	ldi	r20, 0x24	; 36
    5b8e:	21 e0       	ldi	r18, 0x01	; 1
    5b90:	30 e0       	ldi	r19, 0x00	; 0
    5b92:	8e 01       	movw	r16, r28
    5b94:	0f 5f       	subi	r16, 0xFF	; 255
    5b96:	1f 4f       	sbci	r17, 0xFF	; 255
    5b98:	2c dd       	rcall	.-1448   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	0f 90       	pop	r0
    5ba0:	cf 91       	pop	r28
    5ba2:	df 91       	pop	r29
    5ba4:	1f 91       	pop	r17
    5ba6:	0f 91       	pop	r16
    5ba8:	08 95       	ret

00005baa <_ZN13Accelerometer18getDoubleTapWindowEv>:
  byte _b = byte (doubleTapWindow);
  writeTo(DEVICE, ADXL345_WINDOW, _b);  
}

// Gets the Window register
int Accelerometer::getDoubleTapWindow() {
    5baa:	0f 93       	push	r16
    5bac:	1f 93       	push	r17
    5bae:	df 93       	push	r29
    5bb0:	cf 93       	push	r28
    5bb2:	0f 92       	push	r0
    5bb4:	cd b7       	in	r28, 0x3d	; 61
    5bb6:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_WINDOW, 1, &_b);  
    5bb8:	63 e5       	ldi	r22, 0x53	; 83
    5bba:	70 e0       	ldi	r23, 0x00	; 0
    5bbc:	43 e2       	ldi	r20, 0x23	; 35
    5bbe:	21 e0       	ldi	r18, 0x01	; 1
    5bc0:	30 e0       	ldi	r19, 0x00	; 0
    5bc2:	8e 01       	movw	r16, r28
    5bc4:	0f 5f       	subi	r16, 0xFF	; 255
    5bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc8:	14 dd       	rcall	.-1496   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	0f 90       	pop	r0
    5bd0:	cf 91       	pop	r28
    5bd2:	df 91       	pop	r29
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	08 95       	ret

00005bda <_ZN13Accelerometer19getDoubleTapLatencyEv>:
  byte _b = byte (doubleTapLatency);
  writeTo(DEVICE, ADXL345_LATENT, _b);  
}

// Gets the Latent value
int Accelerometer::getDoubleTapLatency() {
    5bda:	0f 93       	push	r16
    5bdc:	1f 93       	push	r17
    5bde:	df 93       	push	r29
    5be0:	cf 93       	push	r28
    5be2:	0f 92       	push	r0
    5be4:	cd b7       	in	r28, 0x3d	; 61
    5be6:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_LATENT, 1, &_b);  
    5be8:	63 e5       	ldi	r22, 0x53	; 83
    5bea:	70 e0       	ldi	r23, 0x00	; 0
    5bec:	42 e2       	ldi	r20, 0x22	; 34
    5bee:	21 e0       	ldi	r18, 0x01	; 1
    5bf0:	30 e0       	ldi	r19, 0x00	; 0
    5bf2:	8e 01       	movw	r16, r28
    5bf4:	0f 5f       	subi	r16, 0xFF	; 255
    5bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf8:	fc dc       	rcall	.-1544   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5bfa:	89 81       	ldd	r24, Y+1	; 0x01
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	0f 90       	pop	r0
    5c00:	cf 91       	pop	r28
    5c02:	df 91       	pop	r29
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	08 95       	ret

00005c0a <_ZN13Accelerometer14getTapDurationEv>:
  byte _b = byte (tapDuration);
  writeTo(DEVICE, ADXL345_DUR, _b);  
}

// Gets the DUR byte
int Accelerometer::getTapDuration() {
    5c0a:	0f 93       	push	r16
    5c0c:	1f 93       	push	r17
    5c0e:	df 93       	push	r29
    5c10:	cf 93       	push	r28
    5c12:	0f 92       	push	r0
    5c14:	cd b7       	in	r28, 0x3d	; 61
    5c16:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_DUR, 1, &_b);  
    5c18:	63 e5       	ldi	r22, 0x53	; 83
    5c1a:	70 e0       	ldi	r23, 0x00	; 0
    5c1c:	41 e2       	ldi	r20, 0x21	; 33
    5c1e:	21 e0       	ldi	r18, 0x01	; 1
    5c20:	30 e0       	ldi	r19, 0x00	; 0
    5c22:	8e 01       	movw	r16, r28
    5c24:	0f 5f       	subi	r16, 0xFF	; 255
    5c26:	1f 4f       	sbci	r17, 0xFF	; 255
    5c28:	e4 dc       	rcall	.-1592   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5c2a:	89 81       	ldd	r24, Y+1	; 0x01
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	0f 90       	pop	r0
    5c30:	cf 91       	pop	r28
    5c32:	df 91       	pop	r29
    5c34:	1f 91       	pop	r17
    5c36:	0f 91       	pop	r16
    5c38:	08 95       	ret

00005c3a <_ZN13Accelerometer13getAxisOffsetEPiS0_S0_>:
  writeTo(DEVICE, ADXL345_OFSY, byte (y));  
  writeTo(DEVICE, ADXL345_OFSZ, byte (z));  
}

// Gets the OFSX, OFSY and OFSZ bytes
void Accelerometer::getAxisOffset(int* x, int* y, int*z) {
    5c3a:	6f 92       	push	r6
    5c3c:	7f 92       	push	r7
    5c3e:	8f 92       	push	r8
    5c40:	9f 92       	push	r9
    5c42:	af 92       	push	r10
    5c44:	bf 92       	push	r11
    5c46:	cf 92       	push	r12
    5c48:	df 92       	push	r13
    5c4a:	ef 92       	push	r14
    5c4c:	ff 92       	push	r15
    5c4e:	0f 93       	push	r16
    5c50:	1f 93       	push	r17
    5c52:	df 93       	push	r29
    5c54:	cf 93       	push	r28
    5c56:	0f 92       	push	r0
    5c58:	cd b7       	in	r28, 0x3d	; 61
    5c5a:	de b7       	in	r29, 0x3e	; 62
    5c5c:	6c 01       	movw	r12, r24
    5c5e:	5b 01       	movw	r10, r22
    5c60:	4a 01       	movw	r8, r20
    5c62:	39 01       	movw	r6, r18
  byte _b;
  readFrom(DEVICE, ADXL345_OFSX, 1, &_b);  
    5c64:	63 e5       	ldi	r22, 0x53	; 83
    5c66:	70 e0       	ldi	r23, 0x00	; 0
    5c68:	4e e1       	ldi	r20, 0x1E	; 30
    5c6a:	21 e0       	ldi	r18, 0x01	; 1
    5c6c:	30 e0       	ldi	r19, 0x00	; 0
    5c6e:	7e 01       	movw	r14, r28
    5c70:	08 94       	sec
    5c72:	e1 1c       	adc	r14, r1
    5c74:	f1 1c       	adc	r15, r1
    5c76:	87 01       	movw	r16, r14
    5c78:	bc dc       	rcall	.-1672   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  *x = int (_b);
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	f5 01       	movw	r30, r10
    5c7e:	80 83       	st	Z, r24
    5c80:	11 82       	std	Z+1, r1	; 0x01
  readFrom(DEVICE, ADXL345_OFSY, 1, &_b);  
    5c82:	c6 01       	movw	r24, r12
    5c84:	63 e5       	ldi	r22, 0x53	; 83
    5c86:	70 e0       	ldi	r23, 0x00	; 0
    5c88:	4f e1       	ldi	r20, 0x1F	; 31
    5c8a:	21 e0       	ldi	r18, 0x01	; 1
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
    5c8e:	b1 dc       	rcall	.-1694   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  *y = int (_b);
    5c90:	89 81       	ldd	r24, Y+1	; 0x01
    5c92:	f4 01       	movw	r30, r8
    5c94:	80 83       	st	Z, r24
    5c96:	11 82       	std	Z+1, r1	; 0x01
  readFrom(DEVICE, ADXL345_OFSZ, 1, &_b);  
    5c98:	c6 01       	movw	r24, r12
    5c9a:	63 e5       	ldi	r22, 0x53	; 83
    5c9c:	70 e0       	ldi	r23, 0x00	; 0
    5c9e:	40 e2       	ldi	r20, 0x20	; 32
    5ca0:	21 e0       	ldi	r18, 0x01	; 1
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	a6 dc       	rcall	.-1716   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  *z = int (_b);
    5ca6:	89 81       	ldd	r24, Y+1	; 0x01
    5ca8:	f3 01       	movw	r30, r6
    5caa:	80 83       	st	Z, r24
    5cac:	11 82       	std	Z+1, r1	; 0x01
}
    5cae:	0f 90       	pop	r0
    5cb0:	cf 91       	pop	r28
    5cb2:	df 91       	pop	r29
    5cb4:	1f 91       	pop	r17
    5cb6:	0f 91       	pop	r16
    5cb8:	ff 90       	pop	r15
    5cba:	ef 90       	pop	r14
    5cbc:	df 90       	pop	r13
    5cbe:	cf 90       	pop	r12
    5cc0:	bf 90       	pop	r11
    5cc2:	af 90       	pop	r10
    5cc4:	9f 90       	pop	r9
    5cc6:	8f 90       	pop	r8
    5cc8:	7f 90       	pop	r7
    5cca:	6f 90       	pop	r6
    5ccc:	08 95       	ret

00005cce <_ZN13Accelerometer15getTapThresholdEv>:
}

// Gets the THRESH_TAP byte value
// return value is comprised between 0 and 255
// the scale factor is 62.5 mg/LSB
int Accelerometer::getTapThreshold() {
    5cce:	0f 93       	push	r16
    5cd0:	1f 93       	push	r17
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	0f 92       	push	r0
    5cd8:	cd b7       	in	r28, 0x3d	; 61
    5cda:	de b7       	in	r29, 0x3e	; 62
  byte _b;
  readFrom(DEVICE, ADXL345_THRESH_TAP, 1, &_b);  
    5cdc:	63 e5       	ldi	r22, 0x53	; 83
    5cde:	70 e0       	ldi	r23, 0x00	; 0
    5ce0:	4d e1       	ldi	r20, 0x1D	; 29
    5ce2:	21 e0       	ldi	r18, 0x01	; 1
    5ce4:	30 e0       	ldi	r19, 0x00	; 0
    5ce6:	8e 01       	movw	r16, r28
    5ce8:	0f 5f       	subi	r16, 0xFF	; 255
    5cea:	1f 4f       	sbci	r17, 0xFF	; 255
    5cec:	82 dc       	rcall	.-1788   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  return int (_b);
}
    5cee:	89 81       	ldd	r24, Y+1	; 0x01
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	0f 90       	pop	r0
    5cf4:	cf 91       	pop	r28
    5cf6:	df 91       	pop	r29
    5cf8:	1f 91       	pop	r17
    5cfa:	0f 91       	pop	r16
    5cfc:	08 95       	ret

00005cfe <_ZN13Accelerometer15setRangeSettingEi>:
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
  *rangeSetting = _b & 0B00000011;
}

// Sets the range setting, possible values are: 2, 4, 8, 16
void Accelerometer::setRangeSetting(int val) {
    5cfe:	cf 92       	push	r12
    5d00:	df 92       	push	r13
    5d02:	ff 92       	push	r15
    5d04:	0f 93       	push	r16
    5d06:	1f 93       	push	r17
    5d08:	df 93       	push	r29
    5d0a:	cf 93       	push	r28
    5d0c:	0f 92       	push	r0
    5d0e:	cd b7       	in	r28, 0x3d	; 61
    5d10:	de b7       	in	r29, 0x3e	; 62
    5d12:	6c 01       	movw	r12, r24
  byte _s;
  byte _b;

  switch (val) {
    5d14:	68 30       	cpi	r22, 0x08	; 8
    5d16:	71 05       	cpc	r23, r1
    5d18:	59 f0       	breq	.+22     	; 0x5d30 <_ZN13Accelerometer15setRangeSettingEi+0x32>
    5d1a:	60 31       	cpi	r22, 0x10	; 16
    5d1c:	71 05       	cpc	r23, r1
    5d1e:	59 f0       	breq	.+22     	; 0x5d36 <_ZN13Accelerometer15setRangeSettingEi+0x38>
    5d20:	64 30       	cpi	r22, 0x04	; 4
    5d22:	71 05       	cpc	r23, r1
    5d24:	19 f4       	brne	.+6      	; 0x5d2c <_ZN13Accelerometer15setRangeSettingEi+0x2e>
    5d26:	ff 24       	eor	r15, r15
    5d28:	f3 94       	inc	r15
    5d2a:	07 c0       	rjmp	.+14     	; 0x5d3a <_ZN13Accelerometer15setRangeSettingEi+0x3c>
    5d2c:	ff 24       	eor	r15, r15
    5d2e:	05 c0       	rjmp	.+10     	; 0x5d3a <_ZN13Accelerometer15setRangeSettingEi+0x3c>
    5d30:	32 e0       	ldi	r19, 0x02	; 2
    5d32:	f3 2e       	mov	r15, r19
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <_ZN13Accelerometer15setRangeSettingEi+0x3c>
  case 4:  
    _s = 0B00000001;
    break;
  case 8:  
    _s = 0B00000010;
    break;
    5d36:	23 e0       	ldi	r18, 0x03	; 3
    5d38:	f2 2e       	mov	r15, r18
    _s = 0B00000011;
    break;
  default: 
    _s = 0B00000000;
  }
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
    5d3a:	c6 01       	movw	r24, r12
    5d3c:	63 e5       	ldi	r22, 0x53	; 83
    5d3e:	70 e0       	ldi	r23, 0x00	; 0
    5d40:	41 e3       	ldi	r20, 0x31	; 49
    5d42:	21 e0       	ldi	r18, 0x01	; 1
    5d44:	30 e0       	ldi	r19, 0x00	; 0
    5d46:	8e 01       	movw	r16, r28
    5d48:	0f 5f       	subi	r16, 0xFF	; 255
    5d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d4c:	52 dc       	rcall	.-1884   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  _s |= (_b & 0B11101100);
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
    5d50:	8c 7e       	andi	r24, 0xEC	; 236
    5d52:	f8 2a       	or	r15, r24
  writeTo(DEVICE, ADXL345_DATA_FORMAT, _s);
    5d54:	c6 01       	movw	r24, r12
    5d56:	63 e5       	ldi	r22, 0x53	; 83
    5d58:	70 e0       	ldi	r23, 0x00	; 0
    5d5a:	41 e3       	ldi	r20, 0x31	; 49
    5d5c:	2f 2d       	mov	r18, r15
    5d5e:	97 db       	rcall	.-2258   	; 0x548e <_ZN13Accelerometer7writeToEihh>
}
    5d60:	0f 90       	pop	r0
    5d62:	cf 91       	pop	r28
    5d64:	df 91       	pop	r29
    5d66:	1f 91       	pop	r17
    5d68:	0f 91       	pop	r16
    5d6a:	ff 90       	pop	r15
    5d6c:	df 90       	pop	r13
    5d6e:	cf 90       	pop	r12
    5d70:	08 95       	ret

00005d72 <_ZN13Accelerometer15getRangeSettingEPh>:
  Wire.endTransmission();         // end transmission
}

// Gets the range setting and return it into rangeSetting
// it can be 2, 4, 8 or 16
void Accelerometer::getRangeSetting(byte* rangeSetting) {
    5d72:	ef 92       	push	r14
    5d74:	ff 92       	push	r15
    5d76:	0f 93       	push	r16
    5d78:	1f 93       	push	r17
    5d7a:	df 93       	push	r29
    5d7c:	cf 93       	push	r28
    5d7e:	0f 92       	push	r0
    5d80:	cd b7       	in	r28, 0x3d	; 61
    5d82:	de b7       	in	r29, 0x3e	; 62
    5d84:	7b 01       	movw	r14, r22
  byte _b;
  readFrom(DEVICE, ADXL345_DATA_FORMAT, 1, &_b);
    5d86:	63 e5       	ldi	r22, 0x53	; 83
    5d88:	70 e0       	ldi	r23, 0x00	; 0
    5d8a:	41 e3       	ldi	r20, 0x31	; 49
    5d8c:	21 e0       	ldi	r18, 0x01	; 1
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	8e 01       	movw	r16, r28
    5d92:	0f 5f       	subi	r16, 0xFF	; 255
    5d94:	1f 4f       	sbci	r17, 0xFF	; 255
    5d96:	2d dc       	rcall	.-1958   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>
  *rangeSetting = _b & 0B00000011;
    5d98:	89 81       	ldd	r24, Y+1	; 0x01
    5d9a:	83 70       	andi	r24, 0x03	; 3
    5d9c:	f7 01       	movw	r30, r14
    5d9e:	80 83       	st	Z, r24
}
    5da0:	0f 90       	pop	r0
    5da2:	cf 91       	pop	r28
    5da4:	df 91       	pop	r29
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	08 95       	ret

00005db0 <_ZN13Accelerometer9readAccelEPiS0_S0_>:
  writeTo(DEVICE, ADXL345_POWER_CTL, 16);
  writeTo(DEVICE, ADXL345_POWER_CTL, 8); 
}

// Reads the acceleration into three variable x, y and z
void Accelerometer::readAccel(int* x, int* y, int* z) {
    5db0:	8f 92       	push	r8
    5db2:	9f 92       	push	r9
    5db4:	af 92       	push	r10
    5db6:	bf 92       	push	r11
    5db8:	cf 92       	push	r12
    5dba:	df 92       	push	r13
    5dbc:	ef 92       	push	r14
    5dbe:	ff 92       	push	r15
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	7c 01       	movw	r14, r24
    5dc6:	6b 01       	movw	r12, r22
    5dc8:	5a 01       	movw	r10, r20
    5dca:	49 01       	movw	r8, r18
  readFrom(DEVICE, ADXL345_DATAX0, TO_READ, _buff); //read the acceleration data from the ADXL345
    5dcc:	63 e5       	ldi	r22, 0x53	; 83
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	42 e3       	ldi	r20, 0x32	; 50
    5dd2:	26 e0       	ldi	r18, 0x06	; 6
    5dd4:	30 e0       	ldi	r19, 0x00	; 0
    5dd6:	87 01       	movw	r16, r14
    5dd8:	0c dc       	rcall	.-2024   	; 0x55f2 <_ZN13Accelerometer8readFromEihiPh>

  // each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
  // thus we are converting both bytes in to one int
  *x = (((int)_buff[1]) << 8) | _buff[0];   
    5dda:	f7 01       	movw	r30, r14
    5ddc:	91 81       	ldd	r25, Z+1	; 0x01
    5dde:	80 e0       	ldi	r24, 0x00	; 0
    5de0:	20 81       	ld	r18, Z
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	82 2b       	or	r24, r18
    5de6:	93 2b       	or	r25, r19
    5de8:	f6 01       	movw	r30, r12
    5dea:	91 83       	std	Z+1, r25	; 0x01
    5dec:	80 83       	st	Z, r24
  *y = (((int)_buff[3]) << 8) | _buff[2];
    5dee:	f7 01       	movw	r30, r14
    5df0:	93 81       	ldd	r25, Z+3	; 0x03
    5df2:	80 e0       	ldi	r24, 0x00	; 0
    5df4:	22 81       	ldd	r18, Z+2	; 0x02
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	82 2b       	or	r24, r18
    5dfa:	93 2b       	or	r25, r19
    5dfc:	f5 01       	movw	r30, r10
    5dfe:	91 83       	std	Z+1, r25	; 0x01
    5e00:	80 83       	st	Z, r24
  *z = (((int)_buff[5]) << 8) | _buff[4];
    5e02:	f7 01       	movw	r30, r14
    5e04:	95 81       	ldd	r25, Z+5	; 0x05
    5e06:	80 e0       	ldi	r24, 0x00	; 0
    5e08:	24 81       	ldd	r18, Z+4	; 0x04
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	82 2b       	or	r24, r18
    5e0e:	93 2b       	or	r25, r19
    5e10:	f4 01       	movw	r30, r8
    5e12:	91 83       	std	Z+1, r25	; 0x01
    5e14:	80 83       	st	Z, r24
}
    5e16:	1f 91       	pop	r17
    5e18:	0f 91       	pop	r16
    5e1a:	ff 90       	pop	r15
    5e1c:	ef 90       	pop	r14
    5e1e:	df 90       	pop	r13
    5e20:	cf 90       	pop	r12
    5e22:	bf 90       	pop	r11
    5e24:	af 90       	pop	r10
    5e26:	9f 90       	pop	r9
    5e28:	8f 90       	pop	r8
    5e2a:	08 95       	ret

00005e2c <_ZN13Accelerometer7powerOnEv>:

Accelerometer::Accelerometer() {

}

void Accelerometer::powerOn() {
    5e2c:	0f 93       	push	r16
    5e2e:	1f 93       	push	r17
    5e30:	8c 01       	movw	r16, r24
  Wire.begin();        // join i2c bus (address optional for master)
    5e32:	85 ee       	ldi	r24, 0xE5	; 229
    5e34:	97 e0       	ldi	r25, 0x07	; 7
    5e36:	6f d8       	rcall	.-3874   	; 0x4f16 <_ZN7WireI2C5beginEv>
  //Turning on the ADXL345
  writeTo(DEVICE, ADXL345_POWER_CTL, 0);      
    5e38:	c8 01       	movw	r24, r16
    5e3a:	63 e5       	ldi	r22, 0x53	; 83
    5e3c:	70 e0       	ldi	r23, 0x00	; 0
    5e3e:	4d e2       	ldi	r20, 0x2D	; 45
    5e40:	20 e0       	ldi	r18, 0x00	; 0
    5e42:	25 db       	rcall	.-2486   	; 0x548e <_ZN13Accelerometer7writeToEihh>
  writeTo(DEVICE, ADXL345_POWER_CTL, 16);
    5e44:	c8 01       	movw	r24, r16
    5e46:	63 e5       	ldi	r22, 0x53	; 83
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	4d e2       	ldi	r20, 0x2D	; 45
    5e4c:	20 e1       	ldi	r18, 0x10	; 16
    5e4e:	1f db       	rcall	.-2498   	; 0x548e <_ZN13Accelerometer7writeToEihh>
  writeTo(DEVICE, ADXL345_POWER_CTL, 8); 
    5e50:	c8 01       	movw	r24, r16
    5e52:	63 e5       	ldi	r22, 0x53	; 83
    5e54:	70 e0       	ldi	r23, 0x00	; 0
    5e56:	4d e2       	ldi	r20, 0x2D	; 45
    5e58:	28 e0       	ldi	r18, 0x08	; 8
    5e5a:	19 db       	rcall	.-2510   	; 0x548e <_ZN13Accelerometer7writeToEihh>
}
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	08 95       	ret

00005e62 <_ZN7ITG320010getDevAddrEv>:

byte ITG3200::getDevAddr() {
  /*readmem(WHO_AM_I, 1, &_buff[0]); 
  return _buff[0];  */
  return _dev_address;
}
    5e62:	fc 01       	movw	r30, r24
    5e64:	82 89       	ldd	r24, Z+18	; 0x12
    5e66:	08 95       	ret

00005e68 <_ZN7ITG320014setScaleFactorEfffb>:

void ITG3200::readGyroRaw( int *_GyroXYZ){
  readGyroRaw(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
}

void ITG3200::setScaleFactor(float _Xcoeff, float _Ycoeff, float _Zcoeff, bool _Radians) { 
    5e68:	2f 92       	push	r2
    5e6a:	3f 92       	push	r3
    5e6c:	4f 92       	push	r4
    5e6e:	5f 92       	push	r5
    5e70:	6f 92       	push	r6
    5e72:	7f 92       	push	r7
    5e74:	8f 92       	push	r8
    5e76:	9f 92       	push	r9
    5e78:	af 92       	push	r10
    5e7a:	cf 92       	push	r12
    5e7c:	df 92       	push	r13
    5e7e:	ef 92       	push	r14
    5e80:	ff 92       	push	r15
    5e82:	0f 93       	push	r16
    5e84:	1f 93       	push	r17
    5e86:	cf 93       	push	r28
    5e88:	df 93       	push	r29
    5e8a:	ec 01       	movw	r28, r24
    5e8c:	38 01       	movw	r6, r16
    5e8e:	49 01       	movw	r8, r18
  scalefactor[0] = 14.375 * _Xcoeff;   
    5e90:	cb 01       	movw	r24, r22
    5e92:	ba 01       	movw	r22, r20
    5e94:	20 e0       	ldi	r18, 0x00	; 0
    5e96:	30 e0       	ldi	r19, 0x00	; 0
    5e98:	46 e6       	ldi	r20, 0x66	; 102
    5e9a:	51 e4       	ldi	r21, 0x41	; 65
    5e9c:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    5ea0:	1b 01       	movw	r2, r22
    5ea2:	2c 01       	movw	r4, r24
    5ea4:	68 83       	st	Y, r22
    5ea6:	79 83       	std	Y+1, r23	; 0x01
    5ea8:	8a 83       	std	Y+2, r24	; 0x02
    5eaa:	9b 83       	std	Y+3, r25	; 0x03
  scalefactor[1] = 14.375 * _Ycoeff;
    5eac:	c4 01       	movw	r24, r8
    5eae:	b3 01       	movw	r22, r6
    5eb0:	20 e0       	ldi	r18, 0x00	; 0
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	46 e6       	ldi	r20, 0x66	; 102
    5eb6:	51 e4       	ldi	r21, 0x41	; 65
    5eb8:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    5ebc:	3b 01       	movw	r6, r22
    5ebe:	4c 01       	movw	r8, r24
    5ec0:	6c 83       	std	Y+4, r22	; 0x04
    5ec2:	7d 83       	std	Y+5, r23	; 0x05
    5ec4:	8e 83       	std	Y+6, r24	; 0x06
    5ec6:	9f 83       	std	Y+7, r25	; 0x07
  scalefactor[2] = 14.375 * _Zcoeff;    
    5ec8:	c7 01       	movw	r24, r14
    5eca:	b6 01       	movw	r22, r12
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	30 e0       	ldi	r19, 0x00	; 0
    5ed0:	46 e6       	ldi	r20, 0x66	; 102
    5ed2:	51 e4       	ldi	r21, 0x41	; 65
    5ed4:	0e 94 f6 3c 	call	0x79ec	; 0x79ec <__mulsf3>
    5ed8:	7b 01       	movw	r14, r22
    5eda:	8c 01       	movw	r16, r24
    5edc:	68 87       	std	Y+8, r22	; 0x08
    5ede:	79 87       	std	Y+9, r23	; 0x09
    5ee0:	8a 87       	std	Y+10, r24	; 0x0a
    5ee2:	9b 87       	std	Y+11, r25	; 0x0b
    
  if (_Radians){
    5ee4:	aa 20       	and	r10, r10
    5ee6:	21 f1       	breq	.+72     	; 0x5f30 <_ZN7ITG320014setScaleFactorEfffb+0xc8>
    scalefactor[0] /= 0.0174532925;//0.0174532925 = PI/180
    5ee8:	c2 01       	movw	r24, r4
    5eea:	b1 01       	movw	r22, r2
    5eec:	25 e3       	ldi	r18, 0x35	; 53
    5eee:	3a ef       	ldi	r19, 0xFA	; 250
    5ef0:	4e e8       	ldi	r20, 0x8E	; 142
    5ef2:	5c e3       	ldi	r21, 0x3C	; 60
    5ef4:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    5ef8:	68 83       	st	Y, r22
    5efa:	79 83       	std	Y+1, r23	; 0x01
    5efc:	8a 83       	std	Y+2, r24	; 0x02
    5efe:	9b 83       	std	Y+3, r25	; 0x03
    scalefactor[1] /= 0.0174532925;
    5f00:	c4 01       	movw	r24, r8
    5f02:	b3 01       	movw	r22, r6
    5f04:	25 e3       	ldi	r18, 0x35	; 53
    5f06:	3a ef       	ldi	r19, 0xFA	; 250
    5f08:	4e e8       	ldi	r20, 0x8E	; 142
    5f0a:	5c e3       	ldi	r21, 0x3C	; 60
    5f0c:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    5f10:	6c 83       	std	Y+4, r22	; 0x04
    5f12:	7d 83       	std	Y+5, r23	; 0x05
    5f14:	8e 83       	std	Y+6, r24	; 0x06
    5f16:	9f 83       	std	Y+7, r25	; 0x07
    scalefactor[2] /= 0.0174532925;
    5f18:	c8 01       	movw	r24, r16
    5f1a:	b7 01       	movw	r22, r14
    5f1c:	25 e3       	ldi	r18, 0x35	; 53
    5f1e:	3a ef       	ldi	r19, 0xFA	; 250
    5f20:	4e e8       	ldi	r20, 0x8E	; 142
    5f22:	5c e3       	ldi	r21, 0x3C	; 60
    5f24:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    5f28:	68 87       	std	Y+8, r22	; 0x08
    5f2a:	79 87       	std	Y+9, r23	; 0x09
    5f2c:	8a 87       	std	Y+10, r24	; 0x0a
    5f2e:	9b 87       	std	Y+11, r25	; 0x0b
  }
}
    5f30:	df 91       	pop	r29
    5f32:	cf 91       	pop	r28
    5f34:	1f 91       	pop	r17
    5f36:	0f 91       	pop	r16
    5f38:	ff 90       	pop	r15
    5f3a:	ef 90       	pop	r14
    5f3c:	df 90       	pop	r13
    5f3e:	cf 90       	pop	r12
    5f40:	af 90       	pop	r10
    5f42:	9f 90       	pop	r9
    5f44:	8f 90       	pop	r8
    5f46:	7f 90       	pop	r7
    5f48:	6f 90       	pop	r6
    5f4a:	5f 90       	pop	r5
    5f4c:	4f 90       	pop	r4
    5f4e:	3f 90       	pop	r3
    5f50:	2f 90       	pop	r2
    5f52:	08 95       	ret

00005f54 <_ZN7ITG3200C1Ev>:

#ifndef USE_LUFA
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
    5f54:	af 92       	push	r10
    5f56:	cf 92       	push	r12
    5f58:	df 92       	push	r13
    5f5a:	ef 92       	push	r14
    5f5c:	ff 92       	push	r15
    5f5e:	0f 93       	push	r16
    5f60:	1f 93       	push	r17
    5f62:	fc 01       	movw	r30, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int _Xoffset, int _Yoffset, int _Zoffset) {
  offsets[0] = _Xoffset;
    5f64:	15 86       	std	Z+13, r1	; 0x0d
    5f66:	14 86       	std	Z+12, r1	; 0x0c
  offsets[1] = _Yoffset;
    5f68:	17 86       	std	Z+15, r1	; 0x0f
    5f6a:	16 86       	std	Z+14, r1	; 0x0e
  offsets[2] = _Zoffset;
    5f6c:	11 8a       	std	Z+17, r1	; 0x11
    5f6e:	10 8a       	std	Z+16, r1	; 0x10
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
  setOffsets(0,0,0);
  setScaleFactor(1.0, 1.0, 1.0, false);  // true to change readGyro output to radians
    5f70:	40 e0       	ldi	r20, 0x00	; 0
    5f72:	50 e0       	ldi	r21, 0x00	; 0
    5f74:	60 e8       	ldi	r22, 0x80	; 128
    5f76:	7f e3       	ldi	r23, 0x3F	; 63
    5f78:	8a 01       	movw	r16, r20
    5f7a:	9b 01       	movw	r18, r22
    5f7c:	6a 01       	movw	r12, r20
    5f7e:	7b 01       	movw	r14, r22
    5f80:	aa 24       	eor	r10, r10
    5f82:	72 df       	rcall	.-284    	; 0x5e68 <_ZN7ITG320014setScaleFactorEfffb>
  //Wire.begin();       //Normally this code is called from setup() at user code
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}
    5f84:	1f 91       	pop	r17
    5f86:	0f 91       	pop	r16
    5f88:	ff 90       	pop	r15
    5f8a:	ef 90       	pop	r14
    5f8c:	df 90       	pop	r13
    5f8e:	cf 90       	pop	r12
    5f90:	af 90       	pop	r10
    5f92:	08 95       	ret

00005f94 <_ZN7ITG3200C2Ev>:

#ifndef USE_LUFA
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
    5f94:	af 92       	push	r10
    5f96:	cf 92       	push	r12
    5f98:	df 92       	push	r13
    5f9a:	ef 92       	push	r14
    5f9c:	ff 92       	push	r15
    5f9e:	0f 93       	push	r16
    5fa0:	1f 93       	push	r17
    5fa2:	fc 01       	movw	r30, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int _Xoffset, int _Yoffset, int _Zoffset) {
  offsets[0] = _Xoffset;
    5fa4:	15 86       	std	Z+13, r1	; 0x0d
    5fa6:	14 86       	std	Z+12, r1	; 0x0c
  offsets[1] = _Yoffset;
    5fa8:	17 86       	std	Z+15, r1	; 0x0f
    5faa:	16 86       	std	Z+14, r1	; 0x0e
  offsets[2] = _Zoffset;
    5fac:	11 8a       	std	Z+17, r1	; 0x11
    5fae:	10 8a       	std	Z+16, r1	; 0x10
    #include <Wire.h>
#endif

ITG3200::ITG3200() {
  setOffsets(0,0,0);
  setScaleFactor(1.0, 1.0, 1.0, false);  // true to change readGyro output to radians
    5fb0:	40 e0       	ldi	r20, 0x00	; 0
    5fb2:	50 e0       	ldi	r21, 0x00	; 0
    5fb4:	60 e8       	ldi	r22, 0x80	; 128
    5fb6:	7f e3       	ldi	r23, 0x3F	; 63
    5fb8:	8a 01       	movw	r16, r20
    5fba:	9b 01       	movw	r18, r22
    5fbc:	6a 01       	movw	r12, r20
    5fbe:	7b 01       	movw	r14, r22
    5fc0:	aa 24       	eor	r10, r10
    5fc2:	52 df       	rcall	.-348    	; 0x5e68 <_ZN7ITG320014setScaleFactorEfffb>
  //Wire.begin();       //Normally this code is called from setup() at user code
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}
    5fc4:	1f 91       	pop	r17
    5fc6:	0f 91       	pop	r16
    5fc8:	ff 90       	pop	r15
    5fca:	ef 90       	pop	r14
    5fcc:	df 90       	pop	r13
    5fce:	cf 90       	pop	r12
    5fd0:	af 90       	pop	r10
    5fd2:	08 95       	ret

00005fd4 <_ZN7ITG320010setOffsetsEiii>:
    scalefactor[1] /= 0.0174532925;
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int _Xoffset, int _Yoffset, int _Zoffset) {
    5fd4:	fc 01       	movw	r30, r24
  offsets[0] = _Xoffset;
    5fd6:	75 87       	std	Z+13, r23	; 0x0d
    5fd8:	64 87       	std	Z+12, r22	; 0x0c
  offsets[1] = _Yoffset;
    5fda:	57 87       	std	Z+15, r21	; 0x0f
    5fdc:	46 87       	std	Z+14, r20	; 0x0e
  offsets[2] = _Zoffset;
    5fde:	31 8b       	std	Z+17, r19	; 0x11
    5fe0:	20 8b       	std	Z+16, r18	; 0x10
}
    5fe2:	08 95       	ret

00005fe4 <_ZN7ITG32008writememEhh>:
void ITG3200::setClockSource(byte _CLKsource) {   
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_CLK_SEL) | _CLKsource)); 
}

void ITG3200::writemem(uint8_t _addr, uint8_t _val) {
    5fe4:	ef 92       	push	r14
    5fe6:	ff 92       	push	r15
    5fe8:	0f 93       	push	r16
    5fea:	1f 93       	push	r17
    5fec:	f6 2e       	mov	r15, r22
    5fee:	e4 2e       	mov	r14, r20
  Wire.beginTransmission(_dev_address);   // start transmission to device 
    5ff0:	05 ee       	ldi	r16, 0xE5	; 229
    5ff2:	17 e0       	ldi	r17, 0x07	; 7
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	62 89       	ldd	r22, Z+18	; 0x12
    5ff8:	c8 01       	movw	r24, r16
    5ffa:	70 e0       	ldi	r23, 0x00	; 0
    5ffc:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(_addr); // send register address
    6000:	c8 01       	movw	r24, r16
    6002:	6f 2d       	mov	r22, r15
    6004:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.send(_val); // send value to write
    6008:	c8 01       	movw	r24, r16
    600a:	6e 2d       	mov	r22, r14
    600c:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.endTransmission(); // end transmission
    6010:	c8 01       	movw	r24, r16
    6012:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>
}
    6016:	1f 91       	pop	r17
    6018:	0f 91       	pop	r16
    601a:	ff 90       	pop	r15
    601c:	ef 90       	pop	r14
    601e:	08 95       	ret

00006020 <_ZN7ITG320016setSampleRateDivEh>:
byte ITG3200::getSampleRateDiv() {
  readmem(SMPLRT_DIV, 1, &_buff[0]);
  return _buff[0];
}

void ITG3200::setSampleRateDiv(byte _SampleRate) {
    6020:	46 2f       	mov	r20, r22
  writemem(SMPLRT_DIV, _SampleRate);
    6022:	65 e1       	ldi	r22, 0x15	; 21
}
    6024:	df cf       	rjmp	.-66     	; 0x5fe4 <_ZN7ITG32008writememEhh>

00006026 <_ZN7ITG320010setDevAddrEj>:
  /*readmem(WHO_AM_I, 1, &_buff[0]); 
  return _buff[0];  */
  return _dev_address;
}

void ITG3200::setDevAddr(unsigned int  _addr) {
    6026:	ff 92       	push	r15
    6028:	0f 93       	push	r16
    602a:	1f 93       	push	r17
    602c:	8c 01       	movw	r16, r24
    602e:	f6 2e       	mov	r15, r22
  writemem(WHO_AM_I, _addr); 
    6030:	60 e0       	ldi	r22, 0x00	; 0
    6032:	4f 2d       	mov	r20, r15
    6034:	d7 df       	rcall	.-82     	; 0x5fe4 <_ZN7ITG32008writememEhh>
  _dev_address = _addr;
    6036:	f8 01       	movw	r30, r16
    6038:	f2 8a       	std	Z+18, r15	; 0x12
}
    603a:	1f 91       	pop	r17
    603c:	0f 91       	pop	r16
    603e:	ff 90       	pop	r15
    6040:	08 95       	ret

00006042 <_ZN7ITG32007readmemEhhPh>:
  Wire.send(_addr); // send register address
  Wire.send(_val); // send value to write
  Wire.endTransmission(); // end transmission
}

void ITG3200::readmem(uint8_t _addr, uint8_t _nbytes, uint8_t __buff[]) {
    6042:	ef 92       	push	r14
    6044:	ff 92       	push	r15
    6046:	0f 93       	push	r16
    6048:	1f 93       	push	r17
    604a:	cf 93       	push	r28
    604c:	df 93       	push	r29
    604e:	8c 01       	movw	r16, r24
    6050:	f6 2e       	mov	r15, r22
    6052:	e4 2e       	mov	r14, r20
    6054:	e9 01       	movw	r28, r18
  Wire.beginTransmission(_dev_address); // start transmission to device 
    6056:	fc 01       	movw	r30, r24
    6058:	62 89       	ldd	r22, Z+18	; 0x12
    605a:	85 ee       	ldi	r24, 0xE5	; 229
    605c:	97 e0       	ldi	r25, 0x07	; 7
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.send(_addr); // sends register address to read from
    6064:	85 ee       	ldi	r24, 0xE5	; 229
    6066:	97 e0       	ldi	r25, 0x07	; 7
    6068:	6f 2d       	mov	r22, r15
    606a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <_ZN7WireI2C4sendEh>
  Wire.endTransmission(); // end transmission
    606e:	85 ee       	ldi	r24, 0xE5	; 229
    6070:	97 e0       	ldi	r25, 0x07	; 7
    6072:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>
  
  Wire.beginTransmission(_dev_address); // start transmission to device 
    6076:	f8 01       	movw	r30, r16
    6078:	62 89       	ldd	r22, Z+18	; 0x12
    607a:	85 ee       	ldi	r24, 0xE5	; 229
    607c:	97 e0       	ldi	r25, 0x07	; 7
    607e:	70 e0       	ldi	r23, 0x00	; 0
    6080:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_ZN7WireI2C17beginTransmissionEi>
  Wire.requestFrom(_dev_address, _nbytes);// send data n-bytes read
    6084:	f8 01       	movw	r30, r16
    6086:	62 89       	ldd	r22, Z+18	; 0x12
    6088:	85 ee       	ldi	r24, 0xE5	; 229
    608a:	97 e0       	ldi	r25, 0x07	; 7
    608c:	70 e0       	ldi	r23, 0x00	; 0
    608e:	4e 2d       	mov	r20, r14
    6090:	50 e0       	ldi	r21, 0x00	; 0
    6092:	0e 94 91 27 	call	0x4f22	; 0x4f22 <_ZN7WireI2C11requestFromEii>
    6096:	00 e0       	ldi	r16, 0x00	; 0
    6098:	09 c0       	rjmp	.+18     	; 0x60ac <_ZN7ITG32007readmemEhhPh+0x6a>
  uint8_t i = 0; 
  while (Wire.available()) {
    __buff[i] = Wire.receive(); // receive DATA
    609a:	85 ee       	ldi	r24, 0xE5	; 229
    609c:	97 e0       	ldi	r25, 0x07	; 7
    609e:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <_ZN7WireI2C7receiveEv>
    60a2:	fe 01       	movw	r30, r28
    60a4:	e0 0f       	add	r30, r16
    60a6:	f1 1d       	adc	r31, r1
    60a8:	80 83       	st	Z, r24
    i++;
    60aa:	0f 5f       	subi	r16, 0xFF	; 255
  Wire.endTransmission(); // end transmission
  
  Wire.beginTransmission(_dev_address); // start transmission to device 
  Wire.requestFrom(_dev_address, _nbytes);// send data n-bytes read
  uint8_t i = 0; 
  while (Wire.available()) {
    60ac:	85 ee       	ldi	r24, 0xE5	; 229
    60ae:	97 e0       	ldi	r25, 0x07	; 7
    60b0:	0e 94 92 27 	call	0x4f24	; 0x4f24 <_ZN7WireI2C9availableEv>
    60b4:	88 23       	and	r24, r24
    60b6:	89 f7       	brne	.-30     	; 0x609a <_ZN7ITG32007readmemEhhPh+0x58>
    __buff[i] = Wire.receive(); // receive DATA
    i++;
  }
  Wire.endTransmission(); // end transmission
    60b8:	85 ee       	ldi	r24, 0xE5	; 229
    60ba:	97 e0       	ldi	r25, 0x07	; 7
    60bc:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZN7WireI2C15endTransmissionEv>
}
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	1f 91       	pop	r17
    60c6:	0f 91       	pop	r16
    60c8:	ff 90       	pop	r15
    60ca:	ef 90       	pop	r14
    60cc:	08 95       	ret

000060ce <_ZN7ITG320014setClockSourceEh>:
byte ITG3200::getClockSource() {  
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_CLK_SEL);
}

void ITG3200::setClockSource(byte _CLKsource) {   
    60ce:	ff 92       	push	r15
    60d0:	0f 93       	push	r16
    60d2:	1f 93       	push	r17
    60d4:	8c 01       	movw	r16, r24
    60d6:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    60d8:	9c 01       	movw	r18, r24
    60da:	2d 5e       	subi	r18, 0xED	; 237
    60dc:	3f 4f       	sbci	r19, 0xFF	; 255
    60de:	6e e3       	ldi	r22, 0x3E	; 62
    60e0:	41 e0       	ldi	r20, 0x01	; 1
    60e2:	af df       	rcall	.-162    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_CLK_SEL) | _CLKsource)); 
    60e4:	f8 01       	movw	r30, r16
    60e6:	43 89       	ldd	r20, Z+19	; 0x13
    60e8:	48 7f       	andi	r20, 0xF8	; 248
    60ea:	4f 29       	or	r20, r15
    60ec:	c8 01       	movw	r24, r16
    60ee:	6e e3       	ldi	r22, 0x3E	; 62
    60f0:	79 df       	rcall	.-270    	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    60f2:	1f 91       	pop	r17
    60f4:	0f 91       	pop	r16
    60f6:	ff 90       	pop	r15
    60f8:	08 95       	ret

000060fa <_ZN7ITG320014getClockSourceEv>:
void ITG3200::setZgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_ZG) | _Status << 3));
}

byte ITG3200::getClockSource() {  
    60fa:	0f 93       	push	r16
    60fc:	1f 93       	push	r17
    60fe:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    6100:	9c 01       	movw	r18, r24
    6102:	2d 5e       	subi	r18, 0xED	; 237
    6104:	3f 4f       	sbci	r19, 0xFF	; 255
    6106:	6e e3       	ldi	r22, 0x3E	; 62
    6108:	41 e0       	ldi	r20, 0x01	; 1
    610a:	9b df       	rcall	.-202    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    610c:	f8 01       	movw	r30, r16
    610e:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & PWRMGM_CLK_SEL);
}
    6110:	87 70       	andi	r24, 0x07	; 7
    6112:	1f 91       	pop	r17
    6114:	0f 91       	pop	r16
    6116:	08 95       	ret

00006118 <_ZN7ITG320015setZgyroStandbyEb>:
void ITG3200::setYgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_YG) | _Status << 4));
}

void ITG3200::setZgyroStandby(bool _Status) {
    6118:	ff 92       	push	r15
    611a:	0f 93       	push	r16
    611c:	1f 93       	push	r17
    611e:	8c 01       	movw	r16, r24
    6120:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6122:	9c 01       	movw	r18, r24
    6124:	2d 5e       	subi	r18, 0xED	; 237
    6126:	3f 4f       	sbci	r19, 0xFF	; 255
    6128:	6e e3       	ldi	r22, 0x3E	; 62
    612a:	41 e0       	ldi	r20, 0x01	; 1
    612c:	8a df       	rcall	.-236    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_ZG) | _Status << 3));
    612e:	ff 0c       	add	r15, r15
    6130:	ff 0c       	add	r15, r15
    6132:	ff 0c       	add	r15, r15
    6134:	f8 01       	movw	r30, r16
    6136:	43 89       	ldd	r20, Z+19	; 0x13
    6138:	48 70       	andi	r20, 0x08	; 8
    613a:	4f 29       	or	r20, r15
    613c:	c8 01       	movw	r24, r16
    613e:	6e e3       	ldi	r22, 0x3E	; 62
    6140:	51 df       	rcall	.-350    	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6142:	1f 91       	pop	r17
    6144:	0f 91       	pop	r16
    6146:	ff 90       	pop	r15
    6148:	08 95       	ret

0000614a <_ZN7ITG320015setYgyroStandbyEb>:
void ITG3200::setXgyroStandby(bool _Status) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_XG) | _Status << 5));
}

void ITG3200::setYgyroStandby(bool _Status) {
    614a:	ff 92       	push	r15
    614c:	0f 93       	push	r16
    614e:	1f 93       	push	r17
    6150:	8c 01       	movw	r16, r24
    6152:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6154:	9c 01       	movw	r18, r24
    6156:	2d 5e       	subi	r18, 0xED	; 237
    6158:	3f 4f       	sbci	r19, 0xFF	; 255
    615a:	6e e3       	ldi	r22, 0x3E	; 62
    615c:	41 e0       	ldi	r20, 0x01	; 1
    615e:	71 df       	rcall	.-286    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_YG) | _Status << 4));
    6160:	f2 94       	swap	r15
    6162:	80 ef       	ldi	r24, 0xF0	; 240
    6164:	f8 22       	and	r15, r24
    6166:	f8 01       	movw	r30, r16
    6168:	43 89       	ldd	r20, Z+19	; 0x13
    616a:	40 71       	andi	r20, 0x10	; 16
    616c:	4f 29       	or	r20, r15
    616e:	c8 01       	movw	r24, r16
    6170:	6e e3       	ldi	r22, 0x3E	; 62
    6172:	38 df       	rcall	.-400    	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6174:	1f 91       	pop	r17
    6176:	0f 91       	pop	r16
    6178:	ff 90       	pop	r15
    617a:	08 95       	ret

0000617c <_ZN7ITG320015setXgyroStandbyEb>:
bool ITG3200::isZgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_ZG) >> 3;
}

void ITG3200::setXgyroStandby(bool _Status) {
    617c:	ff 92       	push	r15
    617e:	0f 93       	push	r16
    6180:	1f 93       	push	r17
    6182:	8c 01       	movw	r16, r24
    6184:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6186:	9c 01       	movw	r18, r24
    6188:	2d 5e       	subi	r18, 0xED	; 237
    618a:	3f 4f       	sbci	r19, 0xFF	; 255
    618c:	6e e3       	ldi	r22, 0x3E	; 62
    618e:	41 e0       	ldi	r20, 0x01	; 1
    6190:	58 df       	rcall	.-336    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & PWRMGM_STBY_XG) | _Status << 5));
    6192:	f2 94       	swap	r15
    6194:	ff 0c       	add	r15, r15
    6196:	90 ee       	ldi	r25, 0xE0	; 224
    6198:	f9 22       	and	r15, r25
    619a:	f8 01       	movw	r30, r16
    619c:	43 89       	ldd	r20, Z+19	; 0x13
    619e:	40 72       	andi	r20, 0x20	; 32
    61a0:	4f 29       	or	r20, r15
    61a2:	c8 01       	movw	r24, r16
    61a4:	6e e3       	ldi	r22, 0x3E	; 62
    61a6:	1e df       	rcall	.-452    	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    61a8:	1f 91       	pop	r17
    61aa:	0f 91       	pop	r16
    61ac:	ff 90       	pop	r15
    61ae:	08 95       	ret

000061b0 <_ZN7ITG320014isZgyroStandbyEv>:
bool ITG3200::isYgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_YG) >> 4;
}

bool ITG3200::isZgyroStandby() {
    61b0:	0f 93       	push	r16
    61b2:	1f 93       	push	r17
    61b4:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    61b6:	9c 01       	movw	r18, r24
    61b8:	2d 5e       	subi	r18, 0xED	; 237
    61ba:	3f 4f       	sbci	r19, 0xFF	; 255
    61bc:	6e e3       	ldi	r22, 0x3E	; 62
    61be:	41 e0       	ldi	r20, 0x01	; 1
    61c0:	40 df       	rcall	.-384    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    61c2:	90 e0       	ldi	r25, 0x00	; 0
    61c4:	f8 01       	movw	r30, r16
    61c6:	83 89       	ldd	r24, Z+19	; 0x13
    61c8:	83 fd       	sbrc	r24, 3
    61ca:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_ZG) >> 3;
}
    61cc:	89 2f       	mov	r24, r25
    61ce:	1f 91       	pop	r17
    61d0:	0f 91       	pop	r16
    61d2:	08 95       	ret

000061d4 <_ZN7ITG320014isYgyroStandbyEv>:
bool ITG3200::isXgyroStandby() {
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_STBY_XG) >> 5;
}

bool ITG3200::isYgyroStandby() {
    61d4:	0f 93       	push	r16
    61d6:	1f 93       	push	r17
    61d8:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    61da:	9c 01       	movw	r18, r24
    61dc:	2d 5e       	subi	r18, 0xED	; 237
    61de:	3f 4f       	sbci	r19, 0xFF	; 255
    61e0:	6e e3       	ldi	r22, 0x3E	; 62
    61e2:	41 e0       	ldi	r20, 0x01	; 1
    61e4:	2e df       	rcall	.-420    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	f8 01       	movw	r30, r16
    61ea:	83 89       	ldd	r24, Z+19	; 0x13
    61ec:	84 fd       	sbrc	r24, 4
    61ee:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_YG) >> 4;
}
    61f0:	89 2f       	mov	r24, r25
    61f2:	1f 91       	pop	r17
    61f4:	0f 91       	pop	r16
    61f6:	08 95       	ret

000061f8 <_ZN7ITG320014isXgyroStandbyEv>:
void ITG3200::setPowerMode(bool _State) {
  readmem(PWR_MGM, 1, &_buff[0]);
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_SLEEP) | _State << 6));  
}

bool ITG3200::isXgyroStandby() {
    61f8:	0f 93       	push	r16
    61fa:	1f 93       	push	r17
    61fc:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    61fe:	9c 01       	movw	r18, r24
    6200:	2d 5e       	subi	r18, 0xED	; 237
    6202:	3f 4f       	sbci	r19, 0xFF	; 255
    6204:	6e e3       	ldi	r22, 0x3E	; 62
    6206:	41 e0       	ldi	r20, 0x01	; 1
    6208:	1c df       	rcall	.-456    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	f8 01       	movw	r30, r16
    620e:	83 89       	ldd	r24, Z+19	; 0x13
    6210:	85 fd       	sbrc	r24, 5
    6212:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_STBY_XG) >> 5;
}
    6214:	89 2f       	mov	r24, r25
    6216:	1f 91       	pop	r17
    6218:	0f 91       	pop	r16
    621a:	08 95       	ret

0000621c <_ZN7ITG320012setPowerModeEb>:
bool ITG3200::isLowPower() {   
  readmem(PWR_MGM, 1, &_buff[0]);
  return (_buff[0] & PWRMGM_SLEEP) >> 6;
}
  
void ITG3200::setPowerMode(bool _State) {
    621c:	ff 92       	push	r15
    621e:	0f 93       	push	r16
    6220:	1f 93       	push	r17
    6222:	8c 01       	movw	r16, r24
    6224:	f6 2e       	mov	r15, r22
  readmem(PWR_MGM, 1, &_buff[0]);
    6226:	9c 01       	movw	r18, r24
    6228:	2d 5e       	subi	r18, 0xED	; 237
    622a:	3f 4f       	sbci	r19, 0xFF	; 255
    622c:	6e e3       	ldi	r22, 0x3E	; 62
    622e:	41 e0       	ldi	r20, 0x01	; 1
    6230:	08 df       	rcall	.-496    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(PWR_MGM, ((_buff[0] & ~PWRMGM_SLEEP) | _State << 6));  
    6232:	f2 94       	swap	r15
    6234:	ff 0c       	add	r15, r15
    6236:	ff 0c       	add	r15, r15
    6238:	20 ec       	ldi	r18, 0xC0	; 192
    623a:	f2 22       	and	r15, r18
    623c:	f8 01       	movw	r30, r16
    623e:	43 89       	ldd	r20, Z+19	; 0x13
    6240:	4f 7b       	andi	r20, 0xBF	; 191
    6242:	4f 29       	or	r20, r15
    6244:	c8 01       	movw	r24, r16
    6246:	6e e3       	ldi	r22, 0x3E	; 62
    6248:	cd de       	rcall	.-614    	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    624a:	1f 91       	pop	r17
    624c:	0f 91       	pop	r16
    624e:	ff 90       	pop	r15
    6250:	08 95       	ret

00006252 <_ZN7ITG320010isLowPowerEv>:
void ITG3200::reset() {     
  writemem(PWR_MGM, PWRMGM_HRESET); 
  delay(GYROSTART_UP_DELAY); //gyro startup 
}

bool ITG3200::isLowPower() {   
    6252:	0f 93       	push	r16
    6254:	1f 93       	push	r17
    6256:	8c 01       	movw	r16, r24
  readmem(PWR_MGM, 1, &_buff[0]);
    6258:	9c 01       	movw	r18, r24
    625a:	2d 5e       	subi	r18, 0xED	; 237
    625c:	3f 4f       	sbci	r19, 0xFF	; 255
    625e:	6e e3       	ldi	r22, 0x3E	; 62
    6260:	41 e0       	ldi	r20, 0x01	; 1
    6262:	ef de       	rcall	.-546    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	f8 01       	movw	r30, r16
    6268:	83 89       	ldd	r24, Z+19	; 0x13
    626a:	86 fd       	sbrc	r24, 6
    626c:	91 e0       	ldi	r25, 0x01	; 1
  return (_buff[0] & PWRMGM_SLEEP) >> 6;
}
    626e:	89 2f       	mov	r24, r25
    6270:	1f 91       	pop	r17
    6272:	0f 91       	pop	r16
    6274:	08 95       	ret

00006276 <_ZN7ITG320011readGyroRawEPiS0_S0_>:
void ITG3200::readTemp(float *_Temp) {
  readmem(TEMP_OUT,2,_buff);
  *_Temp = 35 + ((_buff[0] << 8 | _buff[1]) + 13200) / 280.0;    // F=C*9/5+32
}

void ITG3200::readGyroRaw( int *_GyroX, int *_GyroY, int *_GyroZ){
    6276:	af 92       	push	r10
    6278:	bf 92       	push	r11
    627a:	cf 92       	push	r12
    627c:	df 92       	push	r13
    627e:	ef 92       	push	r14
    6280:	ff 92       	push	r15
    6282:	0f 93       	push	r16
    6284:	1f 93       	push	r17
    6286:	8c 01       	movw	r16, r24
    6288:	7b 01       	movw	r14, r22
    628a:	6a 01       	movw	r12, r20
    628c:	59 01       	movw	r10, r18
  readmem(GYRO_XOUT, 6, _buff);
    628e:	9c 01       	movw	r18, r24
    6290:	2d 5e       	subi	r18, 0xED	; 237
    6292:	3f 4f       	sbci	r19, 0xFF	; 255
    6294:	6d e1       	ldi	r22, 0x1D	; 29
    6296:	46 e0       	ldi	r20, 0x06	; 6
    6298:	d4 de       	rcall	.-600    	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  *_GyroX = _buff[0] << 8 | _buff[1];
    629a:	f8 01       	movw	r30, r16
    629c:	93 89       	ldd	r25, Z+19	; 0x13
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	24 89       	ldd	r18, Z+20	; 0x14
    62a2:	30 e0       	ldi	r19, 0x00	; 0
    62a4:	82 2b       	or	r24, r18
    62a6:	93 2b       	or	r25, r19
    62a8:	f7 01       	movw	r30, r14
    62aa:	91 83       	std	Z+1, r25	; 0x01
    62ac:	80 83       	st	Z, r24
  *_GyroY = _buff[2] << 8 | _buff[3]; 
    62ae:	f8 01       	movw	r30, r16
    62b0:	95 89       	ldd	r25, Z+21	; 0x15
    62b2:	80 e0       	ldi	r24, 0x00	; 0
    62b4:	26 89       	ldd	r18, Z+22	; 0x16
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	82 2b       	or	r24, r18
    62ba:	93 2b       	or	r25, r19
    62bc:	f6 01       	movw	r30, r12
    62be:	91 83       	std	Z+1, r25	; 0x01
    62c0:	80 83       	st	Z, r24
  *_GyroZ = _buff[4] << 8 | _buff[5];
    62c2:	f8 01       	movw	r30, r16
    62c4:	97 89       	ldd	r25, Z+23	; 0x17
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	20 8d       	ldd	r18, Z+24	; 0x18
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	82 2b       	or	r24, r18
    62ce:	93 2b       	or	r25, r19
    62d0:	f5 01       	movw	r30, r10
    62d2:	91 83       	std	Z+1, r25	; 0x01
    62d4:	80 83       	st	Z, r24
}
    62d6:	1f 91       	pop	r17
    62d8:	0f 91       	pop	r16
    62da:	ff 90       	pop	r15
    62dc:	ef 90       	pop	r14
    62de:	df 90       	pop	r13
    62e0:	cf 90       	pop	r12
    62e2:	bf 90       	pop	r11
    62e4:	af 90       	pop	r10
    62e6:	08 95       	ret

000062e8 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>:
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
}

void ITG3200::readGyroRawCal(int *_GyroX, int *_GyroY, int *_GyroZ) { 
    62e8:	af 92       	push	r10
    62ea:	bf 92       	push	r11
    62ec:	cf 92       	push	r12
    62ee:	df 92       	push	r13
    62f0:	ef 92       	push	r14
    62f2:	ff 92       	push	r15
    62f4:	0f 93       	push	r16
    62f6:	1f 93       	push	r17
    62f8:	6c 01       	movw	r12, r24
    62fa:	8b 01       	movw	r16, r22
    62fc:	7a 01       	movw	r14, r20
    62fe:	59 01       	movw	r10, r18
  readGyroRaw(_GyroX, _GyroY, _GyroZ); 
    6300:	ba df       	rcall	.-140    	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>
  *_GyroX += offsets[0]; 
    6302:	f8 01       	movw	r30, r16
    6304:	80 81       	ld	r24, Z
    6306:	91 81       	ldd	r25, Z+1	; 0x01
    6308:	f6 01       	movw	r30, r12
    630a:	24 85       	ldd	r18, Z+12	; 0x0c
    630c:	35 85       	ldd	r19, Z+13	; 0x0d
    630e:	82 0f       	add	r24, r18
    6310:	93 1f       	adc	r25, r19
    6312:	f8 01       	movw	r30, r16
    6314:	91 83       	std	Z+1, r25	; 0x01
    6316:	80 83       	st	Z, r24
  *_GyroY += offsets[1]; 
    6318:	f7 01       	movw	r30, r14
    631a:	80 81       	ld	r24, Z
    631c:	91 81       	ldd	r25, Z+1	; 0x01
    631e:	f6 01       	movw	r30, r12
    6320:	26 85       	ldd	r18, Z+14	; 0x0e
    6322:	37 85       	ldd	r19, Z+15	; 0x0f
    6324:	82 0f       	add	r24, r18
    6326:	93 1f       	adc	r25, r19
    6328:	f7 01       	movw	r30, r14
    632a:	91 83       	std	Z+1, r25	; 0x01
    632c:	80 83       	st	Z, r24
  *_GyroZ += offsets[2]; 
    632e:	f5 01       	movw	r30, r10
    6330:	80 81       	ld	r24, Z
    6332:	91 81       	ldd	r25, Z+1	; 0x01
    6334:	f6 01       	movw	r30, r12
    6336:	20 89       	ldd	r18, Z+16	; 0x10
    6338:	31 89       	ldd	r19, Z+17	; 0x11
    633a:	82 0f       	add	r24, r18
    633c:	93 1f       	adc	r25, r19
    633e:	f5 01       	movw	r30, r10
    6340:	91 83       	std	Z+1, r25	; 0x01
    6342:	80 83       	st	Z, r24
} 
    6344:	1f 91       	pop	r17
    6346:	0f 91       	pop	r16
    6348:	ff 90       	pop	r15
    634a:	ef 90       	pop	r14
    634c:	df 90       	pop	r13
    634e:	cf 90       	pop	r12
    6350:	bf 90       	pop	r11
    6352:	af 90       	pop	r10
    6354:	08 95       	ret

00006356 <_ZN7ITG32008readGyroEPfS0_S0_>:

void ITG3200::readGyroRawCal(int *_GyroXYZ) { 
  readGyroRawCal(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2); 
} 

void ITG3200::readGyro(float *_GyroX, float *_GyroY, float *_GyroZ){
    6356:	af 92       	push	r10
    6358:	bf 92       	push	r11
    635a:	cf 92       	push	r12
    635c:	df 92       	push	r13
    635e:	ef 92       	push	r14
    6360:	ff 92       	push	r15
    6362:	0f 93       	push	r16
    6364:	1f 93       	push	r17
    6366:	df 93       	push	r29
    6368:	cf 93       	push	r28
    636a:	00 d0       	rcall	.+0      	; 0x636c <_ZN7ITG32008readGyroEPfS0_S0_+0x16>
    636c:	00 d0       	rcall	.+0      	; 0x636e <_ZN7ITG32008readGyroEPfS0_S0_+0x18>
    636e:	00 d0       	rcall	.+0      	; 0x6370 <_ZN7ITG32008readGyroEPfS0_S0_+0x1a>
    6370:	cd b7       	in	r28, 0x3d	; 61
    6372:	de b7       	in	r29, 0x3e	; 62
    6374:	8c 01       	movw	r16, r24
    6376:	7b 01       	movw	r14, r22
    6378:	6a 01       	movw	r12, r20
    637a:	59 01       	movw	r10, r18
  int x, y, z; 
  readGyroRawCal(&x, &y, &z); // x,y,z will contain calibrated integer values from the sensor 
    637c:	be 01       	movw	r22, r28
    637e:	6f 5f       	subi	r22, 0xFF	; 255
    6380:	7f 4f       	sbci	r23, 0xFF	; 255
    6382:	ae 01       	movw	r20, r28
    6384:	4d 5f       	subi	r20, 0xFD	; 253
    6386:	5f 4f       	sbci	r21, 0xFF	; 255
    6388:	9e 01       	movw	r18, r28
    638a:	2b 5f       	subi	r18, 0xFB	; 251
    638c:	3f 4f       	sbci	r19, 0xFF	; 255
    638e:	ac df       	rcall	.-168    	; 0x62e8 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>
  *_GyroX =  x / scalefactor[0]; 
    6390:	69 81       	ldd	r22, Y+1	; 0x01
    6392:	7a 81       	ldd	r23, Y+2	; 0x02
    6394:	88 27       	eor	r24, r24
    6396:	77 fd       	sbrc	r23, 7
    6398:	80 95       	com	r24
    639a:	98 2f       	mov	r25, r24
    639c:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    63a0:	f8 01       	movw	r30, r16
    63a2:	20 81       	ld	r18, Z
    63a4:	31 81       	ldd	r19, Z+1	; 0x01
    63a6:	42 81       	ldd	r20, Z+2	; 0x02
    63a8:	53 81       	ldd	r21, Z+3	; 0x03
    63aa:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    63ae:	f7 01       	movw	r30, r14
    63b0:	60 83       	st	Z, r22
    63b2:	71 83       	std	Z+1, r23	; 0x01
    63b4:	82 83       	std	Z+2, r24	; 0x02
    63b6:	93 83       	std	Z+3, r25	; 0x03
  *_GyroY =  y / scalefactor[1]; 
    63b8:	6b 81       	ldd	r22, Y+3	; 0x03
    63ba:	7c 81       	ldd	r23, Y+4	; 0x04
    63bc:	88 27       	eor	r24, r24
    63be:	77 fd       	sbrc	r23, 7
    63c0:	80 95       	com	r24
    63c2:	98 2f       	mov	r25, r24
    63c4:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    63c8:	f8 01       	movw	r30, r16
    63ca:	24 81       	ldd	r18, Z+4	; 0x04
    63cc:	35 81       	ldd	r19, Z+5	; 0x05
    63ce:	46 81       	ldd	r20, Z+6	; 0x06
    63d0:	57 81       	ldd	r21, Z+7	; 0x07
    63d2:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    63d6:	f6 01       	movw	r30, r12
    63d8:	60 83       	st	Z, r22
    63da:	71 83       	std	Z+1, r23	; 0x01
    63dc:	82 83       	std	Z+2, r24	; 0x02
    63de:	93 83       	std	Z+3, r25	; 0x03
  *_GyroZ =  z / scalefactor[2];     
    63e0:	6d 81       	ldd	r22, Y+5	; 0x05
    63e2:	7e 81       	ldd	r23, Y+6	; 0x06
    63e4:	88 27       	eor	r24, r24
    63e6:	77 fd       	sbrc	r23, 7
    63e8:	80 95       	com	r24
    63ea:	98 2f       	mov	r25, r24
    63ec:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    63f0:	f8 01       	movw	r30, r16
    63f2:	20 85       	ldd	r18, Z+8	; 0x08
    63f4:	31 85       	ldd	r19, Z+9	; 0x09
    63f6:	42 85       	ldd	r20, Z+10	; 0x0a
    63f8:	53 85       	ldd	r21, Z+11	; 0x0b
    63fa:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    63fe:	f5 01       	movw	r30, r10
    6400:	60 83       	st	Z, r22
    6402:	71 83       	std	Z+1, r23	; 0x01
    6404:	82 83       	std	Z+2, r24	; 0x02
    6406:	93 83       	std	Z+3, r25	; 0x03
} 
    6408:	26 96       	adiw	r28, 0x06	; 6
    640a:	0f b6       	in	r0, 0x3f	; 63
    640c:	f8 94       	cli
    640e:	de bf       	out	0x3e, r29	; 62
    6410:	0f be       	out	0x3f, r0	; 63
    6412:	cd bf       	out	0x3d, r28	; 61
    6414:	cf 91       	pop	r28
    6416:	df 91       	pop	r29
    6418:	1f 91       	pop	r17
    641a:	0f 91       	pop	r16
    641c:	ff 90       	pop	r15
    641e:	ef 90       	pop	r14
    6420:	df 90       	pop	r13
    6422:	cf 90       	pop	r12
    6424:	bf 90       	pop	r11
    6426:	af 90       	pop	r10
    6428:	08 95       	ret

0000642a <_ZN7ITG32008readGyroEPf>:

void ITG3200::readGyro(float *_GyroXYZ){
    642a:	ab 01       	movw	r20, r22
  readGyro(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
    642c:	9b 01       	movw	r18, r22
    642e:	28 5f       	subi	r18, 0xF8	; 248
    6430:	3f 4f       	sbci	r19, 0xFF	; 255
    6432:	4c 5f       	subi	r20, 0xFC	; 252
    6434:	5f 4f       	sbci	r21, 0xFF	; 255
}
    6436:	8f cf       	rjmp	.-226    	; 0x6356 <_ZN7ITG32008readGyroEPfS0_S0_>

00006438 <_ZN7ITG320014readGyroRawCalEPi>:
  *_GyroX += offsets[0]; 
  *_GyroY += offsets[1]; 
  *_GyroZ += offsets[2]; 
} 

void ITG3200::readGyroRawCal(int *_GyroXYZ) { 
    6438:	ab 01       	movw	r20, r22
  readGyroRawCal(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2); 
    643a:	9b 01       	movw	r18, r22
    643c:	2c 5f       	subi	r18, 0xFC	; 252
    643e:	3f 4f       	sbci	r19, 0xFF	; 255
    6440:	4e 5f       	subi	r20, 0xFE	; 254
    6442:	5f 4f       	sbci	r21, 0xFF	; 255
} 
    6444:	51 cf       	rjmp	.-350    	; 0x62e8 <_ZN7ITG320014readGyroRawCalEPiS0_S0_>

00006446 <_ZN7ITG320011readGyroRawEPi>:
  *_GyroX = _buff[0] << 8 | _buff[1];
  *_GyroY = _buff[2] << 8 | _buff[3]; 
  *_GyroZ = _buff[4] << 8 | _buff[5];
}

void ITG3200::readGyroRaw( int *_GyroXYZ){
    6446:	ab 01       	movw	r20, r22
  readGyroRaw(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
    6448:	9b 01       	movw	r18, r22
    644a:	2c 5f       	subi	r18, 0xFC	; 252
    644c:	3f 4f       	sbci	r19, 0xFF	; 255
    644e:	4e 5f       	subi	r20, 0xFE	; 254
    6450:	5f 4f       	sbci	r21, 0xFF	; 255
}
    6452:	11 cf       	rjmp	.-478    	; 0x6276 <_ZN7ITG320011readGyroRawEPiS0_S0_>

00006454 <_ZN7ITG32008readTempEPf>:
bool ITG3200::isRawDataReady() {
  readmem(INT_STATUS, 1, &_buff[0]);
  return (_buff[0] & INTSTATUS_RAW_DATA_RDY);
}

void ITG3200::readTemp(float *_Temp) {
    6454:	ef 92       	push	r14
    6456:	ff 92       	push	r15
    6458:	0f 93       	push	r16
    645a:	1f 93       	push	r17
    645c:	8c 01       	movw	r16, r24
    645e:	7b 01       	movw	r14, r22
  readmem(TEMP_OUT,2,_buff);
    6460:	9c 01       	movw	r18, r24
    6462:	2d 5e       	subi	r18, 0xED	; 237
    6464:	3f 4f       	sbci	r19, 0xFF	; 255
    6466:	6b e1       	ldi	r22, 0x1B	; 27
    6468:	42 e0       	ldi	r20, 0x02	; 2
    646a:	eb dd       	rcall	.-1066   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  *_Temp = 35 + ((_buff[0] << 8 | _buff[1]) + 13200) / 280.0;    // F=C*9/5+32
    646c:	f8 01       	movw	r30, r16
    646e:	73 89       	ldd	r23, Z+19	; 0x13
    6470:	60 e0       	ldi	r22, 0x00	; 0
    6472:	24 89       	ldd	r18, Z+20	; 0x14
    6474:	30 e0       	ldi	r19, 0x00	; 0
    6476:	62 2b       	or	r22, r18
    6478:	73 2b       	or	r23, r19
    647a:	60 57       	subi	r22, 0x70	; 112
    647c:	7c 4c       	sbci	r23, 0xCC	; 204
    647e:	88 27       	eor	r24, r24
    6480:	77 fd       	sbrc	r23, 7
    6482:	80 95       	com	r24
    6484:	98 2f       	mov	r25, r24
    6486:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    648a:	20 e0       	ldi	r18, 0x00	; 0
    648c:	30 e0       	ldi	r19, 0x00	; 0
    648e:	4c e8       	ldi	r20, 0x8C	; 140
    6490:	53 e4       	ldi	r21, 0x43	; 67
    6492:	0e 94 a3 3b 	call	0x7746	; 0x7746 <__divsf3>
    6496:	20 e0       	ldi	r18, 0x00	; 0
    6498:	30 e0       	ldi	r19, 0x00	; 0
    649a:	4c e0       	ldi	r20, 0x0C	; 12
    649c:	52 e4       	ldi	r21, 0x42	; 66
    649e:	0e 94 17 3b 	call	0x762e	; 0x762e <__addsf3>
    64a2:	f7 01       	movw	r30, r14
    64a4:	60 83       	st	Z, r22
    64a6:	71 83       	std	Z+1, r23	; 0x01
    64a8:	82 83       	std	Z+2, r24	; 0x02
    64aa:	93 83       	std	Z+3, r25	; 0x03
}
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	ff 90       	pop	r15
    64b2:	ef 90       	pop	r14
    64b4:	08 95       	ret

000064b6 <_ZN7ITG320014isRawDataReadyEv>:
bool ITG3200::isITGReady() {
  readmem(INT_STATUS, 1, &_buff[0]);
  return ((_buff[0] & INTSTATUS_ITG_RDY) >> 2);
}

bool ITG3200::isRawDataReady() {
    64b6:	0f 93       	push	r16
    64b8:	1f 93       	push	r17
    64ba:	8c 01       	movw	r16, r24
  readmem(INT_STATUS, 1, &_buff[0]);
    64bc:	9c 01       	movw	r18, r24
    64be:	2d 5e       	subi	r18, 0xED	; 237
    64c0:	3f 4f       	sbci	r19, 0xFF	; 255
    64c2:	6a e1       	ldi	r22, 0x1A	; 26
    64c4:	41 e0       	ldi	r20, 0x01	; 1
    64c6:	bd dd       	rcall	.-1158   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    64c8:	f8 01       	movw	r30, r16
    64ca:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & INTSTATUS_RAW_DATA_RDY);
}
    64cc:	81 70       	andi	r24, 0x01	; 1
    64ce:	1f 91       	pop	r17
    64d0:	0f 91       	pop	r16
    64d2:	08 95       	ret

000064d4 <_ZN7ITG320010isITGReadyEv>:
void ITG3200::setRawDataReady(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_RAW_RDY_EN) | _State)); 
}

bool ITG3200::isITGReady() {
    64d4:	0f 93       	push	r16
    64d6:	1f 93       	push	r17
    64d8:	8c 01       	movw	r16, r24
  readmem(INT_STATUS, 1, &_buff[0]);
    64da:	9c 01       	movw	r18, r24
    64dc:	2d 5e       	subi	r18, 0xED	; 237
    64de:	3f 4f       	sbci	r19, 0xFF	; 255
    64e0:	6a e1       	ldi	r22, 0x1A	; 26
    64e2:	41 e0       	ldi	r20, 0x01	; 1
    64e4:	ae dd       	rcall	.-1188   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	f8 01       	movw	r30, r16
    64ea:	83 89       	ldd	r24, Z+19	; 0x13
    64ec:	82 fd       	sbrc	r24, 2
    64ee:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTSTATUS_ITG_RDY) >> 2);
}
    64f0:	89 2f       	mov	r24, r25
    64f2:	1f 91       	pop	r17
    64f4:	0f 91       	pop	r16
    64f6:	08 95       	ret

000064f8 <_ZN7ITG320015setRawDataReadyEb>:
bool ITG3200::isRawDataReadyOn() {
  readmem(INT_CFG, 1, &_buff[0]);
  return (_buff[0] & INTCFG_RAW_RDY_EN);
}

void ITG3200::setRawDataReady(bool _State) {
    64f8:	ff 92       	push	r15
    64fa:	0f 93       	push	r16
    64fc:	1f 93       	push	r17
    64fe:	8c 01       	movw	r16, r24
    6500:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    6502:	9c 01       	movw	r18, r24
    6504:	2d 5e       	subi	r18, 0xED	; 237
    6506:	3f 4f       	sbci	r19, 0xFF	; 255
    6508:	67 e1       	ldi	r22, 0x17	; 23
    650a:	41 e0       	ldi	r20, 0x01	; 1
    650c:	9a dd       	rcall	.-1228   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_RAW_RDY_EN) | _State)); 
    650e:	f8 01       	movw	r30, r16
    6510:	43 89       	ldd	r20, Z+19	; 0x13
    6512:	4e 7f       	andi	r20, 0xFE	; 254
    6514:	4f 29       	or	r20, r15
    6516:	c8 01       	movw	r24, r16
    6518:	67 e1       	ldi	r22, 0x17	; 23
    651a:	64 dd       	rcall	.-1336   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    651c:	1f 91       	pop	r17
    651e:	0f 91       	pop	r16
    6520:	ff 90       	pop	r15
    6522:	08 95       	ret

00006524 <_ZN7ITG320016isRawDataReadyOnEv>:
void ITG3200::setITGReady(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ITG_RDY_EN) | _State << 2)); 
}

bool ITG3200::isRawDataReadyOn() {
    6524:	0f 93       	push	r16
    6526:	1f 93       	push	r17
    6528:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    652a:	9c 01       	movw	r18, r24
    652c:	2d 5e       	subi	r18, 0xED	; 237
    652e:	3f 4f       	sbci	r19, 0xFF	; 255
    6530:	67 e1       	ldi	r22, 0x17	; 23
    6532:	41 e0       	ldi	r20, 0x01	; 1
    6534:	86 dd       	rcall	.-1268   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6536:	f8 01       	movw	r30, r16
    6538:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & INTCFG_RAW_RDY_EN);
}
    653a:	81 70       	andi	r24, 0x01	; 1
    653c:	1f 91       	pop	r17
    653e:	0f 91       	pop	r16
    6540:	08 95       	ret

00006542 <_ZN7ITG320011setITGReadyEb>:
bool ITG3200::isITGReadyOn() {   
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_ITG_RDY_EN) >> 2);
}

void ITG3200::setITGReady(bool _State) {
    6542:	ff 92       	push	r15
    6544:	0f 93       	push	r16
    6546:	1f 93       	push	r17
    6548:	8c 01       	movw	r16, r24
    654a:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    654c:	9c 01       	movw	r18, r24
    654e:	2d 5e       	subi	r18, 0xED	; 237
    6550:	3f 4f       	sbci	r19, 0xFF	; 255
    6552:	67 e1       	ldi	r22, 0x17	; 23
    6554:	41 e0       	ldi	r20, 0x01	; 1
    6556:	75 dd       	rcall	.-1302   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ITG_RDY_EN) | _State << 2)); 
    6558:	ff 0c       	add	r15, r15
    655a:	ff 0c       	add	r15, r15
    655c:	f8 01       	movw	r30, r16
    655e:	43 89       	ldd	r20, Z+19	; 0x13
    6560:	4b 7f       	andi	r20, 0xFB	; 251
    6562:	4f 29       	or	r20, r15
    6564:	c8 01       	movw	r24, r16
    6566:	67 e1       	ldi	r22, 0x17	; 23
    6568:	3d dd       	rcall	.-1414   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    656a:	1f 91       	pop	r17
    656c:	0f 91       	pop	r16
    656e:	ff 90       	pop	r15
    6570:	08 95       	ret

00006572 <_ZN7ITG320012isITGReadyOnEv>:
void ITG3200::setLatchClearMode(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_INT_ANYRD_2CLEAR) | _State << 4)); 
}

bool ITG3200::isITGReadyOn() {   
    6572:	0f 93       	push	r16
    6574:	1f 93       	push	r17
    6576:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6578:	9c 01       	movw	r18, r24
    657a:	2d 5e       	subi	r18, 0xED	; 237
    657c:	3f 4f       	sbci	r19, 0xFF	; 255
    657e:	67 e1       	ldi	r22, 0x17	; 23
    6580:	41 e0       	ldi	r20, 0x01	; 1
    6582:	5f dd       	rcall	.-1346   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	f8 01       	movw	r30, r16
    6588:	83 89       	ldd	r24, Z+19	; 0x13
    658a:	82 fd       	sbrc	r24, 2
    658c:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_ITG_RDY_EN) >> 2);
}
    658e:	89 2f       	mov	r24, r25
    6590:	1f 91       	pop	r17
    6592:	0f 91       	pop	r16
    6594:	08 95       	ret

00006596 <_ZN7ITG320017setLatchClearModeEb>:
bool ITG3200::isAnyRegClrMode() {    
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_INT_ANYRD_2CLEAR) >> 4);
}

void ITG3200::setLatchClearMode(bool _State) {
    6596:	ff 92       	push	r15
    6598:	0f 93       	push	r16
    659a:	1f 93       	push	r17
    659c:	8c 01       	movw	r16, r24
    659e:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    65a0:	9c 01       	movw	r18, r24
    65a2:	2d 5e       	subi	r18, 0xED	; 237
    65a4:	3f 4f       	sbci	r19, 0xFF	; 255
    65a6:	67 e1       	ldi	r22, 0x17	; 23
    65a8:	41 e0       	ldi	r20, 0x01	; 1
    65aa:	4b dd       	rcall	.-1386   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_INT_ANYRD_2CLEAR) | _State << 4)); 
    65ac:	f2 94       	swap	r15
    65ae:	30 ef       	ldi	r19, 0xF0	; 240
    65b0:	f3 22       	and	r15, r19
    65b2:	f8 01       	movw	r30, r16
    65b4:	43 89       	ldd	r20, Z+19	; 0x13
    65b6:	4f 7e       	andi	r20, 0xEF	; 239
    65b8:	4f 29       	or	r20, r15
    65ba:	c8 01       	movw	r24, r16
    65bc:	67 e1       	ldi	r22, 0x17	; 23
    65be:	12 dd       	rcall	.-1500   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    65c0:	1f 91       	pop	r17
    65c2:	0f 91       	pop	r16
    65c4:	ff 90       	pop	r15
    65c6:	08 95       	ret

000065c8 <_ZN7ITG320015isAnyRegClrModeEv>:
void ITG3200::setLatchMode(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_LATCH_INT_EN) | _State << 5)); 
}

bool ITG3200::isAnyRegClrMode() {    
    65c8:	0f 93       	push	r16
    65ca:	1f 93       	push	r17
    65cc:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    65ce:	9c 01       	movw	r18, r24
    65d0:	2d 5e       	subi	r18, 0xED	; 237
    65d2:	3f 4f       	sbci	r19, 0xFF	; 255
    65d4:	67 e1       	ldi	r22, 0x17	; 23
    65d6:	41 e0       	ldi	r20, 0x01	; 1
    65d8:	34 dd       	rcall	.-1432   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	f8 01       	movw	r30, r16
    65de:	83 89       	ldd	r24, Z+19	; 0x13
    65e0:	84 fd       	sbrc	r24, 4
    65e2:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_INT_ANYRD_2CLEAR) >> 4);
}
    65e4:	89 2f       	mov	r24, r25
    65e6:	1f 91       	pop	r17
    65e8:	0f 91       	pop	r16
    65ea:	08 95       	ret

000065ec <_ZN7ITG320012setLatchModeEb>:
bool ITG3200::isLatchUntilCleared() {    
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_LATCH_INT_EN) >> 5);
}

void ITG3200::setLatchMode(bool _State) {
    65ec:	ff 92       	push	r15
    65ee:	0f 93       	push	r16
    65f0:	1f 93       	push	r17
    65f2:	8c 01       	movw	r16, r24
    65f4:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    65f6:	9c 01       	movw	r18, r24
    65f8:	2d 5e       	subi	r18, 0xED	; 237
    65fa:	3f 4f       	sbci	r19, 0xFF	; 255
    65fc:	67 e1       	ldi	r22, 0x17	; 23
    65fe:	41 e0       	ldi	r20, 0x01	; 1
    6600:	20 dd       	rcall	.-1472   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_LATCH_INT_EN) | _State << 5)); 
    6602:	f2 94       	swap	r15
    6604:	ff 0c       	add	r15, r15
    6606:	40 ee       	ldi	r20, 0xE0	; 224
    6608:	f4 22       	and	r15, r20
    660a:	f8 01       	movw	r30, r16
    660c:	43 89       	ldd	r20, Z+19	; 0x13
    660e:	4f 7d       	andi	r20, 0xDF	; 223
    6610:	4f 29       	or	r20, r15
    6612:	c8 01       	movw	r24, r16
    6614:	67 e1       	ldi	r22, 0x17	; 23
    6616:	e6 dc       	rcall	.-1588   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6618:	1f 91       	pop	r17
    661a:	0f 91       	pop	r16
    661c:	ff 90       	pop	r15
    661e:	08 95       	ret

00006620 <_ZN7ITG320019isLatchUntilClearedEv>:
void ITG3200::setINTDriveType(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_OPEN) | _State << 6)); 
}

bool ITG3200::isLatchUntilCleared() {    
    6620:	0f 93       	push	r16
    6622:	1f 93       	push	r17
    6624:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6626:	9c 01       	movw	r18, r24
    6628:	2d 5e       	subi	r18, 0xED	; 237
    662a:	3f 4f       	sbci	r19, 0xFF	; 255
    662c:	67 e1       	ldi	r22, 0x17	; 23
    662e:	41 e0       	ldi	r20, 0x01	; 1
    6630:	08 dd       	rcall	.-1520   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	f8 01       	movw	r30, r16
    6636:	83 89       	ldd	r24, Z+19	; 0x13
    6638:	85 fd       	sbrc	r24, 5
    663a:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_LATCH_INT_EN) >> 5);
}
    663c:	89 2f       	mov	r24, r25
    663e:	1f 91       	pop	r17
    6640:	0f 91       	pop	r16
    6642:	08 95       	ret

00006644 <_ZN7ITG320015setINTDriveTypeEb>:
bool ITG3200::isINTOpenDrain() {  
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_OPEN) >> 6);
}

void ITG3200::setINTDriveType(bool _State) {
    6644:	ff 92       	push	r15
    6646:	0f 93       	push	r16
    6648:	1f 93       	push	r17
    664a:	8c 01       	movw	r16, r24
    664c:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    664e:	9c 01       	movw	r18, r24
    6650:	2d 5e       	subi	r18, 0xED	; 237
    6652:	3f 4f       	sbci	r19, 0xFF	; 255
    6654:	67 e1       	ldi	r22, 0x17	; 23
    6656:	41 e0       	ldi	r20, 0x01	; 1
    6658:	f4 dc       	rcall	.-1560   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_OPEN) | _State << 6)); 
    665a:	f2 94       	swap	r15
    665c:	ff 0c       	add	r15, r15
    665e:	ff 0c       	add	r15, r15
    6660:	50 ec       	ldi	r21, 0xC0	; 192
    6662:	f5 22       	and	r15, r21
    6664:	f8 01       	movw	r30, r16
    6666:	43 89       	ldd	r20, Z+19	; 0x13
    6668:	4f 7b       	andi	r20, 0xBF	; 191
    666a:	4f 29       	or	r20, r15
    666c:	c8 01       	movw	r24, r16
    666e:	67 e1       	ldi	r22, 0x17	; 23
    6670:	b9 dc       	rcall	.-1678   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6672:	1f 91       	pop	r17
    6674:	0f 91       	pop	r16
    6676:	ff 90       	pop	r15
    6678:	08 95       	ret

0000667a <_ZN7ITG320014isINTOpenDrainEv>:
void ITG3200::setINTLogiclvl(bool _State) {
  readmem(INT_CFG, 1, &_buff[0]);
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ACTL) | (_State << 7))); 
}

bool ITG3200::isINTOpenDrain() {  
    667a:	0f 93       	push	r16
    667c:	1f 93       	push	r17
    667e:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    6680:	9c 01       	movw	r18, r24
    6682:	2d 5e       	subi	r18, 0xED	; 237
    6684:	3f 4f       	sbci	r19, 0xFF	; 255
    6686:	67 e1       	ldi	r22, 0x17	; 23
    6688:	41 e0       	ldi	r20, 0x01	; 1
    668a:	db dc       	rcall	.-1610   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	f8 01       	movw	r30, r16
    6690:	83 89       	ldd	r24, Z+19	; 0x13
    6692:	86 fd       	sbrc	r24, 6
    6694:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_OPEN) >> 6);
}
    6696:	89 2f       	mov	r24, r25
    6698:	1f 91       	pop	r17
    669a:	0f 91       	pop	r16
    669c:	08 95       	ret

0000669e <_ZN7ITG320014setINTLogiclvlEb>:
bool ITG3200::isINTActiveOnLow() {  
  readmem(INT_CFG, 1, &_buff[0]);
  return ((_buff[0] & INTCFG_ACTL) >> 7);
}

void ITG3200::setINTLogiclvl(bool _State) {
    669e:	ff 92       	push	r15
    66a0:	0f 93       	push	r16
    66a2:	1f 93       	push	r17
    66a4:	8c 01       	movw	r16, r24
    66a6:	f6 2e       	mov	r15, r22
  readmem(INT_CFG, 1, &_buff[0]);
    66a8:	9c 01       	movw	r18, r24
    66aa:	2d 5e       	subi	r18, 0xED	; 237
    66ac:	3f 4f       	sbci	r19, 0xFF	; 255
    66ae:	67 e1       	ldi	r22, 0x17	; 23
    66b0:	41 e0       	ldi	r20, 0x01	; 1
    66b2:	c7 dc       	rcall	.-1650   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(INT_CFG, ((_buff[0] & ~INTCFG_ACTL) | (_State << 7))); 
    66b4:	f7 94       	ror	r15
    66b6:	ff 24       	eor	r15, r15
    66b8:	f7 94       	ror	r15
    66ba:	f8 01       	movw	r30, r16
    66bc:	43 89       	ldd	r20, Z+19	; 0x13
    66be:	4f 77       	andi	r20, 0x7F	; 127
    66c0:	4f 29       	or	r20, r15
    66c2:	c8 01       	movw	r24, r16
    66c4:	67 e1       	ldi	r22, 0x17	; 23
    66c6:	8e dc       	rcall	.-1764   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	ff 90       	pop	r15
    66ce:	08 95       	ret

000066d0 <_ZN7ITG320016isINTActiveOnLowEv>:
void ITG3200::setFilterBW(byte _BW) {   
  readmem(DLPF_FS, 1, &_buff[0]);
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_DLPF_CFG) | _BW)); 
}

bool ITG3200::isINTActiveOnLow() {  
    66d0:	0f 93       	push	r16
    66d2:	1f 93       	push	r17
    66d4:	8c 01       	movw	r16, r24
  readmem(INT_CFG, 1, &_buff[0]);
    66d6:	9c 01       	movw	r18, r24
    66d8:	2d 5e       	subi	r18, 0xED	; 237
    66da:	3f 4f       	sbci	r19, 0xFF	; 255
    66dc:	67 e1       	ldi	r22, 0x17	; 23
    66de:	41 e0       	ldi	r20, 0x01	; 1
    66e0:	b0 dc       	rcall	.-1696   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	f8 01       	movw	r30, r16
    66e6:	83 89       	ldd	r24, Z+19	; 0x13
    66e8:	87 fd       	sbrc	r24, 7
    66ea:	91 e0       	ldi	r25, 0x01	; 1
  return ((_buff[0] & INTCFG_ACTL) >> 7);
}
    66ec:	89 2f       	mov	r24, r25
    66ee:	1f 91       	pop	r17
    66f0:	0f 91       	pop	r16
    66f2:	08 95       	ret

000066f4 <_ZN7ITG320011setFilterBWEh>:
byte ITG3200::getFilterBW() {  
  readmem(DLPF_FS, 1, &_buff[0]);
  return (_buff[0] & DLPFFS_DLPF_CFG); 
}

void ITG3200::setFilterBW(byte _BW) {   
    66f4:	ff 92       	push	r15
    66f6:	0f 93       	push	r16
    66f8:	1f 93       	push	r17
    66fa:	8c 01       	movw	r16, r24
    66fc:	f6 2e       	mov	r15, r22
  readmem(DLPF_FS, 1, &_buff[0]);
    66fe:	9c 01       	movw	r18, r24
    6700:	2d 5e       	subi	r18, 0xED	; 237
    6702:	3f 4f       	sbci	r19, 0xFF	; 255
    6704:	66 e1       	ldi	r22, 0x16	; 22
    6706:	41 e0       	ldi	r20, 0x01	; 1
    6708:	9c dc       	rcall	.-1736   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_DLPF_CFG) | _BW)); 
    670a:	f8 01       	movw	r30, r16
    670c:	43 89       	ldd	r20, Z+19	; 0x13
    670e:	48 7f       	andi	r20, 0xF8	; 248
    6710:	4f 29       	or	r20, r15
    6712:	c8 01       	movw	r24, r16
    6714:	66 e1       	ldi	r22, 0x16	; 22
    6716:	66 dc       	rcall	.-1844   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6718:	1f 91       	pop	r17
    671a:	0f 91       	pop	r16
    671c:	ff 90       	pop	r15
    671e:	08 95       	ret

00006720 <_ZN7ITG320011getFilterBWEv>:
void ITG3200::setFSRange(byte _Range) {
  readmem(DLPF_FS, 1, &_buff[0]);   
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_FS_SEL) | (_Range << 3)) ); 
}

byte ITG3200::getFilterBW() {  
    6720:	0f 93       	push	r16
    6722:	1f 93       	push	r17
    6724:	8c 01       	movw	r16, r24
  readmem(DLPF_FS, 1, &_buff[0]);
    6726:	9c 01       	movw	r18, r24
    6728:	2d 5e       	subi	r18, 0xED	; 237
    672a:	3f 4f       	sbci	r19, 0xFF	; 255
    672c:	66 e1       	ldi	r22, 0x16	; 22
    672e:	41 e0       	ldi	r20, 0x01	; 1
    6730:	88 dc       	rcall	.-1776   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6732:	f8 01       	movw	r30, r16
    6734:	83 89       	ldd	r24, Z+19	; 0x13
  return (_buff[0] & DLPFFS_DLPF_CFG); 
}
    6736:	87 70       	andi	r24, 0x07	; 7
    6738:	1f 91       	pop	r17
    673a:	0f 91       	pop	r16
    673c:	08 95       	ret

0000673e <_ZN7ITG320010setFSRangeEh>:
byte ITG3200::getFSRange() {
  readmem(DLPF_FS, 1, &_buff[0]);
  return ((_buff[0] & DLPFFS_FS_SEL) >> 3);
}

void ITG3200::setFSRange(byte _Range) {
    673e:	ff 92       	push	r15
    6740:	0f 93       	push	r16
    6742:	1f 93       	push	r17
    6744:	8c 01       	movw	r16, r24
    6746:	f6 2e       	mov	r15, r22
  readmem(DLPF_FS, 1, &_buff[0]);   
    6748:	9c 01       	movw	r18, r24
    674a:	2d 5e       	subi	r18, 0xED	; 237
    674c:	3f 4f       	sbci	r19, 0xFF	; 255
    674e:	66 e1       	ldi	r22, 0x16	; 22
    6750:	41 e0       	ldi	r20, 0x01	; 1
    6752:	77 dc       	rcall	.-1810   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  writemem(DLPF_FS, ((_buff[0] & ~DLPFFS_FS_SEL) | (_Range << 3)) ); 
    6754:	ff 0c       	add	r15, r15
    6756:	ff 0c       	add	r15, r15
    6758:	ff 0c       	add	r15, r15
    675a:	f8 01       	movw	r30, r16
    675c:	43 89       	ldd	r20, Z+19	; 0x13
    675e:	47 7e       	andi	r20, 0xE7	; 231
    6760:	4f 29       	or	r20, r15
    6762:	c8 01       	movw	r24, r16
    6764:	66 e1       	ldi	r22, 0x16	; 22
    6766:	3e dc       	rcall	.-1924   	; 0x5fe4 <_ZN7ITG32008writememEhh>
}
    6768:	1f 91       	pop	r17
    676a:	0f 91       	pop	r16
    676c:	ff 90       	pop	r15
    676e:	08 95       	ret

00006770 <_ZN7ITG320010getFSRangeEv>:

void ITG3200::setSampleRateDiv(byte _SampleRate) {
  writemem(SMPLRT_DIV, _SampleRate);
}

byte ITG3200::getFSRange() {
    6770:	0f 93       	push	r16
    6772:	1f 93       	push	r17
    6774:	8c 01       	movw	r16, r24
  readmem(DLPF_FS, 1, &_buff[0]);
    6776:	9c 01       	movw	r18, r24
    6778:	2d 5e       	subi	r18, 0xED	; 237
    677a:	3f 4f       	sbci	r19, 0xFF	; 255
    677c:	66 e1       	ldi	r22, 0x16	; 22
    677e:	41 e0       	ldi	r20, 0x01	; 1
    6780:	60 dc       	rcall	.-1856   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
    6782:	f8 01       	movw	r30, r16
    6784:	83 89       	ldd	r24, Z+19	; 0x13
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	88 71       	andi	r24, 0x18	; 24
    678a:	90 70       	andi	r25, 0x00	; 0
    678c:	63 e0       	ldi	r22, 0x03	; 3
    678e:	95 95       	asr	r25
    6790:	87 95       	ror	r24
    6792:	6a 95       	dec	r22
    6794:	e1 f7       	brne	.-8      	; 0x678e <_ZN7ITG320010getFSRangeEv+0x1e>
  return ((_buff[0] & DLPFFS_FS_SEL) >> 3);
}
    6796:	1f 91       	pop	r17
    6798:	0f 91       	pop	r16
    679a:	08 95       	ret

0000679c <_ZN7ITG320016getSampleRateDivEv>:
void ITG3200::setDevAddr(unsigned int  _addr) {
  writemem(WHO_AM_I, _addr); 
  _dev_address = _addr;
}

byte ITG3200::getSampleRateDiv() {
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	8c 01       	movw	r16, r24
  readmem(SMPLRT_DIV, 1, &_buff[0]);
    67a2:	9c 01       	movw	r18, r24
    67a4:	2d 5e       	subi	r18, 0xED	; 237
    67a6:	3f 4f       	sbci	r19, 0xFF	; 255
    67a8:	65 e1       	ldi	r22, 0x15	; 21
    67aa:	41 e0       	ldi	r20, 0x01	; 1
    67ac:	4a dc       	rcall	.-1900   	; 0x6042 <_ZN7ITG32007readmemEhhPh>
  return _buff[0];
}
    67ae:	f8 01       	movw	r30, r16
    67b0:	83 89       	ldd	r24, Z+19	; 0x13
    67b2:	1f 91       	pop	r17
    67b4:	0f 91       	pop	r16
    67b6:	08 95       	ret

000067b8 <_ZN7ITG32005resetEv>:
void ITG3200::readGyro(float *_GyroXYZ){
  readGyro(_GyroXYZ, _GyroXYZ+1, _GyroXYZ+2);
}

void ITG3200::reset() {     
  writemem(PWR_MGM, PWRMGM_HRESET); 
    67b8:	6e e3       	ldi	r22, 0x3E	; 62
    67ba:	40 e8       	ldi	r20, 0x80	; 128
    67bc:	13 dc       	rcall	.-2010   	; 0x5fe4 <_ZN7ITG32008writememEhh>
  delay(GYROSTART_UP_DELAY); //gyro startup 
    67be:	66 e4       	ldi	r22, 0x46	; 70
    67c0:	70 e0       	ldi	r23, 0x00	; 0
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e0       	ldi	r25, 0x00	; 0
}
    67c6:	89 c1       	rjmp	.+786    	; 0x6ada <delay>

000067c8 <_ZN7ITG320013zeroCalibrateEjj>:
  offsets[0] = _Xoffset;
  offsets[1] = _Yoffset;
  offsets[2] = _Zoffset;
}

void ITG3200::zeroCalibrate(unsigned int totSamples, unsigned int sampleDelayMS) {
    67c8:	2f 92       	push	r2
    67ca:	3f 92       	push	r3
    67cc:	4f 92       	push	r4
    67ce:	5f 92       	push	r5
    67d0:	6f 92       	push	r6
    67d2:	7f 92       	push	r7
    67d4:	8f 92       	push	r8
    67d6:	9f 92       	push	r9
    67d8:	af 92       	push	r10
    67da:	bf 92       	push	r11
    67dc:	cf 92       	push	r12
    67de:	df 92       	push	r13
    67e0:	ef 92       	push	r14
    67e2:	ff 92       	push	r15
    67e4:	0f 93       	push	r16
    67e6:	1f 93       	push	r17
    67e8:	df 93       	push	r29
    67ea:	cf 93       	push	r28
    67ec:	cd b7       	in	r28, 0x3d	; 61
    67ee:	de b7       	in	r29, 0x3e	; 62
    67f0:	2c 97       	sbiw	r28, 0x0c	; 12
    67f2:	0f b6       	in	r0, 0x3f	; 63
    67f4:	f8 94       	cli
    67f6:	de bf       	out	0x3e, r29	; 62
    67f8:	0f be       	out	0x3f, r0	; 63
    67fa:	cd bf       	out	0x3d, r28	; 61
    67fc:	98 87       	std	Y+8, r25	; 0x08
    67fe:	8f 83       	std	Y+7, r24	; 0x07
    6800:	7b 01       	movw	r14, r22
    6802:	00 e0       	ldi	r16, 0x00	; 0
    6804:	10 e0       	ldi	r17, 0x00	; 0
    6806:	0f 2e       	mov	r0, r31
    6808:	f0 e0       	ldi	r31, 0x00	; 0
    680a:	2f 2e       	mov	r2, r31
    680c:	f0 e0       	ldi	r31, 0x00	; 0
    680e:	3f 2e       	mov	r3, r31
    6810:	f0 e0       	ldi	r31, 0x00	; 0
    6812:	4f 2e       	mov	r4, r31
    6814:	f0 e0       	ldi	r31, 0x00	; 0
    6816:	5f 2e       	mov	r5, r31
    6818:	f0 2d       	mov	r31, r0
    681a:	42 01       	movw	r8, r4
    681c:	31 01       	movw	r6, r2
    681e:	62 01       	movw	r12, r4
    6820:	51 01       	movw	r10, r2
  float tmpOffsets[] = {0,0,0};
  int xyz[3];

  for (unsigned int i = 0;i < totSamples;i++){
    delay(sampleDelayMS);
    6822:	ca 01       	movw	r24, r20
    6824:	a0 e0       	ldi	r26, 0x00	; 0
    6826:	b0 e0       	ldi	r27, 0x00	; 0
    6828:	89 87       	std	Y+9, r24	; 0x09
    682a:	9a 87       	std	Y+10, r25	; 0x0a
    682c:	ab 87       	std	Y+11, r26	; 0x0b
    682e:	bc 87       	std	Y+12, r27	; 0x0c
    6830:	39 c0       	rjmp	.+114    	; 0x68a4 <_ZN7ITG320013zeroCalibrateEjj+0xdc>
    6832:	69 85       	ldd	r22, Y+9	; 0x09
    6834:	7a 85       	ldd	r23, Y+10	; 0x0a
    6836:	8b 85       	ldd	r24, Y+11	; 0x0b
    6838:	9c 85       	ldd	r25, Y+12	; 0x0c
    683a:	4f d1       	rcall	.+670    	; 0x6ada <delay>
    readGyroRaw(xyz);
    683c:	8f 81       	ldd	r24, Y+7	; 0x07
    683e:	98 85       	ldd	r25, Y+8	; 0x08
    6840:	be 01       	movw	r22, r28
    6842:	6f 5f       	subi	r22, 0xFF	; 255
    6844:	7f 4f       	sbci	r23, 0xFF	; 255
    6846:	ff dd       	rcall	.-1026   	; 0x6446 <_ZN7ITG320011readGyroRawEPi>
    tmpOffsets[0] += xyz[0];
    6848:	69 81       	ldd	r22, Y+1	; 0x01
    684a:	7a 81       	ldd	r23, Y+2	; 0x02
    684c:	88 27       	eor	r24, r24
    684e:	77 fd       	sbrc	r23, 7
    6850:	80 95       	com	r24
    6852:	98 2f       	mov	r25, r24
    6854:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    6858:	9b 01       	movw	r18, r22
    685a:	ac 01       	movw	r20, r24
    685c:	c6 01       	movw	r24, r12
    685e:	b5 01       	movw	r22, r10
    6860:	e6 d6       	rcall	.+3532   	; 0x762e <__addsf3>
    6862:	5b 01       	movw	r10, r22
    6864:	6c 01       	movw	r12, r24
    tmpOffsets[1] += xyz[1];
    6866:	6b 81       	ldd	r22, Y+3	; 0x03
    6868:	7c 81       	ldd	r23, Y+4	; 0x04
    686a:	88 27       	eor	r24, r24
    686c:	77 fd       	sbrc	r23, 7
    686e:	80 95       	com	r24
    6870:	98 2f       	mov	r25, r24
    6872:	0e 94 3e 3c 	call	0x787c	; 0x787c <__floatsisf>
    6876:	9b 01       	movw	r18, r22
    6878:	ac 01       	movw	r20, r24
    687a:	c4 01       	movw	r24, r8
    687c:	b3 01       	movw	r22, r6
    687e:	d7 d6       	rcall	.+3502   	; 0x762e <__addsf3>
    6880:	3b 01       	movw	r6, r22
    6882:	4c 01       	movw	r8, r24
    tmpOffsets[2] += xyz[2];
    6884:	6d 81       	ldd	r22, Y+5	; 0x05
    6886:	7e 81       	ldd	r23, Y+6	; 0x06
    6888:	88 27       	eor	r24, r24
    688a:	77 fd       	sbrc	r23, 7
    688c:	80 95       	com	r24
    688e:	98 2f       	mov	r25, r24
    6890:	f5 d7       	rcall	.+4074   	; 0x787c <__floatsisf>
    6892:	9b 01       	movw	r18, r22
    6894:	ac 01       	movw	r20, r24
    6896:	c2 01       	movw	r24, r4
    6898:	b1 01       	movw	r22, r2
    689a:	c9 d6       	rcall	.+3474   	; 0x762e <__addsf3>
    689c:	1b 01       	movw	r2, r22
    689e:	2c 01       	movw	r4, r24

void ITG3200::zeroCalibrate(unsigned int totSamples, unsigned int sampleDelayMS) {
  float tmpOffsets[] = {0,0,0};
  int xyz[3];

  for (unsigned int i = 0;i < totSamples;i++){
    68a0:	0f 5f       	subi	r16, 0xFF	; 255
    68a2:	1f 4f       	sbci	r17, 0xFF	; 255
    68a4:	0e 15       	cp	r16, r14
    68a6:	1f 05       	cpc	r17, r15
    68a8:	08 f4       	brcc	.+2      	; 0x68ac <_ZN7ITG320013zeroCalibrateEjj+0xe4>
    68aa:	c3 cf       	rjmp	.-122    	; 0x6832 <_ZN7ITG320013zeroCalibrateEjj+0x6a>
    readGyroRaw(xyz);
    tmpOffsets[0] += xyz[0];
    tmpOffsets[1] += xyz[1];
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
    68ac:	b7 01       	movw	r22, r14
    68ae:	80 e0       	ldi	r24, 0x00	; 0
    68b0:	90 e0       	ldi	r25, 0x00	; 0
    68b2:	e2 d7       	rcall	.+4036   	; 0x7878 <__floatunsisf>
    68b4:	7b 01       	movw	r14, r22
    68b6:	8c 01       	movw	r16, r24
    scalefactor[2] /= 0.0174532925;
  }
}

void ITG3200::setOffsets(int _Xoffset, int _Yoffset, int _Zoffset) {
  offsets[0] = _Xoffset;
    68b8:	c6 01       	movw	r24, r12
    68ba:	b5 01       	movw	r22, r10
    68bc:	90 58       	subi	r25, 0x80	; 128
    68be:	a8 01       	movw	r20, r16
    68c0:	97 01       	movw	r18, r14
    68c2:	41 d7       	rcall	.+3714   	; 0x7746 <__divsf3>
    68c4:	20 e0       	ldi	r18, 0x00	; 0
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	40 e0       	ldi	r20, 0x00	; 0
    68ca:	5f e3       	ldi	r21, 0x3F	; 63
    68cc:	b0 d6       	rcall	.+3424   	; 0x762e <__addsf3>
    68ce:	a3 d7       	rcall	.+3910   	; 0x7816 <__fixsfsi>
    68d0:	af 81       	ldd	r26, Y+7	; 0x07
    68d2:	b8 85       	ldd	r27, Y+8	; 0x08
    68d4:	1d 96       	adiw	r26, 0x0d	; 13
    68d6:	7c 93       	st	X, r23
    68d8:	6e 93       	st	-X, r22
    68da:	1c 97       	sbiw	r26, 0x0c	; 12
  offsets[1] = _Yoffset;
    68dc:	c4 01       	movw	r24, r8
    68de:	b3 01       	movw	r22, r6
    68e0:	90 58       	subi	r25, 0x80	; 128
    68e2:	a8 01       	movw	r20, r16
    68e4:	97 01       	movw	r18, r14
    68e6:	2f d7       	rcall	.+3678   	; 0x7746 <__divsf3>
    68e8:	20 e0       	ldi	r18, 0x00	; 0
    68ea:	30 e0       	ldi	r19, 0x00	; 0
    68ec:	40 e0       	ldi	r20, 0x00	; 0
    68ee:	5f e3       	ldi	r21, 0x3F	; 63
    68f0:	9e d6       	rcall	.+3388   	; 0x762e <__addsf3>
    68f2:	91 d7       	rcall	.+3874   	; 0x7816 <__fixsfsi>
    68f4:	ef 81       	ldd	r30, Y+7	; 0x07
    68f6:	f8 85       	ldd	r31, Y+8	; 0x08
    68f8:	77 87       	std	Z+15, r23	; 0x0f
    68fa:	66 87       	std	Z+14, r22	; 0x0e
  offsets[2] = _Zoffset;
    68fc:	c2 01       	movw	r24, r4
    68fe:	b1 01       	movw	r22, r2
    6900:	90 58       	subi	r25, 0x80	; 128
    6902:	a8 01       	movw	r20, r16
    6904:	97 01       	movw	r18, r14
    6906:	1f d7       	rcall	.+3646   	; 0x7746 <__divsf3>
    6908:	20 e0       	ldi	r18, 0x00	; 0
    690a:	30 e0       	ldi	r19, 0x00	; 0
    690c:	40 e0       	ldi	r20, 0x00	; 0
    690e:	5f e3       	ldi	r21, 0x3F	; 63
    6910:	8e d6       	rcall	.+3356   	; 0x762e <__addsf3>
    6912:	81 d7       	rcall	.+3842   	; 0x7816 <__fixsfsi>
    6914:	af 81       	ldd	r26, Y+7	; 0x07
    6916:	b8 85       	ldd	r27, Y+8	; 0x08
    6918:	51 96       	adiw	r26, 0x11	; 17
    691a:	7c 93       	st	X, r23
    691c:	6e 93       	st	-X, r22
    691e:	50 97       	sbiw	r26, 0x10	; 16
    tmpOffsets[0] += xyz[0];
    tmpOffsets[1] += xyz[1];
    tmpOffsets[2] += xyz[2];
  }
  setOffsets(-tmpOffsets[0] / totSamples + 0.5, -tmpOffsets[1] / totSamples + 0.5, -tmpOffsets[2] / totSamples + 0.5);
}
    6920:	2c 96       	adiw	r28, 0x0c	; 12
    6922:	0f b6       	in	r0, 0x3f	; 63
    6924:	f8 94       	cli
    6926:	de bf       	out	0x3e, r29	; 62
    6928:	0f be       	out	0x3f, r0	; 63
    692a:	cd bf       	out	0x3d, r28	; 61
    692c:	cf 91       	pop	r28
    692e:	df 91       	pop	r29
    6930:	1f 91       	pop	r17
    6932:	0f 91       	pop	r16
    6934:	ff 90       	pop	r15
    6936:	ef 90       	pop	r14
    6938:	df 90       	pop	r13
    693a:	cf 90       	pop	r12
    693c:	bf 90       	pop	r11
    693e:	af 90       	pop	r10
    6940:	9f 90       	pop	r9
    6942:	8f 90       	pop	r8
    6944:	7f 90       	pop	r7
    6946:	6f 90       	pop	r6
    6948:	5f 90       	pop	r5
    694a:	4f 90       	pop	r4
    694c:	3f 90       	pop	r3
    694e:	2f 90       	pop	r2
    6950:	08 95       	ret

00006952 <_ZN7ITG32004initEjhhhhbb>:
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}

void ITG3200::init(unsigned int address, byte _SRateDiv, byte _Range, byte _filterBW, byte _ClockSrc, bool _ITGReady, bool _INTRawDataReady) {
    6952:	8f 92       	push	r8
    6954:	9f 92       	push	r9
    6956:	af 92       	push	r10
    6958:	cf 92       	push	r12
    695a:	ef 92       	push	r14
    695c:	0f 93       	push	r16
    695e:	1f 93       	push	r17
    6960:	4c 01       	movw	r8, r24
    6962:	12 2f       	mov	r17, r18
  _dev_address = address;
    6964:	fc 01       	movw	r30, r24
    6966:	62 8b       	std	Z+18, r22	; 0x12
  setSampleRateDiv(_SRateDiv);
    6968:	64 2f       	mov	r22, r20
    696a:	5a db       	rcall	.-2380   	; 0x6020 <_ZN7ITG320016setSampleRateDivEh>
  setFSRange(_Range);
    696c:	c4 01       	movw	r24, r8
    696e:	61 2f       	mov	r22, r17
    6970:	e6 de       	rcall	.-564    	; 0x673e <_ZN7ITG320010setFSRangeEh>
  setFilterBW(_filterBW);
    6972:	c4 01       	movw	r24, r8
    6974:	60 2f       	mov	r22, r16
    6976:	be de       	rcall	.-644    	; 0x66f4 <_ZN7ITG320011setFilterBWEh>
  setClockSource(_ClockSrc);
    6978:	c4 01       	movw	r24, r8
    697a:	6e 2d       	mov	r22, r14
    697c:	a8 db       	rcall	.-2224   	; 0x60ce <_ZN7ITG320014setClockSourceEh>
  setITGReady(_ITGReady);
    697e:	c4 01       	movw	r24, r8
    6980:	6c 2d       	mov	r22, r12
    6982:	df dd       	rcall	.-1090   	; 0x6542 <_ZN7ITG320011setITGReadyEb>
  setRawDataReady(_INTRawDataReady);  
    6984:	c4 01       	movw	r24, r8
    6986:	6a 2d       	mov	r22, r10
    6988:	b7 dd       	rcall	.-1170   	; 0x64f8 <_ZN7ITG320015setRawDataReadyEb>
  delay(GYROSTART_UP_DELAY);  // startup 
    698a:	66 e4       	ldi	r22, 0x46	; 70
    698c:	70 e0       	ldi	r23, 0x00	; 0
    698e:	80 e0       	ldi	r24, 0x00	; 0
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	a3 d0       	rcall	.+326    	; 0x6ada <delay>
}
    6994:	1f 91       	pop	r17
    6996:	0f 91       	pop	r16
    6998:	ef 90       	pop	r14
    699a:	cf 90       	pop	r12
    699c:	af 90       	pop	r10
    699e:	9f 90       	pop	r9
    69a0:	8f 90       	pop	r8
    69a2:	08 95       	ret

000069a4 <_ZN7ITG32004initEj>:
                        //but some people reported that joining I2C bus earlier
                        //apparently solved problems with master/slave conditions.
                        //Uncomment if needed.
}

void ITG3200::init(unsigned int  address) {
    69a4:	af 92       	push	r10
    69a6:	cf 92       	push	r12
    69a8:	ef 92       	push	r14
    69aa:	0f 93       	push	r16
  // Uncomment or change your default ITG3200 initialization
  
  // fast sample rate - divisor = 0 filter = 0 clocksrc = 0, 1, 2, or 3  (raw values)
  init(address, NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_XGYRO_REF, true, true);
    69ac:	40 e0       	ldi	r20, 0x00	; 0
    69ae:	23 e0       	ldi	r18, 0x03	; 3
    69b0:	00 e0       	ldi	r16, 0x00	; 0
    69b2:	ee 24       	eor	r14, r14
    69b4:	e3 94       	inc	r14
    69b6:	cc 24       	eor	r12, r12
    69b8:	c3 94       	inc	r12
    69ba:	aa 24       	eor	r10, r10
    69bc:	a3 94       	inc	r10
    69be:	c9 df       	rcall	.-110    	; 0x6952 <_ZN7ITG32004initEjhhhhbb>
  // fast sample rate 32Khz external clock - divisor = 0  filter = 0  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW256_SR8, PLL_EXTERNAL32, true, true);
  
  // slow sample rate 32Khz external clock - divisor = 0  filter = 1,2,3,4,5, or 6  clocksrc = 4  (raw values)
  //init(NOSRDIVIDER, RANGE2000, BW010_SR1, PLL_EXTERNAL32, true, true);
}
    69c0:	0f 91       	pop	r16
    69c2:	ef 90       	pop	r14
    69c4:	cf 90       	pop	r12
    69c6:	af 90       	pop	r10
    69c8:	08 95       	ret

000069ca <__vector_23>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
    69ca:	1f 92       	push	r1
    69cc:	0f 92       	push	r0
    69ce:	0f b6       	in	r0, 0x3f	; 63
    69d0:	0f 92       	push	r0
    69d2:	11 24       	eor	r1, r1
    69d4:	2f 93       	push	r18
    69d6:	3f 93       	push	r19
    69d8:	4f 93       	push	r20
    69da:	5f 93       	push	r21
    69dc:	6f 93       	push	r22
    69de:	7f 93       	push	r23
    69e0:	8f 93       	push	r24
    69e2:	9f 93       	push	r25
    69e4:	af 93       	push	r26
    69e6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    69e8:	20 91 70 04 	lds	r18, 0x0470
    69ec:	30 91 71 04 	lds	r19, 0x0471
    69f0:	40 91 72 04 	lds	r20, 0x0472
    69f4:	50 91 73 04 	lds	r21, 0x0473
	unsigned char f = timer0_fract;
    69f8:	70 91 74 04 	lds	r23, 0x0474

	m += MILLIS_INC;
    69fc:	da 01       	movw	r26, r20
    69fe:	c9 01       	movw	r24, r18
    6a00:	04 96       	adiw	r24, 0x04	; 4
    6a02:	a1 1d       	adc	r26, r1
    6a04:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    6a06:	67 2f       	mov	r22, r23
    6a08:	64 5f       	subi	r22, 0xF4	; 244
	if (f >= FRACT_MAX) {
    6a0a:	6d 37       	cpi	r22, 0x7D	; 125
    6a0c:	30 f0       	brcs	.+12     	; 0x6a1a <__vector_23+0x50>
		f -= FRACT_MAX;
    6a0e:	6d 57       	subi	r22, 0x7D	; 125
		m += 1;
    6a10:	da 01       	movw	r26, r20
    6a12:	c9 01       	movw	r24, r18
    6a14:	05 96       	adiw	r24, 0x05	; 5
    6a16:	a1 1d       	adc	r26, r1
    6a18:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6a1a:	60 93 74 04 	sts	0x0474, r22
	timer0_millis = m;
    6a1e:	80 93 70 04 	sts	0x0470, r24
    6a22:	90 93 71 04 	sts	0x0471, r25
    6a26:	a0 93 72 04 	sts	0x0472, r26
    6a2a:	b0 93 73 04 	sts	0x0473, r27
	timer0_overflow_count++;
    6a2e:	80 91 6c 04 	lds	r24, 0x046C
    6a32:	90 91 6d 04 	lds	r25, 0x046D
    6a36:	a0 91 6e 04 	lds	r26, 0x046E
    6a3a:	b0 91 6f 04 	lds	r27, 0x046F
    6a3e:	01 96       	adiw	r24, 0x01	; 1
    6a40:	a1 1d       	adc	r26, r1
    6a42:	b1 1d       	adc	r27, r1
    6a44:	80 93 6c 04 	sts	0x046C, r24
    6a48:	90 93 6d 04 	sts	0x046D, r25
    6a4c:	a0 93 6e 04 	sts	0x046E, r26
    6a50:	b0 93 6f 04 	sts	0x046F, r27
}
    6a54:	bf 91       	pop	r27
    6a56:	af 91       	pop	r26
    6a58:	9f 91       	pop	r25
    6a5a:	8f 91       	pop	r24
    6a5c:	7f 91       	pop	r23
    6a5e:	6f 91       	pop	r22
    6a60:	5f 91       	pop	r21
    6a62:	4f 91       	pop	r20
    6a64:	3f 91       	pop	r19
    6a66:	2f 91       	pop	r18
    6a68:	0f 90       	pop	r0
    6a6a:	0f be       	out	0x3f, r0	; 63
    6a6c:	0f 90       	pop	r0
    6a6e:	1f 90       	pop	r1
    6a70:	18 95       	reti

00006a72 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6a72:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6a74:	f8 94       	cli
	m = timer0_millis;
    6a76:	20 91 70 04 	lds	r18, 0x0470
    6a7a:	30 91 71 04 	lds	r19, 0x0471
    6a7e:	40 91 72 04 	lds	r20, 0x0472
    6a82:	50 91 73 04 	lds	r21, 0x0473
	SREG = oldSREG;
    6a86:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    6a88:	b9 01       	movw	r22, r18
    6a8a:	ca 01       	movw	r24, r20
    6a8c:	08 95       	ret

00006a8e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6a8e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    6a90:	f8 94       	cli
	m = timer0_overflow_count;
    6a92:	20 91 6c 04 	lds	r18, 0x046C
    6a96:	30 91 6d 04 	lds	r19, 0x046D
    6a9a:	40 91 6e 04 	lds	r20, 0x046E
    6a9e:	50 91 6f 04 	lds	r21, 0x046F
#if defined(TCNT0)
	t = TCNT0;
    6aa2:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6aa4:	a8 9b       	sbis	0x15, 0	; 21
    6aa6:	06 c0       	rjmp	.+12     	; 0x6ab4 <micros+0x26>
    6aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    6aaa:	21 f0       	breq	.+8      	; 0x6ab4 <micros+0x26>
		m++;
    6aac:	2f 5f       	subi	r18, 0xFF	; 255
    6aae:	3f 4f       	sbci	r19, 0xFF	; 255
    6ab0:	4f 4f       	sbci	r20, 0xFF	; 255
    6ab2:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6ab4:	9f bf       	out	0x3f, r25	; 63
    6ab6:	54 2f       	mov	r21, r20
    6ab8:	43 2f       	mov	r20, r19
    6aba:	32 2f       	mov	r19, r18
    6abc:	22 27       	eor	r18, r18
    6abe:	28 0f       	add	r18, r24
    6ac0:	31 1d       	adc	r19, r1
    6ac2:	41 1d       	adc	r20, r1
    6ac4:	51 1d       	adc	r21, r1
    6ac6:	84 e0       	ldi	r24, 0x04	; 4
    6ac8:	22 0f       	add	r18, r18
    6aca:	33 1f       	adc	r19, r19
    6acc:	44 1f       	adc	r20, r20
    6ace:	55 1f       	adc	r21, r21
    6ad0:	8a 95       	dec	r24
    6ad2:	d1 f7       	brne	.-12     	; 0x6ac8 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    6ad4:	b9 01       	movw	r22, r18
    6ad6:	ca 01       	movw	r24, r20
    6ad8:	08 95       	ret

00006ada <delay>:

void delay(unsigned long ms)
{
    6ada:	ef 92       	push	r14
    6adc:	ff 92       	push	r15
    6ade:	0f 93       	push	r16
    6ae0:	1f 93       	push	r17
    6ae2:	cf 93       	push	r28
    6ae4:	df 93       	push	r29
    6ae6:	7b 01       	movw	r14, r22
    6ae8:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    6aea:	d1 df       	rcall	.-94     	; 0x6a8e <micros>
    6aec:	eb 01       	movw	r28, r22
    6aee:	0d c0       	rjmp	.+26     	; 0x6b0a <delay+0x30>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    6af0:	ce df       	rcall	.-100    	; 0x6a8e <micros>
    6af2:	6c 1b       	sub	r22, r28
    6af4:	7d 0b       	sbc	r23, r29
    6af6:	68 5e       	subi	r22, 0xE8	; 232
    6af8:	73 40       	sbci	r23, 0x03	; 3
    6afa:	d0 f3       	brcs	.-12     	; 0x6af0 <delay+0x16>
			ms--;
    6afc:	08 94       	sec
    6afe:	e1 08       	sbc	r14, r1
    6b00:	f1 08       	sbc	r15, r1
    6b02:	01 09       	sbc	r16, r1
    6b04:	11 09       	sbc	r17, r1
			start += 1000;
    6b06:	c8 51       	subi	r28, 0x18	; 24
    6b08:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    6b0a:	e1 14       	cp	r14, r1
    6b0c:	f1 04       	cpc	r15, r1
    6b0e:	01 05       	cpc	r16, r1
    6b10:	11 05       	cpc	r17, r1
    6b12:	71 f7       	brne	.-36     	; 0x6af0 <delay+0x16>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    6b14:	df 91       	pop	r29
    6b16:	cf 91       	pop	r28
    6b18:	1f 91       	pop	r17
    6b1a:	0f 91       	pop	r16
    6b1c:	ff 90       	pop	r15
    6b1e:	ef 90       	pop	r14
    6b20:	08 95       	ret

00006b22 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6b22:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6b24:	84 b5       	in	r24, 0x24	; 36
    6b26:	82 60       	ori	r24, 0x02	; 2
    6b28:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6b2a:	84 b5       	in	r24, 0x24	; 36
    6b2c:	81 60       	ori	r24, 0x01	; 1
    6b2e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6b30:	85 b5       	in	r24, 0x25	; 37
    6b32:	82 60       	ori	r24, 0x02	; 2
    6b34:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6b36:	85 b5       	in	r24, 0x25	; 37
    6b38:	81 60       	ori	r24, 0x01	; 1
    6b3a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6b3c:	ee e6       	ldi	r30, 0x6E	; 110
    6b3e:	f0 e0       	ldi	r31, 0x00	; 0
    6b40:	80 81       	ld	r24, Z
    6b42:	81 60       	ori	r24, 0x01	; 1
    6b44:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
    6b46:	e1 e8       	ldi	r30, 0x81	; 129
    6b48:	f0 e0       	ldi	r31, 0x00	; 0
    6b4a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
    6b4c:	80 81       	ld	r24, Z
    6b4e:	82 60       	ori	r24, 0x02	; 2
    6b50:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
    6b52:	80 81       	ld	r24, Z
    6b54:	81 60       	ori	r24, 0x01	; 1
    6b56:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6b58:	e0 e8       	ldi	r30, 0x80	; 128
    6b5a:	f0 e0       	ldi	r31, 0x00	; 0
    6b5c:	80 81       	ld	r24, Z
    6b5e:	81 60       	ori	r24, 0x01	; 1
    6b60:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6b62:	e1 eb       	ldi	r30, 0xB1	; 177
    6b64:	f0 e0       	ldi	r31, 0x00	; 0
    6b66:	80 81       	ld	r24, Z
    6b68:	84 60       	ori	r24, 0x04	; 4
    6b6a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6b6c:	e0 eb       	ldi	r30, 0xB0	; 176
    6b6e:	f0 e0       	ldi	r31, 0x00	; 0
    6b70:	80 81       	ld	r24, Z
    6b72:	81 60       	ori	r24, 0x01	; 1
    6b74:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6b76:	e1 e9       	ldi	r30, 0x91	; 145
    6b78:	f0 e0       	ldi	r31, 0x00	; 0
    6b7a:	80 81       	ld	r24, Z
    6b7c:	82 60       	ori	r24, 0x02	; 2
    6b7e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6b80:	80 81       	ld	r24, Z
    6b82:	81 60       	ori	r24, 0x01	; 1
    6b84:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6b86:	e0 e9       	ldi	r30, 0x90	; 144
    6b88:	f0 e0       	ldi	r31, 0x00	; 0
    6b8a:	80 81       	ld	r24, Z
    6b8c:	81 60       	ori	r24, 0x01	; 1
    6b8e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    6b90:	ea e7       	ldi	r30, 0x7A	; 122
    6b92:	f0 e0       	ldi	r31, 0x00	; 0
    6b94:	80 81       	ld	r24, Z
    6b96:	84 60       	ori	r24, 0x04	; 4
    6b98:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    6b9a:	80 81       	ld	r24, Z
    6b9c:	82 60       	ori	r24, 0x02	; 2
    6b9e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    6ba0:	80 81       	ld	r24, Z
    6ba2:	81 60       	ori	r24, 0x01	; 1
    6ba4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6ba6:	80 81       	ld	r24, Z
    6ba8:	80 68       	ori	r24, 0x80	; 128
    6baa:	80 83       	st	Z, r24
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
#endif
    6bac:	08 95       	ret

00006bae <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    6bae:	da 01       	movw	r26, r20
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    6bb0:	93 30       	cpi	r25, 0x03	; 3
    6bb2:	c9 f0       	breq	.+50     	; 0x6be6 <CALLBACK_USB_GetDescriptor+0x38>
    6bb4:	94 30       	cpi	r25, 0x04	; 4
    6bb6:	30 f4       	brcc	.+12     	; 0x6bc4 <CALLBACK_USB_GetDescriptor+0x16>
    6bb8:	91 30       	cpi	r25, 0x01	; 1
    6bba:	59 f0       	breq	.+22     	; 0x6bd2 <CALLBACK_USB_GetDescriptor+0x24>
    6bbc:	92 30       	cpi	r25, 0x02	; 2
    6bbe:	09 f0       	breq	.+2      	; 0x6bc2 <CALLBACK_USB_GetDescriptor+0x14>
    6bc0:	40 c0       	rjmp	.+128    	; 0x6c42 <CALLBACK_USB_GetDescriptor+0x94>
    6bc2:	0c c0       	rjmp	.+24     	; 0x6bdc <CALLBACK_USB_GetDescriptor+0x2e>
    6bc4:	91 32       	cpi	r25, 0x21	; 33
    6bc6:	09 f4       	brne	.+2      	; 0x6bca <CALLBACK_USB_GetDescriptor+0x1c>
    6bc8:	32 c0       	rjmp	.+100    	; 0x6c2e <CALLBACK_USB_GetDescriptor+0x80>
    6bca:	92 32       	cpi	r25, 0x22	; 34
    6bcc:	09 f0       	breq	.+2      	; 0x6bd0 <CALLBACK_USB_GetDescriptor+0x22>
    6bce:	39 c0       	rjmp	.+114    	; 0x6c42 <CALLBACK_USB_GetDescriptor+0x94>
    6bd0:	33 c0       	rjmp	.+102    	; 0x6c38 <CALLBACK_USB_GetDescriptor+0x8a>
    6bd2:	e8 ef       	ldi	r30, 0xF8	; 248
    6bd4:	f1 e0       	ldi	r31, 0x01	; 1
    6bd6:	22 e1       	ldi	r18, 0x12	; 18
    6bd8:	30 e0       	ldi	r19, 0x00	; 0
    6bda:	37 c0       	rjmp	.+110    	; 0x6c4a <CALLBACK_USB_GetDescriptor+0x9c>
    6bdc:	ea e0       	ldi	r30, 0x0A	; 10
    6bde:	f2 e0       	ldi	r31, 0x02	; 2
    6be0:	26 e6       	ldi	r18, 0x66	; 102
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	32 c0       	rjmp	.+100    	; 0x6c4a <CALLBACK_USB_GetDescriptor+0x9c>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
    6be6:	82 30       	cpi	r24, 0x02	; 2
    6be8:	b1 f0       	breq	.+44     	; 0x6c16 <CALLBACK_USB_GetDescriptor+0x68>
    6bea:	83 30       	cpi	r24, 0x03	; 3
    6bec:	28 f4       	brcc	.+10     	; 0x6bf8 <CALLBACK_USB_GetDescriptor+0x4a>
    6bee:	88 23       	and	r24, r24
    6bf0:	41 f0       	breq	.+16     	; 0x6c02 <CALLBACK_USB_GetDescriptor+0x54>
    6bf2:	81 30       	cpi	r24, 0x01	; 1
    6bf4:	31 f5       	brne	.+76     	; 0x6c42 <CALLBACK_USB_GetDescriptor+0x94>
    6bf6:	09 c0       	rjmp	.+18     	; 0x6c0a <CALLBACK_USB_GetDescriptor+0x5c>
    6bf8:	83 30       	cpi	r24, 0x03	; 3
    6bfa:	89 f0       	breq	.+34     	; 0x6c1e <CALLBACK_USB_GetDescriptor+0x70>
    6bfc:	84 30       	cpi	r24, 0x04	; 4
    6bfe:	09 f5       	brne	.+66     	; 0x6c42 <CALLBACK_USB_GetDescriptor+0x94>
    6c00:	12 c0       	rjmp	.+36     	; 0x6c26 <CALLBACK_USB_GetDescriptor+0x78>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    6c02:	e0 e7       	ldi	r30, 0x70	; 112
    6c04:	f2 e0       	ldi	r31, 0x02	; 2
    6c06:	84 91       	lpm	r24, Z+
    6c08:	03 c0       	rjmp	.+6      	; 0x6c10 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    6c0a:	e4 e7       	ldi	r30, 0x74	; 116
    6c0c:	f2 e0       	ldi	r31, 0x02	; 2
    6c0e:	84 91       	lpm	r24, Z+
    6c10:	28 2f       	mov	r18, r24
    6c12:	30 e0       	ldi	r19, 0x00	; 0
    6c14:	1a c0       	rjmp	.+52     	; 0x6c4a <CALLBACK_USB_GetDescriptor+0x9c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    6c16:	e0 e9       	ldi	r30, 0x90	; 144
    6c18:	f2 e0       	ldi	r31, 0x02	; 2
    6c1a:	84 91       	lpm	r24, Z+
    6c1c:	f9 cf       	rjmp	.-14     	; 0x6c10 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x03:
                    Address = &ProductStringSerial;
                    Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
    6c1e:	ee eb       	ldi	r30, 0xBE	; 190
    6c20:	f2 e0       	ldi	r31, 0x02	; 2
    6c22:	84 91       	lpm	r24, Z+
    6c24:	f5 cf       	rjmp	.-22     	; 0x6c10 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x04:
                    Address = &ProductStringHID;
                    Size    = pgm_read_byte(&ProductStringHID.Header.Size);
    6c26:	ea ee       	ldi	r30, 0xEA	; 234
    6c28:	f2 e0       	ldi	r31, 0x02	; 2
    6c2a:	84 91       	lpm	r24, Z+
    6c2c:	f1 cf       	rjmp	.-30     	; 0x6c10 <CALLBACK_USB_GetDescriptor+0x62>
    6c2e:	e9 e5       	ldi	r30, 0x59	; 89
    6c30:	f2 e0       	ldi	r31, 0x02	; 2
    6c32:	29 e0       	ldi	r18, 0x09	; 9
    6c34:	30 e0       	ldi	r19, 0x00	; 0
    6c36:	09 c0       	rjmp	.+18     	; 0x6c4a <CALLBACK_USB_GetDescriptor+0x9c>

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_GenericHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
    6c38:	e7 e4       	ldi	r30, 0x47	; 71
    6c3a:	f1 e0       	ldi	r31, 0x01	; 1
    6c3c:	21 eb       	ldi	r18, 0xB1	; 177
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	04 c0       	rjmp	.+8      	; 0x6c4a <CALLBACK_USB_GetDescriptor+0x9c>
    6c42:	e0 e0       	ldi	r30, 0x00	; 0
    6c44:	f0 e0       	ldi	r31, 0x00	; 0
    6c46:	20 e0       	ldi	r18, 0x00	; 0
    6c48:	30 e0       	ldi	r19, 0x00	; 0
            Address = &HIDReport;
            Size    = sizeof(HIDReport);
            break;
    }

    *DescriptorAddress = Address;
    6c4a:	ed 93       	st	X+, r30
    6c4c:	fc 93       	st	X, r31
    return Size;
}
    6c4e:	c9 01       	movw	r24, r18
    6c50:	08 95       	ret

00006c52 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    6c52:	38 2f       	mov	r19, r24
    6c54:	28 2f       	mov	r18, r24
    6c56:	2c c0       	rjmp	.+88     	; 0x6cb0 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6c58:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
    6c5c:	23 17       	cp	r18, r19
    6c5e:	21 f4       	brne	.+8      	; 0x6c68 <Endpoint_ConfigureEndpoint_Prv+0x16>
    6c60:	76 2f       	mov	r23, r22
    6c62:	94 2f       	mov	r25, r20
    6c64:	50 e0       	ldi	r21, 0x00	; 0
    6c66:	06 c0       	rjmp	.+12     	; 0x6c74 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    6c68:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    6c6c:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    6c70:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    6c74:	91 ff       	sbrs	r25, 1
    6c76:	1b c0       	rjmp	.+54     	; 0x6cae <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    6c78:	80 91 eb 00 	lds	r24, 0x00EB
    6c7c:	8e 7f       	andi	r24, 0xFE	; 254
    6c7e:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
    6c82:	80 91 ed 00 	lds	r24, 0x00ED
    6c86:	82 70       	andi	r24, 0x02	; 2
    6c88:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    6c8c:	80 91 eb 00 	lds	r24, 0x00EB
    6c90:	81 60       	ori	r24, 0x01	; 1
    6c92:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    6c96:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    6c9a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    6c9e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    6ca2:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
    6ca6:	87 fd       	sbrc	r24, 7
    6ca8:	02 c0       	rjmp	.+4      	; 0x6cae <Endpoint_ConfigureEndpoint_Prv+0x5c>
    6caa:	80 e0       	ldi	r24, 0x00	; 0
    6cac:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    6cae:	2f 5f       	subi	r18, 0xFF	; 255
    6cb0:	27 30       	cpi	r18, 0x07	; 7
    6cb2:	90 f2       	brcs	.-92     	; 0x6c58 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6cb4:	30 93 e9 00 	sts	0x00E9, r19
    6cb8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    6cba:	08 95       	ret

00006cbc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    6cbc:	80 91 eb 07 	lds	r24, 0x07EB
    6cc0:	88 23       	and	r24, r24
    6cc2:	9c f4       	brge	.+38     	; 0x6cea <Endpoint_ClearStatusStage+0x2e>
    6cc4:	04 c0       	rjmp	.+8      	; 0x6cce <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6cc6:	80 91 ea 07 	lds	r24, 0x07EA
    6cca:	88 23       	and	r24, r24
    6ccc:	b9 f0       	breq	.+46     	; 0x6cfc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6cce:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    6cd2:	82 ff       	sbrs	r24, 2
    6cd4:	f8 cf       	rjmp	.-16     	; 0x6cc6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6cd6:	80 91 e8 00 	lds	r24, 0x00E8
    6cda:	8b 77       	andi	r24, 0x7B	; 123
    6cdc:	80 93 e8 00 	sts	0x00E8, r24
    6ce0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6ce2:	80 91 ea 07 	lds	r24, 0x07EA
    6ce6:	88 23       	and	r24, r24
    6ce8:	49 f0       	breq	.+18     	; 0x6cfc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6cea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    6cee:	80 ff       	sbrs	r24, 0
    6cf0:	f8 cf       	rjmp	.-16     	; 0x6ce2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6cf2:	80 91 e8 00 	lds	r24, 0x00E8
    6cf6:	8e 77       	andi	r24, 0x7E	; 126
    6cf8:	80 93 e8 00 	sts	0x00E8, r24
    6cfc:	08 95       	ret

00006cfe <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    6cfe:	40 91 e4 00 	lds	r20, 0x00E4
    6d02:	50 91 e5 00 	lds	r21, 0x00E5
    6d06:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    6d08:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    6d0c:	80 ff       	sbrs	r24, 0
    6d0e:	05 c0       	rjmp	.+10     	; 0x6d1a <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6d10:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    6d14:	80 ff       	sbrs	r24, 0
    6d16:	05 c0       	rjmp	.+10     	; 0x6d22 <Endpoint_WaitUntilReady+0x24>
    6d18:	22 c0       	rjmp	.+68     	; 0x6d5e <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6d1a:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    6d1e:	82 fd       	sbrc	r24, 2
    6d20:	1e c0       	rjmp	.+60     	; 0x6d5e <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    6d22:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    6d26:	88 23       	and	r24, r24
    6d28:	11 f4       	brne	.+4      	; 0x6d2e <Endpoint_WaitUntilReady+0x30>
    6d2a:	82 e0       	ldi	r24, 0x02	; 2
    6d2c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    6d2e:	85 30       	cpi	r24, 0x05	; 5
    6d30:	11 f4       	brne	.+4      	; 0x6d36 <Endpoint_WaitUntilReady+0x38>
    6d32:	83 e0       	ldi	r24, 0x03	; 3
    6d34:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6d36:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    6d3a:	85 ff       	sbrs	r24, 5
    6d3c:	02 c0       	rjmp	.+4      	; 0x6d42 <Endpoint_WaitUntilReady+0x44>
    6d3e:	81 e0       	ldi	r24, 0x01	; 1
    6d40:	08 95       	ret
    6d42:	80 91 e4 00 	lds	r24, 0x00E4
    6d46:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    6d4a:	84 17       	cp	r24, r20
    6d4c:	95 07       	cpc	r25, r21
    6d4e:	e1 f2       	breq	.-72     	; 0x6d08 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    6d50:	22 23       	and	r18, r18
    6d52:	11 f4       	brne	.+4      	; 0x6d58 <Endpoint_WaitUntilReady+0x5a>
    6d54:	84 e0       	ldi	r24, 0x04	; 4
    6d56:	08 95       	ret
    6d58:	21 50       	subi	r18, 0x01	; 1
    6d5a:	ac 01       	movw	r20, r24
    6d5c:	d5 cf       	rjmp	.-86     	; 0x6d08 <Endpoint_WaitUntilReady+0xa>
    6d5e:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    6d60:	08 95       	ret

00006d62 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    6d62:	ef 92       	push	r14
    6d64:	ff 92       	push	r15
    6d66:	0f 93       	push	r16
    6d68:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    6d6a:	4d d0       	rcall	.+154    	; 0x6e06 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    6d6c:	54 d0       	rcall	.+168    	; 0x6e16 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    6d6e:	08 ed       	ldi	r16, 0xD8	; 216
    6d70:	10 e0       	ldi	r17, 0x00	; 0
    6d72:	f8 01       	movw	r30, r16
    6d74:	80 81       	ld	r24, Z
    6d76:	8f 77       	andi	r24, 0x7F	; 127
    6d78:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    6d7a:	80 81       	ld	r24, Z
    6d7c:	80 68       	ori	r24, 0x80	; 128
    6d7e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    6d80:	80 81       	ld	r24, Z
    6d82:	8f 7d       	andi	r24, 0xDF	; 223
    6d84:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    6d86:	e7 ed       	ldi	r30, 0xD7	; 215
    6d88:	f0 e0       	ldi	r31, 0x00	; 0
    6d8a:	80 81       	ld	r24, Z
    6d8c:	80 68       	ori	r24, 0x80	; 128
    6d8e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6d90:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    6d92:	10 92 ea 07 	sts	0x07EA, r1
	USB_ConfigurationNumber  = 0;
    6d96:	10 92 e8 07 	sts	0x07E8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
    6d9a:	10 92 e7 07 	sts	0x07E7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
    6d9e:	10 92 e6 07 	sts	0x07E6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    6da2:	80 ee       	ldi	r24, 0xE0	; 224
    6da4:	e8 2e       	mov	r14, r24
    6da6:	f1 2c       	mov	r15, r1
    6da8:	f7 01       	movw	r30, r14
    6daa:	80 81       	ld	r24, Z
    6dac:	8b 7f       	andi	r24, 0xFB	; 251
    6dae:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    6db0:	f8 01       	movw	r30, r16
    6db2:	80 81       	ld	r24, Z
    6db4:	81 60       	ori	r24, 0x01	; 1
    6db6:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    6db8:	80 e0       	ldi	r24, 0x00	; 0
    6dba:	60 e0       	ldi	r22, 0x00	; 0
    6dbc:	42 e0       	ldi	r20, 0x02	; 2
    6dbe:	49 df       	rcall	.-366    	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    6dc0:	e1 ee       	ldi	r30, 0xE1	; 225
    6dc2:	f0 e0       	ldi	r31, 0x00	; 0
    6dc4:	80 81       	ld	r24, Z
    6dc6:	8e 7f       	andi	r24, 0xFE	; 254
    6dc8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6dca:	e2 ee       	ldi	r30, 0xE2	; 226
    6dcc:	f0 e0       	ldi	r31, 0x00	; 0
    6dce:	80 81       	ld	r24, Z
    6dd0:	81 60       	ori	r24, 0x01	; 1
    6dd2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    6dd4:	80 81       	ld	r24, Z
    6dd6:	88 60       	ori	r24, 0x08	; 8
    6dd8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    6dda:	f7 01       	movw	r30, r14
    6ddc:	80 81       	ld	r24, Z
    6dde:	8e 7f       	andi	r24, 0xFE	; 254
    6de0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    6de2:	f8 01       	movw	r30, r16
    6de4:	80 81       	ld	r24, Z
    6de6:	80 61       	ori	r24, 0x10	; 16
    6de8:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    6dea:	1f 91       	pop	r17
    6dec:	0f 91       	pop	r16
    6dee:	ff 90       	pop	r15
    6df0:	ef 90       	pop	r14
    6df2:	08 95       	ret

00006df4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    6df4:	e7 ed       	ldi	r30, 0xD7	; 215
    6df6:	f0 e0       	ldi	r31, 0x00	; 0
    6df8:	80 81       	ld	r24, Z
    6dfa:	81 60       	ori	r24, 0x01	; 1
    6dfc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    6dfe:	81 e0       	ldi	r24, 0x01	; 1
    6e00:	80 93 e9 07 	sts	0x07E9, r24

	USB_ResetInterface();
}
    6e04:	ae cf       	rjmp	.-164    	; 0x6d62 <USB_ResetInterface>

00006e06 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    6e06:	e8 ed       	ldi	r30, 0xD8	; 216
    6e08:	f0 e0       	ldi	r31, 0x00	; 0
    6e0a:	80 81       	ld	r24, Z
    6e0c:	8c 7f       	andi	r24, 0xFC	; 252
    6e0e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    6e10:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    6e14:	08 95       	ret

00006e16 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    6e16:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    6e1a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    6e1e:	08 95       	ret

00006e20 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    6e20:	1f 92       	push	r1
    6e22:	0f 92       	push	r0
    6e24:	0f b6       	in	r0, 0x3f	; 63
    6e26:	0f 92       	push	r0
    6e28:	0b b6       	in	r0, 0x3b	; 59
    6e2a:	0f 92       	push	r0
    6e2c:	11 24       	eor	r1, r1
    6e2e:	2f 93       	push	r18
    6e30:	3f 93       	push	r19
    6e32:	4f 93       	push	r20
    6e34:	5f 93       	push	r21
    6e36:	6f 93       	push	r22
    6e38:	7f 93       	push	r23
    6e3a:	8f 93       	push	r24
    6e3c:	9f 93       	push	r25
    6e3e:	af 93       	push	r26
    6e40:	bf 93       	push	r27
    6e42:	ef 93       	push	r30
    6e44:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    6e46:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    6e4a:	82 ff       	sbrs	r24, 2
    6e4c:	0a c0       	rjmp	.+20     	; 0x6e62 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    6e4e:	80 91 e2 00 	lds	r24, 0x00E2
    6e52:	82 ff       	sbrs	r24, 2
    6e54:	06 c0       	rjmp	.+12     	; 0x6e62 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    6e56:	80 91 e1 00 	lds	r24, 0x00E1
    6e5a:	8b 7f       	andi	r24, 0xFB	; 251
    6e5c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    6e60:	d1 d3       	rcall	.+1954   	; 0x7604 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    6e62:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    6e66:	80 ff       	sbrs	r24, 0
    6e68:	1f c0       	rjmp	.+62     	; 0x6ea8 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    6e6a:	80 91 d8 00 	lds	r24, 0x00D8
    6e6e:	80 ff       	sbrs	r24, 0
    6e70:	1b c0       	rjmp	.+54     	; 0x6ea8 <__vector_10+0x88>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    6e72:	80 91 da 00 	lds	r24, 0x00DA
    6e76:	8e 7f       	andi	r24, 0xFE	; 254
    6e78:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    6e7c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    6e80:	80 ff       	sbrs	r24, 0
    6e82:	0d c0       	rjmp	.+26     	; 0x6e9e <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6e84:	84 e1       	ldi	r24, 0x14	; 20
    6e86:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6e88:	86 e1       	ldi	r24, 0x16	; 22
    6e8a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    6e8c:	09 b4       	in	r0, 0x29	; 41
    6e8e:	00 fe       	sbrs	r0, 0
    6e90:	fd cf       	rjmp	.-6      	; 0x6e8c <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    6e92:	81 e0       	ldi	r24, 0x01	; 1
    6e94:	80 93 ea 07 	sts	0x07EA, r24
			EVENT_USB_Device_Connect();
    6e98:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EVENT_USB_Device_Connect>
    6e9c:	05 c0       	rjmp	.+10     	; 0x6ea8 <__vector_10+0x88>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6e9e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    6ea0:	10 92 ea 07 	sts	0x07EA, r1
			EVENT_USB_Device_Disconnect();
    6ea4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    6ea8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    6eac:	80 ff       	sbrs	r24, 0
    6eae:	18 c0       	rjmp	.+48     	; 0x6ee0 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    6eb0:	80 91 e2 00 	lds	r24, 0x00E2
    6eb4:	80 ff       	sbrs	r24, 0
    6eb6:	14 c0       	rjmp	.+40     	; 0x6ee0 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6eb8:	80 91 e2 00 	lds	r24, 0x00E2
    6ebc:	8e 7f       	andi	r24, 0xFE	; 254
    6ebe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6ec2:	80 91 e2 00 	lds	r24, 0x00E2
    6ec6:	80 61       	ori	r24, 0x10	; 16
    6ec8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    6ecc:	80 91 d8 00 	lds	r24, 0x00D8
    6ed0:	80 62       	ori	r24, 0x20	; 32
    6ed2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6ed6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    6ed8:	85 e0       	ldi	r24, 0x05	; 5
    6eda:	80 93 ea 07 	sts	0x07EA, r24
		EVENT_USB_Device_Suspend();
    6ede:	92 d3       	rcall	.+1828   	; 0x7604 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    6ee0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    6ee4:	84 ff       	sbrs	r24, 4
    6ee6:	2d c0       	rjmp	.+90     	; 0x6f42 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    6ee8:	80 91 e2 00 	lds	r24, 0x00E2
    6eec:	84 ff       	sbrs	r24, 4
    6eee:	29 c0       	rjmp	.+82     	; 0x6f42 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6ef0:	84 e1       	ldi	r24, 0x14	; 20
    6ef2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6ef4:	86 e1       	ldi	r24, 0x16	; 22
    6ef6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    6ef8:	09 b4       	in	r0, 0x29	; 41
    6efa:	00 fe       	sbrs	r0, 0
    6efc:	fd cf       	rjmp	.-6      	; 0x6ef8 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    6efe:	80 91 d8 00 	lds	r24, 0x00D8
    6f02:	8f 7d       	andi	r24, 0xDF	; 223
    6f04:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    6f08:	80 91 e1 00 	lds	r24, 0x00E1
    6f0c:	8f 7e       	andi	r24, 0xEF	; 239
    6f0e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    6f12:	80 91 e2 00 	lds	r24, 0x00E2
    6f16:	8f 7e       	andi	r24, 0xEF	; 239
    6f18:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6f1c:	80 91 e2 00 	lds	r24, 0x00E2
    6f20:	81 60       	ori	r24, 0x01	; 1
    6f22:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
    6f26:	80 91 e8 07 	lds	r24, 0x07E8
    6f2a:	88 23       	and	r24, r24
    6f2c:	31 f4       	brne	.+12     	; 0x6f3a <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6f2e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    6f32:	87 fd       	sbrc	r24, 7
    6f34:	02 c0       	rjmp	.+4      	; 0x6f3a <__vector_10+0x11a>
    6f36:	81 e0       	ldi	r24, 0x01	; 1
    6f38:	01 c0       	rjmp	.+2      	; 0x6f3c <__vector_10+0x11c>
    6f3a:	84 e0       	ldi	r24, 0x04	; 4
    6f3c:	80 93 ea 07 	sts	0x07EA, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    6f40:	61 d3       	rcall	.+1730   	; 0x7604 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    6f42:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    6f46:	83 ff       	sbrs	r24, 3
    6f48:	22 c0       	rjmp	.+68     	; 0x6f8e <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    6f4a:	80 91 e2 00 	lds	r24, 0x00E2
    6f4e:	83 ff       	sbrs	r24, 3
    6f50:	1e c0       	rjmp	.+60     	; 0x6f8e <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    6f52:	80 91 e1 00 	lds	r24, 0x00E1
    6f56:	87 7f       	andi	r24, 0xF7	; 247
    6f58:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
    6f5c:	82 e0       	ldi	r24, 0x02	; 2
    6f5e:	80 93 ea 07 	sts	0x07EA, r24
		USB_ConfigurationNumber = 0;
    6f62:	10 92 e8 07 	sts	0x07E8, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    6f66:	80 91 e1 00 	lds	r24, 0x00E1
    6f6a:	8e 7f       	andi	r24, 0xFE	; 254
    6f6c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6f70:	80 91 e2 00 	lds	r24, 0x00E2
    6f74:	8e 7f       	andi	r24, 0xFE	; 254
    6f76:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6f7a:	80 91 e2 00 	lds	r24, 0x00E2
    6f7e:	80 61       	ori	r24, 0x10	; 16
    6f80:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    6f84:	80 e0       	ldi	r24, 0x00	; 0
    6f86:	60 e0       	ldi	r22, 0x00	; 0
    6f88:	42 e0       	ldi	r20, 0x02	; 2
    6f8a:	63 de       	rcall	.-826    	; 0x6c52 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    6f8c:	3b d3       	rcall	.+1654   	; 0x7604 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    6f8e:	ff 91       	pop	r31
    6f90:	ef 91       	pop	r30
    6f92:	bf 91       	pop	r27
    6f94:	af 91       	pop	r26
    6f96:	9f 91       	pop	r25
    6f98:	8f 91       	pop	r24
    6f9a:	7f 91       	pop	r23
    6f9c:	6f 91       	pop	r22
    6f9e:	5f 91       	pop	r21
    6fa0:	4f 91       	pop	r20
    6fa2:	3f 91       	pop	r19
    6fa4:	2f 91       	pop	r18
    6fa6:	0f 90       	pop	r0
    6fa8:	0b be       	out	0x3b, r0	; 59
    6faa:	0f 90       	pop	r0
    6fac:	0f be       	out	0x3f, r0	; 63
    6fae:	0f 90       	pop	r0
    6fb0:	1f 90       	pop	r1
    6fb2:	18 95       	reti

00006fb4 <Endpoint_Write_Control_Stream_LE>:
    6fb4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    6fb6:	40 91 f1 07 	lds	r20, 0x07F1
    6fba:	50 91 f2 07 	lds	r21, 0x07F2
    6fbe:	46 17       	cp	r20, r22
    6fc0:	57 07       	cpc	r21, r23
    6fc2:	18 f4       	brcc	.+6      	; 0x6fca <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    6fc4:	f9 01       	movw	r30, r18
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	3d c0       	rjmp	.+122    	; 0x7044 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    6fca:	61 15       	cp	r22, r1
    6fcc:	71 05       	cpc	r23, r1
    6fce:	11 f0       	breq	.+4      	; 0x6fd4 <Endpoint_Write_Control_Stream_LE+0x20>
    6fd0:	ab 01       	movw	r20, r22
    6fd2:	f8 cf       	rjmp	.-16     	; 0x6fc4 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6fd4:	80 91 e8 00 	lds	r24, 0x00E8
    6fd8:	8e 77       	andi	r24, 0x7E	; 126
    6fda:	80 93 e8 00 	sts	0x00E8, r24
    6fde:	40 e0       	ldi	r20, 0x00	; 0
    6fe0:	50 e0       	ldi	r21, 0x00	; 0
    6fe2:	f0 cf       	rjmp	.-32     	; 0x6fc4 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    6fe4:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    6fe8:	88 23       	and	r24, r24
    6fea:	f1 f1       	breq	.+124    	; 0x7068 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    6fec:	85 30       	cpi	r24, 0x05	; 5
    6fee:	f1 f1       	breq	.+124    	; 0x706c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    6ff0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    6ff4:	83 ff       	sbrs	r24, 3
    6ff6:	02 c0       	rjmp	.+4      	; 0x6ffc <Endpoint_Write_Control_Stream_LE+0x48>
    6ff8:	81 e0       	ldi	r24, 0x01	; 1
    6ffa:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6ffc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7000:	82 fd       	sbrc	r24, 2
    7002:	2c c0       	rjmp	.+88     	; 0x705c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7004:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7008:	80 ff       	sbrs	r24, 0
    700a:	1c c0       	rjmp	.+56     	; 0x7044 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    700c:	20 91 f2 00 	lds	r18, 0x00F2
    7010:	30 91 f3 00 	lds	r19, 0x00F3
    7014:	07 c0       	rjmp	.+14     	; 0x7024 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7016:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7018:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    701c:	41 50       	subi	r20, 0x01	; 1
    701e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    7020:	2f 5f       	subi	r18, 0xFF	; 255
    7022:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7024:	41 15       	cp	r20, r1
    7026:	51 05       	cpc	r21, r1
    7028:	19 f0       	breq	.+6      	; 0x7030 <Endpoint_Write_Control_Stream_LE+0x7c>
    702a:	28 30       	cpi	r18, 0x08	; 8
    702c:	31 05       	cpc	r19, r1
    702e:	98 f3       	brcs	.-26     	; 0x7016 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	28 30       	cpi	r18, 0x08	; 8
    7034:	31 05       	cpc	r19, r1
    7036:	09 f4       	brne	.+2      	; 0x703a <Endpoint_Write_Control_Stream_LE+0x86>
    7038:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    703a:	80 91 e8 00 	lds	r24, 0x00E8
    703e:	8e 77       	andi	r24, 0x7E	; 126
    7040:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7044:	41 15       	cp	r20, r1
    7046:	51 05       	cpc	r21, r1
    7048:	69 f6       	brne	.-102    	; 0x6fe4 <Endpoint_Write_Control_Stream_LE+0x30>
    704a:	99 23       	and	r25, r25
    704c:	59 f6       	brne	.-106    	; 0x6fe4 <Endpoint_Write_Control_Stream_LE+0x30>
    704e:	06 c0       	rjmp	.+12     	; 0x705c <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7050:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7054:	88 23       	and	r24, r24
    7056:	41 f0       	breq	.+16     	; 0x7068 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7058:	85 30       	cpi	r24, 0x05	; 5
    705a:	41 f0       	breq	.+16     	; 0x706c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    705c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7060:	82 ff       	sbrs	r24, 2
    7062:	f6 cf       	rjmp	.-20     	; 0x7050 <Endpoint_Write_Control_Stream_LE+0x9c>
    7064:	80 e0       	ldi	r24, 0x00	; 0
    7066:	08 95       	ret
    7068:	82 e0       	ldi	r24, 0x02	; 2
    706a:	08 95       	ret
    706c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    706e:	08 95       	ret

00007070 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7070:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7072:	61 15       	cp	r22, r1
    7074:	71 05       	cpc	r23, r1
    7076:	29 f4       	brne	.+10     	; 0x7082 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7078:	80 91 e8 00 	lds	r24, 0x00E8
    707c:	8b 77       	andi	r24, 0x7B	; 123
    707e:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7082:	f9 01       	movw	r30, r18
    7084:	22 c0       	rjmp	.+68     	; 0x70ca <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7086:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    708a:	88 23       	and	r24, r24
    708c:	71 f1       	breq	.+92     	; 0x70ea <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    708e:	85 30       	cpi	r24, 0x05	; 5
    7090:	71 f1       	breq	.+92     	; 0x70ee <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7092:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7096:	83 ff       	sbrs	r24, 3
    7098:	02 c0       	rjmp	.+4      	; 0x709e <Endpoint_Read_Control_Stream_LE+0x2e>
    709a:	81 e0       	ldi	r24, 0x01	; 1
    709c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    709e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    70a2:	82 ff       	sbrs	r24, 2
    70a4:	f0 cf       	rjmp	.-32     	; 0x7086 <Endpoint_Read_Control_Stream_LE+0x16>
    70a6:	06 c0       	rjmp	.+12     	; 0x70b4 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    70a8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    70ac:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    70ae:	61 50       	subi	r22, 0x01	; 1
    70b0:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    70b2:	31 f0       	breq	.+12     	; 0x70c0 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    70b4:	80 91 f2 00 	lds	r24, 0x00F2
    70b8:	90 91 f3 00 	lds	r25, 0x00F3
    70bc:	89 2b       	or	r24, r25
    70be:	a1 f7       	brne	.-24     	; 0x70a8 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70c0:	80 91 e8 00 	lds	r24, 0x00E8
    70c4:	8b 77       	andi	r24, 0x7B	; 123
    70c6:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    70ca:	61 15       	cp	r22, r1
    70cc:	71 05       	cpc	r23, r1
    70ce:	d9 f6       	brne	.-74     	; 0x7086 <Endpoint_Read_Control_Stream_LE+0x16>
    70d0:	06 c0       	rjmp	.+12     	; 0x70de <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    70d2:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    70d6:	88 23       	and	r24, r24
    70d8:	41 f0       	breq	.+16     	; 0x70ea <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    70da:	85 30       	cpi	r24, 0x05	; 5
    70dc:	41 f0       	breq	.+16     	; 0x70ee <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    70de:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    70e2:	80 ff       	sbrs	r24, 0
    70e4:	f6 cf       	rjmp	.-20     	; 0x70d2 <Endpoint_Read_Control_Stream_LE+0x62>
    70e6:	80 e0       	ldi	r24, 0x00	; 0
    70e8:	08 95       	ret
    70ea:	82 e0       	ldi	r24, 0x02	; 2
    70ec:	08 95       	ret
    70ee:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    70f0:	08 95       	ret

000070f2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    70f2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    70f4:	40 91 f1 07 	lds	r20, 0x07F1
    70f8:	50 91 f2 07 	lds	r21, 0x07F2
    70fc:	46 17       	cp	r20, r22
    70fe:	57 07       	cpc	r21, r23
    7100:	18 f4       	brcc	.+6      	; 0x7108 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7102:	f9 01       	movw	r30, r18
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	40 c0       	rjmp	.+128    	; 0x7188 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7108:	61 15       	cp	r22, r1
    710a:	71 05       	cpc	r23, r1
    710c:	11 f0       	breq	.+4      	; 0x7112 <Endpoint_Write_Control_PStream_LE+0x20>
    710e:	ab 01       	movw	r20, r22
    7110:	f8 cf       	rjmp	.-16     	; 0x7102 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7112:	80 91 e8 00 	lds	r24, 0x00E8
    7116:	8e 77       	andi	r24, 0x7E	; 126
    7118:	80 93 e8 00 	sts	0x00E8, r24
    711c:	40 e0       	ldi	r20, 0x00	; 0
    711e:	50 e0       	ldi	r21, 0x00	; 0
    7120:	f0 cf       	rjmp	.-32     	; 0x7102 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7122:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7126:	88 23       	and	r24, r24
    7128:	09 f4       	brne	.+2      	; 0x712c <Endpoint_Write_Control_PStream_LE+0x3a>
    712a:	40 c0       	rjmp	.+128    	; 0x71ac <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    712c:	85 30       	cpi	r24, 0x05	; 5
    712e:	09 f4       	brne	.+2      	; 0x7132 <Endpoint_Write_Control_PStream_LE+0x40>
    7130:	3f c0       	rjmp	.+126    	; 0x71b0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7132:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7136:	83 ff       	sbrs	r24, 3
    7138:	02 c0       	rjmp	.+4      	; 0x713e <Endpoint_Write_Control_PStream_LE+0x4c>
    713a:	81 e0       	ldi	r24, 0x01	; 1
    713c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    713e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7142:	82 fd       	sbrc	r24, 2
    7144:	2d c0       	rjmp	.+90     	; 0x71a0 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7146:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    714a:	80 ff       	sbrs	r24, 0
    714c:	1d c0       	rjmp	.+58     	; 0x7188 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    714e:	20 91 f2 00 	lds	r18, 0x00F2
    7152:	30 91 f3 00 	lds	r19, 0x00F3
    7156:	08 c0       	rjmp	.+16     	; 0x7168 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7158:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    715a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    715e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    7160:	41 50       	subi	r20, 0x01	; 1
    7162:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    7164:	2f 5f       	subi	r18, 0xFF	; 255
    7166:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    7168:	41 15       	cp	r20, r1
    716a:	51 05       	cpc	r21, r1
    716c:	19 f0       	breq	.+6      	; 0x7174 <Endpoint_Write_Control_PStream_LE+0x82>
    716e:	28 30       	cpi	r18, 0x08	; 8
    7170:	31 05       	cpc	r19, r1
    7172:	90 f3       	brcs	.-28     	; 0x7158 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	28 30       	cpi	r18, 0x08	; 8
    7178:	31 05       	cpc	r19, r1
    717a:	09 f4       	brne	.+2      	; 0x717e <Endpoint_Write_Control_PStream_LE+0x8c>
    717c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    717e:	80 91 e8 00 	lds	r24, 0x00E8
    7182:	8e 77       	andi	r24, 0x7E	; 126
    7184:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7188:	41 15       	cp	r20, r1
    718a:	51 05       	cpc	r21, r1
    718c:	51 f6       	brne	.-108    	; 0x7122 <Endpoint_Write_Control_PStream_LE+0x30>
    718e:	99 23       	and	r25, r25
    7190:	41 f6       	brne	.-112    	; 0x7122 <Endpoint_Write_Control_PStream_LE+0x30>
    7192:	06 c0       	rjmp	.+12     	; 0x71a0 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7194:	80 91 ea 07 	lds	r24, 0x07EA

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7198:	88 23       	and	r24, r24
    719a:	41 f0       	breq	.+16     	; 0x71ac <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    719c:	85 30       	cpi	r24, 0x05	; 5
    719e:	41 f0       	breq	.+16     	; 0x71b0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71a0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    71a4:	82 ff       	sbrs	r24, 2
    71a6:	f6 cf       	rjmp	.-20     	; 0x7194 <Endpoint_Write_Control_PStream_LE+0xa2>
    71a8:	80 e0       	ldi	r24, 0x00	; 0
    71aa:	08 95       	ret
    71ac:	82 e0       	ldi	r24, 0x02	; 2
    71ae:	08 95       	ret
    71b0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    71b2:	08 95       	ret

000071b4 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    71b4:	bf 92       	push	r11
    71b6:	cf 92       	push	r12
    71b8:	df 92       	push	r13
    71ba:	ef 92       	push	r14
    71bc:	ff 92       	push	r15
    71be:	0f 93       	push	r16
    71c0:	1f 93       	push	r17
    71c2:	cf 93       	push	r28
    71c4:	df 93       	push	r29
    71c6:	18 2f       	mov	r17, r24
    71c8:	09 2f       	mov	r16, r25
    71ca:	7b 01       	movw	r14, r22
    71cc:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    71ce:	97 dd       	rcall	.-1234   	; 0x6cfe <Endpoint_WaitUntilReady>
    71d0:	b8 2e       	mov	r11, r24
    71d2:	88 23       	and	r24, r24
    71d4:	b1 f5       	brne	.+108    	; 0x7242 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    71d6:	81 2f       	mov	r24, r17
    71d8:	90 2f       	mov	r25, r16
    71da:	9c 01       	movw	r18, r24
    71dc:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    71de:	c1 14       	cp	r12, r1
    71e0:	d1 04       	cpc	r13, r1
    71e2:	39 f0       	breq	.+14     	; 0x71f2 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    71e4:	f6 01       	movw	r30, r12
    71e6:	80 81       	ld	r24, Z
    71e8:	91 81       	ldd	r25, Z+1	; 0x01
    71ea:	e8 1a       	sub	r14, r24
    71ec:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    71ee:	c8 0f       	add	r28, r24
    71f0:	d9 1f       	adc	r29, r25
    71f2:	00 e0       	ldi	r16, 0x00	; 0
    71f4:	10 e0       	ldi	r17, 0x00	; 0
    71f6:	22 c0       	rjmp	.+68     	; 0x723c <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    71f8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    71fc:	85 fd       	sbrc	r24, 5
    71fe:	16 c0       	rjmp	.+44     	; 0x722c <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7200:	80 91 e8 00 	lds	r24, 0x00E8
    7204:	8b 77       	andi	r24, 0x7B	; 123
    7206:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    720a:	c1 14       	cp	r12, r1
    720c:	d1 04       	cpc	r13, r1
    720e:	49 f0       	breq	.+18     	; 0x7222 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    7210:	f6 01       	movw	r30, r12
    7212:	80 81       	ld	r24, Z
    7214:	91 81       	ldd	r25, Z+1	; 0x01
    7216:	80 0f       	add	r24, r16
    7218:	91 1f       	adc	r25, r17
    721a:	91 83       	std	Z+1, r25	; 0x01
    721c:	80 83       	st	Z, r24
    721e:	85 e0       	ldi	r24, 0x05	; 5
    7220:	11 c0       	rjmp	.+34     	; 0x7244 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    7222:	f1 d1       	rcall	.+994    	; 0x7606 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    7224:	6c dd       	rcall	.-1320   	; 0x6cfe <Endpoint_WaitUntilReady>
    7226:	88 23       	and	r24, r24
    7228:	49 f0       	breq	.+18     	; 0x723c <Endpoint_Read_Stream_LE+0x88>
    722a:	0c c0       	rjmp	.+24     	; 0x7244 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    722c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    7230:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    7232:	08 94       	sec
    7234:	e1 08       	sbc	r14, r1
    7236:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    7238:	0f 5f       	subi	r16, 0xFF	; 255
    723a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    723c:	e1 14       	cp	r14, r1
    723e:	f1 04       	cpc	r15, r1
    7240:	d9 f6       	brne	.-74     	; 0x71f8 <Endpoint_Read_Stream_LE+0x44>
    7242:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    7244:	df 91       	pop	r29
    7246:	cf 91       	pop	r28
    7248:	1f 91       	pop	r17
    724a:	0f 91       	pop	r16
    724c:	ff 90       	pop	r15
    724e:	ef 90       	pop	r14
    7250:	df 90       	pop	r13
    7252:	cf 90       	pop	r12
    7254:	bf 90       	pop	r11
    7256:	08 95       	ret

00007258 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    7258:	bf 92       	push	r11
    725a:	cf 92       	push	r12
    725c:	df 92       	push	r13
    725e:	ef 92       	push	r14
    7260:	ff 92       	push	r15
    7262:	0f 93       	push	r16
    7264:	1f 93       	push	r17
    7266:	cf 93       	push	r28
    7268:	df 93       	push	r29
    726a:	18 2f       	mov	r17, r24
    726c:	09 2f       	mov	r16, r25
    726e:	7b 01       	movw	r14, r22
    7270:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    7272:	45 dd       	rcall	.-1398   	; 0x6cfe <Endpoint_WaitUntilReady>
    7274:	b8 2e       	mov	r11, r24
    7276:	88 23       	and	r24, r24
    7278:	b1 f5       	brne	.+108    	; 0x72e6 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    727a:	81 2f       	mov	r24, r17
    727c:	90 2f       	mov	r25, r16
    727e:	9c 01       	movw	r18, r24
    7280:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    7282:	c1 14       	cp	r12, r1
    7284:	d1 04       	cpc	r13, r1
    7286:	39 f0       	breq	.+14     	; 0x7296 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    7288:	f6 01       	movw	r30, r12
    728a:	80 81       	ld	r24, Z
    728c:	91 81       	ldd	r25, Z+1	; 0x01
    728e:	e8 1a       	sub	r14, r24
    7290:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    7292:	c8 0f       	add	r28, r24
    7294:	d9 1f       	adc	r29, r25
    7296:	00 e0       	ldi	r16, 0x00	; 0
    7298:	10 e0       	ldi	r17, 0x00	; 0
    729a:	22 c0       	rjmp	.+68     	; 0x72e0 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    729c:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    72a0:	85 fd       	sbrc	r24, 5
    72a2:	16 c0       	rjmp	.+44     	; 0x72d0 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72a4:	80 91 e8 00 	lds	r24, 0x00E8
    72a8:	8e 77       	andi	r24, 0x7E	; 126
    72aa:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    72ae:	c1 14       	cp	r12, r1
    72b0:	d1 04       	cpc	r13, r1
    72b2:	49 f0       	breq	.+18     	; 0x72c6 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    72b4:	f6 01       	movw	r30, r12
    72b6:	80 81       	ld	r24, Z
    72b8:	91 81       	ldd	r25, Z+1	; 0x01
    72ba:	80 0f       	add	r24, r16
    72bc:	91 1f       	adc	r25, r17
    72be:	91 83       	std	Z+1, r25	; 0x01
    72c0:	80 83       	st	Z, r24
    72c2:	85 e0       	ldi	r24, 0x05	; 5
    72c4:	11 c0       	rjmp	.+34     	; 0x72e8 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    72c6:	9f d1       	rcall	.+830    	; 0x7606 <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    72c8:	1a dd       	rcall	.-1484   	; 0x6cfe <Endpoint_WaitUntilReady>
    72ca:	88 23       	and	r24, r24
    72cc:	49 f0       	breq	.+18     	; 0x72e0 <Endpoint_Write_Stream_LE+0x88>
    72ce:	0c c0       	rjmp	.+24     	; 0x72e8 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    72d0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    72d2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    72d6:	08 94       	sec
    72d8:	e1 08       	sbc	r14, r1
    72da:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    72dc:	0f 5f       	subi	r16, 0xFF	; 255
    72de:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    72e0:	e1 14       	cp	r14, r1
    72e2:	f1 04       	cpc	r15, r1
    72e4:	d9 f6       	brne	.-74     	; 0x729c <Endpoint_Write_Stream_LE+0x44>
    72e6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	1f 91       	pop	r17
    72ee:	0f 91       	pop	r16
    72f0:	ff 90       	pop	r15
    72f2:	ef 90       	pop	r14
    72f4:	df 90       	pop	r13
    72f6:	cf 90       	pop	r12
    72f8:	bf 90       	pop	r11
    72fa:	08 95       	ret

000072fc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    72fc:	0f 93       	push	r16
    72fe:	1f 93       	push	r17
    7300:	df 93       	push	r29
    7302:	cf 93       	push	r28
    7304:	cd b7       	in	r28, 0x3d	; 61
    7306:	de b7       	in	r29, 0x3e	; 62
    7308:	ac 97       	sbiw	r28, 0x2c	; 44
    730a:	0f b6       	in	r0, 0x3f	; 63
    730c:	f8 94       	cli
    730e:	de bf       	out	0x3e, r29	; 62
    7310:	0f be       	out	0x3f, r0	; 63
    7312:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7314:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
    7318:	80 93 eb 07 	sts	0x07EB, r24
    731c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
    7320:	80 93 ec 07 	sts	0x07EC, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7324:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    7328:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
    732c:	ed ee       	ldi	r30, 0xED	; 237
    732e:	f7 e0       	ldi	r31, 0x07	; 7
    7330:	80 93 ed 07 	sts	0x07ED, r24
    7334:	90 93 ee 07 	sts	0x07EE, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7338:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    733c:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
    7340:	80 93 ef 07 	sts	0x07EF, r24
    7344:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7346:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    734a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
    734e:	80 93 f1 07 	sts	0x07F1, r24
    7352:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
    7354:	0e 94 bf 02 	call	0x57e	; 0x57e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7358:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    735c:	83 ff       	sbrs	r24, 3
    735e:	39 c1       	rjmp	.+626    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7360:	80 91 eb 07 	lds	r24, 0x07EB

		switch (USB_ControlRequest.bRequest)
    7364:	30 91 ec 07 	lds	r19, 0x07EC
    7368:	35 30       	cpi	r19, 0x05	; 5
    736a:	09 f4       	brne	.+2      	; 0x736e <USB_Device_ProcessControlRequest+0x72>
    736c:	87 c0       	rjmp	.+270    	; 0x747c <USB_Device_ProcessControlRequest+0x180>
    736e:	36 30       	cpi	r19, 0x06	; 6
    7370:	40 f4       	brcc	.+16     	; 0x7382 <USB_Device_ProcessControlRequest+0x86>
    7372:	31 30       	cpi	r19, 0x01	; 1
    7374:	c9 f1       	breq	.+114    	; 0x73e8 <USB_Device_ProcessControlRequest+0xec>
    7376:	31 30       	cpi	r19, 0x01	; 1
    7378:	70 f0       	brcs	.+28     	; 0x7396 <USB_Device_ProcessControlRequest+0x9a>
    737a:	33 30       	cpi	r19, 0x03	; 3
    737c:	09 f0       	breq	.+2      	; 0x7380 <USB_Device_ProcessControlRequest+0x84>
    737e:	29 c1       	rjmp	.+594    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
    7380:	33 c0       	rjmp	.+102    	; 0x73e8 <USB_Device_ProcessControlRequest+0xec>
    7382:	38 30       	cpi	r19, 0x08	; 8
    7384:	09 f4       	brne	.+2      	; 0x7388 <USB_Device_ProcessControlRequest+0x8c>
    7386:	f6 c0       	rjmp	.+492    	; 0x7574 <USB_Device_ProcessControlRequest+0x278>
    7388:	39 30       	cpi	r19, 0x09	; 9
    738a:	09 f4       	brne	.+2      	; 0x738e <USB_Device_ProcessControlRequest+0x92>
    738c:	05 c1       	rjmp	.+522    	; 0x7598 <USB_Device_ProcessControlRequest+0x29c>
    738e:	36 30       	cpi	r19, 0x06	; 6
    7390:	09 f0       	breq	.+2      	; 0x7394 <USB_Device_ProcessControlRequest+0x98>
    7392:	1f c1       	rjmp	.+574    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
    7394:	97 c0       	rjmp	.+302    	; 0x74c4 <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7396:	80 38       	cpi	r24, 0x80	; 128
    7398:	21 f0       	breq	.+8      	; 0x73a2 <USB_Device_ProcessControlRequest+0xa6>
    739a:	82 38       	cpi	r24, 0x82	; 130
    739c:	09 f0       	breq	.+2      	; 0x73a0 <USB_Device_ProcessControlRequest+0xa4>
    739e:	19 c1       	rjmp	.+562    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
    73a0:	08 c0       	rjmp	.+16     	; 0x73b2 <USB_Device_ProcessControlRequest+0xb6>
    73a2:	90 91 e6 07 	lds	r25, 0x07E6
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    73a6:	80 91 e7 07 	lds	r24, 0x07E7
    73aa:	88 23       	and	r24, r24
    73ac:	99 f0       	breq	.+38     	; 0x73d4 <USB_Device_ProcessControlRequest+0xd8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    73ae:	92 60       	ori	r25, 0x02	; 2
    73b0:	11 c0       	rjmp	.+34     	; 0x73d4 <USB_Device_ProcessControlRequest+0xd8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    73b2:	80 91 ef 07 	lds	r24, 0x07EF
    73b6:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    73b8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    73bc:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	25 e0       	ldi	r18, 0x05	; 5
    73c4:	96 95       	lsr	r25
    73c6:	87 95       	ror	r24
    73c8:	2a 95       	dec	r18
    73ca:	e1 f7       	brne	.-8      	; 0x73c4 <USB_Device_ProcessControlRequest+0xc8>
    73cc:	98 2f       	mov	r25, r24
    73ce:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    73d0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    73d4:	80 91 e8 00 	lds	r24, 0x00E8
    73d8:	87 7f       	andi	r24, 0xF7	; 247
    73da:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    73de:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    73e2:	10 92 f1 00 	sts	0x00F1, r1
    73e6:	d1 c0       	rjmp	.+418    	; 0x758a <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    73e8:	88 23       	and	r24, r24
    73ea:	19 f0       	breq	.+6      	; 0x73f2 <USB_Device_ProcessControlRequest+0xf6>
    73ec:	82 30       	cpi	r24, 0x02	; 2
    73ee:	09 f0       	breq	.+2      	; 0x73f2 <USB_Device_ProcessControlRequest+0xf6>
    73f0:	f0 c0       	rjmp	.+480    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    73f2:	90 e0       	ldi	r25, 0x00	; 0
    73f4:	8f 71       	andi	r24, 0x1F	; 31
    73f6:	90 70       	andi	r25, 0x00	; 0
    73f8:	00 97       	sbiw	r24, 0x00	; 0
    73fa:	21 f0       	breq	.+8      	; 0x7404 <USB_Device_ProcessControlRequest+0x108>
    73fc:	02 97       	sbiw	r24, 0x02	; 2
    73fe:	09 f0       	breq	.+2      	; 0x7402 <USB_Device_ProcessControlRequest+0x106>
    7400:	e8 c0       	rjmp	.+464    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
    7402:	0c c0       	rjmp	.+24     	; 0x741c <USB_Device_ProcessControlRequest+0x120>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    7404:	80 91 ed 07 	lds	r24, 0x07ED
    7408:	81 30       	cpi	r24, 0x01	; 1
    740a:	09 f0       	breq	.+2      	; 0x740e <USB_Device_ProcessControlRequest+0x112>
    740c:	e2 c0       	rjmp	.+452    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    740e:	10 92 e7 07 	sts	0x07E7, r1
    7412:	33 30       	cpi	r19, 0x03	; 3
    7414:	69 f5       	brne	.+90     	; 0x7470 <USB_Device_ProcessControlRequest+0x174>
    7416:	80 93 e7 07 	sts	0x07E7, r24
    741a:	2a c0       	rjmp	.+84     	; 0x7470 <USB_Device_ProcessControlRequest+0x174>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    741c:	80 91 ed 07 	lds	r24, 0x07ED
    7420:	88 23       	and	r24, r24
    7422:	31 f5       	brne	.+76     	; 0x7470 <USB_Device_ProcessControlRequest+0x174>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7424:	20 91 ef 07 	lds	r18, 0x07EF
    7428:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    742a:	09 f4       	brne	.+2      	; 0x742e <USB_Device_ProcessControlRequest+0x132>
    742c:	d2 c0       	rjmp	.+420    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    742e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7432:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7436:	80 ff       	sbrs	r24, 0
    7438:	1b c0       	rjmp	.+54     	; 0x7470 <USB_Device_ProcessControlRequest+0x174>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    743a:	33 30       	cpi	r19, 0x03	; 3
    743c:	21 f4       	brne	.+8      	; 0x7446 <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    743e:	80 91 eb 00 	lds	r24, 0x00EB
    7442:	80 62       	ori	r24, 0x20	; 32
    7444:	13 c0       	rjmp	.+38     	; 0x746c <USB_Device_ProcessControlRequest+0x170>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7446:	80 91 eb 00 	lds	r24, 0x00EB
    744a:	80 61       	ori	r24, 0x10	; 16
    744c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	90 e0       	ldi	r25, 0x00	; 0
    7454:	02 c0       	rjmp	.+4      	; 0x745a <USB_Device_ProcessControlRequest+0x15e>
    7456:	88 0f       	add	r24, r24
    7458:	99 1f       	adc	r25, r25
    745a:	2a 95       	dec	r18
    745c:	e2 f7       	brpl	.-8      	; 0x7456 <USB_Device_ProcessControlRequest+0x15a>
    745e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7462:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7466:	80 91 eb 00 	lds	r24, 0x00EB
    746a:	88 60       	ori	r24, 0x08	; 8
    746c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7470:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7474:	80 91 e8 00 	lds	r24, 0x00E8
    7478:	87 7f       	andi	r24, 0xF7	; 247
    747a:	8a c0       	rjmp	.+276    	; 0x7590 <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    747c:	88 23       	and	r24, r24
    747e:	09 f0       	breq	.+2      	; 0x7482 <USB_Device_ProcessControlRequest+0x186>
    7480:	a8 c0       	rjmp	.+336    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7482:	10 91 ed 07 	lds	r17, 0x07ED
    7486:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7488:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    748a:	f8 94       	cli
    748c:	80 91 e8 00 	lds	r24, 0x00E8
    7490:	87 7f       	andi	r24, 0xF7	; 247
    7492:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7496:	12 dc       	rcall	.-2012   	; 0x6cbc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7498:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    749c:	80 ff       	sbrs	r24, 0
    749e:	fc cf       	rjmp	.-8      	; 0x7498 <USB_Device_ProcessControlRequest+0x19c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    74a0:	80 91 e3 00 	lds	r24, 0x00E3
    74a4:	80 78       	andi	r24, 0x80	; 128
    74a6:	81 2b       	or	r24, r17

				UDADDR = Temp;
    74a8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    74ac:	80 68       	ori	r24, 0x80	; 128
    74ae:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    74b2:	11 23       	and	r17, r17
    74b4:	11 f4       	brne	.+4      	; 0x74ba <USB_Device_ProcessControlRequest+0x1be>
    74b6:	82 e0       	ldi	r24, 0x02	; 2
    74b8:	01 c0       	rjmp	.+2      	; 0x74bc <USB_Device_ProcessControlRequest+0x1c0>
    74ba:	83 e0       	ldi	r24, 0x03	; 3
    74bc:	80 93 ea 07 	sts	0x07EA, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    74c0:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
    74c2:	87 c0       	rjmp	.+270    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    74c4:	80 58       	subi	r24, 0x80	; 128
    74c6:	82 30       	cpi	r24, 0x02	; 2
    74c8:	08 f0       	brcs	.+2      	; 0x74cc <USB_Device_ProcessControlRequest+0x1d0>
    74ca:	83 c0       	rjmp	.+262    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    74cc:	80 91 ed 07 	lds	r24, 0x07ED
    74d0:	90 91 ee 07 	lds	r25, 0x07EE
    74d4:	23 e0       	ldi	r18, 0x03	; 3
    74d6:	8c 3d       	cpi	r24, 0xDC	; 220
    74d8:	92 07       	cpc	r25, r18
    74da:	09 f0       	breq	.+2      	; 0x74de <USB_Device_ProcessControlRequest+0x1e2>
    74dc:	33 c0       	rjmp	.+102    	; 0x7544 <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    74de:	83 e0       	ldi	r24, 0x03	; 3
    74e0:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    74e2:	8a e2       	ldi	r24, 0x2A	; 42
    74e4:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    74e6:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    74e8:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
    74ea:	de 01       	movw	r26, r28
    74ec:	15 96       	adiw	r26, 0x05	; 5
    74ee:	6e e0       	ldi	r22, 0x0E	; 14
    74f0:	40 e0       	ldi	r20, 0x00	; 0
    74f2:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    74f4:	11 e2       	ldi	r17, 0x21	; 33
    74f6:	e6 2f       	mov	r30, r22
    74f8:	f0 e0       	ldi	r31, 0x00	; 0
    74fa:	10 93 57 00 	sts	0x0057, r17
    74fe:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    7500:	40 ff       	sbrs	r20, 0
    7502:	03 c0       	rjmp	.+6      	; 0x750a <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
    7504:	82 95       	swap	r24
    7506:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    7508:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    750a:	8f 70       	andi	r24, 0x0F	; 15
    750c:	28 2f       	mov	r18, r24
    750e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    7510:	8a 30       	cpi	r24, 0x0A	; 10
    7512:	18 f0       	brcs	.+6      	; 0x751a <USB_Device_ProcessControlRequest+0x21e>
    7514:	c9 01       	movw	r24, r18
    7516:	c7 96       	adiw	r24, 0x37	; 55
    7518:	02 c0       	rjmp	.+4      	; 0x751e <USB_Device_ProcessControlRequest+0x222>
    751a:	c9 01       	movw	r24, r18
    751c:	c0 96       	adiw	r24, 0x30	; 48
    751e:	8d 93       	st	X+, r24
    7520:	9d 93       	st	X+, r25
    7522:	4f 5f       	subi	r20, 0xFF	; 255
    7524:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    7526:	44 31       	cpi	r20, 0x14	; 20
    7528:	51 05       	cpc	r21, r1
    752a:	29 f7       	brne	.-54     	; 0x74f6 <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    752c:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    752e:	80 91 e8 00 	lds	r24, 0x00E8
    7532:	87 7f       	andi	r24, 0xF7	; 247
    7534:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    7538:	ce 01       	movw	r24, r28
    753a:	03 96       	adiw	r24, 0x03	; 3
    753c:	6a e2       	ldi	r22, 0x2A	; 42
    753e:	70 e0       	ldi	r23, 0x00	; 0
    7540:	39 dd       	rcall	.-1422   	; 0x6fb4 <Endpoint_Write_Control_Stream_LE>
    7542:	12 c0       	rjmp	.+36     	; 0x7568 <USB_Device_ProcessControlRequest+0x26c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7544:	60 91 ef 07 	lds	r22, 0x07EF
    7548:	ae 01       	movw	r20, r28
    754a:	4f 5f       	subi	r20, 0xFF	; 255
    754c:	5f 4f       	sbci	r21, 0xFF	; 255
    754e:	2f db       	rcall	.-2466   	; 0x6bae <CALLBACK_USB_GetDescriptor>
    7550:	bc 01       	movw	r22, r24
    7552:	00 97       	sbiw	r24, 0x00	; 0
    7554:	09 f4       	brne	.+2      	; 0x7558 <USB_Device_ProcessControlRequest+0x25c>
    7556:	3d c0       	rjmp	.+122    	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
    7558:	80 91 e8 00 	lds	r24, 0x00E8
    755c:	87 7f       	andi	r24, 0xF7	; 247
    755e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    7562:	89 81       	ldd	r24, Y+1	; 0x01
    7564:	9a 81       	ldd	r25, Y+2	; 0x02
    7566:	c5 dd       	rcall	.-1142   	; 0x70f2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7568:	80 91 e8 00 	lds	r24, 0x00E8
    756c:	8b 77       	andi	r24, 0x7B	; 123
    756e:	80 93 e8 00 	sts	0x00E8, r24
    7572:	2f c0       	rjmp	.+94     	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7574:	80 38       	cpi	r24, 0x80	; 128
    7576:	69 f5       	brne	.+90     	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7578:	80 91 e8 00 	lds	r24, 0x00E8
    757c:	87 7f       	andi	r24, 0xF7	; 247
    757e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
    7582:	80 91 e8 07 	lds	r24, 0x07E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7586:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    758a:	80 91 e8 00 	lds	r24, 0x00E8
    758e:	8e 77       	andi	r24, 0x7E	; 126
    7590:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7594:	93 db       	rcall	.-2266   	; 0x6cbc <Endpoint_ClearStatusStage>
    7596:	1d c0       	rjmp	.+58     	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7598:	88 23       	and	r24, r24
    759a:	d9 f4       	brne	.+54     	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    759c:	90 91 ed 07 	lds	r25, 0x07ED
    75a0:	92 30       	cpi	r25, 0x02	; 2
    75a2:	b8 f4       	brcc	.+46     	; 0x75d2 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    75a4:	80 91 e8 00 	lds	r24, 0x00E8
    75a8:	87 7f       	andi	r24, 0xF7	; 247
    75aa:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    75ae:	90 93 e8 07 	sts	0x07E8, r25

	Endpoint_ClearStatusStage();
    75b2:	84 db       	rcall	.-2296   	; 0x6cbc <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    75b4:	80 91 e8 07 	lds	r24, 0x07E8
    75b8:	88 23       	and	r24, r24
    75ba:	31 f4       	brne	.+12     	; 0x75c8 <USB_Device_ProcessControlRequest+0x2cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    75bc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    75c0:	87 fd       	sbrc	r24, 7
    75c2:	02 c0       	rjmp	.+4      	; 0x75c8 <USB_Device_ProcessControlRequest+0x2cc>
    75c4:	81 e0       	ldi	r24, 0x01	; 1
    75c6:	01 c0       	rjmp	.+2      	; 0x75ca <USB_Device_ProcessControlRequest+0x2ce>
    75c8:	84 e0       	ldi	r24, 0x04	; 4
    75ca:	80 93 ea 07 	sts	0x07EA, r24

	EVENT_USB_Device_ConfigurationChanged();
    75ce:	0e 94 2f 03 	call	0x65e	; 0x65e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    75d2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    75d6:	83 ff       	sbrs	r24, 3
    75d8:	0a c0       	rjmp	.+20     	; 0x75ee <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    75da:	80 91 eb 00 	lds	r24, 0x00EB
    75de:	80 62       	ori	r24, 0x20	; 32
    75e0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    75e4:	80 91 e8 00 	lds	r24, 0x00E8
    75e8:	87 7f       	andi	r24, 0xF7	; 247
    75ea:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    75ee:	ac 96       	adiw	r28, 0x2c	; 44
    75f0:	0f b6       	in	r0, 0x3f	; 63
    75f2:	f8 94       	cli
    75f4:	de bf       	out	0x3e, r29	; 62
    75f6:	0f be       	out	0x3f, r0	; 63
    75f8:	cd bf       	out	0x3d, r28	; 61
    75fa:	cf 91       	pop	r28
    75fc:	df 91       	pop	r29
    75fe:	1f 91       	pop	r17
    7600:	0f 91       	pop	r16
    7602:	08 95       	ret

00007604 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7604:	08 95       	ret

00007606 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7606:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7608:	80 91 ea 07 	lds	r24, 0x07EA
    760c:	88 23       	and	r24, r24
    760e:	61 f0       	breq	.+24     	; 0x7628 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7610:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7614:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7618:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    761c:	83 ff       	sbrs	r24, 3
    761e:	01 c0       	rjmp	.+2      	; 0x7622 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    7620:	6d de       	rcall	.-806    	; 0x72fc <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7622:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7624:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7628:	1f 91       	pop	r17
    762a:	08 95       	ret

0000762c <__subsf3>:
    762c:	50 58       	subi	r21, 0x80	; 128

0000762e <__addsf3>:
    762e:	bb 27       	eor	r27, r27
    7630:	aa 27       	eor	r26, r26
    7632:	0e d0       	rcall	.+28     	; 0x7650 <__addsf3x>
    7634:	9a c1       	rjmp	.+820    	; 0x796a <__fp_round>
    7636:	8b d1       	rcall	.+790    	; 0x794e <__fp_pscA>
    7638:	30 f0       	brcs	.+12     	; 0x7646 <__addsf3+0x18>
    763a:	90 d1       	rcall	.+800    	; 0x795c <__fp_pscB>
    763c:	20 f0       	brcs	.+8      	; 0x7646 <__addsf3+0x18>
    763e:	31 f4       	brne	.+12     	; 0x764c <__addsf3+0x1e>
    7640:	9f 3f       	cpi	r25, 0xFF	; 255
    7642:	11 f4       	brne	.+4      	; 0x7648 <__addsf3+0x1a>
    7644:	1e f4       	brtc	.+6      	; 0x764c <__addsf3+0x1e>
    7646:	5b c1       	rjmp	.+694    	; 0x78fe <__fp_nan>
    7648:	0e f4       	brtc	.+2      	; 0x764c <__addsf3+0x1e>
    764a:	e0 95       	com	r30
    764c:	e7 fb       	bst	r30, 7
    764e:	51 c1       	rjmp	.+674    	; 0x78f2 <__fp_inf>

00007650 <__addsf3x>:
    7650:	e9 2f       	mov	r30, r25
    7652:	9c d1       	rcall	.+824    	; 0x798c <__fp_split3>
    7654:	80 f3       	brcs	.-32     	; 0x7636 <__addsf3+0x8>
    7656:	ba 17       	cp	r27, r26
    7658:	62 07       	cpc	r22, r18
    765a:	73 07       	cpc	r23, r19
    765c:	84 07       	cpc	r24, r20
    765e:	95 07       	cpc	r25, r21
    7660:	18 f0       	brcs	.+6      	; 0x7668 <__addsf3x+0x18>
    7662:	71 f4       	brne	.+28     	; 0x7680 <__addsf3x+0x30>
    7664:	9e f5       	brtc	.+102    	; 0x76cc <__addsf3x+0x7c>
    7666:	b4 c1       	rjmp	.+872    	; 0x79d0 <__fp_zero>
    7668:	0e f4       	brtc	.+2      	; 0x766c <__addsf3x+0x1c>
    766a:	e0 95       	com	r30
    766c:	0b 2e       	mov	r0, r27
    766e:	ba 2f       	mov	r27, r26
    7670:	a0 2d       	mov	r26, r0
    7672:	0b 01       	movw	r0, r22
    7674:	b9 01       	movw	r22, r18
    7676:	90 01       	movw	r18, r0
    7678:	0c 01       	movw	r0, r24
    767a:	ca 01       	movw	r24, r20
    767c:	a0 01       	movw	r20, r0
    767e:	11 24       	eor	r1, r1
    7680:	ff 27       	eor	r31, r31
    7682:	59 1b       	sub	r21, r25
    7684:	99 f0       	breq	.+38     	; 0x76ac <__addsf3x+0x5c>
    7686:	59 3f       	cpi	r21, 0xF9	; 249
    7688:	50 f4       	brcc	.+20     	; 0x769e <__addsf3x+0x4e>
    768a:	50 3e       	cpi	r21, 0xE0	; 224
    768c:	68 f1       	brcs	.+90     	; 0x76e8 <__addsf3x+0x98>
    768e:	1a 16       	cp	r1, r26
    7690:	f0 40       	sbci	r31, 0x00	; 0
    7692:	a2 2f       	mov	r26, r18
    7694:	23 2f       	mov	r18, r19
    7696:	34 2f       	mov	r19, r20
    7698:	44 27       	eor	r20, r20
    769a:	58 5f       	subi	r21, 0xF8	; 248
    769c:	f3 cf       	rjmp	.-26     	; 0x7684 <__addsf3x+0x34>
    769e:	46 95       	lsr	r20
    76a0:	37 95       	ror	r19
    76a2:	27 95       	ror	r18
    76a4:	a7 95       	ror	r26
    76a6:	f0 40       	sbci	r31, 0x00	; 0
    76a8:	53 95       	inc	r21
    76aa:	c9 f7       	brne	.-14     	; 0x769e <__addsf3x+0x4e>
    76ac:	7e f4       	brtc	.+30     	; 0x76cc <__addsf3x+0x7c>
    76ae:	1f 16       	cp	r1, r31
    76b0:	ba 0b       	sbc	r27, r26
    76b2:	62 0b       	sbc	r22, r18
    76b4:	73 0b       	sbc	r23, r19
    76b6:	84 0b       	sbc	r24, r20
    76b8:	ba f0       	brmi	.+46     	; 0x76e8 <__addsf3x+0x98>
    76ba:	91 50       	subi	r25, 0x01	; 1
    76bc:	a1 f0       	breq	.+40     	; 0x76e6 <__addsf3x+0x96>
    76be:	ff 0f       	add	r31, r31
    76c0:	bb 1f       	adc	r27, r27
    76c2:	66 1f       	adc	r22, r22
    76c4:	77 1f       	adc	r23, r23
    76c6:	88 1f       	adc	r24, r24
    76c8:	c2 f7       	brpl	.-16     	; 0x76ba <__addsf3x+0x6a>
    76ca:	0e c0       	rjmp	.+28     	; 0x76e8 <__addsf3x+0x98>
    76cc:	ba 0f       	add	r27, r26
    76ce:	62 1f       	adc	r22, r18
    76d0:	73 1f       	adc	r23, r19
    76d2:	84 1f       	adc	r24, r20
    76d4:	48 f4       	brcc	.+18     	; 0x76e8 <__addsf3x+0x98>
    76d6:	87 95       	ror	r24
    76d8:	77 95       	ror	r23
    76da:	67 95       	ror	r22
    76dc:	b7 95       	ror	r27
    76de:	f7 95       	ror	r31
    76e0:	9e 3f       	cpi	r25, 0xFE	; 254
    76e2:	08 f0       	brcs	.+2      	; 0x76e6 <__addsf3x+0x96>
    76e4:	b3 cf       	rjmp	.-154    	; 0x764c <__addsf3+0x1e>
    76e6:	93 95       	inc	r25
    76e8:	88 0f       	add	r24, r24
    76ea:	08 f0       	brcs	.+2      	; 0x76ee <__addsf3x+0x9e>
    76ec:	99 27       	eor	r25, r25
    76ee:	ee 0f       	add	r30, r30
    76f0:	97 95       	ror	r25
    76f2:	87 95       	ror	r24
    76f4:	08 95       	ret

000076f6 <atan>:
    76f6:	df 93       	push	r29
    76f8:	dd 27       	eor	r29, r29
    76fa:	b9 2f       	mov	r27, r25
    76fc:	bf 77       	andi	r27, 0x7F	; 127
    76fe:	40 e8       	ldi	r20, 0x80	; 128
    7700:	5f e3       	ldi	r21, 0x3F	; 63
    7702:	16 16       	cp	r1, r22
    7704:	17 06       	cpc	r1, r23
    7706:	48 07       	cpc	r20, r24
    7708:	5b 07       	cpc	r21, r27
    770a:	10 f4       	brcc	.+4      	; 0x7710 <atan+0x1a>
    770c:	d9 2f       	mov	r29, r25
    770e:	67 d1       	rcall	.+718    	; 0x79de <inverse>
    7710:	9f 93       	push	r25
    7712:	8f 93       	push	r24
    7714:	7f 93       	push	r23
    7716:	6f 93       	push	r22
    7718:	5a d2       	rcall	.+1204   	; 0x7bce <square>
    771a:	e8 e9       	ldi	r30, 0x98	; 152
    771c:	f0 e0       	ldi	r31, 0x00	; 0
    771e:	f2 d0       	rcall	.+484    	; 0x7904 <__fp_powser>
    7720:	24 d1       	rcall	.+584    	; 0x796a <__fp_round>
    7722:	2f 91       	pop	r18
    7724:	3f 91       	pop	r19
    7726:	4f 91       	pop	r20
    7728:	5f 91       	pop	r21
    772a:	6c d1       	rcall	.+728    	; 0x7a04 <__mulsf3x>
    772c:	dd 23       	and	r29, r29
    772e:	49 f0       	breq	.+18     	; 0x7742 <atan+0x4c>
    7730:	90 58       	subi	r25, 0x80	; 128
    7732:	a2 ea       	ldi	r26, 0xA2	; 162
    7734:	2a ed       	ldi	r18, 0xDA	; 218
    7736:	3f e0       	ldi	r19, 0x0F	; 15
    7738:	49 ec       	ldi	r20, 0xC9	; 201
    773a:	5f e3       	ldi	r21, 0x3F	; 63
    773c:	d0 78       	andi	r29, 0x80	; 128
    773e:	5d 27       	eor	r21, r29
    7740:	87 df       	rcall	.-242    	; 0x7650 <__addsf3x>
    7742:	df 91       	pop	r29
    7744:	12 c1       	rjmp	.+548    	; 0x796a <__fp_round>

00007746 <__divsf3>:
    7746:	0c d0       	rcall	.+24     	; 0x7760 <__divsf3x>
    7748:	10 c1       	rjmp	.+544    	; 0x796a <__fp_round>
    774a:	08 d1       	rcall	.+528    	; 0x795c <__fp_pscB>
    774c:	40 f0       	brcs	.+16     	; 0x775e <__divsf3+0x18>
    774e:	ff d0       	rcall	.+510    	; 0x794e <__fp_pscA>
    7750:	30 f0       	brcs	.+12     	; 0x775e <__divsf3+0x18>
    7752:	21 f4       	brne	.+8      	; 0x775c <__divsf3+0x16>
    7754:	5f 3f       	cpi	r21, 0xFF	; 255
    7756:	19 f0       	breq	.+6      	; 0x775e <__divsf3+0x18>
    7758:	cc c0       	rjmp	.+408    	; 0x78f2 <__fp_inf>
    775a:	51 11       	cpse	r21, r1
    775c:	3a c1       	rjmp	.+628    	; 0x79d2 <__fp_szero>
    775e:	cf c0       	rjmp	.+414    	; 0x78fe <__fp_nan>

00007760 <__divsf3x>:
    7760:	15 d1       	rcall	.+554    	; 0x798c <__fp_split3>
    7762:	98 f3       	brcs	.-26     	; 0x774a <__divsf3+0x4>

00007764 <__divsf3_pse>:
    7764:	99 23       	and	r25, r25
    7766:	c9 f3       	breq	.-14     	; 0x775a <__divsf3+0x14>
    7768:	55 23       	and	r21, r21
    776a:	b1 f3       	breq	.-20     	; 0x7758 <__divsf3+0x12>
    776c:	95 1b       	sub	r25, r21
    776e:	55 0b       	sbc	r21, r21
    7770:	bb 27       	eor	r27, r27
    7772:	aa 27       	eor	r26, r26
    7774:	62 17       	cp	r22, r18
    7776:	73 07       	cpc	r23, r19
    7778:	84 07       	cpc	r24, r20
    777a:	38 f0       	brcs	.+14     	; 0x778a <__divsf3_pse+0x26>
    777c:	9f 5f       	subi	r25, 0xFF	; 255
    777e:	5f 4f       	sbci	r21, 0xFF	; 255
    7780:	22 0f       	add	r18, r18
    7782:	33 1f       	adc	r19, r19
    7784:	44 1f       	adc	r20, r20
    7786:	aa 1f       	adc	r26, r26
    7788:	a9 f3       	breq	.-22     	; 0x7774 <__divsf3_pse+0x10>
    778a:	33 d0       	rcall	.+102    	; 0x77f2 <__divsf3_pse+0x8e>
    778c:	0e 2e       	mov	r0, r30
    778e:	3a f0       	brmi	.+14     	; 0x779e <__divsf3_pse+0x3a>
    7790:	e0 e8       	ldi	r30, 0x80	; 128
    7792:	30 d0       	rcall	.+96     	; 0x77f4 <__divsf3_pse+0x90>
    7794:	91 50       	subi	r25, 0x01	; 1
    7796:	50 40       	sbci	r21, 0x00	; 0
    7798:	e6 95       	lsr	r30
    779a:	00 1c       	adc	r0, r0
    779c:	ca f7       	brpl	.-14     	; 0x7790 <__divsf3_pse+0x2c>
    779e:	29 d0       	rcall	.+82     	; 0x77f2 <__divsf3_pse+0x8e>
    77a0:	fe 2f       	mov	r31, r30
    77a2:	27 d0       	rcall	.+78     	; 0x77f2 <__divsf3_pse+0x8e>
    77a4:	66 0f       	add	r22, r22
    77a6:	77 1f       	adc	r23, r23
    77a8:	88 1f       	adc	r24, r24
    77aa:	bb 1f       	adc	r27, r27
    77ac:	26 17       	cp	r18, r22
    77ae:	37 07       	cpc	r19, r23
    77b0:	48 07       	cpc	r20, r24
    77b2:	ab 07       	cpc	r26, r27
    77b4:	b0 e8       	ldi	r27, 0x80	; 128
    77b6:	09 f0       	breq	.+2      	; 0x77ba <__divsf3_pse+0x56>
    77b8:	bb 0b       	sbc	r27, r27
    77ba:	80 2d       	mov	r24, r0
    77bc:	bf 01       	movw	r22, r30
    77be:	ff 27       	eor	r31, r31
    77c0:	93 58       	subi	r25, 0x83	; 131
    77c2:	5f 4f       	sbci	r21, 0xFF	; 255
    77c4:	2a f0       	brmi	.+10     	; 0x77d0 <__divsf3_pse+0x6c>
    77c6:	9e 3f       	cpi	r25, 0xFE	; 254
    77c8:	51 05       	cpc	r21, r1
    77ca:	68 f0       	brcs	.+26     	; 0x77e6 <__divsf3_pse+0x82>
    77cc:	92 c0       	rjmp	.+292    	; 0x78f2 <__fp_inf>
    77ce:	01 c1       	rjmp	.+514    	; 0x79d2 <__fp_szero>
    77d0:	5f 3f       	cpi	r21, 0xFF	; 255
    77d2:	ec f3       	brlt	.-6      	; 0x77ce <__divsf3_pse+0x6a>
    77d4:	98 3e       	cpi	r25, 0xE8	; 232
    77d6:	dc f3       	brlt	.-10     	; 0x77ce <__divsf3_pse+0x6a>
    77d8:	86 95       	lsr	r24
    77da:	77 95       	ror	r23
    77dc:	67 95       	ror	r22
    77de:	b7 95       	ror	r27
    77e0:	f7 95       	ror	r31
    77e2:	9f 5f       	subi	r25, 0xFF	; 255
    77e4:	c9 f7       	brne	.-14     	; 0x77d8 <__divsf3_pse+0x74>
    77e6:	88 0f       	add	r24, r24
    77e8:	91 1d       	adc	r25, r1
    77ea:	96 95       	lsr	r25
    77ec:	87 95       	ror	r24
    77ee:	97 f9       	bld	r25, 7
    77f0:	08 95       	ret
    77f2:	e1 e0       	ldi	r30, 0x01	; 1
    77f4:	66 0f       	add	r22, r22
    77f6:	77 1f       	adc	r23, r23
    77f8:	88 1f       	adc	r24, r24
    77fa:	bb 1f       	adc	r27, r27
    77fc:	62 17       	cp	r22, r18
    77fe:	73 07       	cpc	r23, r19
    7800:	84 07       	cpc	r24, r20
    7802:	ba 07       	cpc	r27, r26
    7804:	20 f0       	brcs	.+8      	; 0x780e <__divsf3_pse+0xaa>
    7806:	62 1b       	sub	r22, r18
    7808:	73 0b       	sbc	r23, r19
    780a:	84 0b       	sbc	r24, r20
    780c:	ba 0b       	sbc	r27, r26
    780e:	ee 1f       	adc	r30, r30
    7810:	88 f7       	brcc	.-30     	; 0x77f4 <__divsf3_pse+0x90>
    7812:	e0 95       	com	r30
    7814:	08 95       	ret

00007816 <__fixsfsi>:
    7816:	04 d0       	rcall	.+8      	; 0x7820 <__fixunssfsi>
    7818:	68 94       	set
    781a:	b1 11       	cpse	r27, r1
    781c:	da c0       	rjmp	.+436    	; 0x79d2 <__fp_szero>
    781e:	08 95       	ret

00007820 <__fixunssfsi>:
    7820:	bd d0       	rcall	.+378    	; 0x799c <__fp_splitA>
    7822:	88 f0       	brcs	.+34     	; 0x7846 <__fixunssfsi+0x26>
    7824:	9f 57       	subi	r25, 0x7F	; 127
    7826:	90 f0       	brcs	.+36     	; 0x784c <__fixunssfsi+0x2c>
    7828:	b9 2f       	mov	r27, r25
    782a:	99 27       	eor	r25, r25
    782c:	b7 51       	subi	r27, 0x17	; 23
    782e:	a0 f0       	brcs	.+40     	; 0x7858 <__fixunssfsi+0x38>
    7830:	d1 f0       	breq	.+52     	; 0x7866 <__fixunssfsi+0x46>
    7832:	66 0f       	add	r22, r22
    7834:	77 1f       	adc	r23, r23
    7836:	88 1f       	adc	r24, r24
    7838:	99 1f       	adc	r25, r25
    783a:	1a f0       	brmi	.+6      	; 0x7842 <__fixunssfsi+0x22>
    783c:	ba 95       	dec	r27
    783e:	c9 f7       	brne	.-14     	; 0x7832 <__fixunssfsi+0x12>
    7840:	12 c0       	rjmp	.+36     	; 0x7866 <__fixunssfsi+0x46>
    7842:	b1 30       	cpi	r27, 0x01	; 1
    7844:	81 f0       	breq	.+32     	; 0x7866 <__fixunssfsi+0x46>
    7846:	c4 d0       	rcall	.+392    	; 0x79d0 <__fp_zero>
    7848:	b1 e0       	ldi	r27, 0x01	; 1
    784a:	08 95       	ret
    784c:	c1 c0       	rjmp	.+386    	; 0x79d0 <__fp_zero>
    784e:	67 2f       	mov	r22, r23
    7850:	78 2f       	mov	r23, r24
    7852:	88 27       	eor	r24, r24
    7854:	b8 5f       	subi	r27, 0xF8	; 248
    7856:	39 f0       	breq	.+14     	; 0x7866 <__fixunssfsi+0x46>
    7858:	b9 3f       	cpi	r27, 0xF9	; 249
    785a:	cc f3       	brlt	.-14     	; 0x784e <__fixunssfsi+0x2e>
    785c:	86 95       	lsr	r24
    785e:	77 95       	ror	r23
    7860:	67 95       	ror	r22
    7862:	b3 95       	inc	r27
    7864:	d9 f7       	brne	.-10     	; 0x785c <__fixunssfsi+0x3c>
    7866:	3e f4       	brtc	.+14     	; 0x7876 <__fixunssfsi+0x56>
    7868:	90 95       	com	r25
    786a:	80 95       	com	r24
    786c:	70 95       	com	r23
    786e:	61 95       	neg	r22
    7870:	7f 4f       	sbci	r23, 0xFF	; 255
    7872:	8f 4f       	sbci	r24, 0xFF	; 255
    7874:	9f 4f       	sbci	r25, 0xFF	; 255
    7876:	08 95       	ret

00007878 <__floatunsisf>:
    7878:	e8 94       	clt
    787a:	09 c0       	rjmp	.+18     	; 0x788e <__floatsisf+0x12>

0000787c <__floatsisf>:
    787c:	97 fb       	bst	r25, 7
    787e:	3e f4       	brtc	.+14     	; 0x788e <__floatsisf+0x12>
    7880:	90 95       	com	r25
    7882:	80 95       	com	r24
    7884:	70 95       	com	r23
    7886:	61 95       	neg	r22
    7888:	7f 4f       	sbci	r23, 0xFF	; 255
    788a:	8f 4f       	sbci	r24, 0xFF	; 255
    788c:	9f 4f       	sbci	r25, 0xFF	; 255
    788e:	99 23       	and	r25, r25
    7890:	a9 f0       	breq	.+42     	; 0x78bc <__floatsisf+0x40>
    7892:	f9 2f       	mov	r31, r25
    7894:	96 e9       	ldi	r25, 0x96	; 150
    7896:	bb 27       	eor	r27, r27
    7898:	93 95       	inc	r25
    789a:	f6 95       	lsr	r31
    789c:	87 95       	ror	r24
    789e:	77 95       	ror	r23
    78a0:	67 95       	ror	r22
    78a2:	b7 95       	ror	r27
    78a4:	f1 11       	cpse	r31, r1
    78a6:	f8 cf       	rjmp	.-16     	; 0x7898 <__floatsisf+0x1c>
    78a8:	fa f4       	brpl	.+62     	; 0x78e8 <__floatsisf+0x6c>
    78aa:	bb 0f       	add	r27, r27
    78ac:	11 f4       	brne	.+4      	; 0x78b2 <__floatsisf+0x36>
    78ae:	60 ff       	sbrs	r22, 0
    78b0:	1b c0       	rjmp	.+54     	; 0x78e8 <__floatsisf+0x6c>
    78b2:	6f 5f       	subi	r22, 0xFF	; 255
    78b4:	7f 4f       	sbci	r23, 0xFF	; 255
    78b6:	8f 4f       	sbci	r24, 0xFF	; 255
    78b8:	9f 4f       	sbci	r25, 0xFF	; 255
    78ba:	16 c0       	rjmp	.+44     	; 0x78e8 <__floatsisf+0x6c>
    78bc:	88 23       	and	r24, r24
    78be:	11 f0       	breq	.+4      	; 0x78c4 <__floatsisf+0x48>
    78c0:	96 e9       	ldi	r25, 0x96	; 150
    78c2:	11 c0       	rjmp	.+34     	; 0x78e6 <__floatsisf+0x6a>
    78c4:	77 23       	and	r23, r23
    78c6:	21 f0       	breq	.+8      	; 0x78d0 <__floatsisf+0x54>
    78c8:	9e e8       	ldi	r25, 0x8E	; 142
    78ca:	87 2f       	mov	r24, r23
    78cc:	76 2f       	mov	r23, r22
    78ce:	05 c0       	rjmp	.+10     	; 0x78da <__floatsisf+0x5e>
    78d0:	66 23       	and	r22, r22
    78d2:	71 f0       	breq	.+28     	; 0x78f0 <__floatsisf+0x74>
    78d4:	96 e8       	ldi	r25, 0x86	; 134
    78d6:	86 2f       	mov	r24, r22
    78d8:	70 e0       	ldi	r23, 0x00	; 0
    78da:	60 e0       	ldi	r22, 0x00	; 0
    78dc:	2a f0       	brmi	.+10     	; 0x78e8 <__floatsisf+0x6c>
    78de:	9a 95       	dec	r25
    78e0:	66 0f       	add	r22, r22
    78e2:	77 1f       	adc	r23, r23
    78e4:	88 1f       	adc	r24, r24
    78e6:	da f7       	brpl	.-10     	; 0x78de <__floatsisf+0x62>
    78e8:	88 0f       	add	r24, r24
    78ea:	96 95       	lsr	r25
    78ec:	87 95       	ror	r24
    78ee:	97 f9       	bld	r25, 7
    78f0:	08 95       	ret

000078f2 <__fp_inf>:
    78f2:	97 f9       	bld	r25, 7
    78f4:	9f 67       	ori	r25, 0x7F	; 127
    78f6:	80 e8       	ldi	r24, 0x80	; 128
    78f8:	70 e0       	ldi	r23, 0x00	; 0
    78fa:	60 e0       	ldi	r22, 0x00	; 0
    78fc:	08 95       	ret

000078fe <__fp_nan>:
    78fe:	9f ef       	ldi	r25, 0xFF	; 255
    7900:	80 ec       	ldi	r24, 0xC0	; 192
    7902:	08 95       	ret

00007904 <__fp_powser>:
    7904:	df 93       	push	r29
    7906:	cf 93       	push	r28
    7908:	1f 93       	push	r17
    790a:	0f 93       	push	r16
    790c:	ff 92       	push	r15
    790e:	ef 92       	push	r14
    7910:	df 92       	push	r13
    7912:	7b 01       	movw	r14, r22
    7914:	8c 01       	movw	r16, r24
    7916:	68 94       	set
    7918:	05 c0       	rjmp	.+10     	; 0x7924 <__fp_powser+0x20>
    791a:	da 2e       	mov	r13, r26
    791c:	ef 01       	movw	r28, r30
    791e:	72 d0       	rcall	.+228    	; 0x7a04 <__mulsf3x>
    7920:	fe 01       	movw	r30, r28
    7922:	e8 94       	clt
    7924:	a5 91       	lpm	r26, Z+
    7926:	25 91       	lpm	r18, Z+
    7928:	35 91       	lpm	r19, Z+
    792a:	45 91       	lpm	r20, Z+
    792c:	55 91       	lpm	r21, Z+
    792e:	ae f3       	brts	.-22     	; 0x791a <__fp_powser+0x16>
    7930:	ef 01       	movw	r28, r30
    7932:	8e de       	rcall	.-740    	; 0x7650 <__addsf3x>
    7934:	fe 01       	movw	r30, r28
    7936:	97 01       	movw	r18, r14
    7938:	a8 01       	movw	r20, r16
    793a:	da 94       	dec	r13
    793c:	79 f7       	brne	.-34     	; 0x791c <__fp_powser+0x18>
    793e:	df 90       	pop	r13
    7940:	ef 90       	pop	r14
    7942:	ff 90       	pop	r15
    7944:	0f 91       	pop	r16
    7946:	1f 91       	pop	r17
    7948:	cf 91       	pop	r28
    794a:	df 91       	pop	r29
    794c:	08 95       	ret

0000794e <__fp_pscA>:
    794e:	00 24       	eor	r0, r0
    7950:	0a 94       	dec	r0
    7952:	16 16       	cp	r1, r22
    7954:	17 06       	cpc	r1, r23
    7956:	18 06       	cpc	r1, r24
    7958:	09 06       	cpc	r0, r25
    795a:	08 95       	ret

0000795c <__fp_pscB>:
    795c:	00 24       	eor	r0, r0
    795e:	0a 94       	dec	r0
    7960:	12 16       	cp	r1, r18
    7962:	13 06       	cpc	r1, r19
    7964:	14 06       	cpc	r1, r20
    7966:	05 06       	cpc	r0, r21
    7968:	08 95       	ret

0000796a <__fp_round>:
    796a:	09 2e       	mov	r0, r25
    796c:	03 94       	inc	r0
    796e:	00 0c       	add	r0, r0
    7970:	11 f4       	brne	.+4      	; 0x7976 <__fp_round+0xc>
    7972:	88 23       	and	r24, r24
    7974:	52 f0       	brmi	.+20     	; 0x798a <__fp_round+0x20>
    7976:	bb 0f       	add	r27, r27
    7978:	40 f4       	brcc	.+16     	; 0x798a <__fp_round+0x20>
    797a:	bf 2b       	or	r27, r31
    797c:	11 f4       	brne	.+4      	; 0x7982 <__fp_round+0x18>
    797e:	60 ff       	sbrs	r22, 0
    7980:	04 c0       	rjmp	.+8      	; 0x798a <__fp_round+0x20>
    7982:	6f 5f       	subi	r22, 0xFF	; 255
    7984:	7f 4f       	sbci	r23, 0xFF	; 255
    7986:	8f 4f       	sbci	r24, 0xFF	; 255
    7988:	9f 4f       	sbci	r25, 0xFF	; 255
    798a:	08 95       	ret

0000798c <__fp_split3>:
    798c:	57 fd       	sbrc	r21, 7
    798e:	90 58       	subi	r25, 0x80	; 128
    7990:	44 0f       	add	r20, r20
    7992:	55 1f       	adc	r21, r21
    7994:	59 f0       	breq	.+22     	; 0x79ac <__fp_splitA+0x10>
    7996:	5f 3f       	cpi	r21, 0xFF	; 255
    7998:	71 f0       	breq	.+28     	; 0x79b6 <__fp_splitA+0x1a>
    799a:	47 95       	ror	r20

0000799c <__fp_splitA>:
    799c:	88 0f       	add	r24, r24
    799e:	97 fb       	bst	r25, 7
    79a0:	99 1f       	adc	r25, r25
    79a2:	61 f0       	breq	.+24     	; 0x79bc <__fp_splitA+0x20>
    79a4:	9f 3f       	cpi	r25, 0xFF	; 255
    79a6:	79 f0       	breq	.+30     	; 0x79c6 <__fp_splitA+0x2a>
    79a8:	87 95       	ror	r24
    79aa:	08 95       	ret
    79ac:	12 16       	cp	r1, r18
    79ae:	13 06       	cpc	r1, r19
    79b0:	14 06       	cpc	r1, r20
    79b2:	55 1f       	adc	r21, r21
    79b4:	f2 cf       	rjmp	.-28     	; 0x799a <__fp_split3+0xe>
    79b6:	46 95       	lsr	r20
    79b8:	f1 df       	rcall	.-30     	; 0x799c <__fp_splitA>
    79ba:	08 c0       	rjmp	.+16     	; 0x79cc <__fp_splitA+0x30>
    79bc:	16 16       	cp	r1, r22
    79be:	17 06       	cpc	r1, r23
    79c0:	18 06       	cpc	r1, r24
    79c2:	99 1f       	adc	r25, r25
    79c4:	f1 cf       	rjmp	.-30     	; 0x79a8 <__fp_splitA+0xc>
    79c6:	86 95       	lsr	r24
    79c8:	71 05       	cpc	r23, r1
    79ca:	61 05       	cpc	r22, r1
    79cc:	08 94       	sec
    79ce:	08 95       	ret

000079d0 <__fp_zero>:
    79d0:	e8 94       	clt

000079d2 <__fp_szero>:
    79d2:	bb 27       	eor	r27, r27
    79d4:	66 27       	eor	r22, r22
    79d6:	77 27       	eor	r23, r23
    79d8:	cb 01       	movw	r24, r22
    79da:	97 f9       	bld	r25, 7
    79dc:	08 95       	ret

000079de <inverse>:
    79de:	9b 01       	movw	r18, r22
    79e0:	ac 01       	movw	r20, r24
    79e2:	60 e0       	ldi	r22, 0x00	; 0
    79e4:	70 e0       	ldi	r23, 0x00	; 0
    79e6:	80 e8       	ldi	r24, 0x80	; 128
    79e8:	9f e3       	ldi	r25, 0x3F	; 63
    79ea:	ad ce       	rjmp	.-678    	; 0x7746 <__divsf3>

000079ec <__mulsf3>:
    79ec:	0b d0       	rcall	.+22     	; 0x7a04 <__mulsf3x>
    79ee:	bd cf       	rjmp	.-134    	; 0x796a <__fp_round>
    79f0:	ae df       	rcall	.-164    	; 0x794e <__fp_pscA>
    79f2:	28 f0       	brcs	.+10     	; 0x79fe <__mulsf3+0x12>
    79f4:	b3 df       	rcall	.-154    	; 0x795c <__fp_pscB>
    79f6:	18 f0       	brcs	.+6      	; 0x79fe <__mulsf3+0x12>
    79f8:	95 23       	and	r25, r21
    79fa:	09 f0       	breq	.+2      	; 0x79fe <__mulsf3+0x12>
    79fc:	7a cf       	rjmp	.-268    	; 0x78f2 <__fp_inf>
    79fe:	7f cf       	rjmp	.-258    	; 0x78fe <__fp_nan>
    7a00:	11 24       	eor	r1, r1
    7a02:	e7 cf       	rjmp	.-50     	; 0x79d2 <__fp_szero>

00007a04 <__mulsf3x>:
    7a04:	c3 df       	rcall	.-122    	; 0x798c <__fp_split3>
    7a06:	a0 f3       	brcs	.-24     	; 0x79f0 <__mulsf3+0x4>

00007a08 <__mulsf3_pse>:
    7a08:	95 9f       	mul	r25, r21
    7a0a:	d1 f3       	breq	.-12     	; 0x7a00 <__mulsf3+0x14>
    7a0c:	95 0f       	add	r25, r21
    7a0e:	50 e0       	ldi	r21, 0x00	; 0
    7a10:	55 1f       	adc	r21, r21
    7a12:	62 9f       	mul	r22, r18
    7a14:	f0 01       	movw	r30, r0
    7a16:	72 9f       	mul	r23, r18
    7a18:	bb 27       	eor	r27, r27
    7a1a:	f0 0d       	add	r31, r0
    7a1c:	b1 1d       	adc	r27, r1
    7a1e:	63 9f       	mul	r22, r19
    7a20:	aa 27       	eor	r26, r26
    7a22:	f0 0d       	add	r31, r0
    7a24:	b1 1d       	adc	r27, r1
    7a26:	aa 1f       	adc	r26, r26
    7a28:	64 9f       	mul	r22, r20
    7a2a:	66 27       	eor	r22, r22
    7a2c:	b0 0d       	add	r27, r0
    7a2e:	a1 1d       	adc	r26, r1
    7a30:	66 1f       	adc	r22, r22
    7a32:	82 9f       	mul	r24, r18
    7a34:	22 27       	eor	r18, r18
    7a36:	b0 0d       	add	r27, r0
    7a38:	a1 1d       	adc	r26, r1
    7a3a:	62 1f       	adc	r22, r18
    7a3c:	73 9f       	mul	r23, r19
    7a3e:	b0 0d       	add	r27, r0
    7a40:	a1 1d       	adc	r26, r1
    7a42:	62 1f       	adc	r22, r18
    7a44:	83 9f       	mul	r24, r19
    7a46:	a0 0d       	add	r26, r0
    7a48:	61 1d       	adc	r22, r1
    7a4a:	22 1f       	adc	r18, r18
    7a4c:	74 9f       	mul	r23, r20
    7a4e:	33 27       	eor	r19, r19
    7a50:	a0 0d       	add	r26, r0
    7a52:	61 1d       	adc	r22, r1
    7a54:	23 1f       	adc	r18, r19
    7a56:	84 9f       	mul	r24, r20
    7a58:	60 0d       	add	r22, r0
    7a5a:	21 1d       	adc	r18, r1
    7a5c:	82 2f       	mov	r24, r18
    7a5e:	76 2f       	mov	r23, r22
    7a60:	6a 2f       	mov	r22, r26
    7a62:	11 24       	eor	r1, r1
    7a64:	9f 57       	subi	r25, 0x7F	; 127
    7a66:	50 40       	sbci	r21, 0x00	; 0
    7a68:	8a f0       	brmi	.+34     	; 0x7a8c <__mulsf3_pse+0x84>
    7a6a:	e1 f0       	breq	.+56     	; 0x7aa4 <__mulsf3_pse+0x9c>
    7a6c:	88 23       	and	r24, r24
    7a6e:	4a f0       	brmi	.+18     	; 0x7a82 <__mulsf3_pse+0x7a>
    7a70:	ee 0f       	add	r30, r30
    7a72:	ff 1f       	adc	r31, r31
    7a74:	bb 1f       	adc	r27, r27
    7a76:	66 1f       	adc	r22, r22
    7a78:	77 1f       	adc	r23, r23
    7a7a:	88 1f       	adc	r24, r24
    7a7c:	91 50       	subi	r25, 0x01	; 1
    7a7e:	50 40       	sbci	r21, 0x00	; 0
    7a80:	a9 f7       	brne	.-22     	; 0x7a6c <__mulsf3_pse+0x64>
    7a82:	9e 3f       	cpi	r25, 0xFE	; 254
    7a84:	51 05       	cpc	r21, r1
    7a86:	70 f0       	brcs	.+28     	; 0x7aa4 <__mulsf3_pse+0x9c>
    7a88:	34 cf       	rjmp	.-408    	; 0x78f2 <__fp_inf>
    7a8a:	a3 cf       	rjmp	.-186    	; 0x79d2 <__fp_szero>
    7a8c:	5f 3f       	cpi	r21, 0xFF	; 255
    7a8e:	ec f3       	brlt	.-6      	; 0x7a8a <__mulsf3_pse+0x82>
    7a90:	98 3e       	cpi	r25, 0xE8	; 232
    7a92:	dc f3       	brlt	.-10     	; 0x7a8a <__mulsf3_pse+0x82>
    7a94:	86 95       	lsr	r24
    7a96:	77 95       	ror	r23
    7a98:	67 95       	ror	r22
    7a9a:	b7 95       	ror	r27
    7a9c:	f7 95       	ror	r31
    7a9e:	e7 95       	ror	r30
    7aa0:	9f 5f       	subi	r25, 0xFF	; 255
    7aa2:	c1 f7       	brne	.-16     	; 0x7a94 <__mulsf3_pse+0x8c>
    7aa4:	fe 2b       	or	r31, r30
    7aa6:	88 0f       	add	r24, r24
    7aa8:	91 1d       	adc	r25, r1
    7aaa:	96 95       	lsr	r25
    7aac:	87 95       	ror	r24
    7aae:	97 f9       	bld	r25, 7
    7ab0:	08 95       	ret

00007ab2 <pow>:
    7ab2:	fa 01       	movw	r30, r20
    7ab4:	ee 0f       	add	r30, r30
    7ab6:	ff 1f       	adc	r31, r31
    7ab8:	30 96       	adiw	r30, 0x00	; 0
    7aba:	21 05       	cpc	r18, r1
    7abc:	31 05       	cpc	r19, r1
    7abe:	99 f1       	breq	.+102    	; 0x7b26 <pow+0x74>
    7ac0:	61 15       	cp	r22, r1
    7ac2:	71 05       	cpc	r23, r1
    7ac4:	61 f4       	brne	.+24     	; 0x7ade <pow+0x2c>
    7ac6:	80 38       	cpi	r24, 0x80	; 128
    7ac8:	bf e3       	ldi	r27, 0x3F	; 63
    7aca:	9b 07       	cpc	r25, r27
    7acc:	49 f1       	breq	.+82     	; 0x7b20 <pow+0x6e>
    7ace:	68 94       	set
    7ad0:	90 38       	cpi	r25, 0x80	; 128
    7ad2:	81 05       	cpc	r24, r1
    7ad4:	61 f0       	breq	.+24     	; 0x7aee <pow+0x3c>
    7ad6:	80 38       	cpi	r24, 0x80	; 128
    7ad8:	bf ef       	ldi	r27, 0xFF	; 255
    7ada:	9b 07       	cpc	r25, r27
    7adc:	41 f0       	breq	.+16     	; 0x7aee <pow+0x3c>
    7ade:	99 23       	and	r25, r25
    7ae0:	42 f5       	brpl	.+80     	; 0x7b32 <pow+0x80>
    7ae2:	ff 3f       	cpi	r31, 0xFF	; 255
    7ae4:	e1 05       	cpc	r30, r1
    7ae6:	31 05       	cpc	r19, r1
    7ae8:	21 05       	cpc	r18, r1
    7aea:	11 f1       	breq	.+68     	; 0x7b30 <pow+0x7e>
    7aec:	e8 94       	clt
    7aee:	08 94       	sec
    7af0:	e7 95       	ror	r30
    7af2:	d9 01       	movw	r26, r18
    7af4:	aa 23       	and	r26, r26
    7af6:	29 f4       	brne	.+10     	; 0x7b02 <pow+0x50>
    7af8:	ab 2f       	mov	r26, r27
    7afa:	be 2f       	mov	r27, r30
    7afc:	f8 5f       	subi	r31, 0xF8	; 248
    7afe:	d0 f3       	brcs	.-12     	; 0x7af4 <pow+0x42>
    7b00:	10 c0       	rjmp	.+32     	; 0x7b22 <pow+0x70>
    7b02:	ff 5f       	subi	r31, 0xFF	; 255
    7b04:	70 f4       	brcc	.+28     	; 0x7b22 <pow+0x70>
    7b06:	a6 95       	lsr	r26
    7b08:	e0 f7       	brcc	.-8      	; 0x7b02 <pow+0x50>
    7b0a:	f7 39       	cpi	r31, 0x97	; 151
    7b0c:	50 f0       	brcs	.+20     	; 0x7b22 <pow+0x70>
    7b0e:	19 f0       	breq	.+6      	; 0x7b16 <pow+0x64>
    7b10:	ff 3a       	cpi	r31, 0xAF	; 175
    7b12:	38 f4       	brcc	.+14     	; 0x7b22 <pow+0x70>
    7b14:	9f 77       	andi	r25, 0x7F	; 127
    7b16:	9f 93       	push	r25
    7b18:	0c d0       	rcall	.+24     	; 0x7b32 <pow+0x80>
    7b1a:	0f 90       	pop	r0
    7b1c:	07 fc       	sbrc	r0, 7
    7b1e:	90 58       	subi	r25, 0x80	; 128
    7b20:	08 95       	ret
    7b22:	3e f0       	brts	.+14     	; 0x7b32 <pow+0x80>
    7b24:	ec ce       	rjmp	.-552    	; 0x78fe <__fp_nan>
    7b26:	60 e0       	ldi	r22, 0x00	; 0
    7b28:	70 e0       	ldi	r23, 0x00	; 0
    7b2a:	80 e8       	ldi	r24, 0x80	; 128
    7b2c:	9f e3       	ldi	r25, 0x3F	; 63
    7b2e:	08 95       	ret
    7b30:	4f e7       	ldi	r20, 0x7F	; 127
    7b32:	9f 77       	andi	r25, 0x7F	; 127
    7b34:	5f 93       	push	r21
    7b36:	4f 93       	push	r20
    7b38:	3f 93       	push	r19
    7b3a:	2f 93       	push	r18
    7b3c:	cc d0       	rcall	.+408    	; 0x7cd6 <log>
    7b3e:	2f 91       	pop	r18
    7b40:	3f 91       	pop	r19
    7b42:	4f 91       	pop	r20
    7b44:	5f 91       	pop	r21
    7b46:	52 df       	rcall	.-348    	; 0x79ec <__mulsf3>
    7b48:	4a c0       	rjmp	.+148    	; 0x7bde <exp>
    7b4a:	11 f4       	brne	.+4      	; 0x7b50 <pow+0x9e>
    7b4c:	0e f4       	brtc	.+2      	; 0x7b50 <pow+0x9e>
    7b4e:	d7 ce       	rjmp	.-594    	; 0x78fe <__fp_nan>
    7b50:	72 c0       	rjmp	.+228    	; 0x7c36 <__fp_mpack>

00007b52 <sqrt>:
    7b52:	24 df       	rcall	.-440    	; 0x799c <__fp_splitA>
    7b54:	d0 f3       	brcs	.-12     	; 0x7b4a <pow+0x98>
    7b56:	99 23       	and	r25, r25
    7b58:	d9 f3       	breq	.-10     	; 0x7b50 <pow+0x9e>
    7b5a:	ce f3       	brts	.-14     	; 0x7b4e <pow+0x9c>
    7b5c:	9f 57       	subi	r25, 0x7F	; 127
    7b5e:	55 0b       	sbc	r21, r21
    7b60:	87 ff       	sbrs	r24, 7
    7b62:	77 d0       	rcall	.+238    	; 0x7c52 <__fp_norm2>
    7b64:	00 24       	eor	r0, r0
    7b66:	a0 e6       	ldi	r26, 0x60	; 96
    7b68:	40 ea       	ldi	r20, 0xA0	; 160
    7b6a:	90 01       	movw	r18, r0
    7b6c:	80 58       	subi	r24, 0x80	; 128
    7b6e:	56 95       	lsr	r21
    7b70:	97 95       	ror	r25
    7b72:	28 f4       	brcc	.+10     	; 0x7b7e <sqrt+0x2c>
    7b74:	80 5c       	subi	r24, 0xC0	; 192
    7b76:	66 0f       	add	r22, r22
    7b78:	77 1f       	adc	r23, r23
    7b7a:	88 1f       	adc	r24, r24
    7b7c:	20 f0       	brcs	.+8      	; 0x7b86 <sqrt+0x34>
    7b7e:	26 17       	cp	r18, r22
    7b80:	37 07       	cpc	r19, r23
    7b82:	48 07       	cpc	r20, r24
    7b84:	30 f4       	brcc	.+12     	; 0x7b92 <sqrt+0x40>
    7b86:	62 1b       	sub	r22, r18
    7b88:	73 0b       	sbc	r23, r19
    7b8a:	84 0b       	sbc	r24, r20
    7b8c:	20 29       	or	r18, r0
    7b8e:	31 29       	or	r19, r1
    7b90:	4a 2b       	or	r20, r26
    7b92:	a6 95       	lsr	r26
    7b94:	17 94       	ror	r1
    7b96:	07 94       	ror	r0
    7b98:	20 25       	eor	r18, r0
    7b9a:	31 25       	eor	r19, r1
    7b9c:	4a 27       	eor	r20, r26
    7b9e:	58 f7       	brcc	.-42     	; 0x7b76 <sqrt+0x24>
    7ba0:	66 0f       	add	r22, r22
    7ba2:	77 1f       	adc	r23, r23
    7ba4:	88 1f       	adc	r24, r24
    7ba6:	20 f0       	brcs	.+8      	; 0x7bb0 <sqrt+0x5e>
    7ba8:	26 17       	cp	r18, r22
    7baa:	37 07       	cpc	r19, r23
    7bac:	48 07       	cpc	r20, r24
    7bae:	30 f4       	brcc	.+12     	; 0x7bbc <sqrt+0x6a>
    7bb0:	62 0b       	sbc	r22, r18
    7bb2:	73 0b       	sbc	r23, r19
    7bb4:	84 0b       	sbc	r24, r20
    7bb6:	20 0d       	add	r18, r0
    7bb8:	31 1d       	adc	r19, r1
    7bba:	41 1d       	adc	r20, r1
    7bbc:	a0 95       	com	r26
    7bbe:	81 f7       	brne	.-32     	; 0x7ba0 <sqrt+0x4e>
    7bc0:	b9 01       	movw	r22, r18
    7bc2:	84 2f       	mov	r24, r20
    7bc4:	91 58       	subi	r25, 0x81	; 129
    7bc6:	88 0f       	add	r24, r24
    7bc8:	96 95       	lsr	r25
    7bca:	87 95       	ror	r24
    7bcc:	08 95       	ret

00007bce <square>:
    7bce:	9b 01       	movw	r18, r22
    7bd0:	ac 01       	movw	r20, r24
    7bd2:	0c cf       	rjmp	.-488    	; 0x79ec <__mulsf3>
    7bd4:	19 f4       	brne	.+6      	; 0x7bdc <square+0xe>
    7bd6:	0e f0       	brts	.+2      	; 0x7bda <square+0xc>
    7bd8:	8c ce       	rjmp	.-744    	; 0x78f2 <__fp_inf>
    7bda:	fa ce       	rjmp	.-524    	; 0x79d0 <__fp_zero>
    7bdc:	90 ce       	rjmp	.-736    	; 0x78fe <__fp_nan>

00007bde <exp>:
    7bde:	de de       	rcall	.-580    	; 0x799c <__fp_splitA>
    7be0:	c8 f3       	brcs	.-14     	; 0x7bd4 <square+0x6>
    7be2:	96 38       	cpi	r25, 0x86	; 134
    7be4:	c0 f7       	brcc	.-16     	; 0x7bd6 <square+0x8>
    7be6:	07 f8       	bld	r0, 7
    7be8:	0f 92       	push	r0
    7bea:	e8 94       	clt
    7bec:	2b e3       	ldi	r18, 0x3B	; 59
    7bee:	3a ea       	ldi	r19, 0xAA	; 170
    7bf0:	48 eb       	ldi	r20, 0xB8	; 184
    7bf2:	5f e7       	ldi	r21, 0x7F	; 127
    7bf4:	09 df       	rcall	.-494    	; 0x7a08 <__mulsf3_pse>
    7bf6:	0f 92       	push	r0
    7bf8:	0f 92       	push	r0
    7bfa:	0f 92       	push	r0
    7bfc:	4d b7       	in	r20, 0x3d	; 61
    7bfe:	5e b7       	in	r21, 0x3e	; 62
    7c00:	0f 92       	push	r0
    7c02:	a9 d0       	rcall	.+338    	; 0x7d56 <modf>
    7c04:	e5 ec       	ldi	r30, 0xC5	; 197
    7c06:	f0 e0       	ldi	r31, 0x00	; 0
    7c08:	7d de       	rcall	.-774    	; 0x7904 <__fp_powser>
    7c0a:	4f 91       	pop	r20
    7c0c:	5f 91       	pop	r21
    7c0e:	ef 91       	pop	r30
    7c10:	ff 91       	pop	r31
    7c12:	e5 95       	asr	r30
    7c14:	ee 1f       	adc	r30, r30
    7c16:	ff 1f       	adc	r31, r31
    7c18:	49 f0       	breq	.+18     	; 0x7c2c <exp+0x4e>
    7c1a:	fe 57       	subi	r31, 0x7E	; 126
    7c1c:	e0 68       	ori	r30, 0x80	; 128
    7c1e:	44 27       	eor	r20, r20
    7c20:	ee 0f       	add	r30, r30
    7c22:	44 1f       	adc	r20, r20
    7c24:	fa 95       	dec	r31
    7c26:	e1 f7       	brne	.-8      	; 0x7c20 <exp+0x42>
    7c28:	41 95       	neg	r20
    7c2a:	55 0b       	sbc	r21, r21
    7c2c:	1b d0       	rcall	.+54     	; 0x7c64 <ldexp>
    7c2e:	0f 90       	pop	r0
    7c30:	07 fe       	sbrs	r0, 7
    7c32:	d5 ce       	rjmp	.-598    	; 0x79de <inverse>
    7c34:	08 95       	ret

00007c36 <__fp_mpack>:
    7c36:	9f 3f       	cpi	r25, 0xFF	; 255
    7c38:	31 f0       	breq	.+12     	; 0x7c46 <__fp_mpack_finite+0xc>

00007c3a <__fp_mpack_finite>:
    7c3a:	91 50       	subi	r25, 0x01	; 1
    7c3c:	20 f4       	brcc	.+8      	; 0x7c46 <__fp_mpack_finite+0xc>
    7c3e:	87 95       	ror	r24
    7c40:	77 95       	ror	r23
    7c42:	67 95       	ror	r22
    7c44:	b7 95       	ror	r27
    7c46:	88 0f       	add	r24, r24
    7c48:	91 1d       	adc	r25, r1
    7c4a:	96 95       	lsr	r25
    7c4c:	87 95       	ror	r24
    7c4e:	97 f9       	bld	r25, 7
    7c50:	08 95       	ret

00007c52 <__fp_norm2>:
    7c52:	91 50       	subi	r25, 0x01	; 1
    7c54:	50 40       	sbci	r21, 0x00	; 0
    7c56:	66 0f       	add	r22, r22
    7c58:	77 1f       	adc	r23, r23
    7c5a:	88 1f       	adc	r24, r24
    7c5c:	d2 f7       	brpl	.-12     	; 0x7c52 <__fp_norm2>
    7c5e:	08 95       	ret
    7c60:	48 ce       	rjmp	.-880    	; 0x78f2 <__fp_inf>
    7c62:	e9 cf       	rjmp	.-46     	; 0x7c36 <__fp_mpack>

00007c64 <ldexp>:
    7c64:	9b de       	rcall	.-714    	; 0x799c <__fp_splitA>
    7c66:	e8 f3       	brcs	.-6      	; 0x7c62 <__fp_norm2+0x10>
    7c68:	99 23       	and	r25, r25
    7c6a:	d9 f3       	breq	.-10     	; 0x7c62 <__fp_norm2+0x10>
    7c6c:	94 0f       	add	r25, r20
    7c6e:	51 1d       	adc	r21, r1
    7c70:	bb f3       	brvs	.-18     	; 0x7c60 <__fp_norm2+0xe>
    7c72:	91 50       	subi	r25, 0x01	; 1
    7c74:	50 40       	sbci	r21, 0x00	; 0
    7c76:	94 f0       	brlt	.+36     	; 0x7c9c <ldexp+0x38>
    7c78:	59 f0       	breq	.+22     	; 0x7c90 <ldexp+0x2c>
    7c7a:	88 23       	and	r24, r24
    7c7c:	32 f0       	brmi	.+12     	; 0x7c8a <ldexp+0x26>
    7c7e:	66 0f       	add	r22, r22
    7c80:	77 1f       	adc	r23, r23
    7c82:	88 1f       	adc	r24, r24
    7c84:	91 50       	subi	r25, 0x01	; 1
    7c86:	50 40       	sbci	r21, 0x00	; 0
    7c88:	c1 f7       	brne	.-16     	; 0x7c7a <ldexp+0x16>
    7c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    7c8c:	51 05       	cpc	r21, r1
    7c8e:	44 f7       	brge	.-48     	; 0x7c60 <__fp_norm2+0xe>
    7c90:	88 0f       	add	r24, r24
    7c92:	91 1d       	adc	r25, r1
    7c94:	96 95       	lsr	r25
    7c96:	87 95       	ror	r24
    7c98:	97 f9       	bld	r25, 7
    7c9a:	08 95       	ret
    7c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    7c9e:	ac f0       	brlt	.+42     	; 0x7cca <ldexp+0x66>
    7ca0:	98 3e       	cpi	r25, 0xE8	; 232
    7ca2:	9c f0       	brlt	.+38     	; 0x7cca <ldexp+0x66>
    7ca4:	bb 27       	eor	r27, r27
    7ca6:	86 95       	lsr	r24
    7ca8:	77 95       	ror	r23
    7caa:	67 95       	ror	r22
    7cac:	b7 95       	ror	r27
    7cae:	08 f4       	brcc	.+2      	; 0x7cb2 <ldexp+0x4e>
    7cb0:	b1 60       	ori	r27, 0x01	; 1
    7cb2:	93 95       	inc	r25
    7cb4:	c1 f7       	brne	.-16     	; 0x7ca6 <ldexp+0x42>
    7cb6:	bb 0f       	add	r27, r27
    7cb8:	58 f7       	brcc	.-42     	; 0x7c90 <ldexp+0x2c>
    7cba:	11 f4       	brne	.+4      	; 0x7cc0 <ldexp+0x5c>
    7cbc:	60 ff       	sbrs	r22, 0
    7cbe:	e8 cf       	rjmp	.-48     	; 0x7c90 <ldexp+0x2c>
    7cc0:	6f 5f       	subi	r22, 0xFF	; 255
    7cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    7cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7cc8:	e3 cf       	rjmp	.-58     	; 0x7c90 <ldexp+0x2c>
    7cca:	83 ce       	rjmp	.-762    	; 0x79d2 <__fp_szero>
    7ccc:	0e f0       	brts	.+2      	; 0x7cd0 <ldexp+0x6c>
    7cce:	b3 cf       	rjmp	.-154    	; 0x7c36 <__fp_mpack>
    7cd0:	16 ce       	rjmp	.-980    	; 0x78fe <__fp_nan>
    7cd2:	68 94       	set
    7cd4:	0e ce       	rjmp	.-996    	; 0x78f2 <__fp_inf>

00007cd6 <log>:
    7cd6:	62 de       	rcall	.-828    	; 0x799c <__fp_splitA>
    7cd8:	c8 f3       	brcs	.-14     	; 0x7ccc <ldexp+0x68>
    7cda:	99 23       	and	r25, r25
    7cdc:	d1 f3       	breq	.-12     	; 0x7cd2 <ldexp+0x6e>
    7cde:	c6 f3       	brts	.-16     	; 0x7cd0 <ldexp+0x6c>
    7ce0:	df 93       	push	r29
    7ce2:	cf 93       	push	r28
    7ce4:	1f 93       	push	r17
    7ce6:	0f 93       	push	r16
    7ce8:	ff 92       	push	r15
    7cea:	c9 2f       	mov	r28, r25
    7cec:	dd 27       	eor	r29, r29
    7cee:	88 23       	and	r24, r24
    7cf0:	2a f0       	brmi	.+10     	; 0x7cfc <log+0x26>
    7cf2:	21 97       	sbiw	r28, 0x01	; 1
    7cf4:	66 0f       	add	r22, r22
    7cf6:	77 1f       	adc	r23, r23
    7cf8:	88 1f       	adc	r24, r24
    7cfa:	da f7       	brpl	.-10     	; 0x7cf2 <log+0x1c>
    7cfc:	20 e0       	ldi	r18, 0x00	; 0
    7cfe:	30 e0       	ldi	r19, 0x00	; 0
    7d00:	40 e8       	ldi	r20, 0x80	; 128
    7d02:	5f eb       	ldi	r21, 0xBF	; 191
    7d04:	9f e3       	ldi	r25, 0x3F	; 63
    7d06:	88 39       	cpi	r24, 0x98	; 152
    7d08:	20 f0       	brcs	.+8      	; 0x7d12 <log+0x3c>
    7d0a:	80 3e       	cpi	r24, 0xE0	; 224
    7d0c:	30 f0       	brcs	.+12     	; 0x7d1a <log+0x44>
    7d0e:	21 96       	adiw	r28, 0x01	; 1
    7d10:	8f 77       	andi	r24, 0x7F	; 127
    7d12:	8d dc       	rcall	.-1766   	; 0x762e <__addsf3>
    7d14:	ed ee       	ldi	r30, 0xED	; 237
    7d16:	f0 e0       	ldi	r31, 0x00	; 0
    7d18:	03 c0       	rjmp	.+6      	; 0x7d20 <log+0x4a>
    7d1a:	89 dc       	rcall	.-1774   	; 0x762e <__addsf3>
    7d1c:	ea e1       	ldi	r30, 0x1A	; 26
    7d1e:	f1 e0       	ldi	r31, 0x01	; 1
    7d20:	f1 dd       	rcall	.-1054   	; 0x7904 <__fp_powser>
    7d22:	8b 01       	movw	r16, r22
    7d24:	be 01       	movw	r22, r28
    7d26:	ec 01       	movw	r28, r24
    7d28:	fb 2e       	mov	r15, r27
    7d2a:	6f 57       	subi	r22, 0x7F	; 127
    7d2c:	71 09       	sbc	r23, r1
    7d2e:	75 95       	asr	r23
    7d30:	77 1f       	adc	r23, r23
    7d32:	88 0b       	sbc	r24, r24
    7d34:	99 0b       	sbc	r25, r25
    7d36:	a2 dd       	rcall	.-1212   	; 0x787c <__floatsisf>
    7d38:	28 e1       	ldi	r18, 0x18	; 24
    7d3a:	32 e7       	ldi	r19, 0x72	; 114
    7d3c:	41 e3       	ldi	r20, 0x31	; 49
    7d3e:	5f e3       	ldi	r21, 0x3F	; 63
    7d40:	61 de       	rcall	.-830    	; 0x7a04 <__mulsf3x>
    7d42:	af 2d       	mov	r26, r15
    7d44:	98 01       	movw	r18, r16
    7d46:	ae 01       	movw	r20, r28
    7d48:	ff 90       	pop	r15
    7d4a:	0f 91       	pop	r16
    7d4c:	1f 91       	pop	r17
    7d4e:	cf 91       	pop	r28
    7d50:	df 91       	pop	r29
    7d52:	7e dc       	rcall	.-1796   	; 0x7650 <__addsf3x>
    7d54:	0a ce       	rjmp	.-1004   	; 0x796a <__fp_round>

00007d56 <modf>:
    7d56:	fa 01       	movw	r30, r20
    7d58:	dc 01       	movw	r26, r24
    7d5a:	aa 0f       	add	r26, r26
    7d5c:	bb 1f       	adc	r27, r27
    7d5e:	9b 01       	movw	r18, r22
    7d60:	ac 01       	movw	r20, r24
    7d62:	bf 57       	subi	r27, 0x7F	; 127
    7d64:	28 f4       	brcc	.+10     	; 0x7d70 <modf+0x1a>
    7d66:	22 27       	eor	r18, r18
    7d68:	33 27       	eor	r19, r19
    7d6a:	44 27       	eor	r20, r20
    7d6c:	50 78       	andi	r21, 0x80	; 128
    7d6e:	1f c0       	rjmp	.+62     	; 0x7dae <modf+0x58>
    7d70:	b7 51       	subi	r27, 0x17	; 23
    7d72:	88 f4       	brcc	.+34     	; 0x7d96 <modf+0x40>
    7d74:	ab 2f       	mov	r26, r27
    7d76:	00 24       	eor	r0, r0
    7d78:	46 95       	lsr	r20
    7d7a:	37 95       	ror	r19
    7d7c:	27 95       	ror	r18
    7d7e:	01 1c       	adc	r0, r1
    7d80:	a3 95       	inc	r26
    7d82:	d2 f3       	brmi	.-12     	; 0x7d78 <modf+0x22>
    7d84:	00 20       	and	r0, r0
    7d86:	69 f0       	breq	.+26     	; 0x7da2 <modf+0x4c>
    7d88:	22 0f       	add	r18, r18
    7d8a:	33 1f       	adc	r19, r19
    7d8c:	44 1f       	adc	r20, r20
    7d8e:	b3 95       	inc	r27
    7d90:	da f3       	brmi	.-10     	; 0x7d88 <modf+0x32>
    7d92:	0d d0       	rcall	.+26     	; 0x7dae <modf+0x58>
    7d94:	4b cc       	rjmp	.-1898   	; 0x762c <__subsf3>
    7d96:	61 30       	cpi	r22, 0x01	; 1
    7d98:	71 05       	cpc	r23, r1
    7d9a:	a0 e8       	ldi	r26, 0x80	; 128
    7d9c:	8a 07       	cpc	r24, r26
    7d9e:	b9 46       	sbci	r27, 0x69	; 105
    7da0:	30 f4       	brcc	.+12     	; 0x7dae <modf+0x58>
    7da2:	9b 01       	movw	r18, r22
    7da4:	ac 01       	movw	r20, r24
    7da6:	66 27       	eor	r22, r22
    7da8:	77 27       	eor	r23, r23
    7daa:	88 27       	eor	r24, r24
    7dac:	90 78       	andi	r25, 0x80	; 128
    7dae:	30 96       	adiw	r30, 0x00	; 0
    7db0:	21 f0       	breq	.+8      	; 0x7dba <modf+0x64>
    7db2:	20 83       	st	Z, r18
    7db4:	31 83       	std	Z+1, r19	; 0x01
    7db6:	42 83       	std	Z+2, r20	; 0x02
    7db8:	53 83       	std	Z+3, r21	; 0x03
    7dba:	08 95       	ret

00007dbc <__divmodhi4>:
    7dbc:	97 fb       	bst	r25, 7
    7dbe:	09 2e       	mov	r0, r25
    7dc0:	07 26       	eor	r0, r23
    7dc2:	0a d0       	rcall	.+20     	; 0x7dd8 <__divmodhi4_neg1>
    7dc4:	77 fd       	sbrc	r23, 7
    7dc6:	04 d0       	rcall	.+8      	; 0x7dd0 <__divmodhi4_neg2>
    7dc8:	49 d0       	rcall	.+146    	; 0x7e5c <__udivmodhi4>
    7dca:	06 d0       	rcall	.+12     	; 0x7dd8 <__divmodhi4_neg1>
    7dcc:	00 20       	and	r0, r0
    7dce:	1a f4       	brpl	.+6      	; 0x7dd6 <__divmodhi4_exit>

00007dd0 <__divmodhi4_neg2>:
    7dd0:	70 95       	com	r23
    7dd2:	61 95       	neg	r22
    7dd4:	7f 4f       	sbci	r23, 0xFF	; 255

00007dd6 <__divmodhi4_exit>:
    7dd6:	08 95       	ret

00007dd8 <__divmodhi4_neg1>:
    7dd8:	f6 f7       	brtc	.-4      	; 0x7dd6 <__divmodhi4_exit>
    7dda:	90 95       	com	r25
    7ddc:	81 95       	neg	r24
    7dde:	9f 4f       	sbci	r25, 0xFF	; 255
    7de0:	08 95       	ret

00007de2 <__udivmodsi4>:
    7de2:	a1 e2       	ldi	r26, 0x21	; 33
    7de4:	1a 2e       	mov	r1, r26
    7de6:	aa 1b       	sub	r26, r26
    7de8:	bb 1b       	sub	r27, r27
    7dea:	fd 01       	movw	r30, r26
    7dec:	0d c0       	rjmp	.+26     	; 0x7e08 <__udivmodsi4_ep>

00007dee <__udivmodsi4_loop>:
    7dee:	aa 1f       	adc	r26, r26
    7df0:	bb 1f       	adc	r27, r27
    7df2:	ee 1f       	adc	r30, r30
    7df4:	ff 1f       	adc	r31, r31
    7df6:	a2 17       	cp	r26, r18
    7df8:	b3 07       	cpc	r27, r19
    7dfa:	e4 07       	cpc	r30, r20
    7dfc:	f5 07       	cpc	r31, r21
    7dfe:	20 f0       	brcs	.+8      	; 0x7e08 <__udivmodsi4_ep>
    7e00:	a2 1b       	sub	r26, r18
    7e02:	b3 0b       	sbc	r27, r19
    7e04:	e4 0b       	sbc	r30, r20
    7e06:	f5 0b       	sbc	r31, r21

00007e08 <__udivmodsi4_ep>:
    7e08:	66 1f       	adc	r22, r22
    7e0a:	77 1f       	adc	r23, r23
    7e0c:	88 1f       	adc	r24, r24
    7e0e:	99 1f       	adc	r25, r25
    7e10:	1a 94       	dec	r1
    7e12:	69 f7       	brne	.-38     	; 0x7dee <__udivmodsi4_loop>
    7e14:	60 95       	com	r22
    7e16:	70 95       	com	r23
    7e18:	80 95       	com	r24
    7e1a:	90 95       	com	r25
    7e1c:	9b 01       	movw	r18, r22
    7e1e:	ac 01       	movw	r20, r24
    7e20:	bd 01       	movw	r22, r26
    7e22:	cf 01       	movw	r24, r30
    7e24:	08 95       	ret

00007e26 <__divmodsi4>:
    7e26:	97 fb       	bst	r25, 7
    7e28:	09 2e       	mov	r0, r25
    7e2a:	05 26       	eor	r0, r21
    7e2c:	0e d0       	rcall	.+28     	; 0x7e4a <__divmodsi4_neg1>
    7e2e:	57 fd       	sbrc	r21, 7
    7e30:	04 d0       	rcall	.+8      	; 0x7e3a <__divmodsi4_neg2>
    7e32:	d7 df       	rcall	.-82     	; 0x7de2 <__udivmodsi4>
    7e34:	0a d0       	rcall	.+20     	; 0x7e4a <__divmodsi4_neg1>
    7e36:	00 1c       	adc	r0, r0
    7e38:	38 f4       	brcc	.+14     	; 0x7e48 <__divmodsi4_exit>

00007e3a <__divmodsi4_neg2>:
    7e3a:	50 95       	com	r21
    7e3c:	40 95       	com	r20
    7e3e:	30 95       	com	r19
    7e40:	21 95       	neg	r18
    7e42:	3f 4f       	sbci	r19, 0xFF	; 255
    7e44:	4f 4f       	sbci	r20, 0xFF	; 255
    7e46:	5f 4f       	sbci	r21, 0xFF	; 255

00007e48 <__divmodsi4_exit>:
    7e48:	08 95       	ret

00007e4a <__divmodsi4_neg1>:
    7e4a:	f6 f7       	brtc	.-4      	; 0x7e48 <__divmodsi4_exit>
    7e4c:	90 95       	com	r25
    7e4e:	80 95       	com	r24
    7e50:	70 95       	com	r23
    7e52:	61 95       	neg	r22
    7e54:	7f 4f       	sbci	r23, 0xFF	; 255
    7e56:	8f 4f       	sbci	r24, 0xFF	; 255
    7e58:	9f 4f       	sbci	r25, 0xFF	; 255
    7e5a:	08 95       	ret

00007e5c <__udivmodhi4>:
    7e5c:	aa 1b       	sub	r26, r26
    7e5e:	bb 1b       	sub	r27, r27
    7e60:	51 e1       	ldi	r21, 0x11	; 17
    7e62:	07 c0       	rjmp	.+14     	; 0x7e72 <__udivmodhi4_ep>

00007e64 <__udivmodhi4_loop>:
    7e64:	aa 1f       	adc	r26, r26
    7e66:	bb 1f       	adc	r27, r27
    7e68:	a6 17       	cp	r26, r22
    7e6a:	b7 07       	cpc	r27, r23
    7e6c:	10 f0       	brcs	.+4      	; 0x7e72 <__udivmodhi4_ep>
    7e6e:	a6 1b       	sub	r26, r22
    7e70:	b7 0b       	sbc	r27, r23

00007e72 <__udivmodhi4_ep>:
    7e72:	88 1f       	adc	r24, r24
    7e74:	99 1f       	adc	r25, r25
    7e76:	5a 95       	dec	r21
    7e78:	a9 f7       	brne	.-22     	; 0x7e64 <__udivmodhi4_loop>
    7e7a:	80 95       	com	r24
    7e7c:	90 95       	com	r25
    7e7e:	bc 01       	movw	r22, r24
    7e80:	cd 01       	movw	r24, r26
    7e82:	08 95       	ret

00007e84 <__tablejump2__>:
    7e84:	ee 0f       	add	r30, r30
    7e86:	ff 1f       	adc	r31, r31

00007e88 <__tablejump__>:
    7e88:	05 90       	lpm	r0, Z+
    7e8a:	f4 91       	lpm	r31, Z+
    7e8c:	e0 2d       	mov	r30, r0
    7e8e:	09 94       	ijmp

00007e90 <_exit>:
    7e90:	f8 94       	cli

00007e92 <__stop_program>:
    7e92:	ff cf       	rjmp	.-2      	; 0x7e92 <__stop_program>
