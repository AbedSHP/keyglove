
Keyglove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000137e  00001412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000139  0080010c  0080010c  0000141e  2**0
                  ALLOC
  3 .debug_aranges 000002e0  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008af  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005210  00000000  00000000  00001fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001347  00000000  00000000  000071bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000041c0  00000000  00000000  00008504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  0000c6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000233f  00000000  00000000  0000cb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025f4  00000000  00000000  0000ee43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000398  00000000  00000000  00011437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  LED report can be sent through either the control endpoint (via a HID SetReport request) or the HID OUT
 *  endpoint, the processing code is placed here to avoid duplicating it and potentially having different
 *  behaviour depending on the method used to sent it.
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c5       	rjmp	.+2762   	; 0xaf4 <__vector_10>
      2a:	00 00       	nop
      2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c c1       	rjmp	.+536    	; 0x2a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0a c1       	rjmp	.+532    	; 0x2a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 c1       	rjmp	.+528    	; 0x2a6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <HIDReport>:
      98:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
      a8:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
      b8:	81 01 05 01 09 30 09 31 09 38 15 f6 25 0a 35 f6     .....0.1.8..%.5.
      c8:	45 0a 95 03 75 08 81 06 c0 c0 05 01 09 06 a1 01     E...u...........
      d8:	85 02 05 07 19 e0 29 e7 15 00 25 01 75 01 95 08     ......)...%.u...
      e8:	81 02 95 01 75 08 81 01 05 08 19 01 29 05 95 05     ....u.......)...
      f8:	75 01 91 02 95 01 75 03 91 01 15 00 25 65 05 07     u.....u.....%e..
     108:	19 00 29 65 95 06 75 08 81 00 c0 05 01 09 04 a1     ..)e..u.........
     118:	01 85 03 09 01 a1 00 09 30 09 31 15 9c 25 64 35     ........0.1..%d5
     128:	ff 45 01 95 02 75 08 81 02 c0 05 09 19 01 29 02     .E...u........).
     138:	15 00 25 01 75 01 95 02 81 02 75 06 95 01 81 01     ..%.u.....u.....
     148:	c0                                                  .

00000149 <DeviceDescriptor>:
     149:	12 01 10 01 00 00 00 08 eb 03 4e 20 01 00 01 02     ..........N ....
     159:	dc 01                                               ..

0000015b <ConfigurationDescriptor>:
     15b:	09 02 66 00 03 01 02 c0 fa 08 0b 00 02 02 02 01     ..f.............
     16b:	02 09 04 00 00 01 02 02 01 03 05 24 00 10 01 04     ...........$....
     17b:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     18b:	04 01 00 02 0a 00 00 03 07 05 03 02 10 00 01 07     ................
     19b:	05 82 02 10 00 01 09 04 02 00 02 03 01 01 04 09     ................
     1ab:	21 11 01 00 01 22 b1 00 07 05 84 03 09 00 01 07     !...."..........
     1bb:	05 05 03 09 00 01                                   ......

000001c1 <LanguageString>:
     1c1:	04 03 09 04                                         ....

000001c5 <ManufacturerString>:
     1c5:	1a 03 4a 00 65 00 66 00 66 00 20 00 52 00 6f 00     ..J.e.f.f. .R.o.
     1d5:	77 00 62 00 65 00 72 00 67 00 00 00                 w.b.e.r.g...

000001e1 <ProductString>:
     1e1:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     1f1:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     201:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

0000020f <ProductStringSerial>:
     20f:	2a 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     *.K.e.y.g.l.o.v.
     21f:	65 00 20 00 53 00 65 00 72 00 69 00 61 00 6c 00     e. .S.e.r.i.a.l.
     22f:	20 00 50 00 6f 00 72 00 74 00 00 00                  .P.o.r.t...

0000023b <ProductStringHID>:
     23b:	2c 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     ,.K.e.y.g.l.o.v.
     24b:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     25b:	44 00 65 00 76 00 69 00 63 00 65 00 00 00 00        D.e.v.i.c.e....

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d0 e2       	ldi	r29, 0x20	; 32
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	ee e7       	ldi	r30, 0x7E	; 126
     27e:	f3 e1       	ldi	r31, 0x13	; 19
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	ac 30       	cpi	r26, 0x0C	; 12
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	12 e0       	ldi	r17, 0x02	; 2
     292:	ac e0       	ldi	r26, 0x0C	; 12
     294:	b1 e0       	ldi	r27, 0x01	; 1
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	a5 34       	cpi	r26, 0x45	; 69
     29c:	b1 07       	cpc	r27, r17
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
     2a0:	c9 d1       	rcall	.+914    	; 0x634 <main>
     2a2:	0c 94 bd 09 	jmp	0x137a	; 0x137a <_exit>

000002a6 <__bad_interrupt>:
     2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2ac:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
     2ae:	e8 81       	ld	r30, Y
     2b0:	f9 81       	ldd	r31, Y+1	; 0x01
     2b2:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
     2b4:	88 81       	ld	r24, Y
     2b6:	99 81       	ldd	r25, Y+1	; 0x01
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	99 83       	std	Y+1, r25	; 0x01
     2bc:	88 83       	st	Y, r24
     2be:	2e 81       	ldd	r18, Y+6	; 0x06
     2c0:	3f 81       	ldd	r19, Y+7	; 0x07
     2c2:	82 17       	cp	r24, r18
     2c4:	93 07       	cpc	r25, r19
     2c6:	21 f4       	brne	.+8      	; 0x2d0 <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	9d 81       	ldd	r25, Y+5	; 0x05
     2cc:	99 83       	std	Y+1, r25	; 0x01
     2ce:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2d0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2d2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     2d4:	89 85       	ldd	r24, Y+9	; 0x09
     2d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	9a 87       	std	Y+10, r25	; 0x0a
     2dc:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2de:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <EVENT_USB_Device_Connect>:
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     2e6:	81 b3       	in	r24, 0x11	; 17
     2e8:	8f 71       	andi	r24, 0x1F	; 31
     2ea:	80 6c       	ori	r24, 0xC0	; 192
     2ec:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Connect(void)
{
    /* Indicate USB enumerating */
    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2ee:	08 95       	ret

000002f0 <EVENT_USB_Device_Disconnect>:
     2f0:	81 b3       	in	r24, 0x11	; 17
     2f2:	8f 71       	andi	r24, 0x1F	; 31
     2f4:	80 66       	ori	r24, 0x60	; 96
     2f6:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Disconnect(void)
{
    /* Indicate USB not ready */
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2f8:	08 95       	ret

000002fa <HID_Task>:
    */

}

void HID_Task(void)
{
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     2fe:	80 91 3c 02 	lds	r24, 0x023C
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	81 f5       	brne	.+96     	; 0x366 <HID_Task+0x6c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     30c:	80 91 e8 00 	lds	r24, 0x00E8
      return;

    Endpoint_SelectEndpoint(GENERIC_OUT_EPNUM);

    /* Check to see if a packet has been sent from the host */
    if (Endpoint_IsOUTReceived())
     310:	82 ff       	sbrs	r24, 2
     312:	10 c0       	rjmp	.+32     	; 0x334 <HID_Task+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     314:	80 91 e8 00 	lds	r24, 0x00E8
    {
        /* Check to see if the packet contains data */
        if (Endpoint_IsReadWriteAllowed())
     318:	85 ff       	sbrs	r24, 5
     31a:	07 c0       	rjmp	.+14     	; 0x32a <HID_Task+0x30>
        {
            /* Read Generic Report Data */
            Endpoint_Read_Stream_LE(&HIDReportInData, sizeof(HIDReportInData), NULL);
     31c:	86 e2       	ldi	r24, 0x26	; 38
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	69 e0       	ldi	r22, 0x09	; 9
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	34 d7       	rcall	.+3688   	; 0x1192 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     32a:	80 91 e8 00 	lds	r24, 0x00E8
     32e:	8b 77       	andi	r24, 0x7B	; 123
     330:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     33a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_SelectEndpoint(GENERIC_IN_EPNUM);

    /* Check to see if the host is ready to accept another packet */
    if (Endpoint_IsINReady())
     33e:	80 ff       	sbrs	r24, 0
     340:	12 c0       	rjmp	.+36     	; 0x366 <HID_Task+0x6c>
    {
        /* Write Generic Report Data */
        Endpoint_Write_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData), NULL);
     342:	0f e2       	ldi	r16, 0x2F	; 47
     344:	12 e0       	ldi	r17, 0x02	; 2
     346:	c8 01       	movw	r24, r16
     348:	69 e0       	ldi	r22, 0x09	; 9
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	72 d7       	rcall	.+3812   	; 0x1236 <Endpoint_Write_Stream_LE>
        
        /* Clean out report data after sending */
        memset(&HIDReportOutData, 0, GENERIC_REPORT_SIZE + 1);
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	f8 01       	movw	r30, r16
     356:	11 92       	st	Z+, r1
     358:	8a 95       	dec	r24
     35a:	e9 f7       	brne	.-6      	; 0x356 <HID_Task+0x5c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     35c:	80 91 e8 00 	lds	r24, 0x00E8
     360:	8e 77       	andi	r24, 0x7E	; 126
     362:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();
    }
}
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <CDC_Task>:
    LEDs_SetAllLEDs(LEDMask);
}

/** Function to manage CDC data transmission and reception to and from the host. */
void CDC_Task(void)
{
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     376:	80 91 3c 02 	lds	r24, 0x023C
     37a:	84 30       	cpi	r24, 0x04	; 4
     37c:	09 f0       	breq	.+2      	; 0x380 <CDC_Task+0x14>
     37e:	79 c0       	rjmp	.+242    	; 0x472 <CDC_Task+0x106>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     380:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     382:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     384:	20 91 a4 01 	lds	r18, 0x01A4
     388:	30 91 a5 01 	lds	r19, 0x01A5
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     38c:	8f bf       	out	0x3f, r24	; 63

    uint16_t BufferCount;

    /* Send data packet if anything is waiting */
    BufferCount = RingBuffer_GetCount(&HostTXSerial_Buffer);
    if (BufferCount && LineEncodingData.BaudRateBPS)
     38e:	21 15       	cp	r18, r1
     390:	31 05       	cpc	r19, r1
     392:	09 f4       	brne	.+2      	; 0x396 <CDC_Task+0x2a>
     394:	49 c0       	rjmp	.+146    	; 0x428 <CDC_Task+0xbc>
     396:	80 91 05 01 	lds	r24, 0x0105
     39a:	90 91 06 01 	lds	r25, 0x0106
     39e:	a0 91 07 01 	lds	r26, 0x0107
     3a2:	b0 91 08 01 	lds	r27, 0x0108
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	a1 05       	cpc	r26, r1
     3aa:	b1 05       	cpc	r27, r1
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <CDC_Task+0x44>
     3ae:	3c c0       	rjmp	.+120    	; 0x428 <CDC_Task+0xbc>
    {
        PORTD |= (1 << 6);
     3b0:	5e 9a       	sbi	0x0b, 6	; 11
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	80 93 e9 00 	sts	0x00E9, r24
     3b8:	a9 01       	movw	r20, r18
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     3ba:	ab e9       	ldi	r26, 0x9B	; 155
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     3be:	b9 01       	movw	r22, r18
     3c0:	6f 50       	subi	r22, 0x0F	; 15
     3c2:	70 40       	sbci	r23, 0x00	; 0
     3c4:	ed 01       	movw	r28, r26
		
			uint8_t Data = *Buffer->Out;
     3c6:	ea 81       	ldd	r30, Y+2	; 0x02
     3c8:	fb 81       	ldd	r31, Y+3	; 0x03
     3ca:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     3cc:	fb 83       	std	Y+3, r31	; 0x03
     3ce:	ea 83       	std	Y+2, r30	; 0x02
     3d0:	8e 81       	ldd	r24, Y+6	; 0x06
     3d2:	9f 81       	ldd	r25, Y+7	; 0x07
     3d4:	e8 17       	cp	r30, r24
     3d6:	f9 07       	cpc	r31, r25
     3d8:	21 f4       	brne	.+8      	; 0x3e2 <CDC_Task+0x76>
			  Buffer->Out = Buffer->Start;
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	9b 83       	std	Y+3, r25	; 0x03
     3e0:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     3e2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     3e4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     3e6:	89 85       	ldd	r24, Y+9	; 0x09
     3e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	9a 87       	std	Y+10, r25	; 0x0a
     3ee:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     3f0:	2f bf       	out	0x3f, r18	; 63
        {
            UEDATX = RingBuffer_Remove(&HostTXSerial_Buffer); // write one byte
     3f2:	30 93 f1 00 	sts	0x00F1, r19
        PORTD |= (1 << 6);
        /* Select the Serial TX Endpoint */
        Endpoint_SelectEndpoint(CDC_TX_EPNUM);

        /* Write the byte(s) to the Endpoint */
        for (int i = 0; i < CDC_TXRX_EPSIZE && BufferCount; i++, BufferCount--)
     3f6:	46 17       	cp	r20, r22
     3f8:	57 07       	cpc	r21, r23
     3fa:	19 f0       	breq	.+6      	; 0x402 <CDC_Task+0x96>
     3fc:	41 50       	subi	r20, 0x01	; 1
     3fe:	50 40       	sbci	r21, 0x00	; 0
     400:	09 f7       	brne	.-62     	; 0x3c4 <CDC_Task+0x58>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     402:	20 91 f2 00 	lds	r18, 0x00F2
     406:	30 91 f3 00 	lds	r19, 0x00F3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     40a:	80 91 e8 00 	lds	r24, 0x00E8
     40e:	8e 77       	andi	r24, 0x7E	; 126
     410:	80 93 e8 00 	sts	0x00E8, r24
        /* Finalize the stream transfer to send the last packet */
        Endpoint_ClearIN();

        /* If the last packet filled the endpoint, send an empty packet to release the buffer on
         * the receiver (otherwise all data will be cached until a non-full packet is received) */
        if (IsFull)
     414:	20 31       	cpi	r18, 0x10	; 16
     416:	31 05       	cpc	r19, r1
     418:	31 f4       	brne	.+12     	; 0x426 <CDC_Task+0xba>
        {
            /* Wait until the endpoint is ready for another packet */
            Endpoint_WaitUntilReady();
     41a:	db d2       	rcall	.+1462   	; 0x9d2 <Endpoint_WaitUntilReady>
     41c:	80 91 e8 00 	lds	r24, 0x00E8
     420:	8e 77       	andi	r24, 0x7E	; 126
     422:	80 93 e8 00 	sts	0x00E8, r24

            /* Send an empty packet to ensure that the host does not buffer data sent to it */
            Endpoint_ClearIN();
        }
        PORTD &= ~(1 << 6);
     426:	5e 98       	cbi	0x0b, 6	; 11
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     42e:	80 91 e8 00 	lds	r24, 0x00E8

    /* Select the Serial RX Endpoint */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
     432:	82 ff       	sbrs	r24, 2
     434:	1e c0       	rjmp	.+60     	; 0x472 <CDC_Task+0x106>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     436:	e0 90 f2 00 	lds	r14, 0x00F2
     43a:	f0 90 f3 00 	lds	r15, 0x00F3
     43e:	c0 e0       	ldi	r28, 0x00	; 0
     440:	d0 e0       	ldi	r29, 0x00	; 0
     442:	0f c0       	rjmp	.+30     	; 0x462 <CDC_Task+0xf6>
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (int i = 0; i < BufferCount; i++)
        {
            uint8_t b = UEDATX;
     444:	10 91 f1 00 	lds	r17, 0x00F1
            RingBuffer_Insert(&HostRXSerial_Buffer, b); // read byte from endpoint
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	61 2f       	mov	r22, r17
     44e:	2c df       	rcall	.-424    	; 0x2a8 <RingBuffer_Insert>

            // insert this byte into the TX buffer if local echo is enabled
            if (HostSerialLocalEcho)
     450:	80 91 04 01 	lds	r24, 0x0104
     454:	88 23       	and	r24, r24
     456:	21 f0       	breq	.+8      	; 0x460 <CDC_Task+0xf4>
            {
                RingBuffer_Insert(&HostTXSerial_Buffer, b);
     458:	8b e9       	ldi	r24, 0x9B	; 155
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	61 2f       	mov	r22, r17
     45e:	24 df       	rcall	.-440    	; 0x2a8 <RingBuffer_Insert>

    /* Store any received data from the host */
    if (Endpoint_IsOUTReceived())
    {
        BufferCount = Endpoint_BytesInEndpoint();
        for (int i = 0; i < BufferCount; i++)
     460:	21 96       	adiw	r28, 0x01	; 1
     462:	ce 15       	cp	r28, r14
     464:	df 05       	cpc	r29, r15
     466:	70 f3       	brcs	.-36     	; 0x444 <CDC_Task+0xd8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     468:	80 91 e8 00 	lds	r24, 0x00E8
     46c:	8b 77       	andi	r24, 0x7B	; 123
     46e:	80 93 e8 00 	sts	0x00E8, r24

        /* Finalize the stream transfer to receive the last packet */
        Endpoint_ClearOUT();
    }

}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	08 95       	ret

0000047e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
    switch (USB_ControlRequest.bRequest)
     482:	80 91 3e 02 	lds	r24, 0x023E
     486:	80 32       	cpi	r24, 0x20	; 32
     488:	09 f4       	brne	.+2      	; 0x48c <EVENT_USB_Device_ControlRequest+0xe>
     48a:	4a c0       	rjmp	.+148    	; 0x520 <EVENT_USB_Device_ControlRequest+0xa2>
     48c:	81 32       	cpi	r24, 0x21	; 33
     48e:	30 f4       	brcc	.+12     	; 0x49c <EVENT_USB_Device_ControlRequest+0x1e>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	51 f0       	breq	.+20     	; 0x4a8 <EVENT_USB_Device_ControlRequest+0x2a>
     494:	89 30       	cpi	r24, 0x09	; 9
     496:	09 f0       	breq	.+2      	; 0x49a <EVENT_USB_Device_ControlRequest+0x1c>
     498:	5b c0       	rjmp	.+182    	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
     49a:	1c c0       	rjmp	.+56     	; 0x4d4 <EVENT_USB_Device_ControlRequest+0x56>
     49c:	81 32       	cpi	r24, 0x21	; 33
     49e:	71 f1       	breq	.+92     	; 0x4fc <EVENT_USB_Device_ControlRequest+0x7e>
     4a0:	82 32       	cpi	r24, 0x22	; 34
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <EVENT_USB_Device_ControlRequest+0x28>
     4a4:	55 c0       	rjmp	.+170    	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
     4a6:	4a c0       	rjmp	.+148    	; 0x53c <EVENT_USB_Device_ControlRequest+0xbe>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4a8:	80 91 3d 02 	lds	r24, 0x023D
     4ac:	81 3a       	cpi	r24, 0xA1	; 161
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <EVENT_USB_Device_ControlRequest+0x34>
     4b0:	4f c0       	rjmp	.+158    	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4b2:	80 91 e8 00 	lds	r24, 0x00E8
     4b6:	87 7f       	andi	r24, 0xF7	; 247
     4b8:	80 93 e8 00 	sts	0x00E8, r24
                //CreateHIDReport(HIDReportOutData);

                Endpoint_ClearSETUP();

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&HIDReportOutData, sizeof(HIDReportOutData));
     4bc:	0f e2       	ldi	r16, 0x2F	; 47
     4be:	12 e0       	ldi	r17, 0x02	; 2
     4c0:	c8 01       	movw	r24, r16
     4c2:	69 e0       	ldi	r22, 0x09	; 9
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	65 d5       	rcall	.+2762   	; 0xf92 <Endpoint_Write_Control_Stream_LE>

                /* Clean out report data after sending */
                memset(&HIDReportOutData, 0, GENERIC_REPORT_SIZE + 1);
     4c8:	8a e0       	ldi	r24, 0x0A	; 10
     4ca:	f8 01       	movw	r30, r16
     4cc:	11 92       	st	Z+, r1
     4ce:	8a 95       	dec	r24
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <EVENT_USB_Device_ControlRequest+0x4e>
     4d2:	22 c0       	rjmp	.+68     	; 0x518 <EVENT_USB_Device_ControlRequest+0x9a>
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     4d4:	80 91 3d 02 	lds	r24, 0x023D
     4d8:	81 32       	cpi	r24, 0x21	; 33
     4da:	d1 f5       	brne	.+116    	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
     4dc:	80 91 e8 00 	lds	r24, 0x00E8
     4e0:	87 7f       	andi	r24, 0xF7	; 247
     4e2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the report data from the control endpoint */
                Endpoint_Read_Control_Stream_LE(&HIDReportInData, sizeof(HIDReportInData));
     4e6:	86 e2       	ldi	r24, 0x26	; 38
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	69 e0       	ldi	r22, 0x09	; 9
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	af d5       	rcall	.+2910   	; 0x104e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4f0:	80 91 e8 00 	lds	r24, 0x00E8
     4f4:	8e 77       	andi	r24, 0x7E	; 126
     4f6:	80 93 e8 00 	sts	0x00E8, r24
     4fa:	2a c0       	rjmp	.+84     	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
                ProcessHIDReport(HIDReportInData);
            }

            break;
        case CDC_REQ_GetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4fc:	80 91 3d 02 	lds	r24, 0x023D
     500:	81 3a       	cpi	r24, 0xA1	; 161
     502:	31 f5       	brne	.+76     	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     504:	80 91 e8 00 	lds	r24, 0x00E8
     508:	87 7f       	andi	r24, 0xF7	; 247
     50a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Write the line coding data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     50e:	85 e0       	ldi	r24, 0x05	; 5
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	67 e0       	ldi	r22, 0x07	; 7
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	3d d5       	rcall	.+2682   	; 0xf92 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     518:	80 91 e8 00 	lds	r24, 0x00E8
     51c:	8b 77       	andi	r24, 0x7B	; 123
     51e:	eb cf       	rjmp	.-42     	; 0x4f6 <EVENT_USB_Device_ControlRequest+0x78>
                Endpoint_ClearOUT();
            }

            break;
        case CDC_REQ_SetLineEncoding:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     520:	80 91 3d 02 	lds	r24, 0x023D
     524:	81 32       	cpi	r24, 0x21	; 33
     526:	a1 f4       	brne	.+40     	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     528:	80 91 e8 00 	lds	r24, 0x00E8
     52c:	87 7f       	andi	r24, 0xF7	; 247
     52e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                /* Read the line coding data in from the host into the global struct */
                Endpoint_Read_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	67 e0       	ldi	r22, 0x07	; 7
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	d9 cf       	rjmp	.-78     	; 0x4ee <EVENT_USB_Device_ControlRequest+0x70>
                Endpoint_ClearIN();
            }

            break;
        case CDC_REQ_SetControlLineState:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     53c:	80 91 3d 02 	lds	r24, 0x023D
     540:	81 32       	cpi	r24, 0x21	; 33
     542:	31 f4       	brne	.+12     	; 0x550 <EVENT_USB_Device_ControlRequest+0xd2>
     544:	80 91 e8 00 	lds	r24, 0x00E8
     548:	87 7f       	andi	r24, 0xF7	; 247
     54a:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     54e:	20 d2       	rcall	.+1088   	; 0x990 <Endpoint_ClearStatusStage>
                */
            }

            break;
    }
}
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	61 ec       	ldi	r22, 0xC1	; 193
     568:	42 e0       	ldi	r20, 0x02	; 2
     56a:	dd d1       	rcall	.+954    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
     56c:	08 2f       	mov	r16, r24
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	61 e8       	ldi	r22, 0x81	; 129
     572:	42 e1       	ldi	r20, 0x12	; 18
     574:	d8 d1       	rcall	.+944    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
     576:	c8 2e       	mov	r12, r24
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	60 e8       	ldi	r22, 0x80	; 128
     57c:	42 e1       	ldi	r20, 0x12	; 18
     57e:	d3 d1       	rcall	.+934    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
     580:	e8 2e       	mov	r14, r24
     582:	10 92 05 01 	sts	0x0105, r1
     586:	10 92 06 01 	sts	0x0106, r1
     58a:	10 92 07 01 	sts	0x0107, r1
     58e:	10 92 08 01 	sts	0x0108, r1
     592:	84 e0       	ldi	r24, 0x04	; 4
     594:	61 ec       	ldi	r22, 0xC1	; 193
     596:	42 e1       	ldi	r20, 0x12	; 18
     598:	c6 d1       	rcall	.+908    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
     59a:	b8 2e       	mov	r11, r24
    //* Setup CDC Data Endpoints */
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                                CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
                                                CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	60 ec       	ldi	r22, 0xC0	; 192
     5a0:	42 e1       	ldi	r20, 0x12	; 18
     5a2:	c1 d1       	rcall	.+898    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
     5a4:	68 2f       	mov	r22, r24
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	dd 24       	eor	r13, r13
     5aa:	0c 21       	and	r16, r12
     5ac:	1d 21       	and	r17, r13
     5ae:	01 70       	andi	r16, 0x01	; 1
     5b0:	10 70       	andi	r17, 0x00	; 0
     5b2:	ff 24       	eor	r15, r15
     5b4:	0e 21       	and	r16, r14
     5b6:	1f 21       	and	r17, r15

    /* Reset line encoding baud rate so that the host knows to send new values */
    LineEncodingData.BaudRateBPS = 0;

    /* Setup HID Report Endpoints */
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	01 2b       	or	r16, r17
     5be:	11 f0       	breq	.+4      	; 0x5c4 <EVENT_USB_Device_ConfigurationChanged+0x6e>
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	8b 2d       	mov	r24, r11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	48 23       	and	r20, r24
     5ca:	59 23       	and	r21, r25
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
                                                GENERIC_EPSIZE, ENDPOINT_BANK_SINGLE);

    /* Indicate endpoint configuration success or failure */
    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	45 2b       	or	r20, r21
     5d2:	11 f0       	breq	.+4      	; 0x5d8 <EVENT_USB_Device_ConfigurationChanged+0x82>
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	86 2f       	mov	r24, r22
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	28 23       	and	r18, r24
     5de:	39 23       	and	r19, r25
     5e0:	23 2b       	or	r18, r19
     5e2:	11 f4       	brne	.+4      	; 0x5e8 <EVENT_USB_Device_ConfigurationChanged+0x92>
     5e4:	90 e2       	ldi	r25, 0x20	; 32
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <EVENT_USB_Device_ConfigurationChanged+0x94>
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	81 b3       	in	r24, 0x11	; 17
     5ec:	8f 71       	andi	r24, 0x1F	; 31
     5ee:	98 2b       	or	r25, r24
     5f0:	91 bb       	out	0x11, r25	; 17
}
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	08 95       	ret

00000602 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     602:	84 b7       	in	r24, 0x34	; 52
     604:	87 7f       	andi	r24, 0xF7	; 247
     606:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     608:	88 e1       	ldi	r24, 0x18	; 24
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	80 93 60 00 	sts	0x0060, r24
     612:	10 92 60 00 	sts	0x0060, r1
     616:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    //clock_prescale_set(clock_div_1);
        CPU_PRESCALE(CPU_4MHz); // 3.3v AVR shouldn't run faster than 8MHz
     618:	e1 e6       	ldi	r30, 0x61	; 97
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	80 83       	st	Z, r24
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS_D;
     624:	56 9a       	sbi	0x0a, 6	; 10
				DDRF  |=  LEDS_ALL_LEDS_F;
     626:	80 b3       	in	r24, 0x10	; 16
     628:	80 6e       	ori	r24, 0xE0	; 224
     62a:	80 bb       	out	0x10, r24	; 16
				PORTF &= ~LEDS_ALL_LEDS_F;
     62c:	81 b3       	in	r24, 0x11	; 17
     62e:	8f 71       	andi	r24, 0x1F	; 31
     630:	81 bb       	out	0x11, r24	; 17

    /* Hardware Initialization */
    LEDs_Init();
    USB_Init();
}
     632:	4a c2       	rjmp	.+1172   	; 0xac8 <USB_Init>

00000634 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     64a:	e0 e1       	ldi	r30, 0x10	; 16
     64c:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     64e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     650:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     652:	8b e1       	ldi	r24, 0x1B	; 27
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	91 83       	std	Z+1, r25	; 0x01
     658:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     65a:	93 83       	std	Z+3, r25	; 0x03
     65c:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     65e:	95 83       	std	Z+5, r25	; 0x05
     660:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     662:	8b e9       	ldi	r24, 0x9B	; 155
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	97 83       	std	Z+7, r25	; 0x07
     668:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     66e:	12 86       	std	Z+10, r1	; 0x0a
     670:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     672:	2f bf       	out	0x3f, r18	; 63
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     674:	eb e9       	ldi	r30, 0x9B	; 155
     676:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     678:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     67a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     67c:	86 ea       	ldi	r24, 0xA6	; 166
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	91 83       	std	Z+1, r25	; 0x01
     682:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     684:	93 83       	std	Z+3, r25	; 0x03
     686:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     688:	95 83       	std	Z+5, r25	; 0x05
     68a:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     68c:	86 e2       	ldi	r24, 0x26	; 38
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	97 83       	std	Z+7, r25	; 0x07
     692:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     698:	12 86       	std	Z+10, r1	; 0x0a
     69a:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     69c:	2f bf       	out	0x3f, r18	; 63
    RingBuffer_InitBuffer(&HostRXSerial_Buffer, HostRXSerial_Buffer_Data, sizeof(HostRXSerial_Buffer_Data));
    RingBuffer_InitBuffer(&HostTXSerial_Buffer, HostTXSerial_Buffer_Data, sizeof(HostTXSerial_Buffer_Data));

    SetupHardware();
     69e:	b1 df       	rcall	.-158    	; 0x602 <SetupHardware>
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     6a0:	81 b3       	in	r24, 0x11	; 17
     6a2:	8f 71       	andi	r24, 0x1F	; 31
     6a4:	80 66       	ori	r24, 0x60	; 96
     6a6:	81 bb       	out	0x11, r24	; 17

    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    sei();
     6a8:	78 94       	sei
        }
        else if (tickCounter % 10000 == 8000)
        {
            // joystick demo end
            // (releases previous joystick actions)
            HIDReportOutData[0] = HID_REPORTID_JoystickReport;
     6aa:	43 e0       	ldi	r20, 0x03	; 3
     6ac:	84 2e       	mov	r8, r20
        else if (tickCounter % 10000 == 7000)
        {
            // joystick demo start
            // (moves left axis down/right, right axis up/left, and presses a button)
            HIDReportOutData[0] = HID_REPORTID_JoystickReport;
            HIDReportOutData[1] = 1; // buttons 1
     6ae:	99 24       	eor	r9, r9
     6b0:	93 94       	inc	r9
            HIDReportOutData[2] = 0; // buttons 2
            HIDReportOutData[3] = 5; // left x axis
     6b2:	35 e0       	ldi	r19, 0x05	; 5
     6b4:	a3 2e       	mov	r10, r19
            HIDReportOutData[4] = 5; // left y axis
            HIDReportOutData[5] = -5; // right x axis
     6b6:	2b ef       	ldi	r18, 0xFB	; 251
     6b8:	b2 2e       	mov	r11, r18
        }
        else if (tickCounter % 10000 == 6000)
        {
            // keyboard demo end
            // (releases previous keypresses, endless repeats otherwise)
            HIDReportOutData[0] = HID_REPORTID_KeyboardReport;
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	c9 2e       	mov	r12, r25
        {
            // mouse demo
            // (moves mouse cursor down and right by 5px, and scrolls down 5px also)
            HIDReportOutData[0] = HID_REPORTID_MouseReport;
            HIDReportOutData[1] = 0; // buttons
            HIDReportOutData[2] = 10; // x movement
     6be:	8a e0       	ldi	r24, 0x0A	; 10
     6c0:	d8 2e       	mov	r13, r24
            HIDReportOutData[3] = 10; // y movement
            HIDReportOutData[4] = -1; // z movement (optional, scrolling)
     6c2:	77 24       	eor	r7, r7
     6c4:	7a 94       	dec	r7
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    sei();

    for (;;)
    {
        if (tickCounter % 10000 == 1000)
     6c6:	e0 90 0c 01 	lds	r14, 0x010C
     6ca:	f0 90 0d 01 	lds	r15, 0x010D
     6ce:	00 91 0e 01 	lds	r16, 0x010E
     6d2:	10 91 0f 01 	lds	r17, 0x010F
     6d6:	c8 01       	movw	r24, r16
     6d8:	b7 01       	movw	r22, r14
     6da:	20 e1       	ldi	r18, 0x10	; 16
     6dc:	37 e2       	ldi	r19, 0x27	; 39
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e d6       	rcall	.+3100   	; 0x1300 <__divmodsi4>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	28 3e       	cpi	r18, 0xE8	; 232
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	38 07       	cpc	r19, r24
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	48 07       	cpc	r20, r24
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	58 07       	cpc	r21, r24
     6f6:	09 f0       	breq	.+2      	; 0x6fa <main+0xc6>
     6f8:	39 c0       	rjmp	.+114    	; 0x76c <main+0x138>
        {
            // virtual serial demo
            // (sends 'Tick [n]' where [n] is between 0 and 9 sequentially, looping back after 9)
            RingBuffer_Insert(&HostTXSerial_Buffer, 'T');
     6fa:	8b e9       	ldi	r24, 0x9B	; 155
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	64 e5       	ldi	r22, 0x54	; 84
     700:	d3 dd       	rcall	.-1114   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 'i');
     702:	8b e9       	ldi	r24, 0x9B	; 155
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	69 e6       	ldi	r22, 0x69	; 105
     708:	cf dd       	rcall	.-1122   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 'c');
     70a:	8b e9       	ldi	r24, 0x9B	; 155
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	63 e6       	ldi	r22, 0x63	; 99
     710:	cb dd       	rcall	.-1130   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 'k');
     712:	8b e9       	ldi	r24, 0x9B	; 155
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	6b e6       	ldi	r22, 0x6B	; 107
     718:	c7 dd       	rcall	.-1138   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, ' ');
     71a:	8b e9       	ldi	r24, 0x9B	; 155
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	60 e2       	ldi	r22, 0x20	; 32
     720:	c3 dd       	rcall	.-1146   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 48 + (((tickCounter - 1000) / 10000) % 10));
     722:	60 91 0c 01 	lds	r22, 0x010C
     726:	70 91 0d 01 	lds	r23, 0x010D
     72a:	80 91 0e 01 	lds	r24, 0x010E
     72e:	90 91 0f 01 	lds	r25, 0x010F
     732:	68 5e       	subi	r22, 0xE8	; 232
     734:	73 40       	sbci	r23, 0x03	; 3
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	20 e1       	ldi	r18, 0x10	; 16
     73c:	37 e2       	ldi	r19, 0x27	; 39
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	de d5       	rcall	.+3004   	; 0x1300 <__divmodsi4>
     744:	ca 01       	movw	r24, r20
     746:	b9 01       	movw	r22, r18
     748:	2a e0       	ldi	r18, 0x0A	; 10
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	d7 d5       	rcall	.+2990   	; 0x1300 <__divmodsi4>
     752:	60 5d       	subi	r22, 0xD0	; 208
     754:	8b e9       	ldi	r24, 0x9B	; 155
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	a7 dd       	rcall	.-1202   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 10); // \r
     75a:	8b e9       	ldi	r24, 0x9B	; 155
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	6a e0       	ldi	r22, 0x0A	; 10
     760:	a3 dd       	rcall	.-1210   	; 0x2a8 <RingBuffer_Insert>
            RingBuffer_Insert(&HostTXSerial_Buffer, 13); // \n
     762:	8b e9       	ldi	r24, 0x9B	; 155
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	6d e0       	ldi	r22, 0x0D	; 13
     768:	9f dd       	rcall	.-1218   	; 0x2a8 <RingBuffer_Insert>
     76a:	74 c0       	rjmp	.+232    	; 0x854 <main+0x220>
        }
        else if (tickCounter % 10000 == 3000)
     76c:	28 3b       	cpi	r18, 0xB8	; 184
     76e:	9b e0       	ldi	r25, 0x0B	; 11
     770:	39 07       	cpc	r19, r25
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	49 07       	cpc	r20, r25
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	59 07       	cpc	r21, r25
     77a:	59 f4       	brne	.+22     	; 0x792 <main+0x15e>
        {
            // mouse demo
            // (moves mouse cursor down and right by 5px, and scrolls down 5px also)
            HIDReportOutData[0] = HID_REPORTID_MouseReport;
     77c:	90 92 2f 02 	sts	0x022F, r9
            HIDReportOutData[1] = 0; // buttons
     780:	10 92 30 02 	sts	0x0230, r1
            HIDReportOutData[2] = 10; // x movement
     784:	d0 92 31 02 	sts	0x0231, r13
            HIDReportOutData[3] = 10; // y movement
     788:	d0 92 32 02 	sts	0x0232, r13
            HIDReportOutData[4] = -1; // z movement (optional, scrolling)
     78c:	70 92 33 02 	sts	0x0233, r7
     790:	59 c0       	rjmp	.+178    	; 0x844 <main+0x210>
            HIDReportOutData[5] = 0; // ]
            HIDReportOutData[6] = 0; // ] - unused
            HIDReportOutData[7] = 0; // ]
            HIDReportOutData[8] = 0; // ]
        }
        else if (tickCounter % 10000 == 5000)
     792:	28 38       	cpi	r18, 0x88	; 136
     794:	a3 e1       	ldi	r26, 0x13	; 19
     796:	3a 07       	cpc	r19, r26
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	4a 07       	cpc	r20, r26
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	5a 07       	cpc	r21, r26
     7a0:	01 f5       	brne	.+64     	; 0x7e2 <main+0x1ae>
        {
            // keyboard demo start
            // (presses 'a', 'b', 'c', etc. keys sequentially, looping back at z)
            HIDReportOutData[0] = HID_REPORTID_KeyboardReport;
     7a2:	c0 92 2f 02 	sts	0x022F, r12
            HIDReportOutData[1] = 0; // modifiers
     7a6:	10 92 30 02 	sts	0x0230, r1
            HIDReportOutData[2] = 0; // RESERVED
     7aa:	10 92 31 02 	sts	0x0231, r1
            HIDReportOutData[3] = 4 + (((tickCounter - 1000) / 10000) % 26); // key code [0]
     7ae:	88 e1       	ldi	r24, 0x18	; 24
     7b0:	9c ef       	ldi	r25, 0xFC	; 252
     7b2:	af ef       	ldi	r26, 0xFF	; 255
     7b4:	bf ef       	ldi	r27, 0xFF	; 255
     7b6:	e8 0e       	add	r14, r24
     7b8:	f9 1e       	adc	r15, r25
     7ba:	0a 1f       	adc	r16, r26
     7bc:	1b 1f       	adc	r17, r27
     7be:	c8 01       	movw	r24, r16
     7c0:	b7 01       	movw	r22, r14
     7c2:	20 e1       	ldi	r18, 0x10	; 16
     7c4:	37 e2       	ldi	r19, 0x27	; 39
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	9a d5       	rcall	.+2868   	; 0x1300 <__divmodsi4>
     7cc:	ca 01       	movw	r24, r20
     7ce:	b9 01       	movw	r22, r18
     7d0:	2a e1       	ldi	r18, 0x1A	; 26
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	93 d5       	rcall	.+2854   	; 0x1300 <__divmodsi4>
     7da:	6c 5f       	subi	r22, 0xFC	; 252
     7dc:	60 93 32 02 	sts	0x0232, r22
     7e0:	2f c0       	rjmp	.+94     	; 0x840 <main+0x20c>
            HIDReportOutData[5] = 0; // key code [2]
            HIDReportOutData[6] = 0; // key code [3]
            HIDReportOutData[7] = 0; // key code [4]
            HIDReportOutData[8] = 0; // key code [5]
        }
        else if (tickCounter % 10000 == 6000)
     7e2:	20 37       	cpi	r18, 0x70	; 112
     7e4:	97 e1       	ldi	r25, 0x17	; 23
     7e6:	39 07       	cpc	r19, r25
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	49 07       	cpc	r20, r25
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	59 07       	cpc	r21, r25
     7f0:	19 f4       	brne	.+6      	; 0x7f8 <main+0x1c4>
        {
            // keyboard demo end
            // (releases previous keypresses, endless repeats otherwise)
            HIDReportOutData[0] = HID_REPORTID_KeyboardReport;
     7f2:	c0 92 2f 02 	sts	0x022F, r12
     7f6:	1e c0       	rjmp	.+60     	; 0x834 <main+0x200>
            HIDReportOutData[5] = 0; // key code [2]
            HIDReportOutData[6] = 0; // key code [3]
            HIDReportOutData[7] = 0; // key code [4]
            HIDReportOutData[8] = 0; // key code [5]
        }
        else if (tickCounter % 10000 == 7000)
     7f8:	28 35       	cpi	r18, 0x58	; 88
     7fa:	ab e1       	ldi	r26, 0x1B	; 27
     7fc:	3a 07       	cpc	r19, r26
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	4a 07       	cpc	r20, r26
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	5a 07       	cpc	r21, r26
     806:	79 f4       	brne	.+30     	; 0x826 <main+0x1f2>
        {
            // joystick demo start
            // (moves left axis down/right, right axis up/left, and presses a button)
            HIDReportOutData[0] = HID_REPORTID_JoystickReport;
     808:	80 92 2f 02 	sts	0x022F, r8
            HIDReportOutData[1] = 1; // buttons 1
     80c:	90 92 30 02 	sts	0x0230, r9
            HIDReportOutData[2] = 0; // buttons 2
     810:	10 92 31 02 	sts	0x0231, r1
            HIDReportOutData[3] = 5; // left x axis
     814:	a0 92 32 02 	sts	0x0232, r10
            HIDReportOutData[4] = 5; // left y axis
     818:	a0 92 33 02 	sts	0x0233, r10
            HIDReportOutData[5] = -5; // right x axis
     81c:	b0 92 34 02 	sts	0x0234, r11
            HIDReportOutData[6] = -5; // right y exis
     820:	b0 92 35 02 	sts	0x0235, r11
     824:	13 c0       	rjmp	.+38     	; 0x84c <main+0x218>
            HIDReportOutData[7] = 0; // ] - unused
            HIDReportOutData[8] = 0; // ]
        }
        else if (tickCounter % 10000 == 8000)
     826:	20 54       	subi	r18, 0x40	; 64
     828:	3f 41       	sbci	r19, 0x1F	; 31
     82a:	40 40       	sbci	r20, 0x00	; 0
     82c:	50 40       	sbci	r21, 0x00	; 0
     82e:	91 f4       	brne	.+36     	; 0x854 <main+0x220>
        {
            // joystick demo end
            // (releases previous joystick actions)
            HIDReportOutData[0] = HID_REPORTID_JoystickReport;
     830:	80 92 2f 02 	sts	0x022F, r8
            HIDReportOutData[1] = 0; // buttons 1
     834:	10 92 30 02 	sts	0x0230, r1
            HIDReportOutData[2] = 0; // buttons 2
     838:	10 92 31 02 	sts	0x0231, r1
            HIDReportOutData[3] = 0; // left x axis
     83c:	10 92 32 02 	sts	0x0232, r1
            HIDReportOutData[4] = 0; // left y axis
     840:	10 92 33 02 	sts	0x0233, r1
            HIDReportOutData[5] = 0; // right x axis
     844:	10 92 34 02 	sts	0x0234, r1
            HIDReportOutData[6] = 0; // right y exis
     848:	10 92 35 02 	sts	0x0235, r1
            HIDReportOutData[7] = 0; // ] - unused
     84c:	10 92 36 02 	sts	0x0236, r1
            HIDReportOutData[8] = 0; // ]
     850:	10 92 37 02 	sts	0x0237, r1
        }

        CDC_Task();
     854:	8b dd       	rcall	.-1258   	; 0x36c <CDC_Task>
        HID_Task();
     856:	51 dd       	rcall	.-1374   	; 0x2fa <HID_Task>
        USB_USBTask();
     858:	40 d5       	rcall	.+2688   	; 0x12da <USB_USBTask>
        tickCounter++;
     85a:	80 91 0c 01 	lds	r24, 0x010C
     85e:	90 91 0d 01 	lds	r25, 0x010D
     862:	a0 91 0e 01 	lds	r26, 0x010E
     866:	b0 91 0f 01 	lds	r27, 0x010F
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	a1 1d       	adc	r26, r1
     86e:	b1 1d       	adc	r27, r1
     870:	80 93 0c 01 	sts	0x010C, r24
     874:	90 93 0d 01 	sts	0x010D, r25
     878:	a0 93 0e 01 	sts	0x010E, r26
     87c:	b0 93 0f 01 	sts	0x010F, r27
     880:	22 cf       	rjmp	.-444    	; 0x6c6 <main+0x92>

00000882 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     882:	da 01       	movw	r26, r20
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     884:	93 30       	cpi	r25, 0x03	; 3
     886:	c9 f0       	breq	.+50     	; 0x8ba <CALLBACK_USB_GetDescriptor+0x38>
     888:	94 30       	cpi	r25, 0x04	; 4
     88a:	30 f4       	brcc	.+12     	; 0x898 <CALLBACK_USB_GetDescriptor+0x16>
     88c:	91 30       	cpi	r25, 0x01	; 1
     88e:	59 f0       	breq	.+22     	; 0x8a6 <CALLBACK_USB_GetDescriptor+0x24>
     890:	92 30       	cpi	r25, 0x02	; 2
     892:	09 f0       	breq	.+2      	; 0x896 <CALLBACK_USB_GetDescriptor+0x14>
     894:	40 c0       	rjmp	.+128    	; 0x916 <CALLBACK_USB_GetDescriptor+0x94>
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <CALLBACK_USB_GetDescriptor+0x2e>
     898:	91 32       	cpi	r25, 0x21	; 33
     89a:	09 f4       	brne	.+2      	; 0x89e <CALLBACK_USB_GetDescriptor+0x1c>
     89c:	32 c0       	rjmp	.+100    	; 0x902 <CALLBACK_USB_GetDescriptor+0x80>
     89e:	92 32       	cpi	r25, 0x22	; 34
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <CALLBACK_USB_GetDescriptor+0x22>
     8a2:	39 c0       	rjmp	.+114    	; 0x916 <CALLBACK_USB_GetDescriptor+0x94>
     8a4:	33 c0       	rjmp	.+102    	; 0x90c <CALLBACK_USB_GetDescriptor+0x8a>
     8a6:	e9 e4       	ldi	r30, 0x49	; 73
     8a8:	f1 e0       	ldi	r31, 0x01	; 1
     8aa:	22 e1       	ldi	r18, 0x12	; 18
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	37 c0       	rjmp	.+110    	; 0x91e <CALLBACK_USB_GetDescriptor+0x9c>
     8b0:	eb e5       	ldi	r30, 0x5B	; 91
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	26 e6       	ldi	r18, 0x66	; 102
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	32 c0       	rjmp	.+100    	; 0x91e <CALLBACK_USB_GetDescriptor+0x9c>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     8ba:	82 30       	cpi	r24, 0x02	; 2
     8bc:	b1 f0       	breq	.+44     	; 0x8ea <CALLBACK_USB_GetDescriptor+0x68>
     8be:	83 30       	cpi	r24, 0x03	; 3
     8c0:	28 f4       	brcc	.+10     	; 0x8cc <CALLBACK_USB_GetDescriptor+0x4a>
     8c2:	88 23       	and	r24, r24
     8c4:	41 f0       	breq	.+16     	; 0x8d6 <CALLBACK_USB_GetDescriptor+0x54>
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	31 f5       	brne	.+76     	; 0x916 <CALLBACK_USB_GetDescriptor+0x94>
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <CALLBACK_USB_GetDescriptor+0x5c>
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	89 f0       	breq	.+34     	; 0x8f2 <CALLBACK_USB_GetDescriptor+0x70>
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	09 f5       	brne	.+66     	; 0x916 <CALLBACK_USB_GetDescriptor+0x94>
     8d4:	12 c0       	rjmp	.+36     	; 0x8fa <CALLBACK_USB_GetDescriptor+0x78>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     8d6:	e1 ec       	ldi	r30, 0xC1	; 193
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	84 91       	lpm	r24, Z+
     8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     8de:	e5 ec       	ldi	r30, 0xC5	; 197
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	84 91       	lpm	r24, Z+
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	1a c0       	rjmp	.+52     	; 0x91e <CALLBACK_USB_GetDescriptor+0x9c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     8ea:	e1 ee       	ldi	r30, 0xE1	; 225
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	84 91       	lpm	r24, Z+
     8f0:	f9 cf       	rjmp	.-14     	; 0x8e4 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x03:
                    Address = &ProductStringSerial;
                    Size    = pgm_read_byte(&ProductStringSerial.Header.Size);
     8f2:	ef e0       	ldi	r30, 0x0F	; 15
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	84 91       	lpm	r24, Z+
     8f8:	f5 cf       	rjmp	.-22     	; 0x8e4 <CALLBACK_USB_GetDescriptor+0x62>
                    break;
                case 0x04:
                    Address = &ProductStringHID;
                    Size    = pgm_read_byte(&ProductStringHID.Header.Size);
     8fa:	eb e3       	ldi	r30, 0x3B	; 59
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	84 91       	lpm	r24, Z+
     900:	f1 cf       	rjmp	.-30     	; 0x8e4 <CALLBACK_USB_GetDescriptor+0x62>
     902:	ea ea       	ldi	r30, 0xAA	; 170
     904:	f1 e0       	ldi	r31, 0x01	; 1
     906:	29 e0       	ldi	r18, 0x09	; 9
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	09 c0       	rjmp	.+18     	; 0x91e <CALLBACK_USB_GetDescriptor+0x9c>

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_GenericHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     90c:	e8 e9       	ldi	r30, 0x98	; 152
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	21 eb       	ldi	r18, 0xB1	; 177
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	04 c0       	rjmp	.+8      	; 0x91e <CALLBACK_USB_GetDescriptor+0x9c>
     916:	e0 e0       	ldi	r30, 0x00	; 0
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
            Address = &HIDReport;
            Size    = sizeof(HIDReport);
            break;
    }

    *DescriptorAddress = Address;
     91e:	ed 93       	st	X+, r30
     920:	fc 93       	st	X, r31
    return Size;
}
     922:	c9 01       	movw	r24, r18
     924:	08 95       	ret

00000926 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     926:	38 2f       	mov	r19, r24
     928:	28 2f       	mov	r18, r24
     92a:	2c c0       	rjmp	.+88     	; 0x984 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     92c:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     930:	23 17       	cp	r18, r19
     932:	21 f4       	brne	.+8      	; 0x93c <Endpoint_ConfigureEndpoint_Prv+0x16>
     934:	76 2f       	mov	r23, r22
     936:	94 2f       	mov	r25, r20
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	06 c0       	rjmp	.+12     	; 0x948 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     93c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     940:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     944:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     948:	91 ff       	sbrs	r25, 1
     94a:	1b c0       	rjmp	.+54     	; 0x982 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     94c:	80 91 eb 00 	lds	r24, 0x00EB
     950:	8e 7f       	andi	r24, 0xFE	; 254
     952:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= (1 << ALLOC);
     956:	80 91 ed 00 	lds	r24, 0x00ED
     95a:	82 70       	andi	r24, 0x02	; 2
     95c:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     960:	80 91 eb 00 	lds	r24, 0x00EB
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     96a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     96e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     972:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     976:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     97a:	87 fd       	sbrc	r24, 7
     97c:	02 c0       	rjmp	.+4      	; 0x982 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     982:	2f 5f       	subi	r18, 0xFF	; 255
     984:	27 30       	cpi	r18, 0x07	; 7
     986:	90 f2       	brcs	.-92     	; 0x92c <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     988:	30 93 e9 00 	sts	0x00E9, r19
     98c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     98e:	08 95       	ret

00000990 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     990:	80 91 3d 02 	lds	r24, 0x023D
     994:	88 23       	and	r24, r24
     996:	9c f4       	brge	.+38     	; 0x9be <Endpoint_ClearStatusStage+0x2e>
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     99a:	80 91 3c 02 	lds	r24, 0x023C
     99e:	88 23       	and	r24, r24
     9a0:	b9 f0       	breq	.+46     	; 0x9d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     9a6:	82 ff       	sbrs	r24, 2
     9a8:	f8 cf       	rjmp	.-16     	; 0x99a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9aa:	80 91 e8 00 	lds	r24, 0x00E8
     9ae:	8b 77       	andi	r24, 0x7B	; 123
     9b0:	80 93 e8 00 	sts	0x00E8, r24
     9b4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9b6:	80 91 3c 02 	lds	r24, 0x023C
     9ba:	88 23       	and	r24, r24
     9bc:	49 f0       	breq	.+18     	; 0x9d0 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9be:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     9c2:	80 ff       	sbrs	r24, 0
     9c4:	f8 cf       	rjmp	.-16     	; 0x9b6 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c6:	80 91 e8 00 	lds	r24, 0x00E8
     9ca:	8e 77       	andi	r24, 0x7E	; 126
     9cc:	80 93 e8 00 	sts	0x00E8, r24
     9d0:	08 95       	ret

000009d2 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     9d2:	40 91 e4 00 	lds	r20, 0x00E4
     9d6:	50 91 e5 00 	lds	r21, 0x00E5
     9da:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     9dc:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     9e0:	80 ff       	sbrs	r24, 0
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     9e8:	80 ff       	sbrs	r24, 0
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <Endpoint_WaitUntilReady+0x24>
     9ec:	22 c0       	rjmp	.+68     	; 0xa32 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ee:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9f2:	82 fd       	sbrc	r24, 2
     9f4:	1e c0       	rjmp	.+60     	; 0xa32 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9f6:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9fa:	88 23       	and	r24, r24
     9fc:	11 f4       	brne	.+4      	; 0xa02 <Endpoint_WaitUntilReady+0x30>
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a02:	85 30       	cpi	r24, 0x05	; 5
     a04:	11 f4       	brne	.+4      	; 0xa0a <Endpoint_WaitUntilReady+0x38>
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a0a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     a0e:	85 ff       	sbrs	r24, 5
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <Endpoint_WaitUntilReady+0x44>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret
     a16:	80 91 e4 00 	lds	r24, 0x00E4
     a1a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a1e:	84 17       	cp	r24, r20
     a20:	95 07       	cpc	r25, r21
     a22:	e1 f2       	breq	.-72     	; 0x9dc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a24:	22 23       	and	r18, r18
     a26:	11 f4       	brne	.+4      	; 0xa2c <Endpoint_WaitUntilReady+0x5a>
     a28:	84 e0       	ldi	r24, 0x04	; 4
     a2a:	08 95       	ret
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	ac 01       	movw	r20, r24
     a30:	d5 cf       	rjmp	.-86     	; 0x9dc <Endpoint_WaitUntilReady+0xa>
     a32:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     a34:	08 95       	ret

00000a36 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a3e:	4d d0       	rcall	.+154    	; 0xada <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a40:	54 d0       	rcall	.+168    	; 0xaea <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     a42:	08 ed       	ldi	r16, 0xD8	; 216
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	f8 01       	movw	r30, r16
     a48:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     a4a:	98 2f       	mov	r25, r24
     a4c:	9f 77       	andi	r25, 0x7F	; 127
     a4e:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     a50:	80 68       	ori	r24, 0x80	; 128
     a52:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a54:	80 81       	ld	r24, Z
     a56:	8f 7d       	andi	r24, 0xDF	; 223
     a58:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     a5a:	e7 ed       	ldi	r30, 0xD7	; 215
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	80 68       	ori	r24, 0x80	; 128
     a62:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     a64:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     a66:	10 92 3c 02 	sts	0x023C, r1
	USB_ConfigurationNumber  = 0;
     a6a:	10 92 3a 02 	sts	0x023A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     a6e:	10 92 39 02 	sts	0x0239, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     a72:	10 92 38 02 	sts	0x0238, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     a76:	80 ee       	ldi	r24, 0xE0	; 224
     a78:	e8 2e       	mov	r14, r24
     a7a:	f1 2c       	mov	r15, r1
     a7c:	f7 01       	movw	r30, r14
     a7e:	80 81       	ld	r24, Z
     a80:	8b 7f       	andi	r24, 0xFB	; 251
     a82:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a84:	f8 01       	movw	r30, r16
     a86:	80 81       	ld	r24, Z
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	42 e0       	ldi	r20, 0x02	; 2
     a92:	49 df       	rcall	.-366    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a94:	e1 ee       	ldi	r30, 0xE1	; 225
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a9e:	e2 ee       	ldi	r30, 0xE2	; 226
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     aa8:	80 81       	ld	r24, Z
     aaa:	88 60       	ori	r24, 0x08	; 8
     aac:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     aae:	f7 01       	movw	r30, r14
     ab0:	80 81       	ld	r24, Z
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     ab6:	f8 01       	movw	r30, r16
     ab8:	80 81       	ld	r24, Z
     aba:	80 61       	ori	r24, 0x10	; 16
     abc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ac8:	e7 ed       	ldi	r30, 0xD7	; 215
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 3b 02 	sts	0x023B, r24

	USB_ResetInterface();
}
     ad8:	ae cf       	rjmp	.-164    	; 0xa36 <USB_ResetInterface>

00000ada <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ada:	e8 ed       	ldi	r30, 0xD8	; 216
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8c 7f       	andi	r24, 0xFC	; 252
     ae2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ae4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     ae8:	08 95       	ret

00000aea <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     aea:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     aee:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     af2:	08 95       	ret

00000af4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     b1a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     b1e:	82 ff       	sbrs	r24, 2
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     b22:	80 91 e2 00 	lds	r24, 0x00E2
     b26:	82 ff       	sbrs	r24, 2
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b2a:	80 91 e1 00 	lds	r24, 0x00E1
     b2e:	8b 7f       	andi	r24, 0xFB	; 251
     b30:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b34:	2d d2       	rcall	.+1114   	; 0xf90 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     b36:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     b3a:	80 ff       	sbrs	r24, 0
     b3c:	1e c0       	rjmp	.+60     	; 0xb7a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     b3e:	80 91 d8 00 	lds	r24, 0x00D8
     b42:	80 ff       	sbrs	r24, 0
     b44:	1a c0       	rjmp	.+52     	; 0xb7a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     b46:	80 91 da 00 	lds	r24, 0x00DA
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     b50:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     b54:	80 ff       	sbrs	r24, 0
     b56:	0d c0       	rjmp	.+26     	; 0xb72 <__vector_10+0x7e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     b58:	84 e1       	ldi	r24, 0x14	; 20
     b5a:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     b5c:	89 b5       	in	r24, 0x29	; 41
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     b62:	09 b4       	in	r0, 0x29	; 41
     b64:	00 fe       	sbrs	r0, 0
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 3c 02 	sts	0x023C, r24
			EVENT_USB_Device_Connect();
     b6e:	bb db       	rcall	.-2186   	; 0x2e6 <EVENT_USB_Device_Connect>
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     b72:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b74:	10 92 3c 02 	sts	0x023C, r1
			EVENT_USB_Device_Disconnect();
     b78:	bb db       	rcall	.-2186   	; 0x2f0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b7a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b7e:	80 ff       	sbrs	r24, 0
     b80:	18 c0       	rjmp	.+48     	; 0xbb2 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b82:	80 91 e2 00 	lds	r24, 0x00E2
     b86:	80 ff       	sbrs	r24, 0
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b8a:	80 91 e2 00 	lds	r24, 0x00E2
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b94:	80 91 e2 00 	lds	r24, 0x00E2
     b98:	80 61       	ori	r24, 0x10	; 16
     b9a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     b9e:	80 91 d8 00 	lds	r24, 0x00D8
     ba2:	80 62       	ori	r24, 0x20	; 32
     ba4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     ba8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	80 93 3c 02 	sts	0x023C, r24
		EVENT_USB_Device_Suspend();
     bb0:	ef d1       	rcall	.+990    	; 0xf90 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     bb2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     bb6:	84 ff       	sbrs	r24, 4
     bb8:	2e c0       	rjmp	.+92     	; 0xc16 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     bba:	80 91 e2 00 	lds	r24, 0x00E2
     bbe:	84 ff       	sbrs	r24, 4
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     bc2:	84 e1       	ldi	r24, 0x14	; 20
     bc4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     bc6:	89 b5       	in	r24, 0x29	; 41
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bcc:	09 b4       	in	r0, 0x29	; 41
     bce:	00 fe       	sbrs	r0, 0
     bd0:	fd cf       	rjmp	.-6      	; 0xbcc <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bd2:	80 91 d8 00 	lds	r24, 0x00D8
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     bdc:	80 91 e1 00 	lds	r24, 0x00E1
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     be6:	80 91 e2 00 	lds	r24, 0x00E2
     bea:	8f 7e       	andi	r24, 0xEF	; 239
     bec:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bf0:	80 91 e2 00 	lds	r24, 0x00E2
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     bfa:	80 91 3a 02 	lds	r24, 0x023A
     bfe:	88 23       	and	r24, r24
     c00:	31 f4       	brne	.+12     	; 0xc0e <__vector_10+0x11a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c02:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c06:	87 fd       	sbrc	r24, 7
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <__vector_10+0x11a>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__vector_10+0x11c>
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	80 93 3c 02 	sts	0x023C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     c14:	bd d1       	rcall	.+890    	; 0xf90 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     c16:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     c1a:	83 ff       	sbrs	r24, 3
     c1c:	22 c0       	rjmp	.+68     	; 0xc62 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     c1e:	80 91 e2 00 	lds	r24, 0x00E2
     c22:	83 ff       	sbrs	r24, 3
     c24:	1e c0       	rjmp	.+60     	; 0xc62 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c26:	80 91 e1 00 	lds	r24, 0x00E1
     c2a:	87 7f       	andi	r24, 0xF7	; 247
     c2c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	80 93 3c 02 	sts	0x023C, r24
		USB_ConfigurationNumber = 0;
     c36:	10 92 3a 02 	sts	0x023A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c3a:	80 91 e1 00 	lds	r24, 0x00E1
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c44:	80 91 e2 00 	lds	r24, 0x00E2
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c4e:	80 91 e2 00 	lds	r24, 0x00E2
     c52:	80 61       	ori	r24, 0x10	; 16
     c54:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	63 de       	rcall	.-826    	; 0x926 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c60:	97 d1       	rcall	.+814    	; 0xf90 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0b be       	out	0x3b, r0	; 59
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	ac 97       	sbiw	r28, 0x2c	; 44
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ca0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     ca4:	80 93 3d 02 	sts	0x023D, r24
     ca8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     cac:	80 93 3e 02 	sts	0x023E, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     cb0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     cb4:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     cb8:	ef e3       	ldi	r30, 0x3F	; 63
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	80 93 3f 02 	sts	0x023F, r24
     cc0:	90 93 40 02 	sts	0x0240, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     cc4:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     cc8:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     ccc:	80 93 41 02 	sts	0x0241, r24
     cd0:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     cd2:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     cd6:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     cda:	80 93 43 02 	sts	0x0243, r24
     cde:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     ce0:	ce db       	rcall	.-2148   	; 0x47e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ce2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     ce6:	83 ff       	sbrs	r24, 3
     ce8:	3a c1       	rjmp	.+628    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     cea:	80 91 3d 02 	lds	r24, 0x023D

		switch (USB_ControlRequest.bRequest)
     cee:	30 91 3e 02 	lds	r19, 0x023E
     cf2:	35 30       	cpi	r19, 0x05	; 5
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <USB_Device_ProcessControlRequest+0x70>
     cf6:	87 c0       	rjmp	.+270    	; 0xe06 <USB_Device_ProcessControlRequest+0x17e>
     cf8:	36 30       	cpi	r19, 0x06	; 6
     cfa:	40 f4       	brcc	.+16     	; 0xd0c <USB_Device_ProcessControlRequest+0x84>
     cfc:	31 30       	cpi	r19, 0x01	; 1
     cfe:	c9 f1       	breq	.+114    	; 0xd72 <USB_Device_ProcessControlRequest+0xea>
     d00:	31 30       	cpi	r19, 0x01	; 1
     d02:	70 f0       	brcs	.+28     	; 0xd20 <USB_Device_ProcessControlRequest+0x98>
     d04:	33 30       	cpi	r19, 0x03	; 3
     d06:	09 f0       	breq	.+2      	; 0xd0a <USB_Device_ProcessControlRequest+0x82>
     d08:	2a c1       	rjmp	.+596    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
     d0a:	33 c0       	rjmp	.+102    	; 0xd72 <USB_Device_ProcessControlRequest+0xea>
     d0c:	38 30       	cpi	r19, 0x08	; 8
     d0e:	09 f4       	brne	.+2      	; 0xd12 <USB_Device_ProcessControlRequest+0x8a>
     d10:	f8 c0       	rjmp	.+496    	; 0xf02 <USB_Device_ProcessControlRequest+0x27a>
     d12:	39 30       	cpi	r19, 0x09	; 9
     d14:	09 f4       	brne	.+2      	; 0xd18 <USB_Device_ProcessControlRequest+0x90>
     d16:	07 c1       	rjmp	.+526    	; 0xf26 <USB_Device_ProcessControlRequest+0x29e>
     d18:	36 30       	cpi	r19, 0x06	; 6
     d1a:	09 f0       	breq	.+2      	; 0xd1e <USB_Device_ProcessControlRequest+0x96>
     d1c:	20 c1       	rjmp	.+576    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
     d1e:	99 c0       	rjmp	.+306    	; 0xe52 <USB_Device_ProcessControlRequest+0x1ca>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d20:	80 38       	cpi	r24, 0x80	; 128
     d22:	21 f0       	breq	.+8      	; 0xd2c <USB_Device_ProcessControlRequest+0xa4>
     d24:	82 38       	cpi	r24, 0x82	; 130
     d26:	09 f0       	breq	.+2      	; 0xd2a <USB_Device_ProcessControlRequest+0xa2>
     d28:	1a c1       	rjmp	.+564    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
     d2a:	08 c0       	rjmp	.+16     	; 0xd3c <USB_Device_ProcessControlRequest+0xb4>
     d2c:	90 91 38 02 	lds	r25, 0x0238
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
     d30:	80 91 39 02 	lds	r24, 0x0239
     d34:	88 23       	and	r24, r24
     d36:	99 f0       	breq	.+38     	; 0xd5e <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d38:	92 60       	ori	r25, 0x02	; 2
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d3c:	80 91 41 02 	lds	r24, 0x0241
     d40:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d42:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d46:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	25 e0       	ldi	r18, 0x05	; 5
     d4e:	96 95       	lsr	r25
     d50:	87 95       	ror	r24
     d52:	2a 95       	dec	r18
     d54:	e1 f7       	brne	.-8      	; 0xd4e <USB_Device_ProcessControlRequest+0xc6>
     d56:	98 2f       	mov	r25, r24
     d58:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d5a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d5e:	80 91 e8 00 	lds	r24, 0x00E8
     d62:	87 7f       	andi	r24, 0xF7	; 247
     d64:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d68:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     d6c:	10 92 f1 00 	sts	0x00F1, r1
     d70:	d3 c0       	rjmp	.+422    	; 0xf18 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <USB_Device_ProcessControlRequest+0xf4>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	09 f0       	breq	.+2      	; 0xd7c <USB_Device_ProcessControlRequest+0xf4>
     d7a:	f1 c0       	rjmp	.+482    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	8f 71       	andi	r24, 0x1F	; 31
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	21 f0       	breq	.+8      	; 0xd8e <USB_Device_ProcessControlRequest+0x106>
     d86:	02 97       	sbiw	r24, 0x02	; 2
     d88:	09 f0       	breq	.+2      	; 0xd8c <USB_Device_ProcessControlRequest+0x104>
     d8a:	e9 c0       	rjmp	.+466    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d8e:	80 91 3f 02 	lds	r24, 0x023F
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <USB_Device_ProcessControlRequest+0x110>
     d96:	e3 c0       	rjmp	.+454    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d98:	10 92 39 02 	sts	0x0239, r1
     d9c:	33 30       	cpi	r19, 0x03	; 3
     d9e:	69 f5       	brne	.+90     	; 0xdfa <USB_Device_ProcessControlRequest+0x172>
     da0:	80 93 39 02 	sts	0x0239, r24
     da4:	2a c0       	rjmp	.+84     	; 0xdfa <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     da6:	80 91 3f 02 	lds	r24, 0x023F
     daa:	88 23       	and	r24, r24
     dac:	31 f5       	brne	.+76     	; 0xdfa <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dae:	20 91 41 02 	lds	r18, 0x0241
     db2:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     db4:	09 f4       	brne	.+2      	; 0xdb8 <USB_Device_ProcessControlRequest+0x130>
     db6:	d3 c0       	rjmp	.+422    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     dbc:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     dc4:	33 30       	cpi	r19, 0x03	; 3
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dc8:	80 91 eb 00 	lds	r24, 0x00EB
     dcc:	80 62       	ori	r24, 0x20	; 32
     dce:	13 c0       	rjmp	.+38     	; 0xdf6 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     dd0:	80 91 eb 00 	lds	r24, 0x00EB
     dd4:	80 61       	ori	r24, 0x10	; 16
     dd6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <USB_Device_ProcessControlRequest+0x15c>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	2a 95       	dec	r18
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <USB_Device_ProcessControlRequest+0x158>
     de8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     dec:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     df0:	80 91 eb 00 	lds	r24, 0x00EB
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dfa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	8c c0       	rjmp	.+280    	; 0xf1e <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e06:	88 23       	and	r24, r24
     e08:	09 f0       	breq	.+2      	; 0xe0c <USB_Device_ProcessControlRequest+0x184>
     e0a:	a9 c0       	rjmp	.+338    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     e0c:	10 91 3f 02 	lds	r17, 0x023F
     e10:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e12:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e14:	f8 94       	cli
     e16:	80 91 e8 00 	lds	r24, 0x00E8
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e20:	b7 dd       	rcall	.-1170   	; 0x990 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e22:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     e26:	80 ff       	sbrs	r24, 0
     e28:	fc cf       	rjmp	.-8      	; 0xe22 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
     e2a:	80 91 e3 00 	lds	r24, 0x00E3
     e2e:	80 78       	andi	r24, 0x80	; 128
     e30:	81 2b       	or	r24, r17
     e32:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
     e36:	80 91 e3 00 	lds	r24, 0x00E3
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e40:	11 23       	and	r17, r17
     e42:	11 f4       	brne	.+4      	; 0xe48 <USB_Device_ProcessControlRequest+0x1c0>
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <USB_Device_ProcessControlRequest+0x1c2>
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 3c 02 	sts	0x023C, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e4e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     e50:	86 c0       	rjmp	.+268    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e52:	80 58       	subi	r24, 0x80	; 128
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	08 f0       	brcs	.+2      	; 0xe5a <USB_Device_ProcessControlRequest+0x1d2>
     e58:	82 c0       	rjmp	.+260    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e5a:	80 91 3f 02 	lds	r24, 0x023F
     e5e:	90 91 40 02 	lds	r25, 0x0240
     e62:	23 e0       	ldi	r18, 0x03	; 3
     e64:	8c 3d       	cpi	r24, 0xDC	; 220
     e66:	92 07       	cpc	r25, r18
     e68:	09 f0       	breq	.+2      	; 0xe6c <USB_Device_ProcessControlRequest+0x1e4>
     e6a:	33 c0       	rjmp	.+102    	; 0xed2 <USB_Device_ProcessControlRequest+0x24a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e70:	8a e2       	ldi	r24, 0x2A	; 42
     e72:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e74:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e76:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
     e78:	de 01       	movw	r26, r28
     e7a:	15 96       	adiw	r26, 0x05	; 5
     e7c:	6e e0       	ldi	r22, 0x0E	; 14
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e82:	11 e2       	ldi	r17, 0x21	; 33
     e84:	e6 2f       	mov	r30, r22
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 93 57 00 	sts	0x0057, r17
     e8c:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     e8e:	40 ff       	sbrs	r20, 0
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <USB_Device_ProcessControlRequest+0x210>
					{
						SerialByte >>= 4;
     e92:	82 95       	swap	r24
     e94:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     e96:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e98:	8f 70       	andi	r24, 0x0F	; 15
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e9e:	8a 30       	cpi	r24, 0x0A	; 10
     ea0:	18 f0       	brcs	.+6      	; 0xea8 <USB_Device_ProcessControlRequest+0x220>
     ea2:	c9 01       	movw	r24, r18
     ea4:	c7 96       	adiw	r24, 0x37	; 55
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <USB_Device_ProcessControlRequest+0x224>
     ea8:	c9 01       	movw	r24, r18
     eaa:	c0 96       	adiw	r24, 0x30	; 48
     eac:	8d 93       	st	X+, r24
     eae:	9d 93       	st	X+, r25
     eb0:	4f 5f       	subi	r20, 0xFF	; 255
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     eb4:	44 31       	cpi	r20, 0x14	; 20
     eb6:	51 05       	cpc	r21, r1
     eb8:	29 f7       	brne	.-54     	; 0xe84 <USB_Device_ProcessControlRequest+0x1fc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     eba:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ebc:	80 91 e8 00 	lds	r24, 0x00E8
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ec6:	ce 01       	movw	r24, r28
     ec8:	03 96       	adiw	r24, 0x03	; 3
     eca:	6a e2       	ldi	r22, 0x2A	; 42
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	61 d0       	rcall	.+194    	; 0xf92 <Endpoint_Write_Control_Stream_LE>
     ed0:	12 c0       	rjmp	.+36     	; 0xef6 <USB_Device_ProcessControlRequest+0x26e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     ed2:	60 91 41 02 	lds	r22, 0x0241
     ed6:	ae 01       	movw	r20, r28
     ed8:	4f 5f       	subi	r20, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	d2 dc       	rcall	.-1628   	; 0x882 <CALLBACK_USB_GetDescriptor>
     ede:	bc 01       	movw	r22, r24
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	09 f4       	brne	.+2      	; 0xee6 <USB_Device_ProcessControlRequest+0x25e>
     ee4:	3c c0       	rjmp	.+120    	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
     ee6:	80 91 e8 00 	lds	r24, 0x00E8
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	ed d0       	rcall	.+474    	; 0x10d0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ef6:	80 91 e8 00 	lds	r24, 0x00E8
     efa:	8b 77       	andi	r24, 0x7B	; 123
     efc:	80 93 e8 00 	sts	0x00E8, r24
     f00:	2e c0       	rjmp	.+92     	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f02:	80 38       	cpi	r24, 0x80	; 128
     f04:	61 f5       	brne	.+88     	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f06:	80 91 e8 00 	lds	r24, 0x00E8
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
     f10:	80 91 3a 02 	lds	r24, 0x023A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f14:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f18:	80 91 e8 00 	lds	r24, 0x00E8
     f1c:	8e 77       	andi	r24, 0x7E	; 126
     f1e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f22:	36 dd       	rcall	.-1428   	; 0x990 <Endpoint_ClearStatusStage>
     f24:	1c c0       	rjmp	.+56     	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f26:	88 23       	and	r24, r24
     f28:	d1 f4       	brne	.+52     	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f2a:	90 91 3f 02 	lds	r25, 0x023F
     f2e:	92 30       	cpi	r25, 0x02	; 2
     f30:	b0 f4       	brcc	.+44     	; 0xf5e <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f32:	80 91 e8 00 	lds	r24, 0x00E8
     f36:	87 7f       	andi	r24, 0xF7	; 247
     f38:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     f3c:	90 93 3a 02 	sts	0x023A, r25

	Endpoint_ClearStatusStage();
     f40:	27 dd       	rcall	.-1458   	; 0x990 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
     f42:	80 91 3a 02 	lds	r24, 0x023A
     f46:	88 23       	and	r24, r24
     f48:	31 f4       	brne	.+12     	; 0xf56 <USB_Device_ProcessControlRequest+0x2ce>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f4a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f4e:	87 fd       	sbrc	r24, 7
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <USB_Device_ProcessControlRequest+0x2ce>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <USB_Device_ProcessControlRequest+0x2d0>
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	80 93 3c 02 	sts	0x023C, r24

	EVENT_USB_Device_ConfigurationChanged();
     f5c:	fc da       	rcall	.-2568   	; 0x556 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f5e:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f62:	83 ff       	sbrs	r24, 3
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <USB_Device_ProcessControlRequest+0x2f2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f66:	80 91 eb 00 	lds	r24, 0x00EB
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f70:	80 91 e8 00 	lds	r24, 0x00E8
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     f7a:	ac 96       	adiw	r28, 0x2c	; 44
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f90:	08 95       	ret

00000f92 <Endpoint_Write_Control_Stream_LE>:
     f92:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f94:	40 91 43 02 	lds	r20, 0x0243
     f98:	50 91 44 02 	lds	r21, 0x0244
     f9c:	46 17       	cp	r20, r22
     f9e:	57 07       	cpc	r21, r23
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fa2:	f9 01       	movw	r30, r18
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	3d c0       	rjmp	.+122    	; 0x1022 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fa8:	61 15       	cp	r22, r1
     faa:	71 05       	cpc	r23, r1
     fac:	11 f0       	breq	.+4      	; 0xfb2 <Endpoint_Write_Control_Stream_LE+0x20>
     fae:	ab 01       	movw	r20, r22
     fb0:	f8 cf       	rjmp	.-16     	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb2:	80 91 e8 00 	lds	r24, 0x00E8
     fb6:	8e 77       	andi	r24, 0x7E	; 126
     fb8:	80 93 e8 00 	sts	0x00E8, r24
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	f0 cf       	rjmp	.-32     	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fc2:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fc6:	88 23       	and	r24, r24
     fc8:	f1 f1       	breq	.+124    	; 0x1046 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fca:	85 30       	cpi	r24, 0x05	; 5
     fcc:	f1 f1       	breq	.+124    	; 0x104a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fd2:	83 ff       	sbrs	r24, 3
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <Endpoint_Write_Control_Stream_LE+0x48>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fda:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     fde:	82 fd       	sbrc	r24, 2
     fe0:	2c c0       	rjmp	.+88     	; 0x103a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fe2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     fe6:	80 ff       	sbrs	r24, 0
     fe8:	1c c0       	rjmp	.+56     	; 0x1022 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     fea:	20 91 f2 00 	lds	r18, 0x00F2
     fee:	30 91 f3 00 	lds	r19, 0x00F3
     ff2:	07 c0       	rjmp	.+14     	; 0x1002 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ff4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ff6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     ffa:	41 50       	subi	r20, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1002:	41 15       	cp	r20, r1
    1004:	51 05       	cpc	r21, r1
    1006:	19 f0       	breq	.+6      	; 0x100e <Endpoint_Write_Control_Stream_LE+0x7c>
    1008:	28 30       	cpi	r18, 0x08	; 8
    100a:	31 05       	cpc	r19, r1
    100c:	98 f3       	brcs	.-26     	; 0xff4 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	28 30       	cpi	r18, 0x08	; 8
    1012:	31 05       	cpc	r19, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <Endpoint_Write_Control_Stream_LE+0x86>
    1016:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1018:	80 91 e8 00 	lds	r24, 0x00E8
    101c:	8e 77       	andi	r24, 0x7E	; 126
    101e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1022:	41 15       	cp	r20, r1
    1024:	51 05       	cpc	r21, r1
    1026:	69 f6       	brne	.-102    	; 0xfc2 <Endpoint_Write_Control_Stream_LE+0x30>
    1028:	99 23       	and	r25, r25
    102a:	59 f6       	brne	.-106    	; 0xfc2 <Endpoint_Write_Control_Stream_LE+0x30>
    102c:	06 c0       	rjmp	.+12     	; 0x103a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    102e:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1032:	88 23       	and	r24, r24
    1034:	41 f0       	breq	.+16     	; 0x1046 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1036:	85 30       	cpi	r24, 0x05	; 5
    1038:	41 f0       	breq	.+16     	; 0x104a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    103a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    103e:	82 ff       	sbrs	r24, 2
    1040:	f6 cf       	rjmp	.-20     	; 0x102e <Endpoint_Write_Control_Stream_LE+0x9c>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	08 95       	ret
    104a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    104c:	08 95       	ret

0000104e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    104e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1050:	61 15       	cp	r22, r1
    1052:	71 05       	cpc	r23, r1
    1054:	29 f4       	brne	.+10     	; 0x1060 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1056:	80 91 e8 00 	lds	r24, 0x00E8
    105a:	8b 77       	andi	r24, 0x7B	; 123
    105c:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1060:	f9 01       	movw	r30, r18
    1062:	22 c0       	rjmp	.+68     	; 0x10a8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1064:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1068:	88 23       	and	r24, r24
    106a:	71 f1       	breq	.+92     	; 0x10c8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	71 f1       	breq	.+92     	; 0x10cc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1070:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1074:	83 ff       	sbrs	r24, 3
    1076:	02 c0       	rjmp	.+4      	; 0x107c <Endpoint_Read_Control_Stream_LE+0x2e>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    107c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1080:	82 ff       	sbrs	r24, 2
    1082:	f0 cf       	rjmp	.-32     	; 0x1064 <Endpoint_Read_Control_Stream_LE+0x16>
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1086:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    108a:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    108c:	61 50       	subi	r22, 0x01	; 1
    108e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1090:	31 f0       	breq	.+12     	; 0x109e <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1092:	80 91 f2 00 	lds	r24, 0x00F2
    1096:	90 91 f3 00 	lds	r25, 0x00F3
    109a:	89 2b       	or	r24, r25
    109c:	a1 f7       	brne	.-24     	; 0x1086 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    109e:	80 91 e8 00 	lds	r24, 0x00E8
    10a2:	8b 77       	andi	r24, 0x7B	; 123
    10a4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	d9 f6       	brne	.-74     	; 0x1064 <Endpoint_Read_Control_Stream_LE+0x16>
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10b0:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10b4:	88 23       	and	r24, r24
    10b6:	41 f0       	breq	.+16     	; 0x10c8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10b8:	85 30       	cpi	r24, 0x05	; 5
    10ba:	41 f0       	breq	.+16     	; 0x10cc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10bc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    10c0:	80 ff       	sbrs	r24, 0
    10c2:	f6 cf       	rjmp	.-20     	; 0x10b0 <Endpoint_Read_Control_Stream_LE+0x62>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	08 95       	ret
    10cc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    10ce:	08 95       	ret

000010d0 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    10d0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10d2:	40 91 43 02 	lds	r20, 0x0243
    10d6:	50 91 44 02 	lds	r21, 0x0244
    10da:	46 17       	cp	r20, r22
    10dc:	57 07       	cpc	r21, r23
    10de:	18 f4       	brcc	.+6      	; 0x10e6 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10e0:	f9 01       	movw	r30, r18
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	40 c0       	rjmp	.+128    	; 0x1166 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <Endpoint_Write_Control_PStream_LE+0x20>
    10ec:	ab 01       	movw	r20, r22
    10ee:	f8 cf       	rjmp	.-16     	; 0x10e0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10f0:	80 91 e8 00 	lds	r24, 0x00E8
    10f4:	8e 77       	andi	r24, 0x7E	; 126
    10f6:	80 93 e8 00 	sts	0x00E8, r24
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	f0 cf       	rjmp	.-32     	; 0x10e0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1100:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1104:	88 23       	and	r24, r24
    1106:	09 f4       	brne	.+2      	; 0x110a <Endpoint_Write_Control_PStream_LE+0x3a>
    1108:	40 c0       	rjmp	.+128    	; 0x118a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    110a:	85 30       	cpi	r24, 0x05	; 5
    110c:	09 f4       	brne	.+2      	; 0x1110 <Endpoint_Write_Control_PStream_LE+0x40>
    110e:	3f c0       	rjmp	.+126    	; 0x118e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1110:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1114:	83 ff       	sbrs	r24, 3
    1116:	02 c0       	rjmp	.+4      	; 0x111c <Endpoint_Write_Control_PStream_LE+0x4c>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    111c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1120:	82 fd       	sbrc	r24, 2
    1122:	2d c0       	rjmp	.+90     	; 0x117e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1124:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1128:	80 ff       	sbrs	r24, 0
    112a:	1d c0       	rjmp	.+58     	; 0x1166 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    112c:	20 91 f2 00 	lds	r18, 0x00F2
    1130:	30 91 f3 00 	lds	r19, 0x00F3
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1136:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1138:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    113c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    113e:	41 50       	subi	r20, 0x01	; 1
    1140:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1146:	41 15       	cp	r20, r1
    1148:	51 05       	cpc	r21, r1
    114a:	19 f0       	breq	.+6      	; 0x1152 <Endpoint_Write_Control_PStream_LE+0x82>
    114c:	28 30       	cpi	r18, 0x08	; 8
    114e:	31 05       	cpc	r19, r1
    1150:	90 f3       	brcs	.-28     	; 0x1136 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	28 30       	cpi	r18, 0x08	; 8
    1156:	31 05       	cpc	r19, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <Endpoint_Write_Control_PStream_LE+0x8c>
    115a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    115c:	80 91 e8 00 	lds	r24, 0x00E8
    1160:	8e 77       	andi	r24, 0x7E	; 126
    1162:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1166:	41 15       	cp	r20, r1
    1168:	51 05       	cpc	r21, r1
    116a:	51 f6       	brne	.-108    	; 0x1100 <Endpoint_Write_Control_PStream_LE+0x30>
    116c:	99 23       	and	r25, r25
    116e:	41 f6       	brne	.-112    	; 0x1100 <Endpoint_Write_Control_PStream_LE+0x30>
    1170:	06 c0       	rjmp	.+12     	; 0x117e <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1172:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1176:	88 23       	and	r24, r24
    1178:	41 f0       	breq	.+16     	; 0x118a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    117a:	85 30       	cpi	r24, 0x05	; 5
    117c:	41 f0       	breq	.+16     	; 0x118e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    117e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1182:	82 ff       	sbrs	r24, 2
    1184:	f6 cf       	rjmp	.-20     	; 0x1172 <Endpoint_Write_Control_PStream_LE+0xa2>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	08 95       	ret
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	08 95       	ret
    118e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1190:	08 95       	ret

00001192 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	18 2f       	mov	r17, r24
    11a6:	09 2f       	mov	r16, r25
    11a8:	7b 01       	movw	r14, r22
    11aa:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    11ac:	12 dc       	rcall	.-2012   	; 0x9d2 <Endpoint_WaitUntilReady>
    11ae:	b8 2e       	mov	r11, r24
    11b0:	88 23       	and	r24, r24
    11b2:	b1 f5       	brne	.+108    	; 0x1220 <Endpoint_Read_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11b4:	81 2f       	mov	r24, r17
    11b6:	90 2f       	mov	r25, r16
    11b8:	9c 01       	movw	r18, r24
    11ba:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    11bc:	c1 14       	cp	r12, r1
    11be:	d1 04       	cpc	r13, r1
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    11c2:	f6 01       	movw	r30, r12
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	e8 1a       	sub	r14, r24
    11ca:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    11cc:	c8 0f       	add	r28, r24
    11ce:	d9 1f       	adc	r29, r25
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	22 c0       	rjmp	.+68     	; 0x121a <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    11da:	85 fd       	sbrc	r24, 5
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	8b 77       	andi	r24, 0x7B	; 123
    11e4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    11e8:	c1 14       	cp	r12, r1
    11ea:	d1 04       	cpc	r13, r1
    11ec:	49 f0       	breq	.+18     	; 0x1200 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    11ee:	f6 01       	movw	r30, r12
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	80 0f       	add	r24, r16
    11f6:	91 1f       	adc	r25, r17
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    11fc:	85 e0       	ldi	r24, 0x05	; 5
    11fe:	11 c0       	rjmp	.+34     	; 0x1222 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1200:	6c d0       	rcall	.+216    	; 0x12da <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1202:	e7 db       	rcall	.-2098   	; 0x9d2 <Endpoint_WaitUntilReady>
    1204:	88 23       	and	r24, r24
    1206:	49 f0       	breq	.+18     	; 0x121a <Endpoint_Read_Stream_LE+0x88>
    1208:	0c c0       	rjmp	.+24     	; 0x1222 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    120a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    120e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1210:	08 94       	sec
    1212:	e1 08       	sbc	r14, r1
    1214:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1216:	0f 5f       	subi	r16, 0xFF	; 255
    1218:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    121a:	e1 14       	cp	r14, r1
    121c:	f1 04       	cpc	r15, r1
    121e:	d9 f6       	brne	.-74     	; 0x11d6 <Endpoint_Read_Stream_LE+0x44>
    1220:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	08 95       	ret

00001236 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	18 2f       	mov	r17, r24
    124a:	09 2f       	mov	r16, r25
    124c:	7b 01       	movw	r14, r22
    124e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1250:	c0 db       	rcall	.-2176   	; 0x9d2 <Endpoint_WaitUntilReady>
    1252:	b8 2e       	mov	r11, r24
    1254:	88 23       	and	r24, r24
    1256:	b1 f5       	brne	.+108    	; 0x12c4 <Endpoint_Write_Stream_LE+0x8e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1258:	81 2f       	mov	r24, r17
    125a:	90 2f       	mov	r25, r16
    125c:	9c 01       	movw	r18, r24
    125e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1260:	c1 14       	cp	r12, r1
    1262:	d1 04       	cpc	r13, r1
    1264:	39 f0       	breq	.+14     	; 0x1274 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1266:	f6 01       	movw	r30, r12
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	e8 1a       	sub	r14, r24
    126e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1270:	c8 0f       	add	r28, r24
    1272:	d9 1f       	adc	r29, r25
    1274:	00 e0       	ldi	r16, 0x00	; 0
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	22 c0       	rjmp	.+68     	; 0x12be <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    127a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    127e:	85 fd       	sbrc	r24, 5
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1282:	80 91 e8 00 	lds	r24, 0x00E8
    1286:	8e 77       	andi	r24, 0x7E	; 126
    1288:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			if (BytesProcessed != NULL)
    128c:	c1 14       	cp	r12, r1
    128e:	d1 04       	cpc	r13, r1
    1290:	49 f0       	breq	.+18     	; 0x12a4 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1292:	f6 01       	movw	r30, r12
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	80 0f       	add	r24, r16
    129a:	91 1f       	adc	r25, r17
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	85 e0       	ldi	r24, 0x05	; 5
    12a2:	11 c0       	rjmp	.+34     	; 0x12c6 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    12a4:	1a d0       	rcall	.+52     	; 0x12da <USB_USBTask>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    12a6:	95 db       	rcall	.-2262   	; 0x9d2 <Endpoint_WaitUntilReady>
    12a8:	88 23       	and	r24, r24
    12aa:	49 f0       	breq	.+18     	; 0x12be <Endpoint_Write_Stream_LE+0x88>
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    12ae:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12b0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    12b4:	08 94       	sec
    12b6:	e1 08       	sbc	r14, r1
    12b8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    12ba:	0f 5f       	subi	r16, 0xFF	; 255
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    12be:	e1 14       	cp	r14, r1
    12c0:	f1 04       	cpc	r15, r1
    12c2:	d9 f6       	brne	.-74     	; 0x127a <Endpoint_Write_Stream_LE+0x44>
    12c4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	08 95       	ret

000012da <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12da:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    12dc:	80 91 3c 02 	lds	r24, 0x023C
    12e0:	88 23       	and	r24, r24
    12e2:	61 f0       	breq	.+24     	; 0x12fc <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    12e4:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12e8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ec:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    12f0:	83 ff       	sbrs	r24, 3
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    12f4:	c9 dc       	rcall	.-1646   	; 0xc88 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    12f6:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12f8:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12fc:	1f 91       	pop	r17
    12fe:	08 95       	ret

00001300 <__divmodsi4>:
    1300:	97 fb       	bst	r25, 7
    1302:	09 2e       	mov	r0, r25
    1304:	05 26       	eor	r0, r21
    1306:	0e d0       	rcall	.+28     	; 0x1324 <__divmodsi4_neg1>
    1308:	57 fd       	sbrc	r21, 7
    130a:	04 d0       	rcall	.+8      	; 0x1314 <__divmodsi4_neg2>
    130c:	14 d0       	rcall	.+40     	; 0x1336 <__udivmodsi4>
    130e:	0a d0       	rcall	.+20     	; 0x1324 <__divmodsi4_neg1>
    1310:	00 1c       	adc	r0, r0
    1312:	38 f4       	brcc	.+14     	; 0x1322 <__divmodsi4_exit>

00001314 <__divmodsi4_neg2>:
    1314:	50 95       	com	r21
    1316:	40 95       	com	r20
    1318:	30 95       	com	r19
    131a:	21 95       	neg	r18
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	4f 4f       	sbci	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255

00001322 <__divmodsi4_exit>:
    1322:	08 95       	ret

00001324 <__divmodsi4_neg1>:
    1324:	f6 f7       	brtc	.-4      	; 0x1322 <__divmodsi4_exit>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	08 95       	ret

00001336 <__udivmodsi4>:
    1336:	a1 e2       	ldi	r26, 0x21	; 33
    1338:	1a 2e       	mov	r1, r26
    133a:	aa 1b       	sub	r26, r26
    133c:	bb 1b       	sub	r27, r27
    133e:	fd 01       	movw	r30, r26
    1340:	0d c0       	rjmp	.+26     	; 0x135c <__udivmodsi4_ep>

00001342 <__udivmodsi4_loop>:
    1342:	aa 1f       	adc	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	ee 1f       	adc	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	a2 17       	cp	r26, r18
    134c:	b3 07       	cpc	r27, r19
    134e:	e4 07       	cpc	r30, r20
    1350:	f5 07       	cpc	r31, r21
    1352:	20 f0       	brcs	.+8      	; 0x135c <__udivmodsi4_ep>
    1354:	a2 1b       	sub	r26, r18
    1356:	b3 0b       	sbc	r27, r19
    1358:	e4 0b       	sbc	r30, r20
    135a:	f5 0b       	sbc	r31, r21

0000135c <__udivmodsi4_ep>:
    135c:	66 1f       	adc	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	1a 94       	dec	r1
    1366:	69 f7       	brne	.-38     	; 0x1342 <__udivmodsi4_loop>
    1368:	60 95       	com	r22
    136a:	70 95       	com	r23
    136c:	80 95       	com	r24
    136e:	90 95       	com	r25
    1370:	9b 01       	movw	r18, r22
    1372:	ac 01       	movw	r20, r24
    1374:	bd 01       	movw	r22, r26
    1376:	cf 01       	movw	r24, r30
    1378:	08 95       	ret

0000137a <_exit>:
    137a:	f8 94       	cli

0000137c <__stop_program>:
    137c:	ff cf       	rjmp	.-2      	; 0x137c <__stop_program>
