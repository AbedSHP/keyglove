
Keyglove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000108a  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011c  0080011c  0000113a  2**0
                  ALLOC
  3 .debug_aranges 000002e0  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000867  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004fb7  00000000  00000000  00001c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000129c  00000000  00000000  00006c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003ef9  00000000  00000000  00007ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  0000bdd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000234c  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000250e  00000000  00000000  0000e55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  00010a6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1c c1       	rjmp	.+568    	; 0x23a <__ctors_end>
       2:	00 00       	nop
       4:	37 c1       	rjmp	.+622    	; 0x274 <__bad_interrupt>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__bad_interrupt>
       a:	00 00       	nop
       c:	33 c1       	rjmp	.+614    	; 0x274 <__bad_interrupt>
       e:	00 00       	nop
      10:	31 c1       	rjmp	.+610    	; 0x274 <__bad_interrupt>
      12:	00 00       	nop
      14:	2f c1       	rjmp	.+606    	; 0x274 <__bad_interrupt>
      16:	00 00       	nop
      18:	2d c1       	rjmp	.+602    	; 0x274 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2b c1       	rjmp	.+598    	; 0x274 <__bad_interrupt>
      1e:	00 00       	nop
      20:	29 c1       	rjmp	.+594    	; 0x274 <__bad_interrupt>
      22:	00 00       	nop
      24:	27 c1       	rjmp	.+590    	; 0x274 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c4       	rjmp	.+2278   	; 0x910 <__vector_10>
      2a:	00 00       	nop
      2c:	23 c1       	rjmp	.+582    	; 0x274 <__bad_interrupt>
      2e:	00 00       	nop
      30:	21 c1       	rjmp	.+578    	; 0x274 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c1       	rjmp	.+574    	; 0x274 <__bad_interrupt>
      36:	00 00       	nop
      38:	1d c1       	rjmp	.+570    	; 0x274 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1b c1       	rjmp	.+566    	; 0x274 <__bad_interrupt>
      3e:	00 00       	nop
      40:	19 c1       	rjmp	.+562    	; 0x274 <__bad_interrupt>
      42:	00 00       	nop
      44:	17 c1       	rjmp	.+558    	; 0x274 <__bad_interrupt>
      46:	00 00       	nop
      48:	15 c1       	rjmp	.+554    	; 0x274 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	13 c1       	rjmp	.+550    	; 0x274 <__bad_interrupt>
      4e:	00 00       	nop
      50:	11 c1       	rjmp	.+546    	; 0x274 <__bad_interrupt>
      52:	00 00       	nop
      54:	0f c1       	rjmp	.+542    	; 0x274 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c1       	rjmp	.+538    	; 0x274 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c1       	rjmp	.+534    	; 0x274 <__bad_interrupt>
      5e:	00 00       	nop
      60:	09 c1       	rjmp	.+530    	; 0x274 <__bad_interrupt>
      62:	00 00       	nop
      64:	07 c1       	rjmp	.+526    	; 0x274 <__bad_interrupt>
      66:	00 00       	nop
      68:	05 c1       	rjmp	.+522    	; 0x274 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	03 c1       	rjmp	.+518    	; 0x274 <__bad_interrupt>
      6e:	00 00       	nop
      70:	01 c1       	rjmp	.+514    	; 0x274 <__bad_interrupt>
      72:	00 00       	nop
      74:	ff c0       	rjmp	.+510    	; 0x274 <__bad_interrupt>
      76:	00 00       	nop
      78:	fd c0       	rjmp	.+506    	; 0x274 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fb c0       	rjmp	.+502    	; 0x274 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f9 c0       	rjmp	.+498    	; 0x274 <__bad_interrupt>
      82:	00 00       	nop
      84:	f7 c0       	rjmp	.+494    	; 0x274 <__bad_interrupt>
      86:	00 00       	nop
      88:	f5 c0       	rjmp	.+490    	; 0x274 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 c0       	rjmp	.+486    	; 0x274 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c0       	rjmp	.+482    	; 0x274 <__bad_interrupt>
      92:	00 00       	nop
      94:	ef c0       	rjmp	.+478    	; 0x274 <__bad_interrupt>
      96:	00 00       	nop

00000098 <MouseReport>:
      98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      a8:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
      b8:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
      c8:	75 08 81 06 c0 c0                                   u.....

000000ce <KeyboardReport>:
      ce:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      de:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      ee:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      fe:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000010d <JoystickReport>:
     10d:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 15 9c     ...........0.1..
     11d:	25 64 35 ff 45 01 95 02 75 08 81 02 c0 05 09 19     %d5.E...u.......
     12d:	01 29 02 15 00 25 01 75 01 95 02 81 02 75 06 95     .)...%.u.....u..
     13d:	01 81 01 c0                                         ....

00000141 <DeviceDescriptor>:
     141:	12 01 10 01 00 00 00 08 eb 03 4e 20 01 00 01 02     ..........N ....
     151:	dc 01                                               ..

00000153 <ConfigurationDescriptor>:
     153:	09 02 98 00 05 01 00 c0 fa 08 0b 00 02 02 02 01     ................
     163:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     173:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
     183:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 01 07     ................
     193:	05 82 02 10 00 01 09 04 02 00 02 03 01 01 00 09     ................
     1a3:	21 11 01 00 01 22 3f 00 07 05 84 03 08 00 01 07     !...."?.........
     1b3:	05 05 03 08 00 01 09 04 03 00 01 03 01 02 00 09     ................
     1c3:	21 11 01 00 01 22 36 00 07 05 86 03 08 00 01 09     !...."6.........
     1d3:	04 04 00 01 03 00 00 00 09 21 11 01 00 01 22 34     .........!...."4
     1e3:	00 07 05 87 03 08 00 01                             ........

000001eb <LanguageString>:
     1eb:	04 03 09 04                                         ....

000001ef <ManufacturerString>:
     1ef:	18 03 4a 00 65 00 66 00 66 00 20 00 52 00 6f 00     ..J.e.f.f. .R.o.
     1ff:	77 00 62 00 65 00 72 00 67 00 00 00                 w.b.e.r.g...

0000020b <ProductString>:
     20b:	3a 03 4b 00 65 00 79 00 67 00 6c 00 6f 00 76 00     :.K.e.y.g.l.o.v.
     21b:	65 00 20 00 49 00 6e 00 70 00 75 00 74 00 20 00     e. .I.n.p.u.t. .
     22b:	44 00 65 00 76 00 69 00 63 00 65 00 00 00 00        D.e.v.i.c.e....

0000023a <__ctors_end>:
     23a:	11 24       	eor	r1, r1
     23c:	1f be       	out	0x3f, r1	; 63
     23e:	cf ef       	ldi	r28, 0xFF	; 255
     240:	d0 e2       	ldi	r29, 0x20	; 32
     242:	de bf       	out	0x3e, r29	; 62
     244:	cd bf       	out	0x3d, r28	; 61

00000246 <__do_copy_data>:
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b1 e0       	ldi	r27, 0x01	; 1
     24c:	ea e8       	ldi	r30, 0x8A	; 138
     24e:	f0 e1       	ldi	r31, 0x10	; 16
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	ac 31       	cpi	r26, 0x1C	; 28
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	11 e0       	ldi	r17, 0x01	; 1
     262:	ac e1       	ldi	r26, 0x1C	; 28
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	a8 33       	cpi	r26, 0x38	; 56
     26c:	b1 07       	cpc	r27, r17
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	fe d1       	rcall	.+1020   	; 0x66e <main>
     272:	09 c7       	rjmp	.+3602   	; 0x1086 <_exit>

00000274 <__bad_interrupt>:
     274:	c5 ce       	rjmp	.-630    	; 0x0 <__vectors>

00000276 <EVENT_USB_Device_Connect>:
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     276:	81 b3       	in	r24, 0x11	; 17
     278:	8f 71       	andi	r24, 0x1F	; 31
     27a:	80 6c       	ori	r24, 0xC0	; 192
     27c:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     27e:	08 95       	ret

00000280 <EVENT_USB_Device_Disconnect>:
     280:	81 b3       	in	r24, 0x11	; 17
     282:	8f 71       	andi	r24, 0x1F	; 31
     284:	80 66       	ori	r24, 0x60	; 96
     286:	81 bb       	out	0x11, r24	; 17
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     288:	08 95       	ret

0000028a <Keyboard_ProcessLEDReport>:
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
     28a:	28 2f       	mov	r18, r24
	  LEDMask |= LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
     28c:	81 fd       	sbrc	r24, 1
     28e:	02 c0       	rjmp	.+4      	; 0x294 <Keyboard_ProcessLEDReport+0xa>
     290:	90 e4       	ldi	r25, 0x40	; 64
     292:	01 c0       	rjmp	.+2      	; 0x296 <Keyboard_ProcessLEDReport+0xc>
     294:	90 ec       	ldi	r25, 0xC0	; 192
	  LEDMask |= LEDS_LED3;

	if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
     296:	22 fd       	sbrc	r18, 2
	  LEDMask |= LEDS_LED4;
     298:	90 64       	ori	r25, 0x40	; 64
     29a:	81 b3       	in	r24, 0x11	; 17
     29c:	8f 71       	andi	r24, 0x1F	; 31
     29e:	98 2b       	or	r25, r24
     2a0:	91 bb       	out	0x11, r25	; 17

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
}
     2a2:	08 95       	ret

000002a4 <CDC_Task>:
{
	char*       ReportString    = NULL;
	static bool ActionSent      = false;
	
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2a4:	80 91 2f 01 	lds	r24, 0x012F
     2a8:	84 30       	cpi	r24, 0x04	; 4
     2aa:	09 f0       	breq	.+2      	; 0x2ae <CDC_Task+0xa>
     2ac:	4f c0       	rjmp	.+158    	; 0x34c <CDC_Task+0xa8>
	  return;

	PORTD |= (1 << 6);
     2ae:	5e 9a       	sbi	0x0b, 6	; 11
     2b0:	88 ee       	ldi	r24, 0xE8	; 232
     2b2:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b4:	28 ec       	ldi	r18, 0xC8	; 200
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	f9 01       	movw	r30, r18
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <CDC_Task+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <CDC_Task+0x14>

        ReportString = "Test serial output\r\n";
        //ActionSent = false;

	/* Flag management - Only allow one string to be sent per action */
	if ((ReportString != NULL) && (ActionSent == false) && LineEncodingData.BaudRateBPS)
     2c2:	80 91 1c 01 	lds	r24, 0x011C
     2c6:	88 23       	and	r24, r24
     2c8:	59 f5       	brne	.+86     	; 0x320 <CDC_Task+0x7c>
     2ca:	80 91 15 01 	lds	r24, 0x0115
     2ce:	90 91 16 01 	lds	r25, 0x0116
     2d2:	a0 91 17 01 	lds	r26, 0x0117
     2d6:	b0 91 18 01 	lds	r27, 0x0118
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	a1 05       	cpc	r26, r1
     2de:	b1 05       	cpc	r27, r1
     2e0:	f9 f0       	breq	.+62     	; 0x320 <CDC_Task+0x7c>
	{
		ActionSent = true;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 1c 01 	sts	0x011C, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	80 93 e9 00 	sts	0x00E9, r24

		/* Select the Serial Tx Endpoint */
		Endpoint_SelectEndpoint(CDC_TX_EPNUM);

		/* Write the String to the Endpoint */
		Endpoint_Write_Stream_LE(ReportString, strlen(ReportString), NULL);
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	64 e1       	ldi	r22, 0x14	; 20
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	59 d6       	rcall	.+3250   	; 0xfae <Endpoint_Write_Stream_LE>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     2fc:	20 91 f2 00 	lds	r18, 0x00F2
     300:	30 91 f3 00 	lds	r19, 0x00F3
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     304:	80 91 e8 00 	lds	r24, 0x00E8
     308:	8e 77       	andi	r24, 0x7E	; 126
     30a:	80 93 e8 00 	sts	0x00E8, r24
		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* If the last packet filled the endpoint, send an empty packet to release the buffer on
		 * the receiver (otherwise all data will be cached until a non-full packet is received) */
		if (IsFull)
     30e:	20 31       	cpi	r18, 0x10	; 16
     310:	31 05       	cpc	r19, r1
     312:	31 f4       	brne	.+12     	; 0x320 <CDC_Task+0x7c>
		{
			/* Wait until the endpoint is ready for another packet */
			Endpoint_WaitUntilReady();
     314:	6c d2       	rcall	.+1240   	; 0x7ee <Endpoint_WaitUntilReady>
     316:	80 91 e8 00 	lds	r24, 0x00E8
     31a:	8e 77       	andi	r24, 0x7E	; 126
     31c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     326:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Serial Rx Endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Throw away any received data from the host */
	if (Endpoint_IsOUTReceived())
     32a:	82 ff       	sbrs	r24, 2
     32c:	05 c0       	rjmp	.+10     	; 0x338 <CDC_Task+0x94>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     32e:	80 91 e8 00 	lds	r24, 0x00E8
     332:	8b 77       	andi	r24, 0x7B	; 123
     334:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();

	PORTD &= ~(1 << 6);
     338:	5e 98       	cbi	0x0b, 6	; 11
     33a:	84 ec       	ldi	r24, 0xC4	; 196
     33c:	99 e0       	ldi	r25, 0x09	; 9
     33e:	28 ec       	ldi	r18, 0xC8	; 200
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <CDC_Task+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     348:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34a:	d9 f7       	brne	.-10     	; 0x342 <CDC_Task+0x9e>
     34c:	08 95       	ret

0000034e <Joystick_HID_Task>:
	}
}

/** Joystick task to manage joystick HID report generation and transmission to the host. */
void Joystick_HID_Task(void)
{
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     352:	80 91 2f 01 	lds	r24, 0x012F
     356:	84 30       	cpi	r24, 0x04	; 4
     358:	c9 f4       	brne	.+50     	; 0x38c <Joystick_HID_Task+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     35a:	87 e0       	ldi	r24, 0x07	; 7
     35c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     360:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPNUM);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady())
     364:	80 ff       	sbrs	r24, 0
     366:	12 c0       	rjmp	.+36     	; 0x38c <Joystick_HID_Task+0x3e>
	{
		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&JoystickReportData, sizeof(JoystickReportData), NULL);
     368:	08 e2       	ldi	r16, 0x28	; 40
     36a:	11 e0       	ldi	r17, 0x01	; 1
     36c:	c8 01       	movw	r24, r16
     36e:	63 e0       	ldi	r22, 0x03	; 3
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	1b d6       	rcall	.+3126   	; 0xfae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     378:	80 91 e8 00 	lds	r24, 0x00E8
     37c:	8e 77       	andi	r24, 0x7E	; 126
     37e:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&JoystickReportData, 0, sizeof(JoystickReportData));
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	f8 01       	movw	r30, r16
     386:	11 92       	st	Z+, r1
     388:	8a 95       	dec	r24
     38a:	e9 f7       	brne	.-6      	; 0x386 <Joystick_HID_Task+0x38>
	}
}
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <Mouse_HID_Task>:

/** Mouse task. This generates the next mouse HID report for the host, and transmits it via the
 *  mouse IN endpoint when the host is ready for more data.
 */
void Mouse_HID_Task(void)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
	//uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     396:	80 91 2f 01 	lds	r24, 0x012F
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	c9 f4       	brne	.+50     	; 0x3d0 <Mouse_HID_Task+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3a4:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

	/* Check if Mouse Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
     3a8:	85 ff       	sbrs	r24, 5
     3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <Mouse_HID_Task+0x3e>
	{
		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
     3ac:	05 e2       	ldi	r16, 0x25	; 37
     3ae:	11 e0       	ldi	r17, 0x01	; 1
     3b0:	c8 01       	movw	r24, r16
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	f9 d5       	rcall	.+3058   	; 0xfae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3bc:	80 91 e8 00 	lds	r24, 0x00E8
     3c0:	8e 77       	andi	r24, 0x7E	; 126
     3c2:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&MouseReportData, 0, sizeof(MouseReportData));
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	f8 01       	movw	r30, r16
     3ca:	11 92       	st	Z+, r1
     3cc:	8a 95       	dec	r24
     3ce:	e9 f7       	brne	.-6      	; 0x3ca <Mouse_HID_Task+0x38>
	}
}
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <Keyboard_HID_Task>:
/** Keyboard task. This generates the next keyboard HID report for the host, and transmits it via the
 *  keyboard IN endpoint when the host is ready for more data. Additionally, it processes host LED status
 *  reports sent to the device via the keyboard OUT reporting endpoint.
 */
void Keyboard_HID_Task(void)
{
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
	//uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     3da:	80 91 2f 01 	lds	r24, 0x012F
     3de:	84 30       	cpi	r24, 0x04	; 4
     3e0:	39 f5       	brne	.+78     	; 0x430 <Keyboard_HID_Task+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3e2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     3e6:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
     3ea:	85 ff       	sbrs	r24, 5
     3ec:	12 c0       	rjmp	.+36     	; 0x412 <Keyboard_HID_Task+0x3c>
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
     3ee:	0d e1       	ldi	r16, 0x1D	; 29
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	c8 01       	movw	r24, r16
     3f4:	68 e0       	ldi	r22, 0x08	; 8
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	d8 d5       	rcall	.+2992   	; 0xfae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3fe:	80 91 e8 00 	lds	r24, 0x00E8
     402:	8e 77       	andi	r24, 0x7E	; 126
     404:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&KeyboardReportData, 0, sizeof(KeyboardReportData));
     408:	88 e0       	ldi	r24, 0x08	; 8
     40a:	f8 01       	movw	r30, r16
     40c:	11 92       	st	Z+, r1
     40e:	8a 95       	dec	r24
     410:	e9 f7       	brne	.-6      	; 0x40c <Keyboard_HID_Task+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     418:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
     41c:	85 ff       	sbrs	r24, 5
     41e:	08 c0       	rjmp	.+16     	; 0x430 <Keyboard_HID_Task+0x5a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     420:	80 91 f1 00 	lds	r24, 0x00F1
	{
		/* Read in and process the LED report from the host */
		Keyboard_ProcessLEDReport(Endpoint_Read_8());
     424:	32 df       	rcall	.-412    	; 0x28a <Keyboard_ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     426:	80 91 e8 00 	lds	r24, 0x00E8
     42a:	8b 77       	andi	r24, 0x7B	; 123
     42c:	80 93 e8 00 	sts	0x00E8, r24

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();
	}
}
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
	uint8_t* ReportData;
	uint8_t  ReportSize;

	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
     43c:	80 91 31 01 	lds	r24, 0x0131
     440:	80 32       	cpi	r24, 0x20	; 32
     442:	09 f4       	brne	.+2      	; 0x446 <EVENT_USB_Device_ControlRequest+0x10>
     444:	71 c0       	rjmp	.+226    	; 0x528 <EVENT_USB_Device_ControlRequest+0xf2>
     446:	81 32       	cpi	r24, 0x21	; 33
     448:	30 f4       	brcc	.+12     	; 0x456 <EVENT_USB_Device_ControlRequest+0x20>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	59 f0       	breq	.+22     	; 0x464 <EVENT_USB_Device_ControlRequest+0x2e>
     44e:	89 30       	cpi	r24, 0x09	; 9
     450:	09 f0       	breq	.+2      	; 0x454 <EVENT_USB_Device_ControlRequest+0x1e>
     452:	88 c0       	rjmp	.+272    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
     454:	38 c0       	rjmp	.+112    	; 0x4c6 <EVENT_USB_Device_ControlRequest+0x90>
     456:	81 32       	cpi	r24, 0x21	; 33
     458:	09 f4       	brne	.+2      	; 0x45c <EVENT_USB_Device_ControlRequest+0x26>
     45a:	54 c0       	rjmp	.+168    	; 0x504 <EVENT_USB_Device_ControlRequest+0xce>
     45c:	82 32       	cpi	r24, 0x22	; 34
     45e:	09 f0       	breq	.+2      	; 0x462 <EVENT_USB_Device_ControlRequest+0x2c>
     460:	81 c0       	rjmp	.+258    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
     462:	76 c0       	rjmp	.+236    	; 0x550 <EVENT_USB_Device_ControlRequest+0x11a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     464:	80 91 30 01 	lds	r24, 0x0130
     468:	81 3a       	cpi	r24, 0xA1	; 161
     46a:	09 f0       	breq	.+2      	; 0x46e <EVENT_USB_Device_ControlRequest+0x38>
     46c:	7b c0       	rjmp	.+246    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     46e:	80 91 e8 00 	lds	r24, 0x00E8
     472:	87 7f       	andi	r24, 0xF7	; 247
     474:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (USB_ControlRequest.wIndex == 2)
     478:	80 91 34 01 	lds	r24, 0x0134
     47c:	90 91 35 01 	lds	r25, 0x0135
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	91 05       	cpc	r25, r1
     484:	21 f4       	brne	.+8      	; 0x48e <EVENT_USB_Device_ControlRequest+0x58>
     486:	cd e1       	ldi	r28, 0x1D	; 29
     488:	d1 e0       	ldi	r29, 0x01	; 1
     48a:	18 e0       	ldi	r17, 0x08	; 8
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <EVENT_USB_Device_ControlRequest+0x70>
				{
					ReportData = (uint8_t*)&KeyboardReportData;
					ReportSize = sizeof(KeyboardReportData);
				}
				else if (USB_ControlRequest.wIndex == 3)
     48e:	83 30       	cpi	r24, 0x03	; 3
     490:	91 05       	cpc	r25, r1
     492:	19 f4       	brne	.+6      	; 0x49a <EVENT_USB_Device_ControlRequest+0x64>
     494:	c5 e2       	ldi	r28, 0x25	; 37
     496:	d1 e0       	ldi	r29, 0x01	; 1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <EVENT_USB_Device_ControlRequest+0x6e>
				{
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
				}
				else if (USB_ControlRequest.wIndex == 4)
     49a:	04 97       	sbiw	r24, 0x04	; 4
     49c:	09 f0       	breq	.+2      	; 0x4a0 <EVENT_USB_Device_ControlRequest+0x6a>
     49e:	62 c0       	rjmp	.+196    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
				{
					ReportData = (uint8_t*)&JoystickReportData;
     4a0:	c8 e2       	ldi	r28, 0x28	; 40
     4a2:	d1 e0       	ldi	r29, 0x01	; 1
     4a4:	13 e0       	ldi	r17, 0x03	; 3
                                {
                                        break; // wtf, hmm
                                }

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     4a6:	ce 01       	movw	r24, r28
     4a8:	61 2f       	mov	r22, r17
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 d4       	rcall	.+2304   	; 0xdae <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4ae:	80 91 e8 00 	lds	r24, 0x00E8
     4b2:	8b 77       	andi	r24, 0x7B	; 123
     4b4:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
     4b8:	ce 01       	movw	r24, r28
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	41 2f       	mov	r20, r17
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	da d5       	rcall	.+2996   	; 0x1078 <memset>
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     4c6:	80 91 30 01 	lds	r24, 0x0130
     4ca:	81 32       	cpi	r24, 0x21	; 33
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <EVENT_USB_Device_ControlRequest+0x9a>
     4ce:	4a c0       	rjmp	.+148    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4d0:	80 91 e8 00 	lds	r24, 0x00E8
     4d4:	87 7f       	andi	r24, 0xF7	; 247
     4d6:	80 93 e8 00 	sts	0x00E8, r24
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <EVENT_USB_Device_ControlRequest+0xb0>
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     4dc:	80 91 2f 01 	lds	r24, 0x012F
     4e0:	88 23       	and	r24, r24
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <EVENT_USB_Device_ControlRequest+0xb0>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4e6:	80 91 e8 00 	lds	r24, 0x00E8
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
     4ea:	82 ff       	sbrs	r24, 2
     4ec:	f7 cf       	rjmp	.-18     	; 0x4dc <EVENT_USB_Device_ControlRequest+0xa6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4ee:	10 91 f1 00 	lds	r17, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4f2:	80 91 e8 00 	lds	r24, 0x00E8
     4f6:	8b 77       	andi	r24, 0x7B	; 123
     4f8:	80 93 e8 00 	sts	0x00E8, r24

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     4fc:	57 d1       	rcall	.+686    	; 0x7ac <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
     4fe:	81 2f       	mov	r24, r17
     500:	c4 de       	rcall	.-632    	; 0x28a <Keyboard_ProcessLEDReport>
     502:	30 c0       	rjmp	.+96     	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			}

			break;
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     504:	80 91 30 01 	lds	r24, 0x0130
     508:	81 3a       	cpi	r24, 0xA1	; 161
     50a:	61 f5       	brne	.+88     	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     50c:	80 91 e8 00 	lds	r24, 0x00E8
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     516:	85 e1       	ldi	r24, 0x15	; 21
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	67 e0       	ldi	r22, 0x07	; 7
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	47 d4       	rcall	.+2190   	; 0xdae <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     520:	80 91 e8 00 	lds	r24, 0x00E8
     524:	8b 77       	andi	r24, 0x7B	; 123
     526:	11 c0       	rjmp	.+34     	; 0x54a <EVENT_USB_Device_ControlRequest+0x114>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     528:	80 91 30 01 	lds	r24, 0x0130
     52c:	81 32       	cpi	r24, 0x21	; 33
     52e:	d1 f4       	brne	.+52     	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     530:	80 91 e8 00 	lds	r24, 0x00E8
     534:	87 7f       	andi	r24, 0xF7	; 247
     536:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncodingData, sizeof(CDC_LineEncoding_t));
     53a:	85 e1       	ldi	r24, 0x15	; 21
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	67 e0       	ldi	r22, 0x07	; 7
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	93 d4       	rcall	.+2342   	; 0xe6a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     544:	80 91 e8 00 	lds	r24, 0x00E8
     548:	8e 77       	andi	r24, 0x7E	; 126
     54a:	80 93 e8 00 	sts	0x00E8, r24
     54e:	0a c0       	rjmp	.+20     	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
				Endpoint_ClearIN();
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     550:	80 91 30 01 	lds	r24, 0x0130
     554:	81 32       	cpi	r24, 0x21	; 33
     556:	31 f4       	brne	.+12     	; 0x564 <EVENT_USB_Device_ControlRequest+0x12e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     558:	80 91 e8 00 	lds	r24, 0x00E8
     55c:	87 7f       	andi	r24, 0xF7	; 247
     55e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     562:	24 d1       	rcall	.+584    	; 0x7ac <Endpoint_ClearStatusStage>
				*/
			}

			break;
	}
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	08 95       	ret

0000056c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	61 ec       	ldi	r22, 0xC1	; 193
     578:	42 e0       	ldi	r20, 0x02	; 2
     57a:	e3 d0       	rcall	.+454    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
     57c:	08 2f       	mov	r16, r24
	//* Setup CDC Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            CDC_NOTIFICATION_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_TX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_IN,
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK, ENDPOINT_DIR_OUT,
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	61 e8       	ldi	r22, 0x81	; 129
     582:	42 e1       	ldi	r20, 0x12	; 18
     584:	de d0       	rcall	.+444    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
     586:	e8 2e       	mov	r14, r24
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	60 e8       	ldi	r22, 0x80	; 128
     58c:	42 e1       	ldi	r20, 0x12	; 18
     58e:	d9 d0       	rcall	.+434    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	ff 24       	eor	r15, r15
     594:	0e 21       	and	r16, r14
     596:	1f 21       	and	r17, r15
     598:	01 70       	andi	r16, 0x01	; 1
     59a:	10 70       	andi	r17, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	08 23       	and	r16, r24
     5a0:	19 23       	and	r17, r25
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	61 ec       	ldi	r22, 0xC1	; 193
     5a6:	42 e0       	ldi	r20, 0x02	; 2
     5a8:	cc d0       	rcall	.+408    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
	                                            CDC_TXRX_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Setup Keyboard HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	01 2b       	or	r16, r17
     5b0:	11 f0       	breq	.+4      	; 0x5b6 <EVENT_USB_Device_ConfigurationChanged+0x4a>
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	08 2f       	mov	r16, r24
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	02 23       	and	r16, r18
     5bc:	13 23       	and	r17, r19
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	60 ec       	ldi	r22, 0xC0	; 192
     5c2:	42 e0       	ldi	r20, 0x02	; 2
     5c4:	be d0       	rcall	.+380    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	01 2b       	or	r16, r17
     5cc:	11 f0       	breq	.+4      	; 0x5d2 <EVENT_USB_Device_ConfigurationChanged+0x66>
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	08 2f       	mov	r16, r24
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	02 23       	and	r16, r18
     5d8:	13 23       	and	r17, r19
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	61 ec       	ldi	r22, 0xC1	; 193
     5de:	42 e0       	ldi	r20, 0x02	; 2
     5e0:	b0 d0       	rcall	.+352    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	01 2b       	or	r16, r17
     5e8:	11 f0       	breq	.+4      	; 0x5ee <EVENT_USB_Device_ConfigurationChanged+0x82>
     5ea:	21 e0       	ldi	r18, 0x01	; 1
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	08 2f       	mov	r16, r24
     5f0:	10 e0       	ldi	r17, 0x00	; 0
     5f2:	02 23       	and	r16, r18
     5f4:	13 23       	and	r17, r19
     5f6:	87 e0       	ldi	r24, 0x07	; 7
     5f8:	61 ec       	ldi	r22, 0xC1	; 193
     5fa:	42 e0       	ldi	r20, 0x02	; 2
     5fc:	a2 d0       	rcall	.+324    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Joystick HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(JOYSTICK_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Reset line encoding baud rate so that the host knows to send new values */
	LineEncodingData.BaudRateBPS = 0;
     5fe:	10 92 15 01 	sts	0x0115, r1
     602:	10 92 16 01 	sts	0x0116, r1
     606:	10 92 17 01 	sts	0x0117, r1
     60a:	10 92 18 01 	sts	0x0118, r1

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	01 2b       	or	r16, r17
     614:	11 f0       	breq	.+4      	; 0x61a <EVENT_USB_Device_ConfigurationChanged+0xae>
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	28 23       	and	r18, r24
     61e:	39 23       	and	r19, r25
     620:	23 2b       	or	r18, r19
     622:	11 f4       	brne	.+4      	; 0x628 <EVENT_USB_Device_ConfigurationChanged+0xbc>
     624:	90 e2       	ldi	r25, 0x20	; 32
     626:	01 c0       	rjmp	.+2      	; 0x62a <EVENT_USB_Device_ConfigurationChanged+0xbe>
     628:	90 e4       	ldi	r25, 0x40	; 64
     62a:	81 b3       	in	r24, 0x11	; 17
     62c:	8f 71       	andi	r24, 0x1F	; 31
     62e:	98 2b       	or	r25, r24
     630:	91 bb       	out	0x11, r25	; 17
}
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	08 95       	ret

0000063c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     63c:	84 b7       	in	r24, 0x34	; 52
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     642:	88 e1       	ldi	r24, 0x18	; 24
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	80 93 60 00 	sts	0x0060, r24
     64c:	10 92 60 00 	sts	0x0060, r1
     650:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	//clock_prescale_set(clock_div_1);
        CPU_PRESCALE(CPU_8MHz); // 3.3v AVR shouldn't run faster than 8MHz
     652:	e1 e6       	ldi	r30, 0x61	; 97
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 e8       	ldi	r24, 0x80	; 128
     658:	80 83       	st	Z, r24
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 83       	st	Z, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS_D;
     65e:	56 9a       	sbi	0x0a, 6	; 10
				DDRF  |=  LEDS_ALL_LEDS_F;
     660:	80 b3       	in	r24, 0x10	; 16
     662:	80 6e       	ori	r24, 0xE0	; 224
     664:	80 bb       	out	0x10, r24	; 16
				PORTF &= ~LEDS_ALL_LEDS_F;
     666:	81 b3       	in	r24, 0x11	; 17
     668:	8f 71       	andi	r24, 0x1F	; 31
     66a:	81 bb       	out	0x11, r24	; 17

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     66c:	3b c1       	rjmp	.+630    	; 0x8e4 <USB_Init>

0000066e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     66e:	e6 df       	rcall	.-52     	; 0x63c <SetupHardware>
				PORTF &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTF = ((PORTF & ~LEDS_ALL_LEDS_F) | LEDMask);
     670:	81 b3       	in	r24, 0x11	; 17
     672:	8f 71       	andi	r24, 0x1F	; 31
     674:	80 66       	ori	r24, 0x60	; 96
     676:	81 bb       	out	0x11, r24	; 17

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     678:	78 94       	sei

	for (;;)
	{
		Keyboard_HID_Task();
     67a:	ad de       	rcall	.-678    	; 0x3d6 <Keyboard_HID_Task>
		Mouse_HID_Task();
     67c:	8a de       	rcall	.-748    	; 0x392 <Mouse_HID_Task>
		Joystick_HID_Task();
     67e:	67 de       	rcall	.-818    	; 0x34e <Joystick_HID_Task>
		CDC_Task();
     680:	11 de       	rcall	.-990    	; 0x2a4 <CDC_Task>
		USB_USBTask();
     682:	e7 d4       	rcall	.+2510   	; 0x1052 <USB_USBTask>
     684:	fa cf       	rjmp	.-12     	; 0x67a <main+0xc>

00000686 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     686:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     688:	93 30       	cpi	r25, 0x03	; 3
     68a:	c1 f0       	breq	.+48     	; 0x6bc <CALLBACK_USB_GetDescriptor+0x36>
     68c:	94 30       	cpi	r25, 0x04	; 4
     68e:	30 f4       	brcc	.+12     	; 0x69c <CALLBACK_USB_GetDescriptor+0x16>
     690:	91 30       	cpi	r25, 0x01	; 1
     692:	51 f0       	breq	.+20     	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x22>
     694:	92 30       	cpi	r25, 0x02	; 2
     696:	09 f0       	breq	.+2      	; 0x69a <CALLBACK_USB_GetDescriptor+0x14>
     698:	4c c0       	rjmp	.+152    	; 0x732 <CALLBACK_USB_GetDescriptor+0xac>
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x2c>
     69c:	91 32       	cpi	r25, 0x21	; 33
     69e:	19 f1       	breq	.+70     	; 0x6e6 <CALLBACK_USB_GetDescriptor+0x60>
     6a0:	92 32       	cpi	r25, 0x22	; 34
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <CALLBACK_USB_GetDescriptor+0x20>
     6a4:	46 c0       	rjmp	.+140    	; 0x732 <CALLBACK_USB_GetDescriptor+0xac>
     6a6:	30 c0       	rjmp	.+96     	; 0x708 <CALLBACK_USB_GetDescriptor+0x82>
     6a8:	e1 e4       	ldi	r30, 0x41	; 65
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	22 e1       	ldi	r18, 0x12	; 18
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	44 c0       	rjmp	.+136    	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
     6b2:	e3 e5       	ldi	r30, 0x53	; 83
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	28 e9       	ldi	r18, 0x98	; 152
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	3f c0       	rjmp	.+126    	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	49 f0       	breq	.+18     	; 0x6d2 <CALLBACK_USB_GetDescriptor+0x4c>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	18 f0       	brcs	.+6      	; 0x6ca <CALLBACK_USB_GetDescriptor+0x44>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	a9 f5       	brne	.+106    	; 0x732 <CALLBACK_USB_GetDescriptor+0xac>
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6ca:	eb ee       	ldi	r30, 0xEB	; 235
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	84 91       	lpm	r24, Z+
     6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6d2:	ef ee       	ldi	r30, 0xEF	; 239
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	84 91       	lpm	r24, Z+
     6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6da:	eb e0       	ldi	r30, 0x0B	; 11
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	84 91       	lpm	r24, Z+
     6e0:	28 2f       	mov	r18, r24
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	2a c0       	rjmp	.+84     	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (wIndex == 2)
     6e6:	62 30       	cpi	r22, 0x02	; 2
     6e8:	19 f4       	brne	.+6      	; 0x6f0 <CALLBACK_USB_GetDescriptor+0x6a>
     6ea:	e2 ea       	ldi	r30, 0xA2	; 162
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <CALLBACK_USB_GetDescriptor+0x7c>
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else if (wIndex == 3)
     6f0:	63 30       	cpi	r22, 0x03	; 3
     6f2:	19 f4       	brne	.+6      	; 0x6fa <CALLBACK_USB_GetDescriptor+0x74>
     6f4:	e2 ec       	ldi	r30, 0xC2	; 194
     6f6:	f1 e0       	ldi	r31, 0x01	; 1
     6f8:	04 c0       	rjmp	.+8      	; 0x702 <CALLBACK_USB_GetDescriptor+0x7c>
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else if (wIndex == 4)
     6fa:	64 30       	cpi	r22, 0x04	; 4
     6fc:	d1 f4       	brne	.+52     	; 0x732 <CALLBACK_USB_GetDescriptor+0xac>
     6fe:	eb ed       	ldi	r30, 0xDB	; 219
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	29 e0       	ldi	r18, 0x09	; 9
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	19 c0       	rjmp	.+50     	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}

			break;
		case HID_DTYPE_Report:
			if (wIndex == 2)
     708:	62 30       	cpi	r22, 0x02	; 2
     70a:	29 f4       	brne	.+10     	; 0x716 <CALLBACK_USB_GetDescriptor+0x90>
     70c:	ee ec       	ldi	r30, 0xCE	; 206
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	2f e3       	ldi	r18, 0x3F	; 63
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	12 c0       	rjmp	.+36     	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else if (wIndex == 3)
     716:	63 30       	cpi	r22, 0x03	; 3
     718:	29 f4       	brne	.+10     	; 0x724 <CALLBACK_USB_GetDescriptor+0x9e>
     71a:	e8 e9       	ldi	r30, 0x98	; 152
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	26 e3       	ldi	r18, 0x36	; 54
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	0b c0       	rjmp	.+22     	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
			}
			else if (wIndex == 4)
     724:	64 30       	cpi	r22, 0x04	; 4
     726:	29 f4       	brne	.+10     	; 0x732 <CALLBACK_USB_GetDescriptor+0xac>
     728:	ed e0       	ldi	r30, 0x0D	; 13
     72a:	f1 e0       	ldi	r31, 0x01	; 1
     72c:	24 e3       	ldi	r18, 0x34	; 52
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	04 c0       	rjmp	.+8      	; 0x73a <CALLBACK_USB_GetDescriptor+0xb4>
     732:	e0 e0       	ldi	r30, 0x00	; 0
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     73a:	ed 93       	st	X+, r30
     73c:	fc 93       	st	X, r31
	return Size;
}
     73e:	c9 01       	movw	r24, r18
     740:	08 95       	ret

00000742 <Endpoint_ConfigureEndpoint_Prv>:
     742:	38 2f       	mov	r19, r24
     744:	28 2f       	mov	r18, r24
     746:	2c c0       	rjmp	.+88     	; 0x7a0 <Endpoint_ConfigureEndpoint_Prv+0x5e>
     748:	20 93 e9 00 	sts	0x00E9, r18
     74c:	23 17       	cp	r18, r19
     74e:	21 f4       	brne	.+8      	; 0x758 <Endpoint_ConfigureEndpoint_Prv+0x16>
     750:	76 2f       	mov	r23, r22
     752:	94 2f       	mov	r25, r20
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	06 c0       	rjmp	.+12     	; 0x764 <Endpoint_ConfigureEndpoint_Prv+0x22>
     758:	70 91 ec 00 	lds	r23, 0x00EC
     75c:	90 91 ed 00 	lds	r25, 0x00ED
     760:	50 91 f0 00 	lds	r21, 0x00F0
     764:	91 ff       	sbrs	r25, 1
     766:	1b c0       	rjmp	.+54     	; 0x79e <Endpoint_ConfigureEndpoint_Prv+0x5c>
     768:	80 91 eb 00 	lds	r24, 0x00EB
     76c:	8e 7f       	andi	r24, 0xFE	; 254
     76e:	80 93 eb 00 	sts	0x00EB, r24
     772:	80 91 ed 00 	lds	r24, 0x00ED
     776:	82 70       	andi	r24, 0x02	; 2
     778:	80 93 ed 00 	sts	0x00ED, r24
     77c:	80 91 eb 00 	lds	r24, 0x00EB
     780:	81 60       	ori	r24, 0x01	; 1
     782:	80 93 eb 00 	sts	0x00EB, r24
     786:	70 93 ec 00 	sts	0x00EC, r23
     78a:	90 93 ed 00 	sts	0x00ED, r25
     78e:	50 93 f0 00 	sts	0x00F0, r21
     792:	80 91 ee 00 	lds	r24, 0x00EE
     796:	87 fd       	sbrc	r24, 7
     798:	02 c0       	rjmp	.+4      	; 0x79e <Endpoint_ConfigureEndpoint_Prv+0x5c>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	27 30       	cpi	r18, 0x07	; 7
     7a2:	90 f2       	brcs	.-92     	; 0x748 <Endpoint_ConfigureEndpoint_Prv+0x6>
     7a4:	30 93 e9 00 	sts	0x00E9, r19
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	08 95       	ret

000007ac <Endpoint_ClearStatusStage>:
     7ac:	80 91 30 01 	lds	r24, 0x0130
     7b0:	88 23       	and	r24, r24
     7b2:	9c f4       	brge	.+38     	; 0x7da <Endpoint_ClearStatusStage+0x2e>
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <Endpoint_ClearStatusStage+0x12>
     7b6:	80 91 2f 01 	lds	r24, 0x012F
     7ba:	88 23       	and	r24, r24
     7bc:	b9 f0       	breq	.+46     	; 0x7ec <Endpoint_ClearStatusStage+0x40>
     7be:	80 91 e8 00 	lds	r24, 0x00E8
     7c2:	82 ff       	sbrs	r24, 2
     7c4:	f8 cf       	rjmp	.-16     	; 0x7b6 <Endpoint_ClearStatusStage+0xa>
     7c6:	80 91 e8 00 	lds	r24, 0x00E8
     7ca:	8b 77       	andi	r24, 0x7B	; 123
     7cc:	80 93 e8 00 	sts	0x00E8, r24
     7d0:	08 95       	ret
     7d2:	80 91 2f 01 	lds	r24, 0x012F
     7d6:	88 23       	and	r24, r24
     7d8:	49 f0       	breq	.+18     	; 0x7ec <Endpoint_ClearStatusStage+0x40>
     7da:	80 91 e8 00 	lds	r24, 0x00E8
     7de:	80 ff       	sbrs	r24, 0
     7e0:	f8 cf       	rjmp	.-16     	; 0x7d2 <Endpoint_ClearStatusStage+0x26>
     7e2:	80 91 e8 00 	lds	r24, 0x00E8
     7e6:	8e 77       	andi	r24, 0x7E	; 126
     7e8:	80 93 e8 00 	sts	0x00E8, r24
     7ec:	08 95       	ret

000007ee <Endpoint_WaitUntilReady>:
     7ee:	40 91 e4 00 	lds	r20, 0x00E4
     7f2:	50 91 e5 00 	lds	r21, 0x00E5
     7f6:	24 e6       	ldi	r18, 0x64	; 100
     7f8:	80 91 ec 00 	lds	r24, 0x00EC
     7fc:	80 ff       	sbrs	r24, 0
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <Endpoint_WaitUntilReady+0x1c>
     800:	80 91 e8 00 	lds	r24, 0x00E8
     804:	80 ff       	sbrs	r24, 0
     806:	05 c0       	rjmp	.+10     	; 0x812 <Endpoint_WaitUntilReady+0x24>
     808:	22 c0       	rjmp	.+68     	; 0x84e <Endpoint_WaitUntilReady+0x60>
     80a:	80 91 e8 00 	lds	r24, 0x00E8
     80e:	82 fd       	sbrc	r24, 2
     810:	1e c0       	rjmp	.+60     	; 0x84e <Endpoint_WaitUntilReady+0x60>
     812:	80 91 2f 01 	lds	r24, 0x012F
     816:	88 23       	and	r24, r24
     818:	11 f4       	brne	.+4      	; 0x81e <Endpoint_WaitUntilReady+0x30>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	08 95       	ret
     81e:	85 30       	cpi	r24, 0x05	; 5
     820:	11 f4       	brne	.+4      	; 0x826 <Endpoint_WaitUntilReady+0x38>
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	08 95       	ret
     826:	80 91 eb 00 	lds	r24, 0x00EB
     82a:	85 ff       	sbrs	r24, 5
     82c:	02 c0       	rjmp	.+4      	; 0x832 <Endpoint_WaitUntilReady+0x44>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret
     832:	80 91 e4 00 	lds	r24, 0x00E4
     836:	90 91 e5 00 	lds	r25, 0x00E5
     83a:	84 17       	cp	r24, r20
     83c:	95 07       	cpc	r25, r21
     83e:	e1 f2       	breq	.-72     	; 0x7f8 <Endpoint_WaitUntilReady+0xa>
     840:	22 23       	and	r18, r18
     842:	11 f4       	brne	.+4      	; 0x848 <Endpoint_WaitUntilReady+0x5a>
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	08 95       	ret
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	ac 01       	movw	r20, r24
     84c:	d5 cf       	rjmp	.-86     	; 0x7f8 <Endpoint_WaitUntilReady+0xa>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	08 95       	ret

00000852 <USB_ResetInterface>:
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	4d d0       	rcall	.+154    	; 0x8f6 <USB_INT_DisableAllInterrupts>
     85c:	54 d0       	rcall	.+168    	; 0x906 <USB_INT_ClearAllInterrupts>
     85e:	08 ed       	ldi	r16, 0xD8	; 216
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	f8 01       	movw	r30, r16
     864:	80 81       	ld	r24, Z
     866:	98 2f       	mov	r25, r24
     868:	9f 77       	andi	r25, 0x7F	; 127
     86a:	90 83       	st	Z, r25
     86c:	80 68       	ori	r24, 0x80	; 128
     86e:	80 83       	st	Z, r24
     870:	80 81       	ld	r24, Z
     872:	8f 7d       	andi	r24, 0xDF	; 223
     874:	80 83       	st	Z, r24
     876:	e7 ed       	ldi	r30, 0xD7	; 215
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	80 83       	st	Z, r24
     880:	19 bc       	out	0x29, r1	; 41
     882:	10 92 2f 01 	sts	0x012F, r1
     886:	10 92 2d 01 	sts	0x012D, r1
     88a:	10 92 2c 01 	sts	0x012C, r1
     88e:	10 92 2b 01 	sts	0x012B, r1
     892:	80 ee       	ldi	r24, 0xE0	; 224
     894:	e8 2e       	mov	r14, r24
     896:	f1 2c       	mov	r15, r1
     898:	f7 01       	movw	r30, r14
     89a:	80 81       	ld	r24, Z
     89c:	8b 7f       	andi	r24, 0xFB	; 251
     89e:	80 83       	st	Z, r24
     8a0:	f8 01       	movw	r30, r16
     8a2:	80 81       	ld	r24, Z
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 83       	st	Z, r24
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	49 df       	rcall	.-366    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
     8b0:	e1 ee       	ldi	r30, 0xE1	; 225
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	8e 7f       	andi	r24, 0xFE	; 254
     8b8:	80 83       	st	Z, r24
     8ba:	e2 ee       	ldi	r30, 0xE2	; 226
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	80 83       	st	Z, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	88 60       	ori	r24, 0x08	; 8
     8c8:	80 83       	st	Z, r24
     8ca:	f7 01       	movw	r30, r14
     8cc:	80 81       	ld	r24, Z
     8ce:	8e 7f       	andi	r24, 0xFE	; 254
     8d0:	80 83       	st	Z, r24
     8d2:	f8 01       	movw	r30, r16
     8d4:	80 81       	ld	r24, Z
     8d6:	80 61       	ori	r24, 0x10	; 16
     8d8:	80 83       	st	Z, r24
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	08 95       	ret

000008e4 <USB_Init>:
     8e4:	e7 ed       	ldi	r30, 0xD7	; 215
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	81 60       	ori	r24, 0x01	; 1
     8ec:	80 83       	st	Z, r24
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 2e 01 	sts	0x012E, r24
     8f4:	ae cf       	rjmp	.-164    	; 0x852 <USB_ResetInterface>

000008f6 <USB_INT_DisableAllInterrupts>:
     8f6:	e8 ed       	ldi	r30, 0xD8	; 216
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	8c 7f       	andi	r24, 0xFC	; 252
     8fe:	80 83       	st	Z, r24
     900:	10 92 e2 00 	sts	0x00E2, r1
     904:	08 95       	ret

00000906 <USB_INT_ClearAllInterrupts>:
     906:	10 92 da 00 	sts	0x00DA, r1
     90a:	10 92 e1 00 	sts	0x00E1, r1
     90e:	08 95       	ret

00000910 <__vector_10>:
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	0b b6       	in	r0, 0x3b	; 59
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	80 91 e1 00 	lds	r24, 0x00E1
     93a:	82 ff       	sbrs	r24, 2
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__vector_10+0x42>
     93e:	80 91 e2 00 	lds	r24, 0x00E2
     942:	82 ff       	sbrs	r24, 2
     944:	06 c0       	rjmp	.+12     	; 0x952 <__vector_10+0x42>
     946:	80 91 e1 00 	lds	r24, 0x00E1
     94a:	8b 7f       	andi	r24, 0xFB	; 251
     94c:	80 93 e1 00 	sts	0x00E1, r24
     950:	2d d2       	rcall	.+1114   	; 0xdac <USB_Event_Stub>
     952:	80 91 da 00 	lds	r24, 0x00DA
     956:	80 ff       	sbrs	r24, 0
     958:	1e c0       	rjmp	.+60     	; 0x996 <__vector_10+0x86>
     95a:	80 91 d8 00 	lds	r24, 0x00D8
     95e:	80 ff       	sbrs	r24, 0
     960:	1a c0       	rjmp	.+52     	; 0x996 <__vector_10+0x86>
     962:	80 91 da 00 	lds	r24, 0x00DA
     966:	8e 7f       	andi	r24, 0xFE	; 254
     968:	80 93 da 00 	sts	0x00DA, r24
     96c:	80 91 d9 00 	lds	r24, 0x00D9
     970:	80 ff       	sbrs	r24, 0
     972:	0d c0       	rjmp	.+26     	; 0x98e <__vector_10+0x7e>
     974:	84 e1       	ldi	r24, 0x14	; 20
     976:	89 bd       	out	0x29, r24	; 41
     978:	89 b5       	in	r24, 0x29	; 41
     97a:	82 60       	ori	r24, 0x02	; 2
     97c:	89 bd       	out	0x29, r24	; 41
     97e:	09 b4       	in	r0, 0x29	; 41
     980:	00 fe       	sbrs	r0, 0
     982:	fd cf       	rjmp	.-6      	; 0x97e <__vector_10+0x6e>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 2f 01 	sts	0x012F, r24
     98a:	75 dc       	rcall	.-1814   	; 0x276 <EVENT_USB_Device_Connect>
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__vector_10+0x86>
     98e:	19 bc       	out	0x29, r1	; 41
     990:	10 92 2f 01 	sts	0x012F, r1
     994:	75 dc       	rcall	.-1814   	; 0x280 <EVENT_USB_Device_Disconnect>
     996:	80 91 e1 00 	lds	r24, 0x00E1
     99a:	80 ff       	sbrs	r24, 0
     99c:	18 c0       	rjmp	.+48     	; 0x9ce <__vector_10+0xbe>
     99e:	80 91 e2 00 	lds	r24, 0x00E2
     9a2:	80 ff       	sbrs	r24, 0
     9a4:	14 c0       	rjmp	.+40     	; 0x9ce <__vector_10+0xbe>
     9a6:	80 91 e2 00 	lds	r24, 0x00E2
     9aa:	8e 7f       	andi	r24, 0xFE	; 254
     9ac:	80 93 e2 00 	sts	0x00E2, r24
     9b0:	80 91 e2 00 	lds	r24, 0x00E2
     9b4:	80 61       	ori	r24, 0x10	; 16
     9b6:	80 93 e2 00 	sts	0x00E2, r24
     9ba:	80 91 d8 00 	lds	r24, 0x00D8
     9be:	80 62       	ori	r24, 0x20	; 32
     9c0:	80 93 d8 00 	sts	0x00D8, r24
     9c4:	19 bc       	out	0x29, r1	; 41
     9c6:	85 e0       	ldi	r24, 0x05	; 5
     9c8:	80 93 2f 01 	sts	0x012F, r24
     9cc:	ef d1       	rcall	.+990    	; 0xdac <USB_Event_Stub>
     9ce:	80 91 e1 00 	lds	r24, 0x00E1
     9d2:	84 ff       	sbrs	r24, 4
     9d4:	2e c0       	rjmp	.+92     	; 0xa32 <__vector_10+0x122>
     9d6:	80 91 e2 00 	lds	r24, 0x00E2
     9da:	84 ff       	sbrs	r24, 4
     9dc:	2a c0       	rjmp	.+84     	; 0xa32 <__vector_10+0x122>
     9de:	84 e1       	ldi	r24, 0x14	; 20
     9e0:	89 bd       	out	0x29, r24	; 41
     9e2:	89 b5       	in	r24, 0x29	; 41
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	89 bd       	out	0x29, r24	; 41
     9e8:	09 b4       	in	r0, 0x29	; 41
     9ea:	00 fe       	sbrs	r0, 0
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <__vector_10+0xd8>
     9ee:	80 91 d8 00 	lds	r24, 0x00D8
     9f2:	8f 7d       	andi	r24, 0xDF	; 223
     9f4:	80 93 d8 00 	sts	0x00D8, r24
     9f8:	80 91 e1 00 	lds	r24, 0x00E1
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	80 93 e1 00 	sts	0x00E1, r24
     a02:	80 91 e2 00 	lds	r24, 0x00E2
     a06:	8f 7e       	andi	r24, 0xEF	; 239
     a08:	80 93 e2 00 	sts	0x00E2, r24
     a0c:	80 91 e2 00 	lds	r24, 0x00E2
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	80 93 e2 00 	sts	0x00E2, r24
     a16:	80 91 2d 01 	lds	r24, 0x012D
     a1a:	88 23       	and	r24, r24
     a1c:	31 f4       	brne	.+12     	; 0xa2a <__vector_10+0x11a>
     a1e:	80 91 e3 00 	lds	r24, 0x00E3
     a22:	87 fd       	sbrc	r24, 7
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <__vector_10+0x11a>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <__vector_10+0x11c>
     a2a:	84 e0       	ldi	r24, 0x04	; 4
     a2c:	80 93 2f 01 	sts	0x012F, r24
     a30:	bd d1       	rcall	.+890    	; 0xdac <USB_Event_Stub>
     a32:	80 91 e1 00 	lds	r24, 0x00E1
     a36:	83 ff       	sbrs	r24, 3
     a38:	22 c0       	rjmp	.+68     	; 0xa7e <__vector_10+0x16e>
     a3a:	80 91 e2 00 	lds	r24, 0x00E2
     a3e:	83 ff       	sbrs	r24, 3
     a40:	1e c0       	rjmp	.+60     	; 0xa7e <__vector_10+0x16e>
     a42:	80 91 e1 00 	lds	r24, 0x00E1
     a46:	87 7f       	andi	r24, 0xF7	; 247
     a48:	80 93 e1 00 	sts	0x00E1, r24
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	80 93 2f 01 	sts	0x012F, r24
     a52:	10 92 2d 01 	sts	0x012D, r1
     a56:	80 91 e1 00 	lds	r24, 0x00E1
     a5a:	8e 7f       	andi	r24, 0xFE	; 254
     a5c:	80 93 e1 00 	sts	0x00E1, r24
     a60:	80 91 e2 00 	lds	r24, 0x00E2
     a64:	8e 7f       	andi	r24, 0xFE	; 254
     a66:	80 93 e2 00 	sts	0x00E2, r24
     a6a:	80 91 e2 00 	lds	r24, 0x00E2
     a6e:	80 61       	ori	r24, 0x10	; 16
     a70:	80 93 e2 00 	sts	0x00E2, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	42 e0       	ldi	r20, 0x02	; 2
     a7a:	63 de       	rcall	.-826    	; 0x742 <Endpoint_ConfigureEndpoint_Prv>
     a7c:	97 d1       	rcall	.+814    	; 0xdac <USB_Event_Stub>
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0b be       	out	0x3b, r0	; 59
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <USB_Device_ProcessControlRequest>:
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	ac 97       	sbiw	r28, 0x2c	; 44
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	80 91 f1 00 	lds	r24, 0x00F1
     ac0:	80 93 30 01 	sts	0x0130, r24
     ac4:	80 91 f1 00 	lds	r24, 0x00F1
     ac8:	80 93 31 01 	sts	0x0131, r24
     acc:	80 91 f1 00 	lds	r24, 0x00F1
     ad0:	90 91 f1 00 	lds	r25, 0x00F1
     ad4:	e2 e3       	ldi	r30, 0x32	; 50
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	80 93 32 01 	sts	0x0132, r24
     adc:	90 93 33 01 	sts	0x0133, r25
     ae0:	80 91 f1 00 	lds	r24, 0x00F1
     ae4:	90 91 f1 00 	lds	r25, 0x00F1
     ae8:	80 93 34 01 	sts	0x0134, r24
     aec:	93 83       	std	Z+3, r25	; 0x03
     aee:	80 91 f1 00 	lds	r24, 0x00F1
     af2:	90 91 f1 00 	lds	r25, 0x00F1
     af6:	80 93 36 01 	sts	0x0136, r24
     afa:	95 83       	std	Z+5, r25	; 0x05
     afc:	9c dc       	rcall	.-1736   	; 0x436 <EVENT_USB_Device_ControlRequest>
     afe:	80 91 e8 00 	lds	r24, 0x00E8
     b02:	83 ff       	sbrs	r24, 3
     b04:	3a c1       	rjmp	.+628    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     b06:	80 91 30 01 	lds	r24, 0x0130
     b0a:	30 91 31 01 	lds	r19, 0x0131
     b0e:	35 30       	cpi	r19, 0x05	; 5
     b10:	09 f4       	brne	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0x70>
     b12:	87 c0       	rjmp	.+270    	; 0xc22 <USB_Device_ProcessControlRequest+0x17e>
     b14:	36 30       	cpi	r19, 0x06	; 6
     b16:	40 f4       	brcc	.+16     	; 0xb28 <USB_Device_ProcessControlRequest+0x84>
     b18:	31 30       	cpi	r19, 0x01	; 1
     b1a:	c9 f1       	breq	.+114    	; 0xb8e <USB_Device_ProcessControlRequest+0xea>
     b1c:	31 30       	cpi	r19, 0x01	; 1
     b1e:	70 f0       	brcs	.+28     	; 0xb3c <USB_Device_ProcessControlRequest+0x98>
     b20:	33 30       	cpi	r19, 0x03	; 3
     b22:	09 f0       	breq	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x82>
     b24:	2a c1       	rjmp	.+596    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     b26:	33 c0       	rjmp	.+102    	; 0xb8e <USB_Device_ProcessControlRequest+0xea>
     b28:	38 30       	cpi	r19, 0x08	; 8
     b2a:	09 f4       	brne	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0x8a>
     b2c:	f8 c0       	rjmp	.+496    	; 0xd1e <USB_Device_ProcessControlRequest+0x27a>
     b2e:	39 30       	cpi	r19, 0x09	; 9
     b30:	09 f4       	brne	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0x90>
     b32:	07 c1       	rjmp	.+526    	; 0xd42 <USB_Device_ProcessControlRequest+0x29e>
     b34:	36 30       	cpi	r19, 0x06	; 6
     b36:	09 f0       	breq	.+2      	; 0xb3a <USB_Device_ProcessControlRequest+0x96>
     b38:	20 c1       	rjmp	.+576    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     b3a:	99 c0       	rjmp	.+306    	; 0xc6e <USB_Device_ProcessControlRequest+0x1ca>
     b3c:	80 38       	cpi	r24, 0x80	; 128
     b3e:	21 f0       	breq	.+8      	; 0xb48 <USB_Device_ProcessControlRequest+0xa4>
     b40:	82 38       	cpi	r24, 0x82	; 130
     b42:	09 f0       	breq	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0xa2>
     b44:	1a c1       	rjmp	.+564    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <USB_Device_ProcessControlRequest+0xb4>
     b48:	90 91 2b 01 	lds	r25, 0x012B
     b4c:	80 91 2c 01 	lds	r24, 0x012C
     b50:	88 23       	and	r24, r24
     b52:	99 f0       	breq	.+38     	; 0xb7a <USB_Device_ProcessControlRequest+0xd6>
     b54:	92 60       	ori	r25, 0x02	; 2
     b56:	11 c0       	rjmp	.+34     	; 0xb7a <USB_Device_ProcessControlRequest+0xd6>
     b58:	80 91 34 01 	lds	r24, 0x0134
     b5c:	87 70       	andi	r24, 0x07	; 7
     b5e:	80 93 e9 00 	sts	0x00E9, r24
     b62:	80 91 eb 00 	lds	r24, 0x00EB
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	25 e0       	ldi	r18, 0x05	; 5
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	2a 95       	dec	r18
     b70:	e1 f7       	brne	.-8      	; 0xb6a <USB_Device_ProcessControlRequest+0xc6>
     b72:	98 2f       	mov	r25, r24
     b74:	91 70       	andi	r25, 0x01	; 1
     b76:	10 92 e9 00 	sts	0x00E9, r1
     b7a:	80 91 e8 00 	lds	r24, 0x00E8
     b7e:	87 7f       	andi	r24, 0xF7	; 247
     b80:	80 93 e8 00 	sts	0x00E8, r24
     b84:	90 93 f1 00 	sts	0x00F1, r25
     b88:	10 92 f1 00 	sts	0x00F1, r1
     b8c:	d3 c0       	rjmp	.+422    	; 0xd34 <USB_Device_ProcessControlRequest+0x290>
     b8e:	88 23       	and	r24, r24
     b90:	19 f0       	breq	.+6      	; 0xb98 <USB_Device_ProcessControlRequest+0xf4>
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	09 f0       	breq	.+2      	; 0xb98 <USB_Device_ProcessControlRequest+0xf4>
     b96:	f1 c0       	rjmp	.+482    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	8f 71       	andi	r24, 0x1F	; 31
     b9c:	90 70       	andi	r25, 0x00	; 0
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	21 f0       	breq	.+8      	; 0xbaa <USB_Device_ProcessControlRequest+0x106>
     ba2:	02 97       	sbiw	r24, 0x02	; 2
     ba4:	09 f0       	breq	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x104>
     ba6:	e9 c0       	rjmp	.+466    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     ba8:	0c c0       	rjmp	.+24     	; 0xbc2 <USB_Device_ProcessControlRequest+0x11e>
     baa:	80 91 32 01 	lds	r24, 0x0132
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <USB_Device_ProcessControlRequest+0x110>
     bb2:	e3 c0       	rjmp	.+454    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     bb4:	10 92 2c 01 	sts	0x012C, r1
     bb8:	33 30       	cpi	r19, 0x03	; 3
     bba:	69 f5       	brne	.+90     	; 0xc16 <USB_Device_ProcessControlRequest+0x172>
     bbc:	80 93 2c 01 	sts	0x012C, r24
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <USB_Device_ProcessControlRequest+0x172>
     bc2:	80 91 32 01 	lds	r24, 0x0132
     bc6:	88 23       	and	r24, r24
     bc8:	31 f5       	brne	.+76     	; 0xc16 <USB_Device_ProcessControlRequest+0x172>
     bca:	20 91 34 01 	lds	r18, 0x0134
     bce:	27 70       	andi	r18, 0x07	; 7
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <USB_Device_ProcessControlRequest+0x130>
     bd2:	d3 c0       	rjmp	.+422    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     bd4:	20 93 e9 00 	sts	0x00E9, r18
     bd8:	80 91 eb 00 	lds	r24, 0x00EB
     bdc:	80 ff       	sbrs	r24, 0
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <USB_Device_ProcessControlRequest+0x172>
     be0:	33 30       	cpi	r19, 0x03	; 3
     be2:	21 f4       	brne	.+8      	; 0xbec <USB_Device_ProcessControlRequest+0x148>
     be4:	80 91 eb 00 	lds	r24, 0x00EB
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <USB_Device_ProcessControlRequest+0x16e>
     bec:	80 91 eb 00 	lds	r24, 0x00EB
     bf0:	80 61       	ori	r24, 0x10	; 16
     bf2:	80 93 eb 00 	sts	0x00EB, r24
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <USB_Device_ProcessControlRequest+0x15c>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	2a 95       	dec	r18
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <USB_Device_ProcessControlRequest+0x158>
     c04:	80 93 ea 00 	sts	0x00EA, r24
     c08:	10 92 ea 00 	sts	0x00EA, r1
     c0c:	80 91 eb 00 	lds	r24, 0x00EB
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	80 93 eb 00 	sts	0x00EB, r24
     c16:	10 92 e9 00 	sts	0x00E9, r1
     c1a:	80 91 e8 00 	lds	r24, 0x00E8
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	8c c0       	rjmp	.+280    	; 0xd3a <USB_Device_ProcessControlRequest+0x296>
     c22:	88 23       	and	r24, r24
     c24:	09 f0       	breq	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x184>
     c26:	a9 c0       	rjmp	.+338    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     c28:	10 91 32 01 	lds	r17, 0x0132
     c2c:	1f 77       	andi	r17, 0x7F	; 127
     c2e:	0f b7       	in	r16, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	80 91 e8 00 	lds	r24, 0x00E8
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	80 93 e8 00 	sts	0x00E8, r24
     c3c:	b7 dd       	rcall	.-1170   	; 0x7ac <Endpoint_ClearStatusStage>
     c3e:	80 91 e8 00 	lds	r24, 0x00E8
     c42:	80 ff       	sbrs	r24, 0
     c44:	fc cf       	rjmp	.-8      	; 0xc3e <USB_Device_ProcessControlRequest+0x19a>
     c46:	80 91 e3 00 	lds	r24, 0x00E3
     c4a:	80 78       	andi	r24, 0x80	; 128
     c4c:	81 2b       	or	r24, r17
     c4e:	80 93 e3 00 	sts	0x00E3, r24
     c52:	80 91 e3 00 	lds	r24, 0x00E3
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	80 93 e3 00 	sts	0x00E3, r24
     c5c:	11 23       	and	r17, r17
     c5e:	11 f4       	brne	.+4      	; 0xc64 <USB_Device_ProcessControlRequest+0x1c0>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <USB_Device_ProcessControlRequest+0x1c2>
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	80 93 2f 01 	sts	0x012F, r24
     c6a:	0f bf       	out	0x3f, r16	; 63
     c6c:	86 c0       	rjmp	.+268    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     c6e:	80 58       	subi	r24, 0x80	; 128
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	08 f0       	brcs	.+2      	; 0xc76 <USB_Device_ProcessControlRequest+0x1d2>
     c74:	82 c0       	rjmp	.+260    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     c76:	80 91 32 01 	lds	r24, 0x0132
     c7a:	90 91 33 01 	lds	r25, 0x0133
     c7e:	23 e0       	ldi	r18, 0x03	; 3
     c80:	8c 3d       	cpi	r24, 0xDC	; 220
     c82:	92 07       	cpc	r25, r18
     c84:	09 f0       	breq	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x1e4>
     c86:	33 c0       	rjmp	.+102    	; 0xcee <USB_Device_ProcessControlRequest+0x24a>
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	8c 83       	std	Y+4, r24	; 0x04
     c8c:	8a e2       	ldi	r24, 0x2A	; 42
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	7f b7       	in	r23, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de 01       	movw	r26, r28
     c96:	15 96       	adiw	r26, 0x05	; 5
     c98:	6e e0       	ldi	r22, 0x0E	; 14
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	11 e2       	ldi	r17, 0x21	; 33
     ca0:	e6 2f       	mov	r30, r22
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	10 93 57 00 	sts	0x0057, r17
     ca8:	84 91       	lpm	r24, Z+
     caa:	40 ff       	sbrs	r20, 0
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <USB_Device_ProcessControlRequest+0x210>
     cae:	82 95       	swap	r24
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	6f 5f       	subi	r22, 0xFF	; 255
     cb4:	8f 70       	andi	r24, 0x0F	; 15
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	8a 30       	cpi	r24, 0x0A	; 10
     cbc:	18 f0       	brcs	.+6      	; 0xcc4 <USB_Device_ProcessControlRequest+0x220>
     cbe:	c9 01       	movw	r24, r18
     cc0:	c7 96       	adiw	r24, 0x37	; 55
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <USB_Device_ProcessControlRequest+0x224>
     cc4:	c9 01       	movw	r24, r18
     cc6:	c0 96       	adiw	r24, 0x30	; 48
     cc8:	8d 93       	st	X+, r24
     cca:	9d 93       	st	X+, r25
     ccc:	4f 5f       	subi	r20, 0xFF	; 255
     cce:	5f 4f       	sbci	r21, 0xFF	; 255
     cd0:	44 31       	cpi	r20, 0x14	; 20
     cd2:	51 05       	cpc	r21, r1
     cd4:	29 f7       	brne	.-54     	; 0xca0 <USB_Device_ProcessControlRequest+0x1fc>
     cd6:	7f bf       	out	0x3f, r23	; 63
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	80 93 e8 00 	sts	0x00E8, r24
     ce2:	ce 01       	movw	r24, r28
     ce4:	03 96       	adiw	r24, 0x03	; 3
     ce6:	6a e2       	ldi	r22, 0x2A	; 42
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	61 d0       	rcall	.+194    	; 0xdae <Endpoint_Write_Control_Stream_LE>
     cec:	12 c0       	rjmp	.+36     	; 0xd12 <USB_Device_ProcessControlRequest+0x26e>
     cee:	60 91 34 01 	lds	r22, 0x0134
     cf2:	ae 01       	movw	r20, r28
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	c6 dc       	rcall	.-1652   	; 0x686 <CALLBACK_USB_GetDescriptor>
     cfa:	bc 01       	movw	r22, r24
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	09 f4       	brne	.+2      	; 0xd02 <USB_Device_ProcessControlRequest+0x25e>
     d00:	3c c0       	rjmp	.+120    	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d02:	80 91 e8 00 	lds	r24, 0x00E8
     d06:	87 7f       	andi	r24, 0xF7	; 247
     d08:	80 93 e8 00 	sts	0x00E8, r24
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ed d0       	rcall	.+474    	; 0xeec <Endpoint_Write_Control_PStream_LE>
     d12:	80 91 e8 00 	lds	r24, 0x00E8
     d16:	8b 77       	andi	r24, 0x7B	; 123
     d18:	80 93 e8 00 	sts	0x00E8, r24
     d1c:	2e c0       	rjmp	.+92     	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d1e:	80 38       	cpi	r24, 0x80	; 128
     d20:	61 f5       	brne	.+88     	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d22:	80 91 e8 00 	lds	r24, 0x00E8
     d26:	87 7f       	andi	r24, 0xF7	; 247
     d28:	80 93 e8 00 	sts	0x00E8, r24
     d2c:	80 91 2d 01 	lds	r24, 0x012D
     d30:	80 93 f1 00 	sts	0x00F1, r24
     d34:	80 91 e8 00 	lds	r24, 0x00E8
     d38:	8e 77       	andi	r24, 0x7E	; 126
     d3a:	80 93 e8 00 	sts	0x00E8, r24
     d3e:	36 dd       	rcall	.-1428   	; 0x7ac <Endpoint_ClearStatusStage>
     d40:	1c c0       	rjmp	.+56     	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d42:	88 23       	and	r24, r24
     d44:	d1 f4       	brne	.+52     	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d46:	90 91 32 01 	lds	r25, 0x0132
     d4a:	92 30       	cpi	r25, 0x02	; 2
     d4c:	b0 f4       	brcc	.+44     	; 0xd7a <USB_Device_ProcessControlRequest+0x2d6>
     d4e:	80 91 e8 00 	lds	r24, 0x00E8
     d52:	87 7f       	andi	r24, 0xF7	; 247
     d54:	80 93 e8 00 	sts	0x00E8, r24
     d58:	90 93 2d 01 	sts	0x012D, r25
     d5c:	27 dd       	rcall	.-1458   	; 0x7ac <Endpoint_ClearStatusStage>
     d5e:	80 91 2d 01 	lds	r24, 0x012D
     d62:	88 23       	and	r24, r24
     d64:	31 f4       	brne	.+12     	; 0xd72 <USB_Device_ProcessControlRequest+0x2ce>
     d66:	80 91 e3 00 	lds	r24, 0x00E3
     d6a:	87 fd       	sbrc	r24, 7
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <USB_Device_ProcessControlRequest+0x2ce>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <USB_Device_ProcessControlRequest+0x2d0>
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	80 93 2f 01 	sts	0x012F, r24
     d78:	f9 db       	rcall	.-2062   	; 0x56c <EVENT_USB_Device_ConfigurationChanged>
     d7a:	80 91 e8 00 	lds	r24, 0x00E8
     d7e:	83 ff       	sbrs	r24, 3
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <USB_Device_ProcessControlRequest+0x2f2>
     d82:	80 91 eb 00 	lds	r24, 0x00EB
     d86:	80 62       	ori	r24, 0x20	; 32
     d88:	80 93 eb 00 	sts	0x00EB, r24
     d8c:	80 91 e8 00 	lds	r24, 0x00E8
     d90:	87 7f       	andi	r24, 0xF7	; 247
     d92:	80 93 e8 00 	sts	0x00E8, r24
     d96:	ac 96       	adiw	r28, 0x2c	; 44
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret

00000dac <USB_Event_Stub>:
     dac:	08 95       	ret

00000dae <Endpoint_Write_Control_Stream_LE>:
     dae:	9c 01       	movw	r18, r24
     db0:	40 91 36 01 	lds	r20, 0x0136
     db4:	50 91 37 01 	lds	r21, 0x0137
     db8:	46 17       	cp	r20, r22
     dba:	57 07       	cpc	r21, r23
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <Endpoint_Write_Control_Stream_LE+0x16>
     dbe:	f9 01       	movw	r30, r18
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	3d c0       	rjmp	.+122    	; 0xe3e <Endpoint_Write_Control_Stream_LE+0x90>
     dc4:	61 15       	cp	r22, r1
     dc6:	71 05       	cpc	r23, r1
     dc8:	11 f0       	breq	.+4      	; 0xdce <Endpoint_Write_Control_Stream_LE+0x20>
     dca:	ab 01       	movw	r20, r22
     dcc:	f8 cf       	rjmp	.-16     	; 0xdbe <Endpoint_Write_Control_Stream_LE+0x10>
     dce:	80 91 e8 00 	lds	r24, 0x00E8
     dd2:	8e 77       	andi	r24, 0x7E	; 126
     dd4:	80 93 e8 00 	sts	0x00E8, r24
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	f0 cf       	rjmp	.-32     	; 0xdbe <Endpoint_Write_Control_Stream_LE+0x10>
     dde:	80 91 2f 01 	lds	r24, 0x012F
     de2:	88 23       	and	r24, r24
     de4:	f1 f1       	breq	.+124    	; 0xe62 <Endpoint_Write_Control_Stream_LE+0xb4>
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	f1 f1       	breq	.+124    	; 0xe66 <Endpoint_Write_Control_Stream_LE+0xb8>
     dea:	80 91 e8 00 	lds	r24, 0x00E8
     dee:	83 ff       	sbrs	r24, 3
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <Endpoint_Write_Control_Stream_LE+0x48>
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	08 95       	ret
     df6:	80 91 e8 00 	lds	r24, 0x00E8
     dfa:	82 fd       	sbrc	r24, 2
     dfc:	2c c0       	rjmp	.+88     	; 0xe56 <Endpoint_Write_Control_Stream_LE+0xa8>
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	80 ff       	sbrs	r24, 0
     e04:	1c c0       	rjmp	.+56     	; 0xe3e <Endpoint_Write_Control_Stream_LE+0x90>
     e06:	20 91 f2 00 	lds	r18, 0x00F2
     e0a:	30 91 f3 00 	lds	r19, 0x00F3
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <Endpoint_Write_Control_Stream_LE+0x70>
     e10:	81 91       	ld	r24, Z+
     e12:	80 93 f1 00 	sts	0x00F1, r24
     e16:	41 50       	subi	r20, 0x01	; 1
     e18:	50 40       	sbci	r21, 0x00	; 0
     e1a:	2f 5f       	subi	r18, 0xFF	; 255
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	41 15       	cp	r20, r1
     e20:	51 05       	cpc	r21, r1
     e22:	19 f0       	breq	.+6      	; 0xe2a <Endpoint_Write_Control_Stream_LE+0x7c>
     e24:	28 30       	cpi	r18, 0x08	; 8
     e26:	31 05       	cpc	r19, r1
     e28:	98 f3       	brcs	.-26     	; 0xe10 <Endpoint_Write_Control_Stream_LE+0x62>
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	28 30       	cpi	r18, 0x08	; 8
     e2e:	31 05       	cpc	r19, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <Endpoint_Write_Control_Stream_LE+0x86>
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	80 91 e8 00 	lds	r24, 0x00E8
     e38:	8e 77       	andi	r24, 0x7E	; 126
     e3a:	80 93 e8 00 	sts	0x00E8, r24
     e3e:	41 15       	cp	r20, r1
     e40:	51 05       	cpc	r21, r1
     e42:	69 f6       	brne	.-102    	; 0xdde <Endpoint_Write_Control_Stream_LE+0x30>
     e44:	99 23       	and	r25, r25
     e46:	59 f6       	brne	.-106    	; 0xdde <Endpoint_Write_Control_Stream_LE+0x30>
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <Endpoint_Write_Control_Stream_LE+0xa8>
     e4a:	80 91 2f 01 	lds	r24, 0x012F
     e4e:	88 23       	and	r24, r24
     e50:	41 f0       	breq	.+16     	; 0xe62 <Endpoint_Write_Control_Stream_LE+0xb4>
     e52:	85 30       	cpi	r24, 0x05	; 5
     e54:	41 f0       	breq	.+16     	; 0xe66 <Endpoint_Write_Control_Stream_LE+0xb8>
     e56:	80 91 e8 00 	lds	r24, 0x00E8
     e5a:	82 ff       	sbrs	r24, 2
     e5c:	f6 cf       	rjmp	.-20     	; 0xe4a <Endpoint_Write_Control_Stream_LE+0x9c>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	08 95       	ret
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	08 95       	ret

00000e6a <Endpoint_Read_Control_Stream_LE>:
     e6a:	9c 01       	movw	r18, r24
     e6c:	61 15       	cp	r22, r1
     e6e:	71 05       	cpc	r23, r1
     e70:	29 f4       	brne	.+10     	; 0xe7c <Endpoint_Read_Control_Stream_LE+0x12>
     e72:	80 91 e8 00 	lds	r24, 0x00E8
     e76:	8b 77       	andi	r24, 0x7B	; 123
     e78:	80 93 e8 00 	sts	0x00E8, r24
     e7c:	f9 01       	movw	r30, r18
     e7e:	22 c0       	rjmp	.+68     	; 0xec4 <Endpoint_Read_Control_Stream_LE+0x5a>
     e80:	80 91 2f 01 	lds	r24, 0x012F
     e84:	88 23       	and	r24, r24
     e86:	71 f1       	breq	.+92     	; 0xee4 <Endpoint_Read_Control_Stream_LE+0x7a>
     e88:	85 30       	cpi	r24, 0x05	; 5
     e8a:	71 f1       	breq	.+92     	; 0xee8 <Endpoint_Read_Control_Stream_LE+0x7e>
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	83 ff       	sbrs	r24, 3
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <Endpoint_Read_Control_Stream_LE+0x2e>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
     e98:	80 91 e8 00 	lds	r24, 0x00E8
     e9c:	82 ff       	sbrs	r24, 2
     e9e:	f0 cf       	rjmp	.-32     	; 0xe80 <Endpoint_Read_Control_Stream_LE+0x16>
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <Endpoint_Read_Control_Stream_LE+0x44>
     ea2:	80 91 f1 00 	lds	r24, 0x00F1
     ea6:	81 93       	st	Z+, r24
     ea8:	61 50       	subi	r22, 0x01	; 1
     eaa:	70 40       	sbci	r23, 0x00	; 0
     eac:	31 f0       	breq	.+12     	; 0xeba <Endpoint_Read_Control_Stream_LE+0x50>
     eae:	80 91 f2 00 	lds	r24, 0x00F2
     eb2:	90 91 f3 00 	lds	r25, 0x00F3
     eb6:	89 2b       	or	r24, r25
     eb8:	a1 f7       	brne	.-24     	; 0xea2 <Endpoint_Read_Control_Stream_LE+0x38>
     eba:	80 91 e8 00 	lds	r24, 0x00E8
     ebe:	8b 77       	andi	r24, 0x7B	; 123
     ec0:	80 93 e8 00 	sts	0x00E8, r24
     ec4:	61 15       	cp	r22, r1
     ec6:	71 05       	cpc	r23, r1
     ec8:	d9 f6       	brne	.-74     	; 0xe80 <Endpoint_Read_Control_Stream_LE+0x16>
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <Endpoint_Read_Control_Stream_LE+0x6e>
     ecc:	80 91 2f 01 	lds	r24, 0x012F
     ed0:	88 23       	and	r24, r24
     ed2:	41 f0       	breq	.+16     	; 0xee4 <Endpoint_Read_Control_Stream_LE+0x7a>
     ed4:	85 30       	cpi	r24, 0x05	; 5
     ed6:	41 f0       	breq	.+16     	; 0xee8 <Endpoint_Read_Control_Stream_LE+0x7e>
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
     edc:	80 ff       	sbrs	r24, 0
     ede:	f6 cf       	rjmp	.-20     	; 0xecc <Endpoint_Read_Control_Stream_LE+0x62>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	08 95       	ret
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	08 95       	ret
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	08 95       	ret

00000eec <Endpoint_Write_Control_PStream_LE>:
     eec:	9c 01       	movw	r18, r24
     eee:	40 91 36 01 	lds	r20, 0x0136
     ef2:	50 91 37 01 	lds	r21, 0x0137
     ef6:	46 17       	cp	r20, r22
     ef8:	57 07       	cpc	r21, r23
     efa:	18 f4       	brcc	.+6      	; 0xf02 <Endpoint_Write_Control_PStream_LE+0x16>
     efc:	f9 01       	movw	r30, r18
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	40 c0       	rjmp	.+128    	; 0xf82 <Endpoint_Write_Control_PStream_LE+0x96>
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	11 f0       	breq	.+4      	; 0xf0c <Endpoint_Write_Control_PStream_LE+0x20>
     f08:	ab 01       	movw	r20, r22
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <Endpoint_Write_Control_PStream_LE+0x10>
     f0c:	80 91 e8 00 	lds	r24, 0x00E8
     f10:	8e 77       	andi	r24, 0x7E	; 126
     f12:	80 93 e8 00 	sts	0x00E8, r24
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	f0 cf       	rjmp	.-32     	; 0xefc <Endpoint_Write_Control_PStream_LE+0x10>
     f1c:	80 91 2f 01 	lds	r24, 0x012F
     f20:	88 23       	and	r24, r24
     f22:	09 f4       	brne	.+2      	; 0xf26 <Endpoint_Write_Control_PStream_LE+0x3a>
     f24:	40 c0       	rjmp	.+128    	; 0xfa6 <Endpoint_Write_Control_PStream_LE+0xba>
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	09 f4       	brne	.+2      	; 0xf2c <Endpoint_Write_Control_PStream_LE+0x40>
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <Endpoint_Write_Control_PStream_LE+0xbe>
     f2c:	80 91 e8 00 	lds	r24, 0x00E8
     f30:	83 ff       	sbrs	r24, 3
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <Endpoint_Write_Control_PStream_LE+0x4c>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
     f38:	80 91 e8 00 	lds	r24, 0x00E8
     f3c:	82 fd       	sbrc	r24, 2
     f3e:	2d c0       	rjmp	.+90     	; 0xf9a <Endpoint_Write_Control_PStream_LE+0xae>
     f40:	80 91 e8 00 	lds	r24, 0x00E8
     f44:	80 ff       	sbrs	r24, 0
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <Endpoint_Write_Control_PStream_LE+0x96>
     f48:	20 91 f2 00 	lds	r18, 0x00F2
     f4c:	30 91 f3 00 	lds	r19, 0x00F3
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <Endpoint_Write_Control_PStream_LE+0x76>
     f52:	84 91       	lpm	r24, Z+
     f54:	80 93 f1 00 	sts	0x00F1, r24
     f58:	31 96       	adiw	r30, 0x01	; 1
     f5a:	41 50       	subi	r20, 0x01	; 1
     f5c:	50 40       	sbci	r21, 0x00	; 0
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	41 15       	cp	r20, r1
     f64:	51 05       	cpc	r21, r1
     f66:	19 f0       	breq	.+6      	; 0xf6e <Endpoint_Write_Control_PStream_LE+0x82>
     f68:	28 30       	cpi	r18, 0x08	; 8
     f6a:	31 05       	cpc	r19, r1
     f6c:	90 f3       	brcs	.-28     	; 0xf52 <Endpoint_Write_Control_PStream_LE+0x66>
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	28 30       	cpi	r18, 0x08	; 8
     f72:	31 05       	cpc	r19, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <Endpoint_Write_Control_PStream_LE+0x8c>
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	80 91 e8 00 	lds	r24, 0x00E8
     f7c:	8e 77       	andi	r24, 0x7E	; 126
     f7e:	80 93 e8 00 	sts	0x00E8, r24
     f82:	41 15       	cp	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	51 f6       	brne	.-108    	; 0xf1c <Endpoint_Write_Control_PStream_LE+0x30>
     f88:	99 23       	and	r25, r25
     f8a:	41 f6       	brne	.-112    	; 0xf1c <Endpoint_Write_Control_PStream_LE+0x30>
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <Endpoint_Write_Control_PStream_LE+0xae>
     f8e:	80 91 2f 01 	lds	r24, 0x012F
     f92:	88 23       	and	r24, r24
     f94:	41 f0       	breq	.+16     	; 0xfa6 <Endpoint_Write_Control_PStream_LE+0xba>
     f96:	85 30       	cpi	r24, 0x05	; 5
     f98:	41 f0       	breq	.+16     	; 0xfaa <Endpoint_Write_Control_PStream_LE+0xbe>
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
     f9e:	82 ff       	sbrs	r24, 2
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <Endpoint_Write_Control_PStream_LE+0xa2>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	08 95       	ret
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	08 95       	ret

00000fae <Endpoint_Write_Stream_LE>:
     fae:	bf 92       	push	r11
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	18 2f       	mov	r17, r24
     fc2:	09 2f       	mov	r16, r25
     fc4:	7b 01       	movw	r14, r22
     fc6:	6a 01       	movw	r12, r20
     fc8:	12 dc       	rcall	.-2012   	; 0x7ee <Endpoint_WaitUntilReady>
     fca:	b8 2e       	mov	r11, r24
     fcc:	88 23       	and	r24, r24
     fce:	b1 f5       	brne	.+108    	; 0x103c <Endpoint_Write_Stream_LE+0x8e>
     fd0:	81 2f       	mov	r24, r17
     fd2:	90 2f       	mov	r25, r16
     fd4:	9c 01       	movw	r18, r24
     fd6:	e9 01       	movw	r28, r18
     fd8:	c1 14       	cp	r12, r1
     fda:	d1 04       	cpc	r13, r1
     fdc:	39 f0       	breq	.+14     	; 0xfec <Endpoint_Write_Stream_LE+0x3e>
     fde:	f6 01       	movw	r30, r12
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	e8 1a       	sub	r14, r24
     fe6:	f9 0a       	sbc	r15, r25
     fe8:	c8 0f       	add	r28, r24
     fea:	d9 1f       	adc	r29, r25
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	22 c0       	rjmp	.+68     	; 0x1036 <Endpoint_Write_Stream_LE+0x88>
     ff2:	80 91 e8 00 	lds	r24, 0x00E8
     ff6:	85 fd       	sbrc	r24, 5
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <Endpoint_Write_Stream_LE+0x78>
     ffa:	80 91 e8 00 	lds	r24, 0x00E8
     ffe:	8e 77       	andi	r24, 0x7E	; 126
    1000:	80 93 e8 00 	sts	0x00E8, r24
    1004:	c1 14       	cp	r12, r1
    1006:	d1 04       	cpc	r13, r1
    1008:	49 f0       	breq	.+18     	; 0x101c <Endpoint_Write_Stream_LE+0x6e>
    100a:	f6 01       	movw	r30, r12
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	80 0f       	add	r24, r16
    1012:	91 1f       	adc	r25, r17
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	11 c0       	rjmp	.+34     	; 0x103e <Endpoint_Write_Stream_LE+0x90>
    101c:	1a d0       	rcall	.+52     	; 0x1052 <USB_USBTask>
    101e:	e7 db       	rcall	.-2098   	; 0x7ee <Endpoint_WaitUntilReady>
    1020:	88 23       	and	r24, r24
    1022:	49 f0       	breq	.+18     	; 0x1036 <Endpoint_Write_Stream_LE+0x88>
    1024:	0c c0       	rjmp	.+24     	; 0x103e <Endpoint_Write_Stream_LE+0x90>
    1026:	89 91       	ld	r24, Y+
    1028:	80 93 f1 00 	sts	0x00F1, r24
    102c:	08 94       	sec
    102e:	e1 08       	sbc	r14, r1
    1030:	f1 08       	sbc	r15, r1
    1032:	0f 5f       	subi	r16, 0xFF	; 255
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	e1 14       	cp	r14, r1
    1038:	f1 04       	cpc	r15, r1
    103a:	d9 f6       	brne	.-74     	; 0xff2 <Endpoint_Write_Stream_LE+0x44>
    103c:	8b 2d       	mov	r24, r11
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	08 95       	ret

00001052 <USB_USBTask>:
    1052:	1f 93       	push	r17
    1054:	80 91 2f 01 	lds	r24, 0x012F
    1058:	88 23       	and	r24, r24
    105a:	61 f0       	breq	.+24     	; 0x1074 <USB_USBTask+0x22>
    105c:	10 91 e9 00 	lds	r17, 0x00E9
    1060:	10 92 e9 00 	sts	0x00E9, r1
    1064:	80 91 e8 00 	lds	r24, 0x00E8
    1068:	83 ff       	sbrs	r24, 3
    106a:	01 c0       	rjmp	.+2      	; 0x106e <USB_USBTask+0x1c>
    106c:	1b dd       	rcall	.-1482   	; 0xaa4 <USB_Device_ProcessControlRequest>
    106e:	17 70       	andi	r17, 0x07	; 7
    1070:	10 93 e9 00 	sts	0x00E9, r17
    1074:	1f 91       	pop	r17
    1076:	08 95       	ret

00001078 <memset>:
    1078:	dc 01       	movw	r26, r24
    107a:	01 c0       	rjmp	.+2      	; 0x107e <memset+0x6>
    107c:	6d 93       	st	X+, r22
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	e0 f7       	brcc	.-8      	; 0x107c <memset+0x4>
    1084:	08 95       	ret

00001086 <_exit>:
    1086:	f8 94       	cli

00001088 <__stop_program>:
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <__stop_program>
